<Type Name="IRemoteObjectContract" FullName="System.AddIn.Contract.Automation.IRemoteObjectContract">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ac605ded964ff1254edaa30d789e562e95ae866" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="63916195" /></Metadata><TypeSignature Language="C#" Value="public interface IRemoteObjectContract : System.AddIn.Contract.IContract" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRemoteObjectContract implements class System.AddIn.Contract.IContract" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRemoteObjectContract&#xA;Implements IContract" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRemoteObjectContract : System::AddIn::Contract::IContract" />
  <TypeSignature Language="F#" Value="type IRemoteObjectContract = interface&#xA;    interface IContract" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c97fa-101">Определяет контракт, который может использоваться компонентами для доступа к объекту через границы домена приложения или процесса.</span><span class="sxs-lookup"><span data-stu-id="c97fa-101">Defines a contract that components can use to access an object across application domain and process boundaries.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c97fa-102">При реализации <xref:System.AddIn.Contract.Automation.IRemoteObjectContract> в типе, может использоваться компонентами контракт для доступа к сведения о типе для объекта типа.</span><span class="sxs-lookup"><span data-stu-id="c97fa-102">When you implement <xref:System.AddIn.Contract.Automation.IRemoteObjectContract> on a type, components can use the contract to access type information for objects of the type.</span></span> <span data-ttu-id="c97fa-103">Компоненты доступа к информации о типе, вызвав <xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A> метод, чтобы получить <xref:System.AddIn.Contract.Automation.IRemoteTypeContract>.</span><span class="sxs-lookup"><span data-stu-id="c97fa-103">Components access type information by calling the <xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A> method to obtain an <xref:System.AddIn.Contract.Automation.IRemoteTypeContract>.</span></span> <span data-ttu-id="c97fa-104"><xref:System.AddIn.Contract.Automation.IRemoteTypeContract> Интерфейс определяет контракт, который может использоваться компонентами для доступа к определенного типа и информация об элементе и для вызова членов.</span><span class="sxs-lookup"><span data-stu-id="c97fa-104">The <xref:System.AddIn.Contract.Automation.IRemoteTypeContract> interface defines a contract that components can use to access specific type and member information, and to invoke members.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRemoteType">
      <MemberSignature Language="C#" Value="public System.AddIn.Contract.Automation.IRemoteTypeContract GetRemoteType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AddIn.Contract.Automation.IRemoteTypeContract GetRemoteType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoteType () As IRemoteTypeContract" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::AddIn::Contract::Automation::IRemoteTypeContract ^ GetRemoteType();" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteType : unit -&gt; System.AddIn.Contract.Automation.IRemoteTypeContract" Usage="iRemoteObjectContract.GetRemoteType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.Automation.IRemoteTypeContract</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c97fa-105">Возвращает <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />, указывающий тип текущего <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</span><span class="sxs-lookup"><span data-stu-id="c97fa-105">Returns an <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the type of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</span></span></summary>
        <returns><span data-ttu-id="c97fa-106"><see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" />, указывающий тип текущего <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</span><span class="sxs-lookup"><span data-stu-id="c97fa-106">An <see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /> that specifies the type of the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c97fa-107">Используйте <xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A> метод для доступа к членам удаленного объекта, текущий <xref:System.AddIn.Contract.Automation.IRemoteObjectContract> идентифицирует.</span><span class="sxs-lookup"><span data-stu-id="c97fa-107">Use the <xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A> method to access the members of the remote object that the current <xref:System.AddIn.Contract.Automation.IRemoteObjectContract> identifies.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteCast">
      <MemberSignature Language="C#" Value="public System.AddIn.Contract.RemoteArgument RemoteCast (string canonicalName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.AddIn.Contract.RemoteArgument RemoteCast(string canonicalName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoteCast (canonicalName As String) As RemoteArgument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::AddIn::Contract::RemoteArgument RemoteCast(System::String ^ canonicalName);" />
      <MemberSignature Language="F#" Value="abstract member RemoteCast : string -&gt; System.AddIn.Contract.RemoteArgument" Usage="iRemoteObjectContract.RemoteCast canonicalName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.RemoteArgument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canonicalName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="canonicalName"><span data-ttu-id="c97fa-108">Каноническое имя типа, к которому необходимо привести объект.</span><span class="sxs-lookup"><span data-stu-id="c97fa-108">The canonical name of the type to cast the object to.</span></span></param>
        <summary><span data-ttu-id="c97fa-109">Приводит объект, определенный текущим <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" />, к указанному типу.</span><span class="sxs-lookup"><span data-stu-id="c97fa-109">Casts the object identified by the current <see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /> to a specified type.</span></span></summary>
        <returns><span data-ttu-id="c97fa-110"><see cref="T:System.AddIn.Contract.RemoteArgument" />, представляющий собой результат операции приведения.</span><span class="sxs-lookup"><span data-stu-id="c97fa-110">A <see cref="T:System.AddIn.Contract.RemoteArgument" /> that represents the result of the cast operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c97fa-111">Каноническое имя является глобально уникальное имя, например, GUID.</span><span class="sxs-lookup"><span data-stu-id="c97fa-111">A canonical name is a globally unique name, such as a GUID.</span></span> <span data-ttu-id="c97fa-112">Строки в формате \< *имя сборки*>, \< *полное имя типа*> рекомендуется использовать.</span><span class="sxs-lookup"><span data-stu-id="c97fa-112">Strings in the format \<*assembly name*>, \<*fully qualified type name*> are recommended.</span></span> <span data-ttu-id="c97fa-113">Пример рекомендуемый формат канонического имени — «ShapeApp, Microsoft.VisualStudio.Tools.Applications.Samples.ShapeApp.Application».</span><span class="sxs-lookup"><span data-stu-id="c97fa-113">An example of the recommended format of a canonical name is "ShapeApp, Microsoft.VisualStudio.Tools.Applications.Samples.ShapeApp.Application".</span></span>  
  
 <span data-ttu-id="c97fa-114">Каноническое имя типа нельзя изменить после публикации типа в компоненте.</span><span class="sxs-lookup"><span data-stu-id="c97fa-114">The canonical name for a type cannot change after a type is published in a component.</span></span> <span data-ttu-id="c97fa-115">Изменение канонического имени типа в будущей версии компонента нарушит совместимость между компонентом и клиентами, которые уже используют тип.</span><span class="sxs-lookup"><span data-stu-id="c97fa-115">Changing the canonical name of a type in a future version of a component breaks compatibility between the component and clients that are already using the type.</span></span>  
  
 <span data-ttu-id="c97fa-116">Рекомендуется <xref:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast%2A> реализации вызывают <xref:System.InvalidCastException> при сбое приведения.</span><span class="sxs-lookup"><span data-stu-id="c97fa-116">It is recommended that <xref:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast%2A> implementations throw an <xref:System.InvalidCastException> if the cast operation fails.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>