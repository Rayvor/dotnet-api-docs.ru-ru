<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88a2d8db969ee1718deb4b565c2032a127e6e553" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63914424" /></Metadata><TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <TypeSignature Language="F#" Value="type CollectionAdapters = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Позволяет передавать коллекции между надстройкой и приложением ее сайта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс предоставляет методы, позволяющие <xref:System.Collections.Generic.IList%601> коллекции для преобразования в <xref:System.AddIn.Contract.IListContract%601> коллекции. <xref:System.AddIn.Contract.IListContract%601> Передается через изолирующую границу и преобразовать обратно в коллекцию <xref:System.Collections.Generic.IList%601> коллекции, можно использовать надстройки и ведущего приложения.  
  
 Объекты в коллекции должны поддерживать удаленную обработку. Дополнительные сведения о типах объектов, которые можно передать, см. в разделе [контракты, представления и адаптеры](https://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Надстройки и расширения среды</related>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'T&gt; -&gt; System.Collections.Generic.IList&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип объектов, содержащихся в списке. <paramref name="T" /> должен быть сериализуемым.</typeparam>
        <param name="collection">Коллекция из другой стороны конвейера.</param>
        <summary>Преобразовывает выбранную коллекцию <see cref="T:System.AddIn.Contract.IListContract`1" /> в коллекцию <see cref="T:System.Collections.Generic.IList`1" />.</summary>
        <returns>Преобразованная коллекция.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ведущего приложения или надстройки можно использовать возвращенный <xref:System.Collections.Generic.IList%601> коллекции. <xref:System.Collections.Generic.IList%601> Получают маркер времени жизни для удаленного <xref:System.AddIn.Contract.IListContract%601> коллекции.  
  
 Эта перегрузка метода следует использовать только тогда, когда содержимое <xref:System.AddIn.Contract.IListContract%601> , сериализуемые типы, которые могут быть переданы напрямую надстройки и узла (а не типы, которые должны быть адаптированы представлений).  
  
   
  
## Examples  
 В следующем примере реализуется сегмента конвейера адаптера узла, как описано [Пошаговое руководство: Передача коллекций между узлами и надстройки](https://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5). Пример адаптирует пользовательский `ProcessBooks` метод, используя <xref:System.AddIn.Contract.IListContract%601> коллекции передаются из надстройки и его преобразования <xref:System.Collections.Generic.IList%601> коллекции, который затем можно использовать ведущее приложение.  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'Contract&gt; * Converter&lt;'Contract, 'View&gt; * Converter&lt;'View, 'Contract&gt; -&gt; System.Collections.Generic.IList&lt;'View&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList (collection, contractViewAdapter, viewContractAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">Тип, определяющий контракт для передающихся объектов типа <paramref name="TView" /> через изолирующую границу.</typeparam>
        <typeparam name="TView">Тип, определяющий вид объектов в списке.</typeparam>
        <param name="collection">Коллекция для передачи другой стороне конвейера.</param>
        <param name="contractViewAdapter">Преобразователь, адаптирующий данные типа, определенного в контракте к типу, ожидаемому в представлении.</param>
        <param name="viewContractAdapter">Преобразователь, адаптирующий данные типа, определенные в представлении к типу, ожидаемому в контракте.</param>
        <summary>Преобразует выбранную коллекцию <see cref="T:System.AddIn.Contract.IListContract`1" /> в коллекцию <see cref="T:System.Collections.Generic.IList`1" /> с использованием адаптеров преобразователя.</summary>
        <returns>Преобразованная коллекция.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте эту перегрузку метода для <xref:System.AddIn.Contract.IListContract%601> коллекции, которые содержат типы, которые должны быть адаптированы, прежде чем их можно было передать надстройки или узла (а не простых сериализуемых типов, которые могут быть переданы напрямую). Ведущего приложения или надстройки можно использовать возвращенный <xref:System.Collections.Generic.IList%601> коллекции. Она получит маркер времени жизни для удаленного <xref:System.AddIn.Contract.IListContract%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'T&gt; -&gt; System.AddIn.Contract.IListContract&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип объектов, содержащихся в списке. <paramref name="T" /> должен быть сериализуемым.</typeparam>
        <param name="collection">Коллекция для преобразования.</param>
        <summary>Преобразовывает выбранную коллекцию <see cref="T:System.Collections.Generic.IList`1" /> в коллекцию <see cref="T:System.AddIn.Contract.IListContract`1" />.</summary>
        <returns>Преобразованная коллекция.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AddIn.Contract.IListContract%601> Коллекции может маршалироваться через изолирующую границу между надстройкой и приложением ее сайта.  
  
 Эта перегрузка метода следует использовать только тогда, когда содержимое <xref:System.Collections.Generic.IList%601> коллекции являются сериализуемые типы, которые могут быть переданы напрямую контракта (а не типы, которые должны быть адаптированы).  
  
   
  
## Examples  
 В следующем примере реализуется класс, который определяет сегмента конвейера адаптера надстройки. Он адаптируется пользовательский `ProcessBooks` метод, используя <xref:System.Collections.Generic.IList%601> коллекции передаются из сегмент представления надстройки и его преобразования <xref:System.AddIn.Contract.IListContract%601> коллекции, который может маршалироваться через границы изоляции на узел.  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'View&gt; * Converter&lt;'View, 'Contract&gt; * Converter&lt;'Contract, 'View&gt; -&gt; System.AddIn.Contract.IListContract&lt;'Contract&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract (collection, viewContractAdapter, contractViewAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Тип, определяющий вид объектов в списке.</typeparam>
        <typeparam name="TContract">Тип, определяющий контракт для передающихся объектов типа <paramref name="TView" /> через изолирующую границу.</typeparam>
        <param name="collection">Коллекция для преобразования.</param>
        <param name="viewContractAdapter">Преобразователь, адаптирующий данные типа, определенные в представлении к типу, ожидаемому в контракте.</param>
        <param name="contractViewAdapter">Преобразователь, адаптирующий данные типа, определенного в контракте к типу, ожидаемому в представлении.</param>
        <summary>Преобразует выбранную коллекцию <see cref="T:System.Collections.Generic.IList`1" /> в коллекцию <see cref="T:System.AddIn.Contract.IListContract`1" /> с использованием адаптеров преобразователя.</summary>
        <returns>Преобразованная коллекция.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте эту перегрузку метода для <xref:System.Collections.Generic.IList%601> коллекции, которые содержат типы, которые должны быть адаптированы перед их можно было передать контракт (а не простых сериализуемых типов, которые могут быть переданы напрямую). <xref:System.AddIn.Contract.IListContract%601> Коллекции может маршалироваться через изолирующую границу между надстройки и ведущего приложения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>