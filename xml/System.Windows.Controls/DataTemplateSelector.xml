<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a71f7b445e32e2d2b8a6ae24fd628258009ae370" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70466200" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет способ выбрать <see cref="T:System.Windows.DataTemplate" /> на основе объекта данных и элемента с привязкой к данным.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, <xref:System.Windows.Controls.DataTemplateSelector> при наличии нескольких <xref:System.Windows.DataTemplate> объектов одного и того же типа и необходимости предоставления <xref:System.Windows.DataTemplate> собственной логики для выбора для применения в зависимости от свойств каждого объекта данных. Обратите внимание, что при наличии объектов различных типов можно задать <xref:System.Windows.DataTemplate.DataType%2A> свойство <xref:System.Windows.DataTemplate>в. В этом случае нет необходимости создавать <xref:System.Windows.Controls.DataTemplateSelector>. Более того, если у вас есть объекты одного типа, но с разными свойствами, можно также рассмотреть возможность использования <xref:System.Windows.DataTrigger> преобразователя данных или. Более подробную информацию см. в разделе [Общие сведения о шаблонах данных](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Чтобы создать селектор шаблона, создайте класс, наследующий от <xref:System.Windows.Controls.DataTemplateSelector> и <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> переопределяющий метод. После определения класса можно назначить экземпляр класса свойству выбора шаблона элемента.  
  
   
  
## Examples  
 В этом примере источником привязки является список `Task` объектов. Одно из свойств `Task` объекта — `Priority`. В нем определены два шаблона данных, `myTaskTemplate` и `importantTaskTemplate`.  
  
 Чтобы указать логику <xref:System.Windows.DataTemplate> , используемую в зависимости `Priority` от значения объекта данных, создайте <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> подкласс класса <xref:System.Windows.Controls.DataTemplateSelector> и переопределите метод. В следующем примере <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> метод предоставляет логику для возврата соответствующего шаблона на основе значения `Priority` свойства. Возвращаемый шаблон находится в ресурсах элемента запечатывание <xref:System.Windows.Window> .  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Затем можно объявить `TaskListDataTemplateSelector` как ресурс:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Чтобы использовать ресурс селектора шаблона, назначьте его <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> свойству <xref:System.Windows.Controls.ListBox>объекта. <xref:System.Windows.Controls.ListBox> Вызывает <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>  метод для `TaskListDataTemplateSelector`  каждого элемента в базовой коллекции. Вызов передает объект данных в качестве параметра элемента. Объект <xref:System.Windows.DataTemplate> , возвращаемый методом, затем применяется к этому объекту данных.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Полный пример см. в разделе [Вводная часть примера стилизации и использования шаблонов](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Controls.DataTemplateSelector" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">Объект данных, для которого можно выбрать шаблон.</param>
        <param name="container">Объект с привязкой к данным.</param>
        <summary>При переопределении в производном классе возвращает <see cref="T:System.Windows.DataTemplate" /> на основе пользовательской логики.</summary>
        <returns>Возвращает тип <see cref="T:System.Windows.DataTemplate" /> или <see langword="null" />. Значение по умолчанию — <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, при наличии нескольких шаблонов данных, определенных для одного и того же типа объектов, используется селектор шаблонов. Например, если в качестве источника привязки указан список объектов учащихся и вы хотите применить определенный шаблон к студентам во время этапа. Это можно сделать, создав класс, наследующий от <xref:System.Windows.Controls.DataTemplateSelector> и <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> переопределяющий метод. После определения класса можно назначить экземпляр класса свойству выбора шаблона элемента.  
  
   
  
## Examples  
 В этом примере источником привязки является список `Task` объектов. Одно из свойств `Task` объекта — `Priority`. В нем определены два шаблона данных, `myTaskTemplate` и `importantTaskTemplate`.  
  
 Чтобы указать логику <xref:System.Windows.DataTemplate> , используемую в зависимости `Priority` от значения объекта данных, создайте <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> подкласс класса <xref:System.Windows.Controls.DataTemplateSelector> и переопределите метод. В следующем примере <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> метод предоставляет логику для возврата соответствующего шаблона на основе значения `Priority` свойства. Возвращаемый шаблон находится в ресурсах элемента запечатывание <xref:System.Windows.Window> .  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Затем можно объявить `TaskListDataTemplateSelector` как ресурс:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Чтобы использовать ресурс селектора шаблона, назначьте его <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> свойству <xref:System.Windows.Controls.ListBox>объекта. <xref:System.Windows.Controls.ListBox> Вызывает <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>  метод для `TaskListDataTemplateSelector`  каждого элемента в базовой коллекции. Вызов передает объект данных в качестве параметра элемента. Объект <xref:System.Windows.DataTemplate> , возвращаемый методом, затем применяется к этому объекту данных.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Полный пример см. в разделе [Вводная часть примера стилизации и использования шаблонов](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
