<Type Name="Validation" FullName="System.Windows.Controls.Validation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ec2fe1e0b5924fa1cc3491da2b72c4fd2366e50" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006632" /></Metadata><TypeSignature Language="C#" Value="public static class Validation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Validation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Validation" />
  <TypeSignature Language="VB.NET" Value="Public Class Validation" />
  <TypeSignature Language="C++ CLI" Value="public ref class Validation abstract sealed" />
  <TypeSignature Language="F#" Value="type Validation = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет методы и вложенные свойства, которые поддерживают проверку данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подробное описание процесса проверки, см. в разделе «Проверка данных» в [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Data.Binding.ValidationRules" />
    <altmember cref="P:System.Windows.Data.MultiBinding.ValidationRules" />
  </Docs>
  <Members>
    <Member MemberName="AddErrorHandler">
      <MemberSignature Language="C#" Value="public static void AddErrorHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Controls.ValidationErrorEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddErrorHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Controls.ValidationErrorEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.AddErrorHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Controls.ValidationErrorEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddErrorHandler (element As DependencyObject, handler As EventHandler(Of ValidationErrorEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddErrorHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Controls::ValidationErrorEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddErrorHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Controls.ValidationErrorEventArgs&gt; -&gt; unit" Usage="System.Windows.Controls.Validation.AddErrorHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Controls.ValidationErrorEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, в который добавляется <paramref name="handler" />.</param>
        <param name="handler">Добавляемый обработчик.</param>
        <summary>Добавляет обработчик событий для присоединенного события <see cref="E:System.Windows.Controls.Validation.Error" /> в указанный объект.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearInvalid">
      <MemberSignature Language="C#" Value="public static void ClearInvalid (System.Windows.Data.BindingExpressionBase bindingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearInvalid(class System.Windows.Data.BindingExpressionBase bindingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.ClearInvalid(System.Windows.Data.BindingExpressionBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearInvalid (bindingExpression As BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearInvalid(System::Windows::Data::BindingExpressionBase ^ bindingExpression);" />
      <MemberSignature Language="F#" Value="static member ClearInvalid : System.Windows.Data.BindingExpressionBase -&gt; unit" Usage="System.Windows.Controls.Validation.ClearInvalid bindingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingExpression" Type="System.Windows.Data.BindingExpressionBase" />
      </Parameters>
      <Docs>
        <param name="bindingExpression">Объект, который требуется сделать допустимым.</param>
        <summary>Удаляет все объекты <see cref="T:System.Windows.Controls.ValidationError" /> из указанного объекта <see cref="T:System.Windows.Data.BindingExpressionBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `bindingExpression` Объект был недопустимым из <xref:System.Windows.Controls.Validation.MarkInvalid%2A> вызов или ранее ошибке проверки. После этого вызова объект является допустимым.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="bindingExpression" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="see AddErrorHandler, and RemoveErrorHandler" />
      <MemberSignature Language="ILAsm" Value="see AddErrorHandler, and RemoveErrorHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Validation.Error" />
      <MemberSignature Language="VB.NET" Value="see AddErrorHandler, and RemoveErrorHandler" />
      <MemberSignature Language="F#" Value="see AddErrorHandler, and RemoveErrorHandler" Usage="see AddErrorHandler, and RemoveErrorHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Происходит, когда элемент привязки обнаруживает ошибку проверки, но только для привязок со свойством <see cref="P:System.Windows.Data.Binding.NotifyOnValidationError" />, имеющим значение <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Модель привязки данных позволяет связать <xref:System.Windows.Data.Binding.ValidationRules%2A> с вашей <xref:System.Windows.Data.Binding> объекта. Проверка происходит во время передачи значения источника привязки целевой для привязки, перед вызовом преобразователя. Ниже описан процесс проверки:  
  
1.  Когда значение передается от целевого свойства к свойству источника, механизм привязки данных сначала удаляет все <xref:System.Windows.Controls.ValidationError> , могут быть добавлены к <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> присоединенное свойство привязанного элемента. Затем он проверяет, есть ли любые пользовательские <xref:System.Windows.Controls.ValidationRule>s, определенным для этого <xref:System.Windows.Data.Binding>, в этом случае он вызывает <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод на каждом из <xref:System.Windows.Controls.ValidationRule>s, пока один из них выполняется ошибку или пока не будут выполнены все из них.  
  
2.  Когда настраиваемое правило, не проходит, обработчик привязки создает <xref:System.Windows.Controls.ValidationError> и добавляет его к <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> коллекции привязанного элемента. Когда <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> не является пустым, <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> присоединенное свойство элемента имеет значение `true`. Кроме того Если <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> свойство <xref:System.Windows.Data.Binding> присваивается `true`, то обработчик привязки вызывает <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> присоединенного события в элементе.  
  
3.  Если все правила передачи, обработчик привязки вызывает преобразователь, если он существует.  
  
4.  Если преобразователь пройден, обработчик привязки вызывает метод задания свойства источника.  
  
5.  Если для привязки <xref:System.Windows.Controls.ExceptionValidationRule> связанные с ней и исключение во время выполнения шага 4, обработчик привязки проверяет, имеется ли <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>. У вас есть возможность использовать <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> обратного вызова, чтобы предоставить пользовательский обработчик для обработки исключений. Если <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> не указан в <xref:System.Windows.Data.Binding>, обработчик привязки создает <xref:System.Windows.Controls.ValidationError> с исключением и добавляет ее к <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> коллекции привязанного элемента.  
  
 Также Обратите внимание, что при передаче допустимого значения в любом направлении (целевой объект источник или источника к целевому объекту) очищается <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> вложенное свойство.  
  
 Дополнительные сведения см. в разделе «Проверка данных» в [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="routedEventInfo_Error"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Validation.ErrorEvent>|  
|Стратегия маршрутизации|Восходящая маршрутизация|  
|делегат|<xref:System.EventHandler%601>, ограничен <xref:System.Windows.Controls.ValidationErrorEventArgs>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ErrorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ErrorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Validation.ErrorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ErrorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ErrorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ErrorEvent : System.Windows.RoutedEvent" Usage="System.Windows.Controls.Validation.ErrorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное событие <see cref="E:System.Windows.Controls.Validation.Error" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="see GetErrors" />
      <MemberSignature Language="ILAsm" Value="see GetErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Validation.Errors" />
      <MemberSignature Language="VB.NET" Value="see GetErrors" />
      <MemberSignature Language="F#" Value="see GetErrors" Usage="see GetErrors" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает коллекцию всех активных объектов <see cref="T:System.Windows.Controls.ValidationError" /> для элемента привязки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks  
 Приложение не может изменять содержимое данной коллекции. См. в разделе "Пример" пример демонстрирует использование этого присоединенного свойства.  
  
 Модель привязки данных WPF позволяет связать <xref:System.Windows.Data.Binding.ValidationRules%2A> с вашей <xref:System.Windows.Data.Binding> объекта. Проверка происходит во время передачи значения источника привязки целевой для привязки, перед вызовом преобразователя. Ниже описан процесс проверки:  
  
1.  Когда значение передается от целевого свойства к свойству источника, механизм привязки данных сначала удаляет все <xref:System.Windows.Controls.ValidationError> , могут быть добавлены к <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> присоединенное свойство привязанного элемента. Затем он проверяет, есть ли любые пользовательские <xref:System.Windows.Controls.ValidationRule>s, определенным для этого <xref:System.Windows.Data.Binding>, в этом случае он вызывает <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод на каждом из <xref:System.Windows.Controls.ValidationRule>s, пока один из них выполняется ошибку или пока не будут выполнены все из них.  
  
2.  Когда настраиваемое правило, не проходит, обработчик привязки создает <xref:System.Windows.Controls.ValidationError> и добавляет его к <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> коллекции привязанного элемента. Когда <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> не является пустым, <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName> присоединенное свойство элемента имеет значение `true`. Кроме того Если <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> свойство <xref:System.Windows.Data.Binding> присваивается `true`, то обработчик привязки вызывает <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> присоединенного события в элементе.  
  
3.  Если все правила передачи, обработчик привязки вызывает преобразователь, если он существует.  
  
4.  Если преобразователь пройден, обработчик привязки вызывает метод задания свойства источника.  
  
5.  Если для привязки <xref:System.Windows.Controls.ExceptionValidationRule> связанные с ней и исключение во время выполнения шага 4, обработчик привязки проверяет, имеется ли <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>. У вас есть возможность использовать <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> обратного вызова, чтобы предоставить пользовательский обработчик для обработки исключений. Если <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> не указан в <xref:System.Windows.Data.Binding>, обработчик привязки создает <xref:System.Windows.Controls.ValidationError> с исключением и добавляет ее к <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> коллекции привязанного элемента.  
  
 Также Обратите внимание, что при передаче допустимого значения в любом направлении (целевой объект источник или источника к целевому объекту) очищается <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> вложенное свойство.  
  
 Сведения о поведении этого свойства в <xref:System.Windows.Data.MultiBinding> сценариев, см. в разделе <xref:System.Windows.Data.MultiBindingExpression.ValidationError%2A>.  
  
 Дополнительные сведения см. в разделе «Проверка данных» в [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlTextUsage_Errors"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
 См. заметки. <xref:System.Windows.Controls.Validation.Errors%2A> Сама коллекция не устанавливаются пользователем, но его можно использовать в определении шаблона элемента управления в XAML.  
  
<a name="dependencyPropertyInfo_Errors"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Validation.ErrorsProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ErrorsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ErrorsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Validation.ErrorsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ErrorsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ErrorsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ErrorsProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Validation.ErrorsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное свойство <see cref="P:System.Windows.Controls.Validation.Errors" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorTemplate">
      <MemberSignature Language="C#" Value="see GetErrorTemplate, and SetErrorTemplate" />
      <MemberSignature Language="ILAsm" Value="see GetErrorTemplate, and SetErrorTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Validation.ErrorTemplate" />
      <MemberSignature Language="VB.NET" Value="see GetErrorTemplate, and SetErrorTemplate" />
      <MemberSignature Language="F#" Value="see GetErrorTemplate, and SetErrorTemplate" Usage="see GetErrorTemplate, and SetErrorTemplate" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает или задает объект <see cref="T:System.Windows.Controls.ControlTemplate" />, используемый для генерации отчета об ошибке проверки на уровне декоративного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Модель привязки данных, вы сможете связать <xref:System.Windows.Data.Binding.ValidationRules%2A> с вашей <xref:System.Windows.Data.Binding> объекта. Если пользователь вводит недопустимое значение, можно сформировать отклик приложения [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] на ошибку. Один из способов обеспечения такого отклика является установление <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.ErrorTemplate%2A> присоединенное свойство пользовательского <xref:System.Windows.Controls.ControlTemplate>.  
  
 Подробное описание проверки, см. в разделе проверки данных из [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="dependencyPropertyInfo_ErrorTemplate"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Validation.ErrorTemplateProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.AdornedElementPlaceholder" />
      </Docs>
    </Member>
    <Member MemberName="ErrorTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ErrorTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ErrorTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Validation.ErrorTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ErrorTemplateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ErrorTemplateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ErrorTemplateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Validation.ErrorTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное свойство <see cref="P:System.Windows.Controls.Validation.ErrorTemplate" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrors">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;System.Windows.Controls.ValidationError&gt; GetErrors (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyObservableCollection`1&lt;class System.Windows.Controls.ValidationError&gt; GetErrors(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetErrors (element As DependencyObject) As ReadOnlyObservableCollection(Of ValidationError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyObservableCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ GetErrors(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetErrors : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;System.Windows.Controls.ValidationError&gt;" Usage="System.Windows.Controls.Validation.GetErrors element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;System.Windows.Controls.ValidationError&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, из которого считывается значение.</param>
        <summary>Получает значение вложенного свойства зависимостей <see cref="P:System.Windows.Controls.Validation.Errors" /> для указанного элемента.</summary>
        <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> объектов <see cref="T:System.Windows.Controls.ValidationError" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="element" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetErrorTemplate">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.ControlTemplate GetErrorTemplate (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Controls.ControlTemplate GetErrorTemplate(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.GetErrorTemplate(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetErrorTemplate (element As DependencyObject) As ControlTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Controls::ControlTemplate ^ GetErrorTemplate(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetErrorTemplate : System.Windows.DependencyObject -&gt; System.Windows.Controls.ControlTemplate" Usage="System.Windows.Controls.Validation.GetErrorTemplate element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.AttachedPropertyBrowsableForType(typeof(System.Windows.DependencyObject))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ControlTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, из которого считывается значение.</param>
        <summary>Получает значение вложенного свойства зависимостей <see cref="P:System.Windows.Controls.Validation.ErrorTemplate" /> для указанного элемента.</summary>
        <returns>Объект <see cref="T:System.Windows.Controls.ControlTemplate" />, использованный для генерации отчета об ошибке проверки на уровне декоративного элемента.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="element" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHasError">
      <MemberSignature Language="C#" Value="public static bool GetHasError (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetHasError(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHasError (element As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetHasError(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetHasError : System.Windows.DependencyObject -&gt; bool" Usage="System.Windows.Controls.Validation.GetHasError element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, из которого считывается значение.</param>
        <summary>Получает значение вложенного свойства зависимостей <see cref="P:System.Windows.Controls.Validation.HasError" /> для указанного элемента.</summary>
        <returns>Значение вложенного свойства <see cref="P:System.Windows.Controls.Validation.HasError" /> указанного элемента.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="element" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValidationAdornerSite">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetValidationAdornerSite (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetValidationAdornerSite(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.GetValidationAdornerSite(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationAdornerSite (element As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetValidationAdornerSite(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetValidationAdornerSite : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.Controls.Validation.GetValidationAdornerSite element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.AttachedPropertyBrowsableForType(typeof(System.Windows.DependencyObject))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Элемент, из которого необходимо получить свойство <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" />.</param>
        <summary>Получает значение вложенного свойства зависимостей <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" /> указанного элемента.</summary>
        <returns>Значение <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValidationAdornerSiteFor">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetValidationAdornerSiteFor (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetValidationAdornerSiteFor(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.GetValidationAdornerSiteFor(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationAdornerSiteFor (element As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetValidationAdornerSiteFor(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetValidationAdornerSiteFor : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.Controls.Validation.GetValidationAdornerSiteFor element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.AttachedPropertyBrowsableForType(typeof(System.Windows.DependencyObject))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Элемент, из которого необходимо получить свойство <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" />.</param>
        <summary>Получает значение вложенного свойства зависимостей <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" /> указанного элемента.</summary>
        <returns>Значение <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasError">
      <MemberSignature Language="C#" Value="see GetHasError" />
      <MemberSignature Language="ILAsm" Value="see GetHasError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Validation.HasError" />
      <MemberSignature Language="VB.NET" Value="see GetHasError" />
      <MemberSignature Language="F#" Value="see GetHasError" Usage="see GetHasError" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, показывающее, имеется ли ошибка <see cref="T:System.Windows.Controls.ValidationError" /> в какой-либо привязке конечного элемента привязки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 Сведения о поведении этого свойства в <xref:System.Windows.Data.MultiBinding> сценариев, см. в разделе <xref:System.Windows.Data.MultiBindingExpression.HasError%2A>.  
  
 Подробное описание проверки, см. в разделе проверки данных из [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="dependencyPropertyInfo_HasError"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Validation.HasErrorProperty>|  
|Значение свойства метаданных `true`|<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidationRules" />
        <altmember cref="P:System.Windows.Data.MultiBinding.ValidationRules" />
      </Docs>
    </Member>
    <Member MemberName="HasErrorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasErrorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasErrorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Validation.HasErrorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HasErrorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HasErrorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HasErrorProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Validation.HasErrorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное свойство <see cref="P:System.Windows.Controls.Validation.HasError" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkInvalid">
      <MemberSignature Language="C#" Value="public static void MarkInvalid (System.Windows.Data.BindingExpressionBase bindingExpression, System.Windows.Controls.ValidationError validationError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkInvalid(class System.Windows.Data.BindingExpressionBase bindingExpression, class System.Windows.Controls.ValidationError validationError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpressionBase,System.Windows.Controls.ValidationError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkInvalid(System::Windows::Data::BindingExpressionBase ^ bindingExpression, System::Windows::Controls::ValidationError ^ validationError);" />
      <MemberSignature Language="F#" Value="static member MarkInvalid : System.Windows.Data.BindingExpressionBase * System.Windows.Controls.ValidationError -&gt; unit" Usage="System.Windows.Controls.Validation.MarkInvalid (bindingExpression, validationError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingExpression" Type="System.Windows.Data.BindingExpressionBase" />
        <Parameter Name="validationError" Type="System.Windows.Controls.ValidationError" />
      </Parameters>
      <Docs>
        <param name="bindingExpression">Объект <see cref="T:System.Windows.Data.BindingExpression" />, который требуется пометить как недопустимый.</param>
        <param name="validationError">Объект <see cref="T:System.Windows.Controls.ValidationError" />, который следует использовать.</param>
        <summary>Помечает указанный объект <see cref="T:System.Windows.Data.BindingExpression" /> как недопустимый, используя заданный объект <see cref="T:System.Windows.Controls.ValidationError" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingExpression> Остается недопустимый до <xref:System.Windows.Controls.Validation.ClearInvalid%2A> вызывается или другой передачи к источнику привязки проверка прошла успешно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="validationError" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveErrorHandler">
      <MemberSignature Language="C#" Value="public static void RemoveErrorHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Controls.ValidationErrorEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveErrorHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Controls.ValidationErrorEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.RemoveErrorHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Controls.ValidationErrorEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveErrorHandler (element As DependencyObject, handler As EventHandler(Of ValidationErrorEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveErrorHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Controls::ValidationErrorEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveErrorHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Controls.ValidationErrorEventArgs&gt; -&gt; unit" Usage="System.Windows.Controls.Validation.RemoveErrorHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Controls.ValidationErrorEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, из которого удаляется обработчик <paramref name="handler" />.</param>
        <param name="handler">Удаляемый обработчик.</param>
        <summary>Добавляет обработчик событий для вложенного события <see cref="E:System.Windows.Controls.Validation.Error" /> из указанного объекта.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetErrorTemplate">
      <MemberSignature Language="C#" Value="public static void SetErrorTemplate (System.Windows.DependencyObject element, System.Windows.Controls.ControlTemplate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetErrorTemplate(class System.Windows.DependencyObject element, class System.Windows.Controls.ControlTemplate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.SetErrorTemplate(System.Windows.DependencyObject,System.Windows.Controls.ControlTemplate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetErrorTemplate (element As DependencyObject, value As ControlTemplate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetErrorTemplate(System::Windows::DependencyObject ^ element, System::Windows::Controls::ControlTemplate ^ value);" />
      <MemberSignature Language="F#" Value="static member SetErrorTemplate : System.Windows.DependencyObject * System.Windows.Controls.ControlTemplate -&gt; unit" Usage="System.Windows.Controls.Validation.SetErrorTemplate (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.Controls.ControlTemplate" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, для которого устанавливается значение <paramref name="value" />.</param>
        <param name="value">Объект <see cref="T:System.Windows.Controls.ControlTemplate" />, используемый для генерации отчета об ошибке проверки на уровне декоративного элемента.</param>
        <summary>Задает значение присоединенного свойства <see cref="P:System.Windows.Controls.Validation.ErrorTemplate" /> в указанном элементе.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="element" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValidationAdornerSite">
      <MemberSignature Language="C#" Value="public static void SetValidationAdornerSite (System.Windows.DependencyObject element, System.Windows.DependencyObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValidationAdornerSite(class System.Windows.DependencyObject element, class System.Windows.DependencyObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.SetValidationAdornerSite(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetValidationAdornerSite (element As DependencyObject, value As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetValidationAdornerSite(System::Windows::DependencyObject ^ element, System::Windows::DependencyObject ^ value);" />
      <MemberSignature Language="F#" Value="static member SetValidationAdornerSite : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Controls.Validation.SetValidationAdornerSite (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Элемент, для которого необходимо задать <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" />.</param>
        <param name="value">Свойство <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" /> указанного элемента.</param>
        <summary>Задает для вложенного свойства <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" /> в указанном элементе указанное значение.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValidationAdornerSiteFor">
      <MemberSignature Language="C#" Value="public static void SetValidationAdornerSiteFor (System.Windows.DependencyObject element, System.Windows.DependencyObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValidationAdornerSiteFor(class System.Windows.DependencyObject element, class System.Windows.DependencyObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Validation.SetValidationAdornerSiteFor(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetValidationAdornerSiteFor (element As DependencyObject, value As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetValidationAdornerSiteFor(System::Windows::DependencyObject ^ element, System::Windows::DependencyObject ^ value);" />
      <MemberSignature Language="F#" Value="static member SetValidationAdornerSiteFor : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Controls.Validation.SetValidationAdornerSiteFor (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Элемент, для которого необходимо задать <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" />.</param>
        <param name="value">Свойство <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" /> указанного элемента.</param>
        <summary>Задает для вложенного свойства <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" /> в указанном элементе указанное значение.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationAdornerSite">
      <MemberSignature Language="C#" Value="see GetValidationAdornerSite, and SetValidationAdornerSite" />
      <MemberSignature Language="ILAsm" Value="see GetValidationAdornerSite, and SetValidationAdornerSite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Validation.ValidationAdornerSite" />
      <MemberSignature Language="VB.NET" Value="see GetValidationAdornerSite, and SetValidationAdornerSite" />
      <MemberSignature Language="F#" Value="see GetValidationAdornerSite, and SetValidationAdornerSite" Usage="see GetValidationAdornerSite, and SetValidationAdornerSite" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает или задает элемент, который отображается, чтобы показать, что произошла ошибка проверки в связанном элементе, где задано свойство.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> И <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A?displayProperty=nameWithType> присоединенного свойства ссылаются друг на друга, и можно задать любой из них.  Например, предположим, что <xref:System.Windows.Controls.Label> отображает ошибки проверки, возникающие на привязкой к данным <xref:System.Windows.Controls.TextBox>.  Необходимо выполнить одно из следующих действий для создания связи:  
  
-   Задайте <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> для <xref:System.Windows.Controls.TextBox> для <xref:System.Windows.Controls.Label>.  
  
-   Задайте <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A?displayProperty=nameWithType> для <xref:System.Windows.Controls.Label> для <xref:System.Windows.Controls.TextBox>.  
  
-   Если задано одно из свойств, другие свойству на элемент, на котором можно задать присоединенное свойство; независимо от того, какой из предыдущих параметров выбран <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> для <xref:System.Windows.Controls.TextBox> — <xref:System.Windows.Controls.Label> и <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A> для <xref:System.Windows.Controls.Label> является <xref:System.Windows.Controls.TextBox>.  
  
<a name="dependencyPropertyInfo_ValidationAdornerSite"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Validation.ValidationAdornerSiteProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Windows.Controls.Label> как сайт декоративного элемента для ошибки, возникающие на элементах в <xref:System.Windows.Controls.ItemsControl>. В примере задается <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> для каждого элемента контейнера в <xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A> к метке.  В примере используется <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A?displayProperty=nameWithType> свойство для получения контейнера элемент, имеющий данную ошибку и привязывает <xref:System.Windows.Controls.ContentControl.Content%2A> из <xref:System.Windows.Controls.Label> к первому <xref:System.Windows.Controls.ValidationError> , сообщенный.  
  
 [!code-xml[BindingGroupSnippets#ItemBindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml#itembindinggroup)]  
[!code-xml[BindingGroupSnippets#ValidationAdornerSiteFor](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml#validationadornersitefor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationAdornerSiteFor">
      <MemberSignature Language="C#" Value="see GetValidationAdornerSiteFor, and SetValidationAdornerSiteFor" />
      <MemberSignature Language="ILAsm" Value="see GetValidationAdornerSiteFor, and SetValidationAdornerSiteFor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" />
      <MemberSignature Language="VB.NET" Value="see GetValidationAdornerSiteFor, and SetValidationAdornerSiteFor" />
      <MemberSignature Language="F#" Value="see GetValidationAdornerSiteFor, and SetValidationAdornerSiteFor" Usage="see GetValidationAdornerSiteFor, and SetValidationAdornerSiteFor" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает или задает элемент, для которого данный элемент появляется, чтобы указать на ошибку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> И <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A?displayProperty=nameWithType> присоединенного свойства ссылаются друг на друга, и можно задать любой из них.  Например, предположим, что <xref:System.Windows.Controls.Label> отображает ошибки проверки, возникающие на данных, привязанных <xref:System.Windows.Controls.TextBox>.  Необходимо выполнить одно из следующих действий для создания связи:  
  
-   Задайте <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> для <xref:System.Windows.Controls.TextBox> для <xref:System.Windows.Controls.Label>.  
  
-   Задайте <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A?displayProperty=nameWithType> для <xref:System.Windows.Controls.Label> для <xref:System.Windows.Controls.TextBox>.  
  
 Если задано одно из свойств, другие свойству на элемент, на котором можно задать присоединенное свойство; независимо от того, какой из предыдущих параметров выбран <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> для <xref:System.Windows.Controls.TextBox> — <xref:System.Windows.Controls.Label> и <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A> для <xref:System.Windows.Controls.Label> является <xref:System.Windows.Controls.TextBox>.  
  
<a name="dependencyPropertyInfo_ValidationAdornerSiteFor"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.Validation.ValidationAdornerSiteForProperty>|  
|Значение свойства метаданных `true`|Нет|  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Windows.Controls.Label> как сайт декоративного элемента для ошибки, возникающие на элементах в <xref:System.Windows.Controls.ItemsControl>. В примере задается <xref:System.Windows.Controls.Validation.ValidationAdornerSite%2A?displayProperty=nameWithType> для каждого элемента контейнера в <xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A> к метке.  В примере используется <xref:System.Windows.Controls.Validation.ValidationAdornerSiteFor%2A?displayProperty=nameWithType> свойство для получения контейнера элемент, имеющий данную ошибку и привязывает <xref:System.Windows.Controls.ContentControl.Content%2A> из <xref:System.Windows.Controls.Label> к первому <xref:System.Windows.Controls.ValidationError> , сообщенный.  
  
 [!code-xml[BindingGroupSnippets#ItemBindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml#itembindinggroup)]  
[!code-xml[BindingGroupSnippets#ValidationAdornerSiteFor](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml#validationadornersitefor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationAdornerSiteForProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ValidationAdornerSiteForProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ValidationAdornerSiteForProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Validation.ValidationAdornerSiteForProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ValidationAdornerSiteForProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ValidationAdornerSiteForProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ValidationAdornerSiteForProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Validation.ValidationAdornerSiteForProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное свойство <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSiteFor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationAdornerSiteProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ValidationAdornerSiteProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ValidationAdornerSiteProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Validation.ValidationAdornerSiteProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ValidationAdornerSiteProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ValidationAdornerSiteProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ValidationAdornerSiteProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Validation.ValidationAdornerSiteProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное свойство <see cref="P:System.Windows.Controls.Validation.ValidationAdornerSite" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>