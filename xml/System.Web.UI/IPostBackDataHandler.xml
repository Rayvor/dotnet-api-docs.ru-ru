<Type Name="IPostBackDataHandler" FullName="System.Web.UI.IPostBackDataHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f33807797ab1e28151bb6fab6346ffc6b2bd2fba" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69388164" /></Metadata><TypeSignature Language="C#" Value="public interface IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPostBackDataHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPostBackDataHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPostBackDataHandler" />
  <TypeSignature Language="F#" Value="type IPostBackDataHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Определяет методы, которые должны быть реализованы ASP.NET серверными элементами управления для автоматической загрузки данных обратной передачи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Необходимо реализовать <xref:System.Web.UI.IPostBackDataHandler> интерфейс при создании серверного элемента управления, который должен проверять данные формы, отправляемые клиентом на сервер. Контракт, определяемый этим интерфейсом, позволяет серверному элементу управления определить, следует ли изменять его состояние в результате обратной передачи и вызывать соответствующие события. Дополнительные сведения см. [в разделе Обработка событий сервера на страницах веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется серверный элемент управления текстового поля, реализующий <xref:System.Web.UI.IPostBackDataHandler> интерфейс. Свойство изменяется в результате обратной передачи, а серверный элемент управления <xref:System.Web.UI.WebControls.TextBox.TextChanged> создает событие после загрузки данных обратной передачи. <xref:System.Web.UI.WebControls.TextBox.Text%2A>  
  
 [!code-csharp[Classic IPostBackDataHandler Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IPostBackDataHandler Example/CS/source.cs#1)]
 [!code-vb[Classic IPostBackDataHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IPostBackDataHandler Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="public bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberSignature Language="F#" Value="abstract member LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool" Usage="iPostBackDataHandler.LoadPostData (postDataKey, postCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Идентификатор ключа элемента управления.</param>
        <param name="postCollection">Коллекция всех входящих значений имен.</param>
        <summary>При реализации каким-либо классом обрабатывает данные обратной передачи для ASP.NET серверного элемента управления.</summary>
        <returns><see langword="true" />, если состояние серверного элемента управления изменяется в результате обратной передачи; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Инфраструктура страницы ASP.NET отслеживает все серверные элементы управления, возвращающие `true` этот вызов метода, а затем вызывает <xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A> метод для этих элементов управления.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется серверный элемент управления, реализующий версию <xref:System.Web.UI.IPostBackDataHandler.LoadPostData%2A> метода.  
  
 [!code-csharp[Classic IPostBackDataHandler.LoadPostData Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IPostBackDataHandler.LoadPostData Example/CS/source.cs#1)]
 [!code-vb[Classic IPostBackDataHandler.LoadPostData Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IPostBackDataHandler.LoadPostData Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="public void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaisePostDataChangedEvent();" />
      <MemberSignature Language="F#" Value="abstract member RaisePostDataChangedEvent : unit -&gt; unit" Usage="iPostBackDataHandler.RaisePostDataChangedEvent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>При реализации каким-либо классом отправляет сигнал серверному элементу управления о необходимости уведомления приложения ASP.NET об изменении состояния элемента управления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод вызывает любые события изменения для серверного элемента управления, <xref:System.Web.UI.IPostBackDataHandler> реализующего интерфейс. <xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A>  
  
   
  
## Examples  
 В следующем примере кода показано, как серверный элемент управления может <xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A> реализовать метод.  
  
 [!code-csharp[Classic IPostBackDataHandler.RaisePostDataChangedEvent Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IPostBackDataHandler.RaisePostDataChangedEvent Example/CS/source.cs#1)]
 [!code-vb[Classic IPostBackDataHandler.RaisePostDataChangedEvent Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IPostBackDataHandler.RaisePostDataChangedEvent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера в веб-страницы ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
