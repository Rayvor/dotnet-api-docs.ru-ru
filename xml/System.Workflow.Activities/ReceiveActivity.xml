<Type Name="ReceiveActivity" FullName="System.Workflow.Activities.ReceiveActivity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b89cca340e0c69f826aa79c8b34132a286308c13" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70433450" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReceiveActivity : System.Workflow.Activities.SequenceActivity, System.Workflow.Activities.IEventActivity, System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ReceiveActivity extends System.Workflow.Activities.SequenceActivity implements class System.Workflow.Activities.IEventActivity, class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.ReceiveActivity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReceiveActivity&#xA;Inherits SequenceActivity&#xA;Implements IActivityEventListener(Of QueueEventArgs), IEventActivity" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReceiveActivity sealed : System::Workflow::Activities::SequenceActivity, System::Workflow::Activities::IEventActivity, System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt;" />
  <TypeSignature Language="F#" Value="type ReceiveActivity = class&#xA;    inherit SequenceActivity&#xA;    interface IEventActivity&#xA;    interface IActivityEventListener&lt;QueueEventArgs&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Activities.SequenceActivity</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Workflow.Activities.IEventActivity</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.Activities.ReceiveActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.ReceiveActivity), "Design.Resources.ReceiveActivity.png")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.ReceiveActivityValidator))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Действие службы, реализующее операцию, которая определяется контрактом службы Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Activities.ReceiveActivity> Действие используется, когда рабочий процесс реализует операцию, определенную в контракте службы WCF. Класс <xref:System.Workflow.Activities.ReceiveActivity> позволяет реализовать операцию на основе уже определенного контракта службы или же определить контракт службы и операцию внутри рабочего процесса. Последние контракты называются контрактами первого рабочего процесса.  
  
 Действие <xref:System.Workflow.Activities.ReceiveActivity> поддерживает набор заранее определенных шаблонов обмена сообщениями. К таким шаблонам относятся следующие.  
  
-   Однонаправленное получение  
  
     Клиент отправляет сообщение, но не ожидает ответа от службы. Операция контракта должна иметь возвращаемый тип void.  
  
-   Получение запроса — отправка ответа  
  
     После того как действие <xref:System.Workflow.Activities.ReceiveActivity> получит и обработает сообщение, клиенту отправляется ответ. Если операция контракта имеет возвращаемый тип void, действию отправки отправляется подтверждение.  
  
-   Получение запроса — отправка ошибки  
  
     После того как действие <xref:System.Workflow.Activities.ReceiveActivity> получит и обработает сообщение, клиенту отправляется ответ или сообщение об ошибке.  
  
> [!NOTE]
>  Чтобы проверить, что механизм сохраняемости работает правильно и не сохраняет временные сообщения, убедитесь, что дочерние действия <xref:System.Workflow.Activities.ReceiveActivity> не сохраняются сами по себе. Например, это может произойти, если дочерние действия переходят в режим бездействия, когда был создан поставщик сохраняемости с параметром `UnloadOnIdle`, значение которого равно `true`.  
  
> [!NOTE]
>  Это действие является частью [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. Эквивалентное действие в см [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. в <xref:System.ServiceModel.Activities.Receive>разделе.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Workflow.Activities.SendActivity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Activities.ReceiveActivity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструктор <xref:System.Workflow.Activities.ReceiveActivity> обычно вызывается в побочном файле кода, созданном конструктором рабочих процессов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReceiveActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReceiveActivity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Activities.ReceiveActivity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструктор <xref:System.Workflow.Activities.ReceiveActivity> обычно вызывается в побочном файле кода, созданном конструктором рабочих процессов.  
  
   
  
## Examples  
 В следующем примере показано создание нового экземпляра класса <xref:System.Workflow.Activities.ReceiveActivity>.  Этот код адаптирован на основании приведенного в SDK примера `Conversations` (файл `ShipperWorkflow.designer.cs`).  
  
 [!code-csharp[ReceiveActivity#11](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReceiveActivity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReceiveActivity(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Activities.ReceiveActivity : string -&gt; System.Workflow.Activities.ReceiveActivity" Usage="new System.Workflow.Activities.ReceiveActivity name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя, которое нужно присвоить экземпляру действия.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Workflow.Activities.ReceiveActivity" /> с инициализацией свойства <see cref="P:System.Workflow.ComponentModel.Activity.Name" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструктор <xref:System.Workflow.Activities.ReceiveActivity> обычно вызывается в побочном файле кода, созданном конструктором рабочих процессов.  
  
   
  
## Examples  
 В следующем примере показано создание нового экземпляра класса <xref:System.Workflow.Activities.ReceiveActivity>.  
  
 [!code-csharp[ReceiveActivity#12](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Cancel(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Cancel (executionContext As ActivityExecutionContext) As ActivityExecutionStatus" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Workflow::ComponentModel::ActivityExecutionStatus Cancel(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext);" />
      <MemberSignature Language="F#" Value="override this.Cancel : System.Workflow.ComponentModel.ActivityExecutionContext -&gt; System.Workflow.ComponentModel.ActivityExecutionStatus" Usage="receiveActivity.Cancel executionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCreateInstance">
      <MemberSignature Language="C#" Value="public bool CanCreateInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCreateInstance" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.CanCreateInstance" />
      <MemberSignature Language="VB.NET" Value="Public Property CanCreateInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCreateInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanCreateInstance : bool with get, set" Usage="System.Workflow.Activities.ReceiveActivity.CanCreateInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое определяет, вызывает ли операция создание нового экземпляра службы рабочего процесса.</summary>
        <value>Значение <see langword="true" />, если создается новый экземпляр рабочего процесса, в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Действие <xref:System.Workflow.Activities.ReceiveActivity>, свойству <xref:System.Workflow.Activities.ReceiveActivity.CanCreateInstance%2A> которого было присвоено значение `true`, представляет операцию службы, которая, будучи вызванной клиентом службы и не являясь при этом стороной диалога, вызывает создание нового экземпляра рабочего процесса службы.  
  
 Рабочие процессы службы, не имеющие действия <xref:System.Workflow.Activities.ReceiveActivity> с параметром <xref:System.Workflow.Activities.ReceiveActivity.CanCreateInstance%2A>, равным `true`, не могут создаваться клиентом с помощью вызова операции службы. Такие рабочие процессы можно создавать с помощью метода <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> связанного объекта <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 Значение по умолчанию для этого свойства — `false`.  
  
   
  
## Examples  
 В следующем примере показано, как задать свойство `CanCreateInstance`. Этот код адаптирован на основании приведенного в SDK примера `Conversations` (файл `ShipperWorkflow.designer.cs`).  
  
 [!code-csharp[ReceiveActivity#0](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; Context" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ Context { System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Workflow.Activities.ReceiveActivity.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает сведения контекста для данного действия.</summary>
        <value>Объект <see cref="T:System.Collections.Generic.IDictionary`2" />, содержащий сведения контекста для данного действия.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения контекста используются для взаимодействия между клиентом и службой, с которой он взаимодействует, и включают, например, данные идентификации для корреляции.  
  
   
  
## Examples  
 В следующем примере показано, как получить доступ к свойству `Context`.  
  
 [!code-csharp[ReceiveActivity#17](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextToken">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.ContextToken ContextToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Activities.ContextToken ContextToken" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.ContextToken" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextToken As ContextToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Activities::ContextToken ^ ContextToken { System::Workflow::Activities::ContextToken ^ get(); void set(System::Workflow::Activities::ContextToken ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextToken : System.Workflow.Activities.ContextToken with get, set" Usage="System.Workflow.Activities.ReceiveActivity.ContextToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Workflow.Activities.ContextTokenTypeConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.ContextToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет маркер, с помощью которого можно задать контекст, который следует использовать для корреляции обмена данными между действием <see cref="T:System.Workflow.Activities.ReceiveActivity" /> и клиентом, с которым взаимодействует это действие.</summary>
        <value>Маркер <see cref="T:System.Workflow.Activities.ContextToken" />, который можно использовать для корреляции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый маркер <xref:System.Workflow.Activities.ReceiveActivity.ContextToken%2A> определяется в пределах области действия-владельца. Пользователи могут моделировать два различных маркера контекста с одинаковыми именами, но относящиеся к различным областям. Во время выполнения значения контекстов, связанные с этими маркерами контекста, различаются.  
  
 По умолчанию у каждого рабочего процесса имеется неявный маркер корневого контекста, действующий на уровне корневого действия. Маркер корневого контекста имеет имя "(RootContext)", а значение <xref:System.Workflow.Activities.ContextToken.OwnerActivityName%2A> равно `null`. Если у действия <xref:System.Workflow.Activities.ReceiveActivity> нет связанного с ним свойства <xref:System.Workflow.Activities.ReceiveActivity.ContextToken%2A>, используется маркер корневого контекста.  
  
   
  
## Examples  
 В следующем примере кода показано, как осуществляется доступ к свойству `ContextToken`. Этот пример адаптирован на основании приведенного в SDK примера `Conversations` (файл `SupplierWorkflow.Designer.cs`).  
  
 [!code-csharp[ReceiveActivity#1](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="receiveActivity.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Execute(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (executionContext As ActivityExecutionContext) As ActivityExecutionStatus" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Workflow::ComponentModel::ActivityExecutionStatus Execute(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Workflow.ComponentModel.ActivityExecutionContext -&gt; System.Workflow.ComponentModel.ActivityExecutionStatus" Usage="receiveActivity.Execute executionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FaultMessage">
      <MemberSignature Language="C#" Value="public System.ServiceModel.FaultException FaultMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.FaultException FaultMessage" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.FaultMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property FaultMessage As FaultException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::FaultException ^ FaultMessage { System::ServiceModel::FaultException ^ get(); void set(System::ServiceModel::FaultException ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FaultMessage : System.ServiceModel.FaultException with get, set" Usage="System.Workflow.Activities.ReceiveActivity.FaultMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.FaultException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Исключение, возвращаемое, когда завершается выполнение действия получения.</summary>
        <value>Объект <see cref="T:System.ServiceModel.FaultException" />, содержащий текст и подробные сведения сообщения об ошибке.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в качестве значения свойства <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> установлен экземпляр типа <xref:System.ServiceModel.FaultException>, ошибка возвращается клиенту после завершения.  
  
 Если во время выполнения действия возникает исключение и задано свойство <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A>, то клиенту возвращается заданная ошибка. Если во время выполнения действия возникает исключение, задано свойство <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A>, а у связанной операции имеется атрибут <xref:System.ServiceModel.FaultContractAttribute>, задающий тип ошибки, который совпадает со значением свойства <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A>, канал не закрывается в связи с ошибкой, и клиент может продолжать взаимодействие с сервером. Если свойство <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> не задано, то возникшее исключение возвращается клиенту в качестве ошибки.  
  
   
  
## Examples  
 В следующем примере кода показано, как осуществляется доступ к свойству `FaultMessage`.  
  
 [!code-csharp[ReceiveActivity#2](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FaultMessageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty FaultMessageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty FaultMessageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.ReceiveActivity.FaultMessageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FaultMessageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ FaultMessageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FaultMessageProperty : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Activities.ReceiveActivity.FaultMessageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет объект <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />, который нацелен на свойство <see cref="P:System.Workflow.Activities.ReceiveActivity.FaultMessage" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью этого свойства зависимостей можно настроить привязку между свойством <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> действия получения и открытым свойством (полем) типа <xref:System.ServiceModel.FaultException> рабочего процесса или другим открытым свойством (полем) действия того же типа.  
  
 Кроме того, это свойство зависимостей позволяет задать значение, связанное со свойством <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> действия <xref:System.Workflow.Activities.ReceiveActivity>.  
  
 Это свойство зависимостей также позволяет получить привязку или значение, связанное со свойством <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> действия <xref:System.Workflow.Activities.ReceiveActivity>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetContext">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает словарь, содержащий сведения контекста, используемые для взаимодействия между клиентом и службой рабочего процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения контекста используются для взаимодействия между клиентом и службой, с которой он взаимодействует, и включают, например, данные идентификации для корреляции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ContextToken contextToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext(class System.Workflow.ComponentModel.Activity activity, class System.Workflow.Activities.ContextToken contextToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext(System::Workflow::ComponentModel::Activity ^ activity, System::Workflow::Activities::ContextToken ^ contextToken);" />
      <MemberSignature Language="F#" Value="static member GetContext : System.Workflow.ComponentModel.Activity * System.Workflow.Activities.ContextToken -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Workflow.Activities.ReceiveActivity.GetContext (activity, contextToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="contextToken" Type="System.Workflow.Activities.ContextToken" />
      </Parameters>
      <Docs>
        <param name="activity">Экземпляр действия, для которого запрашиваются сведения контекста.</param>
        <param name="contextToken">Маркер контекста, используемый действием.</param>
        <summary>Статический метод, возвращающий сведения контекста для заданного экземпляра действия и маркера контекста.</summary>
        <returns>Коллекция на основе словаря, содержащая ключи <see cref="T:System.Xml.XmlQualifiedName" /> и связанные с ними значения <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения контекста используются для взаимодействия между клиентом и службой, с которой он взаимодействует, и включают, например, данные идентификации для корреляции.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод `GetContext`.  
  
 [!code-csharp[ReceiveActivity#13](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext (System.Workflow.ComponentModel.Activity activity, string contextName, string ownerActivityName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext(class System.Workflow.ComponentModel.Activity activity, string contextName, string ownerActivityName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext(System::Workflow::ComponentModel::Activity ^ activity, System::String ^ contextName, System::String ^ ownerActivityName);" />
      <MemberSignature Language="F#" Value="static member GetContext : System.Workflow.ComponentModel.Activity * string * string -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Workflow.Activities.ReceiveActivity.GetContext (activity, contextName, ownerActivityName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="contextName" Type="System.String" />
        <Parameter Name="ownerActivityName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="activity">Экземпляр действия, для которого запрашиваются сведения контекста.</param>
        <param name="contextName">Имя маркера контекста, используемого действием.</param>
        <param name="ownerActivityName">Имя действия-владельца.</param>
        <summary>Статический метод, возвращающий сведения контекста для заданного экземпляра действия и маркера контекста.</summary>
        <returns>Коллекция на основе словаря, содержащая ключи <see cref="T:System.Xml.XmlQualifiedName" /> и связанные с ними значения <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения контекста используются для взаимодействия между клиентом и службой, с которой он взаимодействует, и включают, например, данные идентификации для корреляции.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод `GetContext`.  
  
 [!code-csharp[ReceiveActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetRootContext (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetRootContext(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.GetRootContext(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetRootContext(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetRootContext : System.Workflow.ComponentModel.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.Workflow.Activities.ReceiveActivity.GetRootContext activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">Экземпляр дочернего действия.</param>
        <summary>Статический метод, возвращающий сведения контекста для корневого контекста, связанного с заданным экземпляром действия. Сведения контекста используются для взаимодействия между ведущим приложением и службой рабочего процесса.</summary>
        <returns>Коллекция на основе словаря, содержащая ключи <see cref="T:System.Xml.XmlQualifiedName" /> и связанные с ними значения <see cref="T:System.String" />, представляющие сведения контекста для корневого контекста. Если не принимать во внимание логику создания пользовательских экземпляров, то получение сообщений, вызывающих создание новых экземпляров, происходит в корневом контексте.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения контекста используются для взаимодействия между клиентом и службой, с которой он взаимодействует, и включают, например, данные идентификации для корреляции.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод `GetRootContext`.  
  
 [!code-csharp[ReceiveActivity#16](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowServiceAttributes">
      <MemberSignature Language="C#" Value="public static object GetWorkflowServiceAttributes (object dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetWorkflowServiceAttributes(object dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWorkflowServiceAttributes (dependencyObject As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetWorkflowServiceAttributes(System::Object ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowServiceAttributes : obj -&gt; obj" Usage="System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">Объект, из которого следует извлекать атрибуты службы.</param>
        <summary>Возвращает атрибуты <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> для службы, реализованной с помощью действия <see cref="T:System.Workflow.Activities.ReceiveActivity" />. Эти атрибуты включают такие элементы, как <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode" />, <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName" />, <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults" />, а также сведения о том, нужно ли включать информацию об исключениях во все ошибки, возвращаемые действием <see cref="T:System.Workflow.Activities.ReceiveActivity" />.</summary>
        <returns>Объект <see cref="T:System.Object" />, представляющий объект <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" />, который содержит данные атрибута службы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> является прикрепленным свойством зависимостей, которое определяется действием <xref:System.Workflow.Activities.ReceiveActivity>. Данное свойство зависимостей прикрепляется к корневому рабочему процессу, содержащему действие <xref:System.Workflow.Activities.ReceiveActivity>, с помощью вызова метода <xref:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes%2A> во время разработки.  
  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> служит для определения атрибутов поведения уровня службы, применяемых к службе рабочего процесса при ее запуске. Эти значения невозможно изменить во время выполнения.  
  
> [!NOTE]
>  Если текущий рабочий процесс с помощью действия <xref:System.Workflow.Activities.InvokeWorkflowActivity> вызывает другой рабочий процесс, то вызываемый рабочий процесс не наследует атрибуты службы вызывающего рабочего процесса.  
  
> [!NOTE]
>  Если в атрибутах службы задано пользовательское действие и это действие включено в рабочий процесс, то используются эти атрибуты службы. Атрибуты службы используются для пользовательских действий только в том случае, если сами пользовательские действия выполняются в качестве рабочих процессов.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод `GetWorkflowServiceAttributes`.  
  
 [!code-csharp[ReceiveActivity#5](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleFault">
      <MemberSignature Language="C#" Value="protected override System.Workflow.ComponentModel.ActivityExecutionStatus HandleFault (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus HandleFault(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Workflow::ComponentModel::ActivityExecutionStatus HandleFault(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext, Exception ^ exception);" />
      <MemberSignature Language="F#" Value="override this.HandleFault : System.Workflow.ComponentModel.ActivityExecutionContext * Exception -&gt; System.Workflow.ComponentModel.ActivityExecutionStatus" Usage="receiveActivity.HandleFault (executionContext, exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <param name="exception">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected internal override void Initialize (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Initialize(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.Initialize(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Initialize (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Initialize(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.Initialize : IServiceProvider -&gt; unit" Usage="receiveActivity.Initialize provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeProperties">
      <MemberSignature Language="C#" Value="protected override void InitializeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.InitializeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializeProperties();" />
      <MemberSignature Language="F#" Value="override this.InitializeProperties : unit -&gt; unit" Usage="receiveActivity.InitializeProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSequenceComplete">
      <MemberSignature Language="C#" Value="protected override void OnSequenceComplete (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSequenceComplete(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSequenceComplete (executionContext As ActivityExecutionContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSequenceComplete(System::Workflow::ComponentModel::ActivityExecutionContext ^ executionContext);" />
      <MemberSignature Language="F#" Value="override this.OnSequenceComplete : System.Workflow.ComponentModel.ActivityExecutionContext -&gt; unit" Usage="receiveActivity.OnSequenceComplete executionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationValidation">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Activities.OperationValidationEventArgs&gt; OperationValidation;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Activities.OperationValidationEventArgs&gt; OperationValidation" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Activities.ReceiveActivity.OperationValidation" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OperationValidation As EventHandler(Of OperationValidationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Activities::OperationValidationEventArgs ^&gt; ^ OperationValidation;" />
      <MemberSignature Language="F#" Value="member this.OperationValidation : EventHandler&lt;System.Workflow.Activities.OperationValidationEventArgs&gt; " Usage="member this.OperationValidation : System.EventHandler&lt;System.Workflow.Activities.OperationValidationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceModel.SRCategory("Handlers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Activities.OperationValidationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при получении сообщения для операции, если требуется проверка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это необязательный обработчик событий, который выполняется, когда действие <xref:System.Workflow.Activities.ReceiveActivity> ожидает получения сообщения. С помощью связанного обработчика можно выполнить проверку безопасности на основе наборов утверждений, чтобы авторизовать вызов клиентом операции службы, реализованной в действии <xref:System.Workflow.Activities.ReceiveActivity>.  
  
 Установка свойства <xref:System.Workflow.Activities.OperationValidationEventArgs.IsValid%2A?displayProperty=nameWithType> равным `false` в обработчике событий вызывает отказ в вызове операции службы, и клиент получает исключение <xref:System.ServiceModel.FaultException>. Если свойство <xref:System.Workflow.Activities.OperationValidationEventArgs.IsValid%2A?displayProperty=nameWithType> имеет значение `true`, то вызов операции службы проходит успешно, а действие <xref:System.Workflow.Activities.ReceiveActivity> получает и обрабатывает сообщение.  
  
   
  
## Examples  
 В следующем примере показано использование события `OperationValidation`.  
  
 [!code-csharp[ReceiveActivity#7](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationValidationEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty OperationValidationEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty OperationValidationEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.ReceiveActivity.OperationValidationEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OperationValidationEvent As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ OperationValidationEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable OperationValidationEvent : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Activities.ReceiveActivity.OperationValidationEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет объект <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />, который нацелен на событие <see cref="E:System.Workflow.Activities.ReceiveActivity.OperationValidation" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство событий зависимости может использоваться для привязки события <xref:System.Workflow.Activities.ReceiveActivity.OperationValidation> действия получения к обработчику открытых событий в классе рабочих процессов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterBindings">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.ParameterBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterBindings As WorkflowParameterBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::ComponentModel::WorkflowParameterBindingCollection ^ ParameterBindings { System::Workflow::ComponentModel::WorkflowParameterBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterBindings : System.Workflow.ComponentModel.WorkflowParameterBindingCollection" Usage="System.Workflow.Activities.ReceiveActivity.ParameterBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.WorkflowParameterBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию привязываемых параметров, обнаруженных в списке формальных параметров службы.</summary>
        <value>Коллекция <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> параметров, к которым требуется выполнить привязку.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.ParameterBindings%2A> может использоваться для задания привязки между параметрами операции службы и открытым полем и свойствами рабочего процесса, содержащими действие <xref:System.Workflow.Activities.ReceiveActivity>. Когда клиент вызывает операцию, значения соответствующего параметра записываются в свойства привязанного рабочего процесса во время выполнения действия получения.  
  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.ParameterBindings%2A> также может использоваться дочерними действиями действия получения, чтобы считывать значения параметров, передаваемые при вызове клиента. Дочерние действия могут использовать коллекцию <xref:System.Workflow.Activities.ReceiveActivity.ParameterBindings%2A>, чтобы задать возвращаемое значение родительского действия <xref:System.Workflow.Activities.ReceiveActivity>.  
  
 Все параметры контракта службы должны включаться в свойство `ParameterBindings`. Несвязанные параметры вызывают появление предупреждений компилятора, а когда действие <xref:System.Workflow.Activities.ReceiveActivity> возвращает клиенту сообщение, может возникнуть исключение.  
  
   
  
## Examples  
 В следующем примере показано, как получить доступ к свойству `ParameterBindings`. Этот код адаптирован на основании приведенного в SDK примера `Conversations` (файл `ShipperWorkflow.designer.cs`).  
  
 [!code-csharp[ReceiveActivity#3](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceOperationInfo">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.OperationInfoBase ServiceOperationInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Activities.OperationInfoBase ServiceOperationInfo" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceOperationInfo As OperationInfoBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Activities::OperationInfoBase ^ ServiceOperationInfo { System::Workflow::Activities::OperationInfoBase ^ get(); void set(System::Workflow::Activities::OperationInfoBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceOperationInfo : System.Workflow.Activities.OperationInfoBase with get, set" Usage="System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.OperationInfoBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет контракт и операцию службы, которые реализует действие <see cref="T:System.Workflow.Activities.ReceiveActivity" />.</summary>
        <value>Объект <see cref="T:System.Workflow.Activities.OperationInfoBase" />, содержащий имя контракта, тип контракта, имя операции (которое может отличаться от имени метода), сведения о том, является ли операция односторонней, а также данные метода, включая параметры, касающиеся операции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo%2A> может быть установлено на экземпляр типа <xref:System.Workflow.Activities.TypedOperationInfo> или <xref:System.Workflow.Activities.OperationInfo>. <xref:System.Workflow.Activities.TypedOperationInfo>можно использовать для настройки действия Receive с помощью существующего контракта службы Windows Communication Foundation (WCF).  
  
 С помощью экземпляра <xref:System.Workflow.Activities.OperationInfo> можно настроить операцию получения для реализации контракта первого рабочего процесса.  
  
   
  
## Examples  
 В следующем примере показано, как получить доступ к свойству `ServiceOperationInfo`. Этот код адаптирован на основании приведенного в SDK примера `Conversations` (файл `ShipperWorkflow.designer.cs`).  
  
 [!code-csharp[ReceiveActivity#4](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWorkflowServiceAttributes">
      <MemberSignature Language="C#" Value="public static void SetWorkflowServiceAttributes (object dependencyObject, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWorkflowServiceAttributes(object dependencyObject, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWorkflowServiceAttributes (dependencyObject As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWorkflowServiceAttributes(System::Object ^ dependencyObject, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member SetWorkflowServiceAttributes : obj * obj -&gt; unit" Usage="System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes (dependencyObject, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">Объект, к которому следует применить атрибуты службы.</param>
        <param name="value">Объект <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" />, содержащий данные атрибутов службы, которые требуется применить.</param>
        <summary>Задает атрибуты для службы, реализованной с помощью действия <see cref="T:System.Workflow.Activities.ReceiveActivity" />. Эти атрибуты включают такие элементы, как <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode" />, <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName" />, а также сведения о том, нужно ли включать информацию об исключениях во все ошибки, возвращаемые действием <see cref="T:System.Workflow.Activities.ReceiveActivity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> является прикрепленным свойством зависимостей, которое определяется действием <xref:System.Workflow.Activities.ReceiveActivity>. Данное свойство зависимостей прикрепляется к корневому рабочему процессу, содержащему действие <xref:System.Workflow.Activities.ReceiveActivity>, с помощью вызова метода <xref:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes%2A> во время разработки.  
  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> служит для определения атрибутов поведения уровня службы, применяемых к службе рабочего процесса при ее запуске. Эти значения невозможно изменить во время выполнения.  
  
> [!NOTE]
>  Если текущий рабочий процесс с помощью действия <xref:System.Workflow.Activities.InvokeWorkflowActivity> вызывает другой рабочий процесс, то вызываемый рабочий процесс не наследует атрибуты службы вызывающего рабочего процесса.  
  
> [!NOTE]
>  Если в атрибутах службы задано пользовательское действие и это действие включено в рабочий процесс, то эти атрибуты службы не используются. Атрибуты службы используются для пользовательских действий только в том случае, если сами пользовательские действия выполняются в качестве рабочих процессов.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод `SetWorkflowServiceAttributes`.  
  
 [!code-csharp[ReceiveActivity#6](~/samples/snippets/csharp/VS_Snippets_CFX/receiveactivity/cs/snippets.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.Activities.IEventActivity.QueueName">
      <MemberSignature Language="C#" Value="IComparable System.Workflow.Activities.IEventActivity.QueueName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IComparable System.Workflow.Activities.IEventActivity.QueueName" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property QueueName As IComparable Implements IEventActivity.QueueName" />
      <MemberSignature Language="C++ CLI" Value="property IComparable ^ System::Workflow::Activities::IEventActivity::QueueName { IComparable ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Workflow.Activities.IEventActivity.QueueName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.Activities.IEventActivity.QueueName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IComparable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя очереди <see cref="T:System.Workflow.Runtime.WorkflowQueue" />, в которой действие ожидает поступления данных.</summary>
        <value>Имя очереди <see cref="T:System.Workflow.Runtime.WorkflowQueue" />, в которой действие ожидает поступления данных.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.Activities.IEventActivity.Subscribe">
      <MemberSignature Language="C#" Value="void IEventActivity.Subscribe (System.Workflow.ComponentModel.ActivityExecutionContext parentContext, System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; parentEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Workflow.Activities.IEventActivity.Subscribe(class System.Workflow.ComponentModel.ActivityExecutionContext parentContext, class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; parentEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Sub Subscribe (parentContext As ActivityExecutionContext, parentEventHandler As IActivityEventListener(Of QueueEventArgs)) Implements IEventActivity.Subscribe" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Workflow.Activities.IEventActivity.Subscribe(System::Workflow::ComponentModel::ActivityExecutionContext ^ parentContext, System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ parentEventHandler) = System::Workflow::Activities::IEventActivity::Subscribe;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.Activities.IEventActivity.Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
        <Parameter Name="parentEventHandler" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="parentContext">Объект <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />, представляющий среду выполнения действия <see cref="T:System.Workflow.Activities.ReceiveActivity" />.</param>
        <param name="parentEventHandler">Обработчик <see cref="T:System.EventHandler" />, который обрабатывает это событие. Этот обработчик событий принадлежит родительскому действию.</param>
        <summary>Создает подписку действия <see cref="T:System.Workflow.Activities.ReceiveActivity" /> на событие.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.Activities.IEventActivity.Unsubscribe">
      <MemberSignature Language="C#" Value="void IEventActivity.Unsubscribe (System.Workflow.ComponentModel.ActivityExecutionContext parentContext, System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; parentEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Workflow.Activities.IEventActivity.Unsubscribe(class System.Workflow.ComponentModel.ActivityExecutionContext parentContext, class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; parentEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Sub Unsubscribe (parentContext As ActivityExecutionContext, parentEventHandler As IActivityEventListener(Of QueueEventArgs)) Implements IEventActivity.Unsubscribe" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Workflow.Activities.IEventActivity.Unsubscribe(System::Workflow::ComponentModel::ActivityExecutionContext ^ parentContext, System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ parentEventHandler) = System::Workflow::Activities::IEventActivity::Unsubscribe;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.Activities.IEventActivity.Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
        <Parameter Name="parentEventHandler" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="parentContext">Объект <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />, представляющий среду выполнения действия <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</param>
        <param name="parentEventHandler">Обработчик <see cref="T:System.EventHandler" />, который обрабатывает это событие. Этот обработчик событий принадлежит родительскому действию.</param>
        <summary>Отменяет подписку действия <see cref="T:System.Workflow.ComponentModel.Activity" /> на событие.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;.OnEvent">
      <MemberSignature Language="C#" Value="void IActivityEventListener&lt;QueueEventArgs&gt;.OnEvent (object sender, System.Workflow.ComponentModel.QueueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;.OnEvent(object sender, class System.Workflow.ComponentModel.QueueEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener&lt;System#Workflow#ComponentModel#QueueEventArgs&gt;#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnEvent (sender As Object, e As QueueEventArgs) Implements IActivityEventListener(Of QueueEventArgs).OnEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;.OnEvent(System::Object ^ sender, System::Workflow::ComponentModel::QueueEventArgs ^ e) = System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt;::OnEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.IActivityEventListener`1.OnEvent(System.Object,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Workflow.ComponentModel.QueueEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, создавший событие.</param>
        <param name="e">Ранее введенные аргументы события.</param>
        <summary>Определяет процедуру обработки при возникновении события, для которого создана подписка.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowServiceAttributesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty WorkflowServiceAttributesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty WorkflowServiceAttributesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WorkflowServiceAttributesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ WorkflowServiceAttributesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WorkflowServiceAttributesProperty : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представляет объект <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />, который нацелен на свойство <see cref="P:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> является прикрепленным свойством зависимостей, которое определяется действием <xref:System.Workflow.Activities.ReceiveActivity>. Данное свойство зависимостей прикрепляется к корневому рабочему процессу, содержащему действие <xref:System.Workflow.Activities.ReceiveActivity>, с помощью вызова метода <xref:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes%2A> во время разработки.  
  
 Свойство <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> служит для определения атрибутов поведения уровня службы, применяемых к службе рабочего процесса при ее запуске. Эти значения невозможно изменить во время выполнения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
