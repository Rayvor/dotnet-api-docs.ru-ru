<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b6a57dbb5dc6a01c5eba76ff27d3fa458a46188" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67571126" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Представляет закрытую вселенную объектов типа, загруженных только для проверки. Каждый MetadataLoadContext может иметь свои собственные правила привязки и изолирован от всех других MetadataLoadContext.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

Объект `MetadataLoadContext` служит в качестве словаря, который привязывает имена сборок, <xref:System.Reflection.Assembly> экземпляров, которые были ранее загружены в контекст или необходимость загрузки.

Сборки строго рассматриваются как метаданные. Существуют ограничения на загрузку сборок, на основе целевой платформы, архитектура ЦП или размер указателя. Нет ограничений на сборку в качестве основной сборкой (**mscorlib**).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">Экземпляр <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</param>
        <param name="coreAssemblyName">Имя сборки, содержащей базовые типы, например <see cref="T:System.Object" />. Как правило, это будет mscorlib.</param>
        <summary>Создает новый объект <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает сборку, которая обозначает "систему сборки", вмещающую хорошо известные типы, такие как <see cref="T:System.Int32" />.</summary>
        <value>Экземпляр <see cref="T:System.Reflection.Assembly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Основной сборкой обрабатывается иначе, чем другие сборки, поскольку ссылки на эти хорошо известных типов не включают ссылки на сборку, в отличие от обычных типов.
            
Как правило эта сборка имеет имя «mscorlib» или «netstandard». Если не удается найти основную сборку, значение будет `null`, и многие другие методы отражения, включая те, которые синтаксический анализ сигнатуры методов приведет к возникновению исключения.
            
`CoreAssembly` Определяется путем передачи `coreAssemblyName` параметр, передаваемый <xref:System.Reflection.MetadataAssemblyResolver> конструктору <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> метод.

Если не `coreAssemblyName` аргумент был указан в конструкторе класса <xref:System.Reflection.MetadataLoadContext>, то используются значения по умолчанию, в том числе «mscorlib», «System.Runtime» и «netstandard».
            
Указанный основной сборкой не обязательно содержит базовые типы напрямую. Его можно ввести пересылаться других сборок. Таким образом это вполне допустимые для использования в качестве назначенного основной сборкой фасадной mscorlib.
            
Обратите внимание, что <xref:System.Runtime> не является сборкой core идеально, поскольку исключает некоторые типы псевдослучайных пользовательского атрибута, связанного с взаимодействия такие как <xref:System.Runtime.InteropServices.DllImportAttribute>. Тем не менее его можно использовать при наличии не заинтересован в этих атрибутов. CustomAttributes API будет пропускать эти атрибуты, если основной сборкой не содержит необходимые типы.
            
Основной сборкой загружается только необходимые. Следующие API-интерфейсы не запускают поиск основную сборку:

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
Если не удается найти основную сборку, или если отсутствуют типы основную сборку, это повлияет на поведение <xref:System.Reflection.MetadataLoadContext> следующим образом:
            
* API-интерфейсы, необходимые для синтаксического анализа подписи или typespecs и возвращают результаты в виде <xref:System.Type> объектов приведет к возникновению исключения. Например:

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* Интерфейсы API, которые требуются для сравнения типов с типами известных core не вызовет исключение, и сравнение будет оцениваться как `false`. Например, если не указать основной сборкой <xref:System.Type.IsPrimitive> вернет `false` для всего, даже типов с именем <xref:System.Int32>. Аналогичным образом <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> вернет <xref:System.TypeCode.Object> для всех операций.
            
* Если это сущность класса метаданных задает флаги которые отображаются как псевдослучайных настраиваемый атрибут, а тип псевдослучайных настраиваемого атрибута, необходимые конструктору или любого типа параметра конструктора, не содержит основную сборку <xref:System.Reflection.MetadataLoadContext> не вызывает исключение. Он не будет включать псевдослучайных настраиваемый атрибут из списка возвращаемых атрибутов.
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все собственные ресурсы (например, блокировки файлов в файлах сборки).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

После реализации, не является безопасным для использования любого <xref:System.Reflection.Assembly> объектов, выданных по <xref:System.Reflection.MetadataLoadContext> или любые объекты отражения, выданных тем <xref:System.Reflection.Assembly> объектов.

На то, что объекты, предоставляемые <xref:System.Reflection.MetadataLoadContext> стремятся создавать <xref:System.ObjectDisposedException>, это не гарантируется.

Некоторые интерфейсы API могут возвращать фиксированной или ранее кэшированных данных. Доступ к объектам *во время* <xref:System.Reflection.MetadataLoadContext.Dispose%2A> вызов метода может вызвать нарушение прав доступа неуправляемого и failfast.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращать атомарный моментальный снимок сборок, которые были загружены в <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <returns>Перечисляемая коллекция объектов <see xref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Экземпляр <see cref="T:System.Reflection.AssemblyName" />.</param>
        <summary>Разрешает предоставленное имя сборки в сборку. Если сборка была ранее привязана к этому имени, возвращается эта сборка. В противном случае <see cref="T:System.Reflection.MetadataLoadContext" /> вызывает указанный <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns>Экземпляр <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Обратите внимание на то, что поведение этого метода совпадает с поведением <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> разрешить событие, но не совпадает с поведением <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>. (Последний отдает без его события resolve.)
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Сопоставитель возвращает <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Объект <see cref="T:System.String" />, представляющий имя сборки.</param>
        <summary>Разрешает предоставленное имя сборки в сборку. Если сборка была ранее привязана к этому имени, возвращается эта сборка. В противном случае <see cref="T:System.Reflection.MetadataLoadContext" /> вызывает указанный <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns>Экземпляр <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

Обратите внимание на то, что поведение этого метода совпадает с поведением <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> разрешить событие, но не совпадает с поведением <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>. (Последний отдает без его события resolve.)

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Сопоставитель возвращает <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">Объект <see cref="T:System.String" />, представляющий путь к сборке.</param>
        <summary>Загружает сборку из конкретного пути на диске и привязывает ее имя к сборке в <see cref="T:System.Reflection.MetadataLoadContext" />. Если предыдущая сборка с тем же именем уже была загружена в <see cref="T:System.Reflection.MetadataLoadContext" />, возвращается предыдущая сборка.</summary>
        <returns>Экземпляр <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Две сборки имеют разный Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">Объект <see cref="T:System.Byte[]" />, удерживающий сборку.</param>
        <summary>Загружает сборку из массива байтов и привязывает ее имя к сборке в <see cref="T:System.Reflection.MetadataLoadContext" />. Если предыдущая сборка с тем же именем уже была загружена в <see cref="T:System.Reflection.MetadataLoadContext" />, возвращается предыдущая сборка.</summary>
        <returns>Экземпляр <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Две сборки имеют разный Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">Объект <see cref="T:System.IO.Stream" />, удерживающий сборку.</param>
        <summary>Загружает сборку из потока и привязывает ее имя к сборке в <see cref="T:System.Reflection.MetadataLoadContext" />. Если предыдущая сборка с тем же именем уже была загружена в <see cref="T:System.Reflection.MetadataLoadContext" />, возвращается предыдущая сборка.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.MetadataLoadContext> Принимает владение <xref:System.IO.Stream> переданными в этот метод. Исходный владелец не должен изменять его положение, dispose <xref:System.IO.Stream>, или предполагается, что его положение останется без изменений.

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">Две сборки имеют разный Mvid.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
