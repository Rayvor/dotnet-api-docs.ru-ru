<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b6a57dbb5dc6a01c5eba76ff27d3fa458a46188" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67571126" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="27327-101">Представляет закрытую вселенную объектов типа, загруженных только для проверки.</span><span class="sxs-lookup"><span data-stu-id="27327-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="27327-102">Каждый MetadataLoadContext может иметь свои собственные правила привязки и изолирован от всех других MetadataLoadContext.</span><span class="sxs-lookup"><span data-stu-id="27327-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="27327-103">Объект `MetadataLoadContext` служит в качестве словаря, который привязывает имена сборок, <xref:System.Reflection.Assembly> экземпляров, которые были ранее загружены в контекст или необходимость загрузки.</span><span class="sxs-lookup"><span data-stu-id="27327-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="27327-104">Сборки строго рассматриваются как метаданные.</span><span class="sxs-lookup"><span data-stu-id="27327-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="27327-105">Существуют ограничения на загрузку сборок, на основе целевой платформы, архитектура ЦП или размер указателя.</span><span class="sxs-lookup"><span data-stu-id="27327-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="27327-106">Нет ограничений на сборку в качестве основной сборкой (**mscorlib**).</span><span class="sxs-lookup"><span data-stu-id="27327-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="27327-107">Экземпляр <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="27327-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="27327-108">Имя сборки, содержащей базовые типы, например <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="27327-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="27327-109">Как правило, это будет mscorlib.</span><span class="sxs-lookup"><span data-stu-id="27327-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="27327-110">Создает новый объект <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="27327-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="27327-111">Возвращает или задает сборку, которая обозначает "систему сборки", вмещающую хорошо известные типы, такие как <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="27327-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="27327-112">Экземпляр <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="27327-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="27327-113">Основной сборкой обрабатывается иначе, чем другие сборки, поскольку ссылки на эти хорошо известных типов не включают ссылки на сборку, в отличие от обычных типов.</span><span class="sxs-lookup"><span data-stu-id="27327-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="27327-114">Как правило эта сборка имеет имя «mscorlib» или «netstandard».</span><span class="sxs-lookup"><span data-stu-id="27327-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="27327-115">Если не удается найти основную сборку, значение будет `null`, и многие другие методы отражения, включая те, которые синтаксический анализ сигнатуры методов приведет к возникновению исключения.</span><span class="sxs-lookup"><span data-stu-id="27327-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="27327-116">`CoreAssembly` Определяется путем передачи `coreAssemblyName` параметр, передаваемый <xref:System.Reflection.MetadataAssemblyResolver> конструктору <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="27327-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="27327-117">Если не `coreAssemblyName` аргумент был указан в конструкторе класса <xref:System.Reflection.MetadataLoadContext>, то используются значения по умолчанию, в том числе «mscorlib», «System.Runtime» и «netstandard».</span><span class="sxs-lookup"><span data-stu-id="27327-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="27327-118">Указанный основной сборкой не обязательно содержит базовые типы напрямую.</span><span class="sxs-lookup"><span data-stu-id="27327-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="27327-119">Его можно ввести пересылаться других сборок.</span><span class="sxs-lookup"><span data-stu-id="27327-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="27327-120">Таким образом это вполне допустимые для использования в качестве назначенного основной сборкой фасадной mscorlib.</span><span class="sxs-lookup"><span data-stu-id="27327-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="27327-121">Обратите внимание, что <xref:System.Runtime> не является сборкой core идеально, поскольку исключает некоторые типы псевдослучайных пользовательского атрибута, связанного с взаимодействия такие как <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="27327-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="27327-122">Тем не менее его можно использовать при наличии не заинтересован в этих атрибутов.</span><span class="sxs-lookup"><span data-stu-id="27327-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="27327-123">CustomAttributes API будет пропускать эти атрибуты, если основной сборкой не содержит необходимые типы.</span><span class="sxs-lookup"><span data-stu-id="27327-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="27327-124">Основной сборкой загружается только необходимые.</span><span class="sxs-lookup"><span data-stu-id="27327-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="27327-125">Следующие API-интерфейсы не запускают поиск основную сборку:</span><span class="sxs-lookup"><span data-stu-id="27327-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="27327-126">Если не удается найти основную сборку, или если отсутствуют типы основную сборку, это повлияет на поведение <xref:System.Reflection.MetadataLoadContext> следующим образом:</span><span class="sxs-lookup"><span data-stu-id="27327-126">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="27327-127">API-интерфейсы, необходимые для синтаксического анализа подписи или typespecs и возвращают результаты в виде <xref:System.Type> объектов приведет к возникновению исключения.</span><span class="sxs-lookup"><span data-stu-id="27327-127">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="27327-128">Например:</span><span class="sxs-lookup"><span data-stu-id="27327-128">For example:</span></span>

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty-nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* <span data-ttu-id="27327-129">Интерфейсы API, которые требуются для сравнения типов с типами известных core не вызовет исключение, и сравнение будет оцениваться как `false`.</span><span class="sxs-lookup"><span data-stu-id="27327-129">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="27327-130">Например, если не указать основной сборкой <xref:System.Type.IsPrimitive> вернет `false` для всего, даже типов с именем <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="27327-130">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="27327-131">Аналогичным образом <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> вернет <xref:System.TypeCode.Object> для всех операций.</span><span class="sxs-lookup"><span data-stu-id="27327-131">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="27327-132">Если это сущность класса метаданных задает флаги которые отображаются как псевдослучайных настраиваемый атрибут, а тип псевдослучайных настраиваемого атрибута, необходимые конструктору или любого типа параметра конструктора, не содержит основную сборку <xref:System.Reflection.MetadataLoadContext> не вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="27327-132">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="27327-133">Он не будет включать псевдослучайных настраиваемый атрибут из списка возвращаемых атрибутов.</span><span class="sxs-lookup"><span data-stu-id="27327-133">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27327-134">Освобождает все собственные ресурсы (например, блокировки файлов в файлах сборки).</span><span class="sxs-lookup"><span data-stu-id="27327-134">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="27327-135">После реализации, не является безопасным для использования любого <xref:System.Reflection.Assembly> объектов, выданных по <xref:System.Reflection.MetadataLoadContext> или любые объекты отражения, выданных тем <xref:System.Reflection.Assembly> объектов.</span><span class="sxs-lookup"><span data-stu-id="27327-135">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="27327-136">На то, что объекты, предоставляемые <xref:System.Reflection.MetadataLoadContext> стремятся создавать <xref:System.ObjectDisposedException>, это не гарантируется.</span><span class="sxs-lookup"><span data-stu-id="27327-136">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="27327-137">Некоторые интерфейсы API могут возвращать фиксированной или ранее кэшированных данных.</span><span class="sxs-lookup"><span data-stu-id="27327-137">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="27327-138">Доступ к объектам *во время* <xref:System.Reflection.MetadataLoadContext.Dispose%2A> вызов метода может вызвать нарушение прав доступа неуправляемого и failfast.</span><span class="sxs-lookup"><span data-stu-id="27327-138">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27327-139">Возвращать атомарный моментальный снимок сборок, которые были загружены в <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="27327-139">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="27327-140">Перечисляемая коллекция объектов <see xref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="27327-140">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="27327-141">Экземпляр <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="27327-141">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="27327-142">Разрешает предоставленное имя сборки в сборку.</span><span class="sxs-lookup"><span data-stu-id="27327-142">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="27327-143">Если сборка была ранее привязана к этому имени, возвращается эта сборка.</span><span class="sxs-lookup"><span data-stu-id="27327-143">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="27327-144">В противном случае <see cref="T:System.Reflection.MetadataLoadContext" /> вызывает указанный <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="27327-144">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="27327-145">Экземпляр <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="27327-145">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="27327-146">Обратите внимание на то, что поведение этого метода совпадает с поведением <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> разрешить событие, но не совпадает с поведением <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="27327-146">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="27327-147">(Последний отдает без его события resolve.)</span><span class="sxs-lookup"><span data-stu-id="27327-147">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="27327-148">Сопоставитель возвращает <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="27327-148">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="27327-149">Объект <see cref="T:System.String" />, представляющий имя сборки.</span><span class="sxs-lookup"><span data-stu-id="27327-149">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="27327-150">Разрешает предоставленное имя сборки в сборку.</span><span class="sxs-lookup"><span data-stu-id="27327-150">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="27327-151">Если сборка была ранее привязана к этому имени, возвращается эта сборка.</span><span class="sxs-lookup"><span data-stu-id="27327-151">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="27327-152">В противном случае <see cref="T:System.Reflection.MetadataLoadContext" /> вызывает указанный <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="27327-152">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="27327-153">Экземпляр <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="27327-153">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

<span data-ttu-id="27327-154">Обратите внимание на то, что поведение этого метода совпадает с поведением <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> разрешить событие, но не совпадает с поведением <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="27327-154">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="27327-155">(Последний отдает без его события resolve.)</span><span class="sxs-lookup"><span data-stu-id="27327-155">(The latter gives up without raising its resolve event.)</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="27327-156">Сопоставитель возвращает <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="27327-156">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="27327-157">Объект <see cref="T:System.String" />, представляющий путь к сборке.</span><span class="sxs-lookup"><span data-stu-id="27327-157">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="27327-158">Загружает сборку из конкретного пути на диске и привязывает ее имя к сборке в <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="27327-158">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="27327-159">Если предыдущая сборка с тем же именем уже была загружена в <see cref="T:System.Reflection.MetadataLoadContext" />, возвращается предыдущая сборка.</span><span class="sxs-lookup"><span data-stu-id="27327-159">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="27327-160">Экземпляр <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="27327-160">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="27327-161">Две сборки имеют разный Mvid.</span><span class="sxs-lookup"><span data-stu-id="27327-161">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="27327-162">Объект <see cref="T:System.Byte[]" />, удерживающий сборку.</span><span class="sxs-lookup"><span data-stu-id="27327-162">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="27327-163">Загружает сборку из массива байтов и привязывает ее имя к сборке в <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="27327-163">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="27327-164">Если предыдущая сборка с тем же именем уже была загружена в <see cref="T:System.Reflection.MetadataLoadContext" />, возвращается предыдущая сборка.</span><span class="sxs-lookup"><span data-stu-id="27327-164">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="27327-165">Экземпляр <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="27327-165">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="27327-166">Две сборки имеют разный Mvid.</span><span class="sxs-lookup"><span data-stu-id="27327-166">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="27327-167">Объект <see cref="T:System.IO.Stream" />, удерживающий сборку.</span><span class="sxs-lookup"><span data-stu-id="27327-167">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="27327-168">Загружает сборку из потока и привязывает ее имя к сборке в <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="27327-168">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="27327-169">Если предыдущая сборка с тем же именем уже была загружена в <see cref="T:System.Reflection.MetadataLoadContext" />, возвращается предыдущая сборка.</span><span class="sxs-lookup"><span data-stu-id="27327-169">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="27327-170"><xref:System.Reflection.MetadataLoadContext> Принимает владение <xref:System.IO.Stream> переданными в этот метод.</span><span class="sxs-lookup"><span data-stu-id="27327-170">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="27327-171">Исходный владелец не должен изменять его положение, dispose <xref:System.IO.Stream>, или предполагается, что его положение останется без изменений.</span><span class="sxs-lookup"><span data-stu-id="27327-171">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="27327-172">Две сборки имеют разный Mvid.</span><span class="sxs-lookup"><span data-stu-id="27327-172">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
