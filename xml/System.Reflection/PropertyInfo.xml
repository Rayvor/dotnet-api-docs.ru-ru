<Type Name="PropertyInfo" FullName="System.Reflection.PropertyInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f0971505a973d1be41974cd5c21f1ed29a9bb62" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70324380" /></Metadata><TypeSignature Language="C#" Value="public abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit PropertyInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PropertyInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PropertyInfo&#xA;Inherits MemberInfo&#xA;Implements _PropertyInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_PropertyInfo" />
  <TypeSignature Language="F#" Value="type PropertyInfo = class&#xA;    inherit MemberInfo&#xA;    interface _PropertyInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._PropertyInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="43766-101">Выявляет атрибуты свойства и обеспечивает доступ к его метаданным.</span><span class="sxs-lookup"><span data-stu-id="43766-101">Discovers the attributes of a property and provides access to property metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-102">Свойства логически совпадают с полями.</span><span class="sxs-lookup"><span data-stu-id="43766-102">Properties are logically the same as fields.</span></span> <span data-ttu-id="43766-103">Свойство — это именованный аспект состояния объекта, значение которого обычно доступно через `get` методы доступа и. `set`</span><span class="sxs-lookup"><span data-stu-id="43766-103">A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors.</span></span> <span data-ttu-id="43766-104">Свойства могут быть доступны только для чтения, в этом случае подпрограммы Set не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="43766-104">Properties may be read-only, in which case a set routine is not supported.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-105">`static`Чтобы определить, является ли свойство, необходимо <xref:System.Reflection.MethodInfo> получить метод для `get` метода доступа <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> или `set` , вызвав <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> метод или и изучите его <xref:System.Reflection.MethodBase.IsStatic%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="43766-105">To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.</span></span>  
  
 <span data-ttu-id="43766-106">В некоторых методах этого класса предполагается `get` , что `set` методы доступа и методов доступа свойства имеют определенные форматы.</span><span class="sxs-lookup"><span data-stu-id="43766-106">Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats.</span></span> <span data-ttu-id="43766-107">Сигнатуры `get` методов и `set` должны соответствовать следующему соглашению:</span><span class="sxs-lookup"><span data-stu-id="43766-107">The signatures of the `get` and `set` methods must match the following convention:</span></span>  
  
-   <span data-ttu-id="43766-108">Возвращаемый тип `get` метода и последний аргумент `set` метода должны быть идентичны.</span><span class="sxs-lookup"><span data-stu-id="43766-108">The return type of the `get` method and the last argument of the `set` method must be identical.</span></span> <span data-ttu-id="43766-109">Это тип свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-109">This is the type of the property.</span></span>  
  
-   <span data-ttu-id="43766-110">Методы `get` и`set` должны иметь одинаковое число, тип и порядок индексов.</span><span class="sxs-lookup"><span data-stu-id="43766-110">The `get` and `set` methods must have the same number, type, and order of indices.</span></span>  
  
 <span data-ttu-id="43766-111">Если этот формат не соблюдается, поведение `GetValue` методов и `SetValue` не определено.</span><span class="sxs-lookup"><span data-stu-id="43766-111">If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.</span></span>  
  
 <span data-ttu-id="43766-112">Вызов <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> метода `PropertyInfo` on, `inherit` Еслипараметр`GetCustomAttributes` метода не выполняетперебориерархиитипов.`true`</span><span class="sxs-lookup"><span data-stu-id="43766-112">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="43766-113">Используйте <xref:System.Attribute?displayProperty=nameWithType> для наследования настраиваемых атрибутов.</span><span class="sxs-lookup"><span data-stu-id="43766-113">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-114">В этом примере показано, как использовать различные классы отражения для анализа метаданных, содержащихся в сборке.</span><span class="sxs-lookup"><span data-stu-id="43766-114">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-115">В этом примере создается около 55 000 строк данных, которые можно перенаправить в текстовый файл из командной строки следующим образом: **example. exe > PropertyInfo. txt.**</span><span class="sxs-lookup"><span data-stu-id="43766-115">This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: **example.exe > propertyinfo.txt**</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="43766-116">Полный уровень доверия для разработчиков производных классов.</span><span class="sxs-lookup"><span data-stu-id="43766-116">for full trust for inheritors.</span></span> <span data-ttu-id="43766-117">Этот класс не может наследоваться частично доверенным кодом.</span><span class="sxs-lookup"><span data-stu-id="43766-117">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="43766-118">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="43766-118">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="43766-119">При наследовании из <see cref="T:System.Reflection.PropertyInfo" />необходимо переопределить следующие члены: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /> <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, и <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span><span class="sxs-lookup"><span data-stu-id="43766-119">When you inherit from <see cref="T:System.Reflection.PropertyInfo" />, you must override the following members: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, and <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyInfo ();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.#ctor" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyInfo();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-120">Инициализирует новый экземпляр класса <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="43766-120">Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-121">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-121">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-122">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-122">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.PropertyAttributes" Usage="System.Reflection.PropertyInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-123">Получает атрибуты данного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-123">Gets the attributes for this property.</span></span></summary>
        <value><span data-ttu-id="43766-124">Атрибуты данного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-124">The attributes of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-125">Свойство возвращает атрибуты, связанные со свойством, представленным этим <xref:System.Reflection.PropertyInfo> объектом. <xref:System.Reflection.PropertyInfo.Attributes%2A></span><span class="sxs-lookup"><span data-stu-id="43766-125">The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.</span></span>  <span data-ttu-id="43766-126">Атрибуты — это в первую очередь модификаторы, применяемые компилятором при создании свойства. они указывают, является ли свойство свойством по умолчанию `SpecialName` , свойством и т. д.</span><span class="sxs-lookup"><span data-stu-id="43766-126">The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on.</span></span> <span data-ttu-id="43766-127">Обратите внимание, что для почти всех свойств, обнаруженных в типах библиотеки классов .NET Framework, значением <xref:System.Reflection.PropertyInfo.Attributes%2A> свойства является. <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="43766-127">Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="43766-128">В большинстве случаев вы, вероятно, захотите получить настраиваемые атрибуты, связанные со свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-128">In most cases, you probably want to retrieve the custom attributes associated with a property.</span></span> <span data-ttu-id="43766-129">Для этого извлеките значение <xref:System.Reflection.MemberInfo.CustomAttributes%2A> свойства или вызовите одну из перегрузок <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="43766-129">To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span>  
  
 <span data-ttu-id="43766-130">Чтобы получить свойство <xref:System.Reflection.PropertyInfo.Attributes%2A> , сделайте следующее:</span><span class="sxs-lookup"><span data-stu-id="43766-130">To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:</span></span>  
  
1.  <span data-ttu-id="43766-131"><xref:System.Type> Возвращает объект, представляющий тип, которому принадлежит свойство.</span><span class="sxs-lookup"><span data-stu-id="43766-131">Get a <xref:System.Type> object that represents the type to which the property belongs.</span></span>  
  
2.  <span data-ttu-id="43766-132">Получите объект, вызвав перегрузку <xref:System.Type.GetProperty%2A?displayProperty=nameWithType>метода. <xref:System.Reflection.PropertyInfo></span><span class="sxs-lookup"><span data-stu-id="43766-132">Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method.</span></span>  
  
3.  <span data-ttu-id="43766-133">Извлеките атрибуты свойства из <xref:System.Reflection.PropertyInfo.Attributes%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-133">Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.</span></span>  
  
 <span data-ttu-id="43766-134">Можно определить атрибуты свойства для типа, созданного динамически с помощью отражательной эмиссии, вызвав перегрузку <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> метода и указав значение `attributes` для аргумента.</span><span class="sxs-lookup"><span data-stu-id="43766-134">You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MemberInfo.CustomAttributes" />
        <altmember cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Reflection.PropertyInfo.CanRead" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanRead</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-135">Получает значение, указывающее, можно ли выполнить считывание данного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-135">Gets a value indicating whether the property can be read.</span></span></summary>
        <value><span data-ttu-id="43766-136">Значение <see langword="true" />, если свойство доступно для чтения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-136"><see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-137">Если свойство не имеет `get` метода доступа, его нельзя считать.</span><span class="sxs-lookup"><span data-stu-id="43766-137">If the property does not have a `get` accessor, it cannot be read.</span></span>  
  
 <span data-ttu-id="43766-138">Чтобы получить `CanRead` свойство, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-138">To get the `CanRead` property, first get the class `Type`.</span></span> <span data-ttu-id="43766-139">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-139">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-140">`PropertyInfo` В`CanRead` получите значение.</span><span class="sxs-lookup"><span data-stu-id="43766-140">From the `PropertyInfo`, get the `CanRead` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-141">В следующем примере определяются два свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-141">The following example defines two properties.</span></span> <span data-ttu-id="43766-142">Первое свойство доступно для чтения, а `CanRead` свойство — `true`.</span><span class="sxs-lookup"><span data-stu-id="43766-142">The first property is readable and the `CanRead` property is `true`.</span></span> <span data-ttu-id="43766-143">Второе свойство недоступно для чтения (отсутствует метод доступа get), а `CanRead` свойство имеет `false`значение.</span><span class="sxs-lookup"><span data-stu-id="43766-143">The second property is not readable (there is no get accessor), and the `CanRead` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Reflection.PropertyInfo.CanWrite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanWrite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-144">Получает значение, указывающее, можно ли производить запись в данное свойство.</span><span class="sxs-lookup"><span data-stu-id="43766-144">Gets a value indicating whether the property can be written to.</span></span></summary>
        <value><span data-ttu-id="43766-145">Значение <see langword="true" />, если свойство доступно для записи; в обратном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-145"><see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A>Возвращает `true` , если свойство `set` имеет метод доступа, даже `internal` если метод доступа имеет `private`значение (или `Friend` в Visual Basic) или `protected`.</span><span class="sxs-lookup"><span data-stu-id="43766-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.</span></span>   <span data-ttu-id="43766-147">Если свойство не имеет `set` метода доступа, метод возвращает `false`значение.</span><span class="sxs-lookup"><span data-stu-id="43766-147">If the property does not have a `set` accessor, the method returns `false`.</span></span>  
  
 <span data-ttu-id="43766-148">Чтобы получить значение свойства, <xref:System.Reflection.PropertyInfo.CanWrite%2A> сделайте следующее:</span><span class="sxs-lookup"><span data-stu-id="43766-148">To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:</span></span>  
  
1.  <span data-ttu-id="43766-149"><xref:System.Type> Возвращает объект типа, включающий свойство.</span><span class="sxs-lookup"><span data-stu-id="43766-149">Get the <xref:System.Type> object of the type that includes the property.</span></span>  
  
2.  <span data-ttu-id="43766-150">Вызовите метод, <xref:System.Reflection.PropertyInfo> чтобыполучитьобъект,представляющийсвойство.<xref:System.Type.GetProperty%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="43766-150">Call the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.</span></span>  
  
3.  <span data-ttu-id="43766-151">Получение значения <xref:System.Reflection.PropertyInfo.CanWrite%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-151">Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-152">В следующем примере определяются два свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-152">The following example defines two properties.</span></span> <span data-ttu-id="43766-153">Первое свойство доступно для записи, а `CanWrite` свойство — `true`.</span><span class="sxs-lookup"><span data-stu-id="43766-153">The first property is writable and the `CanWrite` property is `true`.</span></span> <span data-ttu-id="43766-154">Второе свойство недоступно для записи ( `set` отсутствует метод доступа), `CanWrite` а свойство имеет `false`значение.</span><span class="sxs-lookup"><span data-stu-id="43766-154">The second property is not writable (there is no `set` accessor), and the `CanWrite` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="propertyInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-155">Объект, сравниваемый с этим экземпляром, или значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-155">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43766-156">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</span><span class="sxs-lookup"><span data-stu-id="43766-156">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="43766-157"><see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-157"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessors">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43766-158">Возвращает массив методов доступа <see langword="get" /> и <see langword="set" /> этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-158">Returns an array of the <see langword="get" /> and <see langword="set" /> accessors on this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetAccessors : unit -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors " FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetAccessors : unit -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-159">Возвращает массив, элементы которого отражают открытые методы <see langword="get" /> и <see langword="set" /> доступа к свойству, отражаемому текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="43766-159">Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span></summary>
        <returns><span data-ttu-id="43766-160">Массив объектов <see cref="T:System.Reflection.MethodInfo" />, которые отражают открытые методы <see langword="get" /> и <see langword="set" /> доступа к свойству, отображаемому текущим экземпляром, если эти методы существуют. В противном случае этот метод возвращает массив с нулевым (0) числом элементов.</span><span class="sxs-lookup"><span data-stu-id="43766-160">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-161">Для вызова <xref:System.Reflection.PropertyInfo.GetAccessors%2A> метода:</span><span class="sxs-lookup"><span data-stu-id="43766-161">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="43766-162"><xref:System.Type> Получите объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="43766-162">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="43766-163"><xref:System.Type> Из объекта<xref:System.Reflection.PropertyInfo> получите объект.</span><span class="sxs-lookup"><span data-stu-id="43766-163">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="43766-164">Из объекта вызовите <xref:System.Reflection.PropertyInfo.GetAccessors%2A>метод. <xref:System.Reflection.PropertyInfo></span><span class="sxs-lookup"><span data-stu-id="43766-164">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-165">В следующем примере извлекаются открытые методы доступа `ClassWithProperty.Caption` свойства и отображаются сведения о них.</span><span class="sxs-lookup"><span data-stu-id="43766-165">The following example retrieves the public accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="43766-166">Он также вызывает <xref:System.Reflection.MethodBase.Invoke%2A> метод метода задания, чтобы задать значение свойства и метода получения, чтобы получить значение свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-166">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/cs/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-167">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-167">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-168">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-168">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : bool -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="43766-169">Указывает, должны ли возвращаться неоткрытые методы в возвращаемый массив.</span><span class="sxs-lookup"><span data-stu-id="43766-169">Indicates whether non-public methods should be returned in the returned array.</span></span> <span data-ttu-id="43766-170"><see langword="true" />, если неоткрытые методы должны быть включены; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-170"><see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43766-171">Возвращает массив, элементы которого отражают открытые и, если задано, неоткрытые методы доступа <see langword="get" /> и <see langword="set" /> к свойству, отражаемому текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="43766-171">Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span></summary>
        <returns><span data-ttu-id="43766-172">Массив, элементы которого отражают методы доступа <see langword="get" /> и <see langword="set" /> к свойству, отражаемому текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="43766-172">An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span> <span data-ttu-id="43766-173">Если свойство <paramref name="nonPublic" /> имеет значение <see langword="true" />, этот массив содержит открытые и неоткрытые методы доступа <see langword="get" /> и <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="43766-173">If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors.</span></span> <span data-ttu-id="43766-174">Если свойство <paramref name="nonPublic" /> имеет значение <see langword="false" />, этот массив содержит только открытые методы доступа <see langword="get" /> и <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="43766-174">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors.</span></span> <span data-ttu-id="43766-175">Если методы доступа с указанным статусом видимости не найдены, этот метод возвращает массив с нулевым (0) числом элементов.</span><span class="sxs-lookup"><span data-stu-id="43766-175">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-176">Для вызова <xref:System.Reflection.PropertyInfo.GetAccessors%2A> метода:</span><span class="sxs-lookup"><span data-stu-id="43766-176">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="43766-177"><xref:System.Type> Получите объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="43766-177">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="43766-178"><xref:System.Type> Из объекта<xref:System.Reflection.PropertyInfo> получите объект.</span><span class="sxs-lookup"><span data-stu-id="43766-178">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="43766-179">Из объекта вызовите <xref:System.Reflection.PropertyInfo.GetAccessors%2A>метод. <xref:System.Reflection.PropertyInfo></span><span class="sxs-lookup"><span data-stu-id="43766-179">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-180">В следующем примере извлекаются методы доступа `ClassWithProperty.Caption` свойства и отображаются сведения о них.</span><span class="sxs-lookup"><span data-stu-id="43766-180">The following example retrieves the accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="43766-181">Он также вызывает <xref:System.Reflection.MethodBase.Invoke%2A> метод метода задания, чтобы задать значение свойства и метода получения, чтобы получить значение свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-181">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-182">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-182">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-183">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-183">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetConstantValue : unit -&gt; obj&#xA;override this.GetConstantValue : unit -&gt; obj" Usage="propertyInfo.GetConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-184">Метод возвращает значение-литерал, связанное с этим свойством компилятором.</span><span class="sxs-lookup"><span data-stu-id="43766-184">Returns a literal value associated with the property by a compiler.</span></span></summary>
        <returns><span data-ttu-id="43766-185">Объект <see cref="T:System.Object" />, содержащий значение-литерал, сопоставленное данному свойству.</span><span class="sxs-lookup"><span data-stu-id="43766-185">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span></span> <span data-ttu-id="43766-186">Если значение литерала является типом класса и при этом значение элемента равно нулю, возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-186">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-187">Этот метод предоставляется для конструкторов управляемых компиляторов и анализаторов кода.</span><span class="sxs-lookup"><span data-stu-id="43766-187">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-188">Не используйте этот метод в контексте, предназначенном только для отражения, так как это может привести к выполнению кода.</span><span class="sxs-lookup"><span data-stu-id="43766-188">Do not use this method in the reflection-only context, because it might cause code to execute.</span></span> <span data-ttu-id="43766-189">Вместо этого рекомендуется использовать метод <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="43766-189">Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.</span></span>  
  
 <span data-ttu-id="43766-190">В неуправляемых метаданных таблица констант используется для хранения постоянных значений полей, параметров и свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="43766-191">Постоянная информация не влияет непосредственно на поведение во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="43766-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="43766-192">Компиляторы проверяют эти сведения во время компиляции при импорте метаданных.</span><span class="sxs-lookup"><span data-stu-id="43766-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="43766-193">При использовании значение константы внедряется в поток промежуточного языка MSIL, выдаваемый компилятором.</span><span class="sxs-lookup"><span data-stu-id="43766-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="43766-194">Инструкции MSIL, которые можно использовать для доступа к таблице констант во время выполнения, отсутствуют.</span><span class="sxs-lookup"><span data-stu-id="43766-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-195">Дополнительные сведения о константных значениях и таблице констант см. в документации по ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="43766-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="43766-196">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="43766-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="43766-197">Таблица констант в неуправляемых метаданных не содержит значение константы для текущего свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-197">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="43766-198">Тип значения не является одним из типов, разрешенных спецификацией CLS.</span><span class="sxs-lookup"><span data-stu-id="43766-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="43766-199">Более подробные сведения о форматировании см. в спецификации метаданных ECMA, часть II.</span><span class="sxs-lookup"><span data-stu-id="43766-199">See the ECMA Partition II specification, Metadata.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43766-200">Возвращает элемент <see langword="MethodInfo" />, предоставляющий метод доступа <see langword="get" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-200">Returns a <see langword="MethodInfo" /> representing the <see langword="get" /> accessor for this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetGetMethod() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetGetMethod();" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetGetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod " FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetGetMethod();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetGetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-201">Возвращает открытый метод доступа <see langword="get" /> для данного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-201">Returns the public <see langword="get" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="43766-202">Объект <see langword="MethodInfo" />, предоставляющий открытый метод доступа <see langword="get" /> для этого свойства, или значение <see langword="null" />, если метод доступа <see langword="get" /> не является открытым либо не существует.</span><span class="sxs-lookup"><span data-stu-id="43766-202">A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-203">Это удобный метод, который предоставляет реализацию для абстрактного `GetGetMethod` метода с параметром, для `false`которого `nonPublic` задано значение.</span><span class="sxs-lookup"><span data-stu-id="43766-203">This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="43766-204">Чтобы использовать `GetGetMethod` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-204">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-205">`Type` В<xref:System.Reflection.PropertyInfo>получите.</span><span class="sxs-lookup"><span data-stu-id="43766-205">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="43766-206"><xref:System.Reflection.PropertyInfo> В`GetGetMethod` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-206">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-207">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-208">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="43766-209">Указывает, должен ли возвращаться неоткрытый метод доступа <see langword="get" />.</span><span class="sxs-lookup"><span data-stu-id="43766-209">Indicates whether a non-public <see langword="get" /> accessor should be returned.</span></span> <span data-ttu-id="43766-210">Значение <see langword="true" />, если метод должен быть возвращен; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-210"><see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43766-211">При переопределении в производном классе возвращает для этого свойства открытый или неоткрытый метод доступа <see langword="get" />.</span><span class="sxs-lookup"><span data-stu-id="43766-211">When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="43766-212">Объект <see langword="MethodInfo" />, предоставляющий метод доступа <see langword="get" /> для этого свойства, если значение <paramref name="nonPublic" /> равно <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="43766-212">A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span></span> <span data-ttu-id="43766-213">Возвращает значение <see langword="null" />, если <paramref name="nonPublic" /> равен <see langword="false" /> и метод <see langword="get" /> не является открытым, либо если свойство <paramref name="nonPublic" /> равно <see langword="true" /> и методы <see langword="get" /> отсутствуют.</span><span class="sxs-lookup"><span data-stu-id="43766-213">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-214">Это свойство <xref:System.Reflection.MethodInfo> представляет метод доступа get.</span><span class="sxs-lookup"><span data-stu-id="43766-214">This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.</span></span>  
  
 <span data-ttu-id="43766-215">Чтобы использовать `GetGetMethod` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-215">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-216">`Type` В<xref:System.Reflection.PropertyInfo>получите.</span><span class="sxs-lookup"><span data-stu-id="43766-216">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="43766-217"><xref:System.Reflection.PropertyInfo> В`GetGetMethod` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-217">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-218">В следующем примере выводится открытый или не открытый `get` метод доступа для указанного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-218">The following example displays the public or non-public `get` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="43766-219">Запрошенный метод не является открытым, и вызывающая сторона не имеет <see cref="T:System.Security.Permissions.ReflectionPermission" /> для отражения в этом методе.</span><span class="sxs-lookup"><span data-stu-id="43766-219">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-220">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-220">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-221">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-221">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="propertyInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-222">Возвращает хэш-код данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="43766-222">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="43766-223">Хэш-код в виде 32-разрядного целого числа со знаком.</span><span class="sxs-lookup"><span data-stu-id="43766-223">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetIndexParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="propertyInfo.GetIndexParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-224">При переопределении в производном классе возвращает для этого свойства массив всех параметров индекса.</span><span class="sxs-lookup"><span data-stu-id="43766-224">When overridden in a derived class, returns an array of all the index parameters for the property.</span></span></summary>
        <returns><span data-ttu-id="43766-225">Массив элементов типа <see langword="ParameterInfo" /> , содержащий параметры для индексов.</span><span class="sxs-lookup"><span data-stu-id="43766-225">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span></span> <span data-ttu-id="43766-226">Если свойство не индексировано, массив содержит 0 (ноль) элементов.</span><span class="sxs-lookup"><span data-stu-id="43766-226">If the property is not indexed, the array has 0 (zero) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-227">Извлеките все необходимые сведения о параметрах из возвращаемого массива.</span><span class="sxs-lookup"><span data-stu-id="43766-227">Extract any required parameter information from the returned array.</span></span>  
  
 <span data-ttu-id="43766-228">Чтобы использовать `GetIndexParameters` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-228">To use the `GetIndexParameters` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-229">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-229">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-230">`PropertyInfo` В`GetIndexParameters` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-230">From the `PropertyInfo`, use the `GetIndexParameters` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-231">В следующем примере выводятся параметры индекса указанного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-231">The following example displays the index parameters of the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-232">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-233">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo GetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.GetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ GetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.GetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-234">Получает метод доступа <see langword="get" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-234">Gets the <see langword="get" /> accessor for this property.</span></span></summary>
        <value><span data-ttu-id="43766-235">Метод доступа <see langword="get" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-235">The <see langword="get" /> accessor for this property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetOptionalCustomModifiers : unit -&gt; Type[]&#xA;override this.GetOptionalCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetOptionalCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-236">Возвращает массив типов, представляющих необязательные настраиваемые модификаторы для свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-236">Returns an array of types representing the optional custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="43766-237">Массив объектов <see cref="T:System.Type" />, которые указывают дополнительные настраиваемые модификаторы для текущего свойства, такие как <see cref="T:System.Runtime.CompilerServices.IsConst" /> или <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="43766-237">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-238">Методы <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> и<xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> предоставляются для конструкторов управляемых компиляторов.</span><span class="sxs-lookup"><span data-stu-id="43766-238">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="43766-239">Дополнительные сведения о пользовательских модификаторах см. в <xref:System.Runtime.CompilerServices.IsBoxed> разделах и связанных классах <xref:System.Runtime.CompilerServices> в пространстве имен и спецификации метаданных в документации по ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="43766-239">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="43766-240">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="43766-240">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetRawConstantValue : unit -&gt; obj&#xA;override this.GetRawConstantValue : unit -&gt; obj" Usage="propertyInfo.GetRawConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-241">Метод возвращает значение-литерал, связанное с этим свойством компилятором.</span><span class="sxs-lookup"><span data-stu-id="43766-241">Returns a literal value associated with the property by a compiler.</span></span></summary>
        <returns><span data-ttu-id="43766-242">Объект <see cref="T:System.Object" />, содержащий значение-литерал, сопоставленное данному свойству.</span><span class="sxs-lookup"><span data-stu-id="43766-242">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span></span> <span data-ttu-id="43766-243">Если значение литерала является типом класса и при этом значение элемента равно нулю, возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-243">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-244">Этот метод предоставляется для конструкторов управляемых компиляторов и анализаторов кода.</span><span class="sxs-lookup"><span data-stu-id="43766-244">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="43766-245">Этот метод можно использовать как в контексте выполнения, так и в контексте только для отражения.</span><span class="sxs-lookup"><span data-stu-id="43766-245">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="43766-246">В неуправляемых метаданных таблица констант используется для хранения постоянных значений полей, параметров и свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-246">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="43766-247">Постоянная информация не влияет непосредственно на поведение во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="43766-247">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="43766-248">Компиляторы проверяют эти сведения во время компиляции при импорте метаданных.</span><span class="sxs-lookup"><span data-stu-id="43766-248">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="43766-249">При использовании значение константы внедряется в поток промежуточного языка MSIL, выдаваемый компилятором.</span><span class="sxs-lookup"><span data-stu-id="43766-249">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="43766-250">Инструкции MSIL, которые можно использовать для доступа к таблице констант во время выполнения, отсутствуют.</span><span class="sxs-lookup"><span data-stu-id="43766-250">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-251">Дополнительные сведения о константных значениях и таблице констант см. в документации по ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="43766-251">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="43766-252">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="43766-252">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="43766-253">Таблица констант в неуправляемых метаданных не содержит значение константы для текущего свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-253">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="43766-254">Тип значения не является одним из типов, разрешенных спецификацией CLS.</span><span class="sxs-lookup"><span data-stu-id="43766-254">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="43766-255">См. спецификацию раздела II документации по ECMA "Логический формат метаданных: другие структуры, типы элементов, используемые в подписях".</span><span class="sxs-lookup"><span data-stu-id="43766-255">See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredCustomModifiers : unit -&gt; Type[]&#xA;override this.GetRequiredCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetRequiredCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-256">Возвращает массив типов, представляющих обязательные настраиваемые модификаторы для свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-256">Returns an array of types representing the required custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="43766-257">Массив объектов <see cref="T:System.Type" />, которые указывают обязательные настраиваемые модификаторы для текущего свойства, например <see cref="T:System.Runtime.CompilerServices.IsConst" /> или <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="43766-257">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-258">Методы <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> и<xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> предоставляются для конструкторов управляемых компиляторов.</span><span class="sxs-lookup"><span data-stu-id="43766-258">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="43766-259">Дополнительные сведения о пользовательских модификаторах см. в <xref:System.Runtime.CompilerServices.IsBoxed> разделах и связанных классах <xref:System.Runtime.CompilerServices> в пространстве имен и спецификации метаданных в документации по ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="43766-259">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="43766-260">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="43766-260">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43766-261">Возвращает элемент <see cref="T:System.Reflection.MethodInfo" />, предоставляющий метод доступа <see langword="set" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-261">Returns a <see cref="T:System.Reflection.MethodInfo" /> representing the <see langword="set" /> accessor for this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetSetMethod() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetSetMethod();" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetSetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod " FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetSetMethod();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetSetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-262">Возвращает открытый метод доступа <see langword="set" /> для данного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-262">Returns the public <see langword="set" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="43766-263">Объект <see langword="MethodInfo" />, представляющий метод <see langword="Set" /> для этого свойства, если метод доступа <see langword="set" /> является открытым, или значение <see langword="null" />, если метод <see langword="set" /> не является открытым.</span><span class="sxs-lookup"><span data-stu-id="43766-263">The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-264">Это удобный метод, который предоставляет реализацию для абстрактного `GetSetMethod` метода с параметром, для `false`которого `nonPublic` задано значение.</span><span class="sxs-lookup"><span data-stu-id="43766-264">This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="43766-265">Чтобы использовать `GetSetMethod` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-265">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-266">`Type` В<xref:System.Reflection.PropertyInfo>получите.</span><span class="sxs-lookup"><span data-stu-id="43766-266">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="43766-267">`PropertyInfo` В`GetSetMethod` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-267">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-268">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-268">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-269">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-269">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="43766-270">Указывает, должен ли возвращаться метод доступа, если он не является открытым.</span><span class="sxs-lookup"><span data-stu-id="43766-270">Indicates whether the accessor should be returned if it is non-public.</span></span> <span data-ttu-id="43766-271">Значение <see langword="true" />, если метод должен быть возвращен; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-271"><see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43766-272">При переопределении в производном классе возвращает для этого свойства метод доступа <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="43766-272">When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="43766-273">Метод свойства <see langword="Set" /> или <see langword="null" />, как показано в следующей таблице.</span><span class="sxs-lookup"><span data-stu-id="43766-273">This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="43766-274">Значение</span><span class="sxs-lookup"><span data-stu-id="43766-274">Value</span></span> 
 </term><description> <span data-ttu-id="43766-275">Условие</span><span class="sxs-lookup"><span data-stu-id="43766-275">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="43766-276">Метод <see langword="Set" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-276">The <see langword="Set" /> method for this property.</span></span>  
  
 </term><description> <span data-ttu-id="43766-277">Метод доступа <see langword="set" /> является открытым.</span><span class="sxs-lookup"><span data-stu-id="43766-277">The <see langword="set" /> accessor is public.</span></span>  
  
<span data-ttu-id="43766-278">- или -</span><span class="sxs-lookup"><span data-stu-id="43766-278">-or-</span></span> 
 <span data-ttu-id="43766-279">Параметр <paramref name="nonPublic" /> имеет значение <see langword="true" />, и метод доступа <see langword="set" /> не является открытым.</span><span class="sxs-lookup"><span data-stu-id="43766-279"><paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
 </description></item><item><term><see langword="null" /></term><description><span data-ttu-id="43766-280">Параметр <paramref name="nonPublic" /> имеет значение <see langword="true" />, но свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="43766-280"><paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.</span></span>  
  
<span data-ttu-id="43766-281">- или -</span><span class="sxs-lookup"><span data-stu-id="43766-281">-or-</span></span> 
 <span data-ttu-id="43766-282">Параметр <paramref name="nonPublic" /> имеет значение <see langword="false" />, и метод доступа <see langword="set" /> не является открытым.</span><span class="sxs-lookup"><span data-stu-id="43766-282"><paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
<span data-ttu-id="43766-283">-или-</span><span class="sxs-lookup"><span data-stu-id="43766-283">-or-</span></span> 
<span data-ttu-id="43766-284">Метод доступа <see langword="set" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="43766-284">There is no <see langword="set" /> accessor.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-285">Чтобы использовать `GetSetMethod` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-285">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-286">`Type` В<xref:System.Reflection.PropertyInfo>получите.</span><span class="sxs-lookup"><span data-stu-id="43766-286">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="43766-287">`PropertyInfo` В`GetSetMethod` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-287">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-288">В следующем примере показан `set` метод доступа для указанного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-288">The following example displays the `set` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="43766-289">Запрошенный метод не является открытым, и вызывающая сторона не имеет <see cref="T:System.Security.Permissions.ReflectionPermission" /> для отражения в этом методе.</span><span class="sxs-lookup"><span data-stu-id="43766-289">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-290">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-290">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-291">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-291">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="propertyInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43766-292">Возвращает значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-292">Returns the property value of a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.GetValue : obj -&gt; obj" Usage="propertyInfo.GetValue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-293">Объект, свойство которого будет возвращено.</span><span class="sxs-lookup"><span data-stu-id="43766-293">The object whose property value will be returned.</span></span></param>
        <summary><span data-ttu-id="43766-294">Возвращает значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-294">Returns the property value of a specified object.</span></span></summary>
        <returns><span data-ttu-id="43766-295">Значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-295">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-296">Для получения значения <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> неиндексированного свойства вызывается перегрузка. при попытке получить значение индексированного свойства метод <xref:System.Reflection.TargetParameterCountException> создает исключение.</span><span class="sxs-lookup"><span data-stu-id="43766-296">You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception.</span></span> <span data-ttu-id="43766-297">Можно определить, индексируется ли свойство, или нет, вызвав <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-297">You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="43766-298">Если длина возвращаемого <xref:System.Reflection.ParameterInfo> массива равна нулю, свойство не индексируется.</span><span class="sxs-lookup"><span data-stu-id="43766-298">If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.</span></span>  
  
 <span data-ttu-id="43766-299">Это удобный метод, который предоставляет реализацию для абстрактного <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> метода <xref:System.Reflection.BindingFlags> `null` <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, для параметра которого задано значение, для <xref:System.Reflection.Binder> которого задано значение, массив объектов значений индекса, установленный в `null`значение, и задайте для `null`значение. <xref:System.Globalization.CultureInfo></span><span class="sxs-lookup"><span data-stu-id="43766-299">This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-300">В следующем примере определяется `Planet` класс, имеющий два свойства: `Name`, имя планеты и `Distance`расстояние от земли.</span><span class="sxs-lookup"><span data-stu-id="43766-300">The following example defines a `Planet` class that has two properties: `Name`, the name of the planet; and `Distance`, the planet's distance from Earth.</span></span> <span data-ttu-id="43766-301">В примере создается `Planet` экземпляр объекта, который представляет Планета Юпитер, и передает его `GetPropertyValues` в метод, который отображает сведения о свойствах и использует <xref:System.Reflection.PropertyInfo.GetValue%2A> метод для получения значения каждого `Planet` свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-301">The example instantiates a `Planet` object that represents the planet Jupiter and passes it to a `GetPropertyValues` method that displays information about the properties and uses the <xref:System.Reflection.PropertyInfo.GetValue%2A> method to get the value of each `Planet` property.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * obj[] -&gt; obj&#xA;override this.GetValue : obj * obj[] -&gt; obj" Usage="propertyInfo.GetValue (obj, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-302">Объект, свойство которого будет возвращено.</span><span class="sxs-lookup"><span data-stu-id="43766-302">The object whose property value will be returned.</span></span></param>
        <param name="index"><span data-ttu-id="43766-303">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-303">Optional index values for indexed properties.</span></span> <span data-ttu-id="43766-304">Индексы индексированных свойств отсчитываются от нуля.</span><span class="sxs-lookup"><span data-stu-id="43766-304">The indexes of indexed properties are zero-based.</span></span> <span data-ttu-id="43766-305">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-305">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="43766-306">Возвращает значение свойства заданного объекта с дополнительными значениями индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-306">Returns the property value of a specified object with optional index values for indexed properties.</span></span></summary>
        <returns><span data-ttu-id="43766-307">Значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-307">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-308">Чтобы определить, индексируется ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-308">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="43766-309">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируется.</span><span class="sxs-lookup"><span data-stu-id="43766-309">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="43766-310">Это удобный метод, `GetValue` предоставляющий реализацию для абстрактного метода `BindingFlags` с параметром `Default`, для `null` `null`которого `Binder` задано значение, а `CultureInfo` для — значение.</span><span class="sxs-lookup"><span data-stu-id="43766-310">This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.</span></span>  
  
 <span data-ttu-id="43766-311">Поскольку статические свойства принадлежат к типу, а не к отдельным объектам, получение статических свойств `null` осуществляется путем передачи в качестве аргумента объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-311">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="43766-312">Например, используйте следующий код для получения статического `CurrentCulture` `CultureInfo` свойства:</span><span class="sxs-lookup"><span data-stu-id="43766-312">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
    (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
    CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="43766-313">Чтобы использовать `GetValue` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-313">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-314">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-314">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-315">`PropertyInfo` В`GetValue` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-315">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-316">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к не являющимся открытыми членам, если вызывающей стороне был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор прав, не являющихся открытыми, ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="43766-316">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="43766-317">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="43766-317">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="43766-318">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="43766-318">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-319">В следующем примере показано, как получить значение индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-319">The following example shows how to get the value of an indexed property.</span></span> <span data-ttu-id="43766-320">Свойство является свойством по умолчанию (индексатором в C#) <xref:System.String> класса. <xref:System.String.Chars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="43766-320">The <xref:System.String.Chars%2A?displayProperty=nameWithType> property is the default property (the indexer in C#) of the <xref:System.String> class.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43766-321">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="43766-321">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="43766-322">-или-</span><span class="sxs-lookup"><span data-stu-id="43766-322">-or-</span></span> 
<span data-ttu-id="43766-323">Не найден метод доступа <see langword="get" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-323">The property's <see langword="get" /> accessor is not found.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="43766-324">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="43766-324">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="43766-325">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-325">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="43766-326">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-326">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="43766-327">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="43766-327">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="43766-328">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="43766-328">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="43766-329">Ошибка при получении значения свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-329">An error occurred while retrieving the property value.</span></span> <span data-ttu-id="43766-330">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="43766-330">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="43766-331">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="43766-331">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-332">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-332">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-333">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="propertyInfo.GetValue (obj, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Object[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-334">Объект, свойство которого будет возвращено.</span><span class="sxs-lookup"><span data-stu-id="43766-334">The object whose property value will be returned.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="43766-335">Битовая комбинация следующих членов перечисления, определяющих атрибут вызова: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> и <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="43766-335">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />.</span></span> <span data-ttu-id="43766-336">Необходимо указать подходящий атрибут вызова.</span><span class="sxs-lookup"><span data-stu-id="43766-336">You must specify a suitable invocation attribute.</span></span> <span data-ttu-id="43766-337">Например, чтобы вызвать статический член, установите флаг <see langword="Static" />.</span><span class="sxs-lookup"><span data-stu-id="43766-337">For example, to invoke a static member, set the <see langword="Static" /> flag.</span></span></param>
        <param name="binder"><span data-ttu-id="43766-338">Объект, который допускает привязку, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения.</span><span class="sxs-lookup"><span data-stu-id="43766-338">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="43766-339">Если значение параметра <paramref name="binder" /> равно <see langword="null" />, используется связыватель по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="43766-339">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="43766-340">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-340">Optional index values for indexed properties.</span></span> <span data-ttu-id="43766-341">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-341">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="43766-342">Язык и региональные параметры, для которых должен быть локализован данный ресурс.</span><span class="sxs-lookup"><span data-stu-id="43766-342">The culture for which the resource is to be localized.</span></span> <span data-ttu-id="43766-343">Если ресурс не локализован для данного языка и региональных параметров, при поиске соответствия будет последовательно вызываться свойство <see cref="P:System.Globalization.CultureInfo.Parent" />.</span><span class="sxs-lookup"><span data-stu-id="43766-343">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span></span> <span data-ttu-id="43766-344">Если это значение равно <see langword="null" />, из свойства <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> получаются сведения, относящиеся к конкретному языку и региональным параметрам.</span><span class="sxs-lookup"><span data-stu-id="43766-344">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="43766-345">При переопределении в производном классе возвращает значение свойства заданного объекта, имеющего указанные сведения о привязке, индексе и языке и региональных параметрах.</span><span class="sxs-lookup"><span data-stu-id="43766-345">When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</span></span></summary>
        <returns><span data-ttu-id="43766-346">Значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-346">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-347">Чтобы определить, индексируется ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-347">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="43766-348">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируется.</span><span class="sxs-lookup"><span data-stu-id="43766-348">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="43766-349">Поскольку статические свойства принадлежат к типу, а не к отдельным объектам, получение статических свойств `null` осуществляется путем передачи в качестве аргумента объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-349">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="43766-350">Например, используйте следующий код для получения статического `CurrentCulture` `CultureInfo` свойства:</span><span class="sxs-lookup"><span data-stu-id="43766-350">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
       (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
       CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="43766-351">Чтобы использовать `GetValue` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-351">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-352">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-352">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-353">`PropertyInfo` В`GetValue` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-353">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-354">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к не являющимся открытыми членам, если вызывающей стороне был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор прав, не являющихся открытыми, ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="43766-354">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="43766-355">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="43766-355">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="43766-356">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="43766-356">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43766-357">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="43766-357">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="43766-358">- или -</span><span class="sxs-lookup"><span data-stu-id="43766-358">-or-</span></span> 
<span data-ttu-id="43766-359">Не найден метод доступа <see langword="get" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-359">The property's <see langword="get" /> accessor is not found.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="43766-360">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-360">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="43766-361">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-361">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="43766-362">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="43766-362">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="43766-363">Ошибка при получении значения свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-363">An error occurred while retrieving the property value.</span></span> <span data-ttu-id="43766-364">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="43766-364">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="43766-365">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="43766-365">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-366">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-366">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-367">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-367">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-368">Возвращает значение, указывающее, является ли свойство специальным именем.</span><span class="sxs-lookup"><span data-stu-id="43766-368">Gets a value indicating whether the property is the special name.</span></span></summary>
        <value><span data-ttu-id="43766-369">Значение <see langword="true" />, если свойство является специальным именем; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-369"><see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-370">`SpecialName` Бит устанавливается для флагов элементов, которые обрабатываются особым образом некоторыми компиляторами (например, методы доступа к свойствам и перегрузки операторов).</span><span class="sxs-lookup"><span data-stu-id="43766-370">The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
 <span data-ttu-id="43766-371">Чтобы получить `IsSpecialName` свойство, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-371">To get the `IsSpecialName` property, first get the class `Type`.</span></span> <span data-ttu-id="43766-372">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-372">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-373">`PropertyInfo` В`IsSpecialName` получите значение.</span><span class="sxs-lookup"><span data-stu-id="43766-373">From the `PropertyInfo`, get the `IsSpecialName` value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.PropertyInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-374">Возвращает значение <see cref="T:System.Reflection.MemberTypes" />, указывающее, что этот член является свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-374">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span></span></summary>
        <value><span data-ttu-id="43766-375">Значение <see cref="T:System.Reflection.MemberTypes" />, указывающее, что этот член является свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-375">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-376">Это свойство переопределяет <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="43766-376">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="43766-377">Поэтому при <xref:System.Reflection.MemberInfo> изучении набора объектов, например, массив, возвращаемый методом <xref:System.Type.GetMembers%2A> <xref:System.Reflection.MemberInfo.MemberType%2A> , возвращает <xref:System.Reflection.MemberTypes.Property> значение, только если данный элемент является свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-377">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.</span></span>  
  
 <span data-ttu-id="43766-378">`MemberType`является производным классом `MemberInfo` класса и указывает тип члена.</span><span class="sxs-lookup"><span data-stu-id="43766-378">`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is.</span></span> <span data-ttu-id="43766-379">Типы элементов — это конструкторы, свойства, поля и методы.</span><span class="sxs-lookup"><span data-stu-id="43766-379">Member types are constructors, properties, fields, and methods.</span></span> <span data-ttu-id="43766-380">Так как это `PropertyInfo` свойство, возвращаемый тип является свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-380">Since this is a `PropertyInfo` property, the returned type is a property.</span></span>  
  
 <span data-ttu-id="43766-381">Чтобы получить `MemberType` свойство, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-381">To get the `MemberType` property, first get the class `Type`.</span></span> <span data-ttu-id="43766-382">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-382">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-383">`PropertyInfo` В`MemberType` получите значение.</span><span class="sxs-lookup"><span data-stu-id="43766-383">From the `PropertyInfo`, get the `MemberType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-384">В следующем примере показан тип указанного элемента.</span><span class="sxs-lookup"><span data-stu-id="43766-384">The following example displays the type of the specified member.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="43766-385">Первый из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="43766-385">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="43766-386">Второй из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="43766-386">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="43766-387">Определение равенства двух объектов <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="43766-387">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="43766-388"><see langword="true" />, если значения параметров <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-388"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="System.Reflection.PropertyInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="43766-389">Первый из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="43766-389">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="43766-390">Второй из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="43766-390">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="43766-391">Определяет неравенство двух объектов <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="43766-391">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="43766-392"><see langword="true" />, если значения <paramref name="left" /> и <paramref name="right" /> не равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="43766-392"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Reflection.PropertyInfo.PropertyType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.PropertyType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-393">Возвращает тип свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-393">Gets the type of this property.</span></span></summary>
        <value><span data-ttu-id="43766-394">Тип свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-394">The type of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-395">Чтобы определить тип конкретного свойства, выполните следующие действия.</span><span class="sxs-lookup"><span data-stu-id="43766-395">To determine the type of a particular property, do the following:</span></span>  
  
1.  <span data-ttu-id="43766-396"><xref:System.Type> Получение объекта, представляющего тип (класс или структура), который содержит свойство.</span><span class="sxs-lookup"><span data-stu-id="43766-396">Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property.</span></span> <span data-ttu-id="43766-397">При работе с объектом (экземпляром типа) можно вызвать его <xref:System.Object.GetType%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-397">If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method.</span></span> <span data-ttu-id="43766-398">В противном случае можно использовать C# оператор или оператор Visual Basic [GetType](~/docs/visual-basic/language-reference/operators/gettype-operator.md) , как показано в примере.</span><span class="sxs-lookup"><span data-stu-id="43766-398">Otherwise, you can use the C#  operator or the Visual Basic [GetType](~/docs/visual-basic/language-reference/operators/gettype-operator.md) operator, as the example illustrates.</span></span>  
  
2.  <span data-ttu-id="43766-399"><xref:System.Reflection.PropertyInfo> Получите объект, представляющий интересующее вас свойство.</span><span class="sxs-lookup"><span data-stu-id="43766-399">Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested.</span></span> <span data-ttu-id="43766-400">Для этого можно получить массив всех свойств из <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> метода, а затем выполнить итерацию элементов в массиве или <xref:System.Reflection.PropertyInfo> получить объект, который представляет <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> свойство, напрямую, вызвав метод и указав имя свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-400">You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method and specifying the property name.</span></span>  
  
3.  <span data-ttu-id="43766-401">Получите значение <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойства <xref:System.Reflection.PropertyInfo> из объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-401">Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-402">В следующем примере определяется `Employee` класс, который имеет пять свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-402">The following example defines an `Employee` class that has five properties.</span></span> <span data-ttu-id="43766-403">Затем он использует метод извлекает массив <xref:System.Reflection.PropertyInfo> объектов, представляющих эти свойства, и отображает имя и тип каждого из них.</span><span class="sxs-lookup"><span data-stu-id="43766-403">It then uses retrieves an array of <xref:System.Reflection.PropertyInfo> objects that represent those properties and displays the name and type of each.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/cs/propertytype1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/vb/propertytype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo SetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo SetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.SetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ SetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.SetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43766-404">Получает метод доступа <see langword="set" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-404">Gets the <see langword="set" /> accessor for this property.</span></span></summary>
        <value><span data-ttu-id="43766-405">Метод доступа <see langword="set" /> для этого свойства или значение <see langword="null" /> , если свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="43766-405">The <see langword="set" /> accessor for this property, or <see langword="null" /> if the property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-406">Получение значения <xref:System.Reflection.PropertyInfo.SetMethod%2A> свойства эквивалентно <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> вызову `true` метода со значением для `nonPublic` аргумента.</span><span class="sxs-lookup"><span data-stu-id="43766-406">Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.PropertyInfo.GetMethod" />
        <altmember cref="P:System.Reflection.PropertyInfo.CanWrite" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43766-407">Задает значение свойства для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-407">Sets the property value for a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * obj -&gt; unit" Usage="propertyInfo.SetValue (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-408">Объект, значение свойства которого будет установлено.</span><span class="sxs-lookup"><span data-stu-id="43766-408">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="43766-409">Новое значение свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-409">The new property value.</span></span></param>
        <summary><span data-ttu-id="43766-410">Задает значение свойства для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-410">Sets the property value of a specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-411"><xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> Перегрузка задает значение неиндексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-411">The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property.</span></span> <span data-ttu-id="43766-412">Чтобы определить, индексируется ли свойство, вызовите <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-412">To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="43766-413">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируется.</span><span class="sxs-lookup"><span data-stu-id="43766-413">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span> <span data-ttu-id="43766-414">Чтобы задать значение индексированного свойства, вызовите <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> перегрузку.</span><span class="sxs-lookup"><span data-stu-id="43766-414">To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.</span></span>  
  
 <span data-ttu-id="43766-415">Если тип свойства этого <xref:System.Reflection.PropertyInfo> объекта является типом значения и `value` имеет `null`значение, то свойству будет присвоено значения по умолчанию для этого типа.</span><span class="sxs-lookup"><span data-stu-id="43766-415">If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="43766-416">Это удобный метод, который вызывает реализацию среды <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> выполнения абстрактного метода, указывая <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> `Binder`для `BindingFlags` параметра, `null` `null` `Object[]`для, и. `null` для .`CultureInfo`</span><span class="sxs-lookup"><span data-stu-id="43766-416">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="43766-417">Чтобы использовать <xref:System.Reflection.PropertyInfo.SetValue%2A> метод, сначала <xref:System.Type> получите объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="43766-417">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="43766-418"><xref:System.Type> В<xref:System.Reflection.PropertyInfo> получите объект.</span><span class="sxs-lookup"><span data-stu-id="43766-418">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object.</span></span> <span data-ttu-id="43766-419">Из объекта вызовите <xref:System.Reflection.PropertyInfo.SetValue%2A>метод. <xref:System.Reflection.PropertyInfo></span><span class="sxs-lookup"><span data-stu-id="43766-419">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-420">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к не являющимся открытыми членам, если вызывающей стороне был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор прав, не являющихся открытыми, ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="43766-420">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="43766-421">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="43766-421">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="43766-422">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="43766-422">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-423">В следующем примере объявляется класс с именем `Example` с одним `static` (`Shared` в Visual Basic) и одним свойством экземпляра.</span><span class="sxs-lookup"><span data-stu-id="43766-423">The following example declares a class named `Example` with one `static` (`Shared` in Visual Basic) and one instance property.</span></span> <span data-ttu-id="43766-424">В примере <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> метод используется для изменения исходных значений свойств и для отображения исходного и конечного значений.</span><span class="sxs-lookup"><span data-stu-id="43766-424">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> method to change the original property values and displays the original and final values.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/example2.cpp#2)]
 [!code-csharp[PropertyInfo.SetValue#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/example2.cs#2)]
 [!code-vb[PropertyInfo.SetValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43766-425">Не найден метод доступа <see langword="set" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-425">The property's <see langword="set" /> accessor is not found.</span></span>  
  
<span data-ttu-id="43766-426">- или -</span><span class="sxs-lookup"><span data-stu-id="43766-426">-or-</span></span> 
 <span data-ttu-id="43766-427"><paramref name="value" /> невозможно преобразовать в тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="43766-427"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="43766-428">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="43766-428">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="43766-429">Тип <paramref name="obj" /> не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> равен <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-429">The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="43766-430">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="43766-430">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="43766-431">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="43766-431">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="43766-432">Ошибка при установке значения свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-432">An error occurred while setting the property value.</span></span> <span data-ttu-id="43766-433">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="43766-433">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-434">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-434">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-435">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-435">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * obj[] -&gt; unit&#xA;override this.SetValue : obj * obj * obj[] -&gt; unit" Usage="propertyInfo.SetValue (obj, value, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-436">Объект, значение свойства которого будет установлено.</span><span class="sxs-lookup"><span data-stu-id="43766-436">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="43766-437">Новое значение свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-437">The new property value.</span></span></param>
        <param name="index"><span data-ttu-id="43766-438">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-438">Optional index values for indexed properties.</span></span> <span data-ttu-id="43766-439">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-439">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="43766-440">Задает значение свойства заданного объекта с дополнительными значениями индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-440">Sets the property value of a specified object with optional index values for index properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-441">Если этот <xref:System.Reflection.PropertyInfo> объект является типом значения и `value` имеет `null`значение, то свойству будет присвоено значения по умолчанию для этого типа.</span><span class="sxs-lookup"><span data-stu-id="43766-441">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="43766-442">Чтобы определить, индексируется ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-442">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="43766-443">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируется.</span><span class="sxs-lookup"><span data-stu-id="43766-443">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="43766-444">Это удобный метод, который вызывает реализацию среды <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> выполнения абстрактного метода, задавая <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> для параметра `null` значение `BindingFlags` , для `Binder`и `null` для `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="43766-444">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="43766-445">Чтобы использовать <xref:System.Reflection.PropertyInfo.SetValue%2A> метод, сначала <xref:System.Type> получите объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="43766-445">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="43766-446"><xref:System.Type> В<xref:System.Reflection.PropertyInfo>получите.</span><span class="sxs-lookup"><span data-stu-id="43766-446">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="43766-447"><xref:System.Reflection.PropertyInfo> В<xref:System.Reflection.PropertyInfo.SetValue%2A> используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-447">From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-448">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к не являющимся открытыми членам, если вызывающей стороне был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор прав, не являющихся открытыми, ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="43766-448">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="43766-449">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="43766-449">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="43766-450">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="43766-450">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43766-451">В следующем примере определяется класс с именем `TestClass` , имеющий свойство, доступное для `Caption`чтения и записи с именем.</span><span class="sxs-lookup"><span data-stu-id="43766-451">The following example defines a class named `TestClass` that has a read-write property named `Caption`.</span></span> <span data-ttu-id="43766-452">Он отображает значение `Caption` свойства по умолчанию, <xref:System.Reflection.PropertyInfo.SetValue%2A> вызывает метод для изменения значения свойства и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="43766-452">It  displays the default value of the `Caption` property, calls the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the property value, and displays the result.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="43766-453">Обратите внимание, что `Caption` , поскольку свойство не является массивом параметров `index` , аргумент `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="43766-453">Note that, because the `Caption` property is not a parameter array, the `index` argument is `null`.</span></span>  
  
 <span data-ttu-id="43766-454">В следующем примере объявляется класс `Example` с тремя свойствами `static` : свойство (`Shared` в Visual Basic), свойство экземпляра и индексированное свойство экземпляра.</span><span class="sxs-lookup"><span data-stu-id="43766-454">The following example declares a class named `Example` with three properties: a `static` property (`Shared` in Visual Basic), an instance property, and an indexed instance property.</span></span> <span data-ttu-id="43766-455">В примере <xref:System.Reflection.PropertyInfo.SetValue%2A> метод используется для изменения значений свойств по умолчанию и для отображения исходного и конечного значений.</span><span class="sxs-lookup"><span data-stu-id="43766-455">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the default values of the properties and displays the original and final values.</span></span>  
  
 <span data-ttu-id="43766-456">Имя, используемое для поиска индексированного свойства экземпляра с отражением, различается в зависимости от языка и атрибутов, примененных к свойству.</span><span class="sxs-lookup"><span data-stu-id="43766-456">The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</span></span>  
  
-   <span data-ttu-id="43766-457">В Visual Basic имя свойства всегда используется для поиска свойства с отражением.</span><span class="sxs-lookup"><span data-stu-id="43766-457">In Visual Basic, the property name is always used to search for the property with reflection.</span></span> <span data-ttu-id="43766-458">Можно использовать `Default` ключевое слово, чтобы сделать свойство индексированным свойством по умолчанию. в этом случае имя можно опустить при доступе к свойству, как в этом примере.</span><span class="sxs-lookup"><span data-stu-id="43766-458">You can use the `Default` keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</span></span> <span data-ttu-id="43766-459">Можно также использовать имя свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-459">You can also use the property name.</span></span>  
  
-   <span data-ttu-id="43766-460">В C#свойство индексированного экземпляра является свойством по умолчанию, называемым индексатором, а имя никогда не используется при доступе к свойству в коде.</span><span class="sxs-lookup"><span data-stu-id="43766-460">In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</span></span> <span data-ttu-id="43766-461">По умолчанию имя свойства равно `Item`, и его необходимо использовать при поиске свойства с отражением.</span><span class="sxs-lookup"><span data-stu-id="43766-461">By default, the name of the property is `Item`, and you must use that name when you search for the property with reflection.</span></span> <span data-ttu-id="43766-462">Можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы присвоить индексатору другое имя.</span><span class="sxs-lookup"><span data-stu-id="43766-462">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the indexer a different name.</span></span> <span data-ttu-id="43766-463">В данном примере это имя `IndexedInstanceProperty`.</span><span class="sxs-lookup"><span data-stu-id="43766-463">In this example, the name is `IndexedInstanceProperty`.</span></span>  
  
-   <span data-ttu-id="43766-464">В C++можно использовать `default` описатель, чтобы сделать индексированное свойство индексированным свойством по умолчанию (индексатором класса).</span><span class="sxs-lookup"><span data-stu-id="43766-464">In C++, the `default` specifier can be used to make an indexed property a default indexed property (class indexer).</span></span> <span data-ttu-id="43766-465">В этом случае имя свойства по умолчанию равно `Item`, и необходимо использовать это имя при поиске свойства с отражением, как в этом примере.</span><span class="sxs-lookup"><span data-stu-id="43766-465">In that case, the name of the property by default is `Item`, and you must use that name when you search for the property with reflection, as in this example.</span></span> <span data-ttu-id="43766-466"><xref:System.Runtime.CompilerServices.IndexerNameAttribute> Атрибут можно использовать для присвоения индексатору класса другого имени в отражении, но нельзя использовать это имя для доступа к свойству в коде.</span><span class="sxs-lookup"><span data-stu-id="43766-466">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</span></span> <span data-ttu-id="43766-467">Обращение к индексированному свойству, которое не является индексатором класса, осуществляется с использованием его имени как в коде, так и в отражении.</span><span class="sxs-lookup"><span data-stu-id="43766-467">An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/Example.cpp#1)]
 [!code-csharp[PropertyInfo.SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/Example.cs#1)]
 [!code-vb[PropertyInfo.SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43766-468">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="43766-468">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="43766-469">-или-</span><span class="sxs-lookup"><span data-stu-id="43766-469">-or-</span></span> 
<span data-ttu-id="43766-470">Не найден метод доступа <see langword="set" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-470">The property's <see langword="set" /> accessor is not found.</span></span>  
  
<span data-ttu-id="43766-471">- или -</span><span class="sxs-lookup"><span data-stu-id="43766-471">-or-</span></span> 
 <span data-ttu-id="43766-472"><paramref name="value" /> невозможно преобразовать в тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="43766-472"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="43766-473">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="43766-473">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="43766-474">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-474">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="43766-475">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-475">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="43766-476">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="43766-476">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="43766-477">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="43766-477">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="43766-478">Произошла ошибка при установке значения свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-478">An error occurred while setting the property value.</span></span> <span data-ttu-id="43766-479">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="43766-479">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="43766-480">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="43766-480">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-481">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-481">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-482">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-482">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; unit" Usage="propertyInfo.SetValue (obj, value, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Object[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43766-483">Объект, значение свойства которого будет установлено.</span><span class="sxs-lookup"><span data-stu-id="43766-483">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="43766-484">Новое значение свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-484">The new property value.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="43766-485">Битовая комбинация следующих членов перечисления, определяющих атрибут вызова: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="43766-485">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span> <span data-ttu-id="43766-486">Необходимо указать подходящий атрибут вызова.</span><span class="sxs-lookup"><span data-stu-id="43766-486">You must specify a suitable invocation attribute.</span></span> <span data-ttu-id="43766-487">Например, чтобы вызвать статический член, установите флаг <see langword="Static" />.</span><span class="sxs-lookup"><span data-stu-id="43766-487">For example, to invoke a static member, set the <see langword="Static" /> flag.</span></span></param>
        <param name="binder"><span data-ttu-id="43766-488">Объект, который допускает привязку, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения.</span><span class="sxs-lookup"><span data-stu-id="43766-488">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="43766-489">Если значение параметра <paramref name="binder" /> равно <see langword="null" />, используется связыватель по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="43766-489">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="43766-490">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="43766-490">Optional index values for indexed properties.</span></span> <span data-ttu-id="43766-491">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-491">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="43766-492">Язык и региональные параметры, для которых должен быть локализован данный ресурс.</span><span class="sxs-lookup"><span data-stu-id="43766-492">The culture for which the resource is to be localized.</span></span> <span data-ttu-id="43766-493">Если ресурс не локализован для данного языка и региональных параметров, при поиске соответствия будет последовательно вызываться свойство <see cref="P:System.Globalization.CultureInfo.Parent" />.</span><span class="sxs-lookup"><span data-stu-id="43766-493">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span></span> <span data-ttu-id="43766-494">Если это значение равно <see langword="null" />, из свойства <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> получаются сведения, относящиеся к конкретному языку и региональным параметрам.</span><span class="sxs-lookup"><span data-stu-id="43766-494">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="43766-495">При переопределении в производном классе задает значение свойства для заданного объекта, имеющего указанные сведения о привязке, индексе и языке и региональных параметрах.</span><span class="sxs-lookup"><span data-stu-id="43766-495">When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-496">Если этот <xref:System.Reflection.PropertyInfo> объект является типом значения и `value` имеет `null`значение, то свойству будет присвоено значения по умолчанию для этого типа.</span><span class="sxs-lookup"><span data-stu-id="43766-496">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="43766-497">Чтобы определить, индексируется ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="43766-497">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="43766-498">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируется.</span><span class="sxs-lookup"><span data-stu-id="43766-498">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="43766-499">Ограничения доступа игнорируются для полностью доверенного кода.</span><span class="sxs-lookup"><span data-stu-id="43766-499">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="43766-500">Таким образом, закрытые конструкторы, методы, поля и свойства могут быть доступны и вызваны через отражение всякий раз, когда код является полностью доверенным.</span><span class="sxs-lookup"><span data-stu-id="43766-500">That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="43766-501">Чтобы использовать `SetValue` метод, сначала получите класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="43766-501">To use the `SetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="43766-502">`Type` В`PropertyInfo`получите.</span><span class="sxs-lookup"><span data-stu-id="43766-502">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="43766-503">`PropertyInfo` В`SetValue` используйте метод.</span><span class="sxs-lookup"><span data-stu-id="43766-503">From the `PropertyInfo`, use the `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43766-504">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к не являющимся открытыми членам, если вызывающей стороне был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор прав, не являющихся открытыми, ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="43766-504">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="43766-505">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="43766-505">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="43766-506">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="43766-506">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43766-507">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="43766-507">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="43766-508">- или -</span><span class="sxs-lookup"><span data-stu-id="43766-508">-or-</span></span> 
<span data-ttu-id="43766-509">Не найден метод доступа <see langword="set" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-509">The property's <see langword="set" /> accessor is not found.</span></span>  
  
<span data-ttu-id="43766-510">-или-</span><span class="sxs-lookup"><span data-stu-id="43766-510">-or-</span></span> 
 <span data-ttu-id="43766-511"><paramref name="value" /> невозможно преобразовать в тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="43766-511"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="43766-512">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> равен <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="43766-512">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="43766-513">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="43766-513">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="43766-514">Недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="43766-514">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="43766-515">Произошла ошибка при установке значения свойства.</span><span class="sxs-lookup"><span data-stu-id="43766-515">An error occurred while setting the property value.</span></span> <span data-ttu-id="43766-516">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="43766-516">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="43766-517">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="43766-517">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="43766-518">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="43766-518">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="43766-519">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="43766-519">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _PropertyInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_PropertyInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="43766-520">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="43766-520">Reserved for future use.</span></span> <span data-ttu-id="43766-521">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="43766-521">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="43766-522">Переданный массив имен, которые необходимо сопоставить.</span><span class="sxs-lookup"><span data-stu-id="43766-522">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="43766-523">Количество сопоставляемых имен.</span><span class="sxs-lookup"><span data-stu-id="43766-523">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="43766-524">Контекст языкового стандарта для интерпретации имен.</span><span class="sxs-lookup"><span data-stu-id="43766-524">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="43766-525">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</span><span class="sxs-lookup"><span data-stu-id="43766-525">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="43766-526">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</span><span class="sxs-lookup"><span data-stu-id="43766-526">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-527">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="43766-527">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="43766-528">Дополнительные сведения о `IDispatch::GetIDsOfNames`см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="43766-528">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="43766-529">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="43766-529">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetType">
      <MemberSignature Language="C#" Value="Type _PropertyInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._PropertyInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _PropertyInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._PropertyInfo.GetType() = System::Runtime::InteropServices::_PropertyInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43766-530">Возвращает объект <see cref="T:System.Type" />, представляющий тип <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="43766-530">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="43766-531">Объект <see cref="T:System.Type" />, представляющий тип <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="43766-531">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _PropertyInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="43766-532">Возвращаемые сведения о типе.</span><span class="sxs-lookup"><span data-stu-id="43766-532">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="43766-533">Идентификатор языкового стандарта для сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="43766-533">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="43766-534">Получает указатель на объект с запрошенными сведениями о типе.</span><span class="sxs-lookup"><span data-stu-id="43766-534">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="43766-535">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</span><span class="sxs-lookup"><span data-stu-id="43766-535">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-536">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="43766-536">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="43766-537">Дополнительные сведения о `IDispatch::GetTypeInfo`см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="43766-537">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="43766-538">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="43766-538">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _PropertyInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="43766-539">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="43766-539">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="43766-540">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</span><span class="sxs-lookup"><span data-stu-id="43766-540">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-541">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="43766-541">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="43766-542">Дополнительные сведения о `IDispatch::GetTypeInfoCount`см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="43766-542">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="43766-543">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="43766-543">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.Invoke">
      <MemberSignature Language="C#" Value="void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _PropertyInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_PropertyInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="43766-544">Идентифицирует член.</span><span class="sxs-lookup"><span data-stu-id="43766-544">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="43766-545">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="43766-545">Reserved for future use.</span></span> <span data-ttu-id="43766-546">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="43766-546">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="43766-547">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</span><span class="sxs-lookup"><span data-stu-id="43766-547">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="43766-548">Флаги, описывающие контекст вызова.</span><span class="sxs-lookup"><span data-stu-id="43766-548">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="43766-549">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</span><span class="sxs-lookup"><span data-stu-id="43766-549">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="43766-550">Указатель, по которому будет сохранен результат.</span><span class="sxs-lookup"><span data-stu-id="43766-550">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="43766-551">Указатель на структуру, содержащую сведения об исключении.</span><span class="sxs-lookup"><span data-stu-id="43766-551">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="43766-552">Индекс первого аргумента, вызвавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="43766-552">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="43766-553">Предоставляет доступ к открытым свойствам и методам объекта.</span><span class="sxs-lookup"><span data-stu-id="43766-553">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43766-554">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="43766-554">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="43766-555">Дополнительные сведения о `IDispatch::Invoke`см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="43766-555">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="43766-556">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="43766-556">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
