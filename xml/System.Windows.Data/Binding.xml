<Type Name="Binding" FullName="System.Windows.Data.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9a22d563cf90b2854a6bf8d729f1b8114d9c9b46" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70620916" /></Metadata><TypeSignature Language="C#" Value="public class Binding : System.Windows.Data.BindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Windows.Data.BindingBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding&#xA;Inherits BindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding : System::Windows::Data::BindingBase" />
  <TypeSignature Language="F#" Value="type Binding = class&#xA;    inherit BindingBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет высокоуровневый доступ к определению привязки, соединяющей свойства целевых объектов привязки (как правило, элементов WPF) и любой источник данных (например, базу данных, XML-файл или любой объект, который содержит данные).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Привязка данных [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] предоставляет приложениям простой и последовательный способ представления данных и взаимодействия с ними. Привязка данных позволяет синхронизировать значения свойств двух различных объектов.  
  
 Чтобы установить привязку, используйте <xref:System.Windows.Data.Binding> класс или один из других классов, которые наследуют. <xref:System.Windows.Data.BindingBase> Независимо от объекта, который вы привязываете, и природы источника данных, каждая привязка соответствует модели, показанной на следующем рисунке.  
  
 ![Базовая диаграмма привязки данных] (~/add/media/databindingmostbasic.png "Базовая диаграмма привязки данных")  
  
 На рисунке показаны следующие фундаментальные [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] понятия привязки данных.  
  
-   Каждая привязка обычно содержит следующие четыре компонента: целевой объект привязки, целевое свойство, источник привязки и <xref:System.Windows.Data.Binding.Path%2A> значение для использования в источнике привязки. Например, если требуется привязать содержимое <xref:System.Windows.Controls.TextBox> к свойству Name объекта Employee, то целевой объект <xref:System.Windows.Controls.TextBox>будет иметь значение, свойство Target — <xref:System.Windows.Controls.TextBox.Text%2A> это свойство, используемое значение — имя, а исходный объект — сотрудник. объектами.  
  
-   Целевое свойство должно быть свойством зависимостей. Это также означает, что невозможно привязать поле. Большинство свойств <xref:System.Windows.UIElement> объектов являются свойствами зависимостей и большинством свойств зависимостей, кроме доступных только для чтения, поддерживают привязку данных по умолчанию. (Только <xref:System.Windows.DependencyObject> типы могут определять свойства зависимостей, а <xref:System.Windows.UIElement> все объекты являются производными от <xref:System.Windows.DependencyObject>.)  
  
-   Несмотря на то что это не указано на рисунке, следует отметить, что источник привязки не обязан быть пользовательским объектом [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]. Привязка данных [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] поддерживает данные в виде объектов [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] и [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Чтобы предоставить несколько примеров, источником привязки может <xref:System.Windows.UIElement>быть, любой объект списка [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] , объект, связанный с [!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)] данными или веб-службами, или XmlNode, содержащий ваши [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] данные.  
  
 <xref:System.Windows.Data.Binding.Mode%2A> Используйте свойство, чтобы указать направление потока данных. Чтобы обнаружить изменения источника в односторонней или двухсторонней привязке, источник должен реализовать подходящий механизм уведомления об изменении свойств, например <xref:System.ComponentModel.INotifyPropertyChanged>. Пример см. в разделе [как реализовать уведомление об изменении свойства](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md). <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> Свойство задает время обновления источника. Дополнительные сведения см. в разделе "Основные понятия привязки данных" раздела [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *declaration*  
 Ноль или несколько предложений атрибутов, разделенных запятыми (,). Дополнительные сведения см. в разделе [Привязка расширения разметки](~/docs/framework/wpf/advanced/binding-markup-extension.md) или [объявлений привязки](~/docs/framework/wpf/data/binding-declarations-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.MultiBinding" />
    <altmember cref="T:System.Windows.Data.PriorityBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Data.Binding" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Data.Binding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.Binding : string -&gt; System.Windows.Data.Binding" Usage="new System.Windows.Data.Binding path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Начальный <see cref="P:System.Windows.Data.Binding.Path" /> для привязки.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Data.Binding" /> с начальным путем.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, прослушивающий событие.</param>
        <param name="handler">Добавляемый обработчик.</param>
        <summary>Добавляет обработчик для вложенного события <see cref="E:System.Windows.Data.Binding.SourceUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод поддерживает использование присоединенных событий [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]в.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, прослушивающий событие.</param>
        <param name="handler">Добавляемый обработчик.</param>
        <summary>Добавляет обработчик для вложенного события <see cref="E:System.Windows.Data.Binding.TargetUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод поддерживает использование присоединенных событий [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]в.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj with get, set" Usage="System.Windows.Data.Binding.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает непрозрачные данные, передаваемые в диспетчер асинхронных данных.</summary>
        <value>Данные, передаваемые в диспетчер асинхронных данных.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Data.Binding.IsAsync" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
      </Docs>
    </Member>
    <Member MemberName="BindsDirectlyToSource">
      <MemberSignature Language="C#" Value="public bool BindsDirectlyToSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsDirectlyToSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsDirectlyToSource As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsDirectlyToSource { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsDirectlyToSource : bool with get, set" Usage="System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, следует ли вычислять <see cref="P:System.Windows.Data.Binding.Path" /> относительно элемента данных или объекта <see cref="T:System.Windows.Data.DataSourceProvider" />.</summary>
        <value>Значение <see langword="false" /> для определения пути относительно самого элемента данных; в противном случае — значение <see langword="true" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нормальное поведение (если это свойство имеет `false`значение) включает специальную <xref:System.Windows.Data.DataSourceProvider> обработку для объектов. В этом случае механизм привязки вычисляет относительно объекта, <xref:System.Windows.Data.Binding.Path%2A> полученного <xref:System.Windows.Data.DataSourceProvider.Data%2A> из свойства. Кроме того, привязка прослушивает <xref:System.Windows.Data.DataSourceProvider.DataChanged> событие и реагирует соответствующим образом. Присвоение этому свойству `true` значения переопределяет это поведение и предоставляет привязку доступ к <xref:System.Windows.Data.DataSourceProvider> свойствам самого объекта.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.ObjectDataProvider" />
        <altmember cref="T:System.Windows.Data.XmlDataProvider" />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.IValueConverter Converter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.IValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Property Converter As IValueConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::IValueConverter ^ Converter { System::Windows::Data::IValueConverter ^ get(); void set(System::Windows::Data::IValueConverter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Converter : System.Windows.Data.IValueConverter with get, set" Usage="System.Windows.Data.Binding.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает используемый преобразователь.</summary>
        <value>Значение типа <see cref="T:System.Windows.Data.IValueConverter" />. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Привязка неявно использует преобразователь по умолчанию, который пытается выполнить преобразование типов между исходным значением и целевым значением. Если преобразование не удается выполнить, преобразователь по умолчанию возвращает значение `null`.  
  
 Если необходимо связать пользовательский преобразователь значений с привязкой, следует создать класс, реализующий <xref:System.Windows.Data.IValueConverter> интерфейс, и предоставить реализации <xref:System.Windows.Data.IValueConverter.Convert%2A> для методов и <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> . Преобразователи значений могут изменять данные одного типа на другой, переводить между культурными сведениями, такими как наборы символов, или изменять другие аспекты их представления. Примеры типичных сценариев преобразования см. в разделе "Преобразование данных" в статье [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_Converter"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object Converter="myConverter"/>  
```  
  
<a name="xamlValues_Converter"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *миконвертер*  
 Ссылка на ресурс для класса, реализующего <xref:System.Windows.Data.IValueConverter> интерфейс, который включает реализации <xref:System.Windows.Data.IValueConverter.Convert%2A> методов и <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> . Для ссылки на преобразователь значений используйте [расширение разметки StaticResource](~/docs/framework/wpf/advanced/staticresource-markup-extension.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConverterCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConverterCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConverterCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Data.Binding.ConverterCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает язык и региональные параметры, в которых необходимо оценить преобразователь.</summary>
        <value>Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если это свойство не задано, подсистема привязки использует `Language` свойство целевого объекта привязки. В [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] этом случае значение по умолчанию — en-US или наследуется от корневого элемента (или любого элемента) страницы, если он был явно задан.  
  
 Дополнительные сведения о преобразовании данных см. в разделе Преобразование данных в статье [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterParameter">
      <MemberSignature Language="C#" Value="public object ConverterParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConverterParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ConverterParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterParameter : obj with get, set" Usage="System.Windows.Data.Binding.ConverterParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает параметр, передаваемый <see cref="P:System.Windows.Data.Binding.Converter" />.</summary>
        <value>Параметр, который передается <see cref="P:System.Windows.Data.Binding.Converter" />. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.Binding.ConverterParameter%2A> Свойство можно использовать для указания способа преобразования объекта.  Это свойство передает дополнительные сведения в преобразователь, используемый в привязке.  При указании <xref:System.Windows.Data.Binding.ConverterParameter%2A>значение передается <xref:System.Windows.Data.IValueConverter.Convert%2A> в методы и <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> в качестве `parameter` параметра.  
  
 Пример см. в разделе [как создать значение на основе списка привязанных элементов](~/docs/framework/wpf/data/how-to-produce-a-value-based-on-a-list-of-bound-items.md). В этом примере показана реализация объекта <xref:System.Windows.Data.IMultiValueConverter> , но использование по-прежнему применяется.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNothing">
      <MemberSignature Language="C#" Value="public static readonly object DoNothing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DoNothing" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.DoNothing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DoNothing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DoNothing;" />
      <MemberSignature Language="F#" Value=" staticval mutable DoNothing : obj" Usage="System.Windows.Data.Binding.DoNothing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Используется как возвращаемое значение, чтобы указать, что механизму привязки не требуется выполнять никаких действий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство источника привязки или преобразователь может вернуть <xref:System.Windows.Data.Binding.DoNothing?displayProperty=nameWithType> , чтобы указать механизму привязки не выполнять никаких действий. Например, чтобы указать механизму привязки не передавать значение в целевой объект привязки, не переходить к следующему <xref:System.Windows.Data.Binding> элементу <xref:System.Windows.Data.PriorityBinding>в `FallBackValue` или не использовать значение по умолчанию или.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Windows.Data.Binding.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя элемента, который требуется использовать в качестве объекта источника привязки.</summary>
        <value>Значение свойства <see langword="Name" /> или [директива x:Name](~/docs/framework/xaml-services/x-name-directive.md) нужного элемента. Ссылаться на элементы в коде можно только в том случае, если они зарегистрированы в соответствующем <see cref="T:System.Windows.NameScope" /> с помощью <see langword="RegisterName" />. Более подробную информацию см. в разделе [Области видимости имен XAML в WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство полезно, если необходимо выполнить привязку к свойству другого элемента в приложении. Например, <xref:System.Windows.Controls.Slider> если вы хотите использовать для управления высотой другого элемента управления в приложении или если вы хотите <xref:System.Windows.Controls.ContentControl.Content%2A> привязать элемент управления <xref:System.Windows.Controls.ListBox> к <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> свойству элемента управления.  
  
 По умолчанию привязки наследуют контекст данных, заданный `DataContext` свойством, если он задан. Однако свойство является одним из способов явного задания источника <xref:System.Windows.Data.Binding> и переопределения унаследованного контекста данных. <xref:System.Windows.Data.Binding.ElementName%2A> Дополнительные сведения см. в разделе [инструкции. Указание источника привязки](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 Свойства <xref:System.Windows.Data.Binding.Source%2A> и <xref:System.Windows.Data.Binding.RelativeSource%2A>  класса также позволяют явно задать источник привязки. <xref:System.Windows.Data.Binding> Однако для каждой привязки должны быть заданы только <xref:System.Windows.Data.Binding.ElementName%2A>одно <xref:System.Windows.Data.Binding.Source%2A>из трех <xref:System.Windows.Data.Binding.RelativeSource%2A>свойств,, и, или может возникнуть конфликт. Это свойство создает исключение при конфликте источника привязки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlNamespaceManager GetXmlNamespaceManager(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceManager (target As DependencyObject) As XmlNamespaceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlNamespaceManager ^ GetXmlNamespaceManager(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceManager : System.Windows.DependencyObject -&gt; System.Xml.XmlNamespaceManager" Usage="System.Windows.Data.Binding.GetXmlNamespaceManager target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Объект, из которого требуется получить сведения о пространстве имен.</param>
        <summary>Возвращает объект диспетчера пространства имен [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)], используемый привязкой, подключенной к указанному объекту.</summary>
        <returns>Возвращенный объект, используемый для просмотра пространств имен [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)], относящихся к привязке в переданном элементе объекта. Этот объект должен быть приведен как <see cref="T:System.Xml.XmlNamespaceManager" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод поддерживает использование присоединенного свойства для <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> присоединенного свойства.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]диспетчеры пространств имен важны только в том случае, если данные в привязке поступили из [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] источника привязки (<xref:System.Windows.Data.XmlDataProvider> объекта).  
  
 Если диспетчер пространств имен не был специально применен либо при создании исходного источника данных, либо при последующем <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A> вызове в привязке, этот метод возвратит `null`.  
  
 Этот метод всегда будет возвращать `null` значение, если данные за пределами привязки не [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]являются.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="target" /> не может иметь значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexerName">
      <MemberSignature Language="C#" Value="public const string IndexerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IndexerName" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.IndexerName" />
      <MemberSignature Language="VB.NET" Value="Public Const IndexerName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ IndexerName;" />
      <MemberSignature Language="F#" Value="val mutable IndexerName : string" Usage="System.Windows.Data.Binding.IndexerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Используется как <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" /> из <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />, указывая, что свойство индексатора изменилось.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAsync { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool with get, set" Usage="System.Windows.Data.Binding.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, следует ли объекту <see cref="T:System.Windows.Data.Binding" /> получать и задавать значения асинхронно.</summary>
        <value>Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство <xref:System.Windows.Data.Binding.IsAsync%2A> , `get` если свойство источника привязки может занимать много времени. Одним из примеров является свойство Image с `get` методом доступа, который скачивается из Интернета. Значение <xref:System.Windows.Data.Binding.IsAsync%2A> , `true` чтобы избежать блокировки [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] во время загрузки.  
  
 При ожидании прибытия значения привязка сообщает <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, если она доступна, или значение по умолчанию для свойства цели привязки.  
  
 Однако не должно быть многих сценариев, в которых необходимо использовать <xref:System.Windows.Data.Binding.IsAsync%2A> свойство. [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] Рекомендации рекомендуются для определения свойств, порядок которых меньше, чем набор полей. При создании класса рассмотрите возможность обработки чрезвычайно небольшого числа `get` операций за пределами метода доступа и кэширования результата.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.AsyncState" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As BindingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingMode Mode { System::Windows::Data::BindingMode get(); void set(System::Windows::Data::BindingMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Data.BindingMode with get, set" Usage="System.Windows.Data.Binding.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее направление потока данных в привязке.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Windows.Data.BindingMode" />. Значение по умолчанию — <see cref="F:System.Windows.Data.BindingMode.Default" />, возвращающее значение режима привязки по умолчанию для целевого свойства зависимостей. Однако значение по умолчанию для каждого из свойств зависимостей может различаться. В общем случае свойства доступного для редактирования пользователями элемента управления (например, текстового поля или флажка) по умолчанию имеют двухсторонние привязки, в то время как большинство других свойств по умолчанию имеют односторонние привязки.  
  
Существует способ определить программно, использует ли свойство зависимостей односторонние или двухсторонние привязки по умолчанию: для этого нужно получить метаданные этого свойства, воспользовавшись методом <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />, а затем проверить логическое значение свойства <see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для поддержки <xref:System.Windows.Data.BindingMode.OneWay> и <xref:System.Windows.Data.BindingMode.TwoWay> привязок базовые данные должны реализовывать <xref:System.ComponentModel.INotifyPropertyChanged>. Дополнительные сведения см. [в разделе инструкции. Реализация уведомления об изменении свойства](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md).  
  
 Для <xref:System.Windows.Data.BindingMode.TwoWay> привязок или <xref:System.Windows.Data.BindingMode.OneWayToSource> можно управлять обновлениями с нацеливанием на <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> источник, задав свойство. Для получения дополнительной информации см. <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.  
  
 Дополнительные сведения о различных режимах привязки см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnSourceUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnSourceUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnSourceUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnSourceUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnSourceUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnSourceUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, следует ли вызывать событие <see cref="E:System.Windows.Data.Binding.SourceUpdated" />, когда значение передается от целевого объекта привязки к источнику привязки.</summary>
        <value>Значение <see langword="true" />, если событие <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> должно вызываться при обновлении источника привязки; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnTargetUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, следует ли вызывать событие <see cref="E:System.Windows.Data.Binding.TargetUpdated" />, когда значение передается от исходного объекта привязки к целевому объекту привязки.</summary>
        <value>Значение <see langword="true" />, если событие <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> должно вызываться при обновлении значения источника привязки; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, следует ли вызывать подключенное к <see cref="E:System.Windows.Controls.Validation.Error" /> событие в привязанном объекте.</summary>
        <value>Значение<see langword="true" /> , если подключенное к <see cref="E:System.Windows.Controls.Validation.Error" /> событие должно вызываться в привязанном объекте при ошибке проверки во время обновления источника, в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если привязка <xref:System.Windows.Data.Binding.ValidationRules%2A> связана с ней, механизм привязки проверяет каждое правило при каждой передаче значения целевого свойства в исходное свойство. Если правило делает недействительным значение, подсистема привязки создает <xref:System.Windows.Controls.ValidationError> объект и добавляет его <xref:System.Windows.Controls.Validation>в.<xref:System.Windows.Controls.Validation.Errors%2A> Коллекция привязанного объекта. Если свойство не пусто <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> , для `true`присоединенного свойства объекта устанавливается значение. <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> Если свойство объекта имеет значение `true`, подсистема привязки вызывает <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> событие, присоединенное к объекту. <xref:System.Windows.Data.Binding> <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A>  
  
 Подробное обсуждение процесса проверки см. в разделе "Проверка данных" в статье [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyPath Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyPath Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyPath ^ Path { System::Windows::PropertyPath ^ get(); void set(System::Windows::PropertyPath ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : System.Windows.PropertyPath with get, set" Usage="System.Windows.Data.Binding.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает путь к свойству источника привязки.</summary>
        <value>Путь к источнику привязки. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая привязка обычно содержит следующие четыре компонента: целевой объект привязки, целевое свойство, источник привязки и путь к значению в источнике привязки для использования. Дополнительные сведения об этих концепциях привязки данных см. в разделе [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 <xref:System.Windows.Data.Binding.Path%2A> Используйте свойство, чтобы указать исходное значение, к которому необходимо выполнить привязку:  
  
-   В самом простом случае <xref:System.Windows.Data.Binding.Path%2A> значением свойства является имя свойства исходного объекта, используемого для привязки, `Path=PropertyName`например.  
  
-   Вложенные свойства свойства могут быть заданы с помощью синтаксиса, аналогичного использованному в C#. Например, предложение `Path=ShoppingCart.Order` задает привязку к подсвойству `Order` объекта или свойства `ShoppingCart`.  
  
-   Для привязки присоединенного свойства заключите его в скобки. Например, для привязки к присоединенному свойству <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>используется `Path=(DockPanel.Dock)`синтаксис.  
  
-   Индексаторы свойства можно указать в квадратных скобках после имени свойства, для которого применяется индексатор. Например, предложение `Path=ShoppingCart[0]` задает привязку к индексу, который соответствует способу, который внутренняя индексация свойства использует для обработки символьной строки "0". Также поддерживаются несколько индексаторов.  
  
-   Индексаторы и вложенные свойства могут сочетаться в предложении `Path`, например, `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`  
  
-   Индексаторы могут иметь несколько внутренних параметров, разделенных запятыми (,). Тип каждого параметра указывается в скобках. Например, вы можете задать предложение `Path="[(sys:Int32)42,(sys:Int32)24]"`, где `sys` сопоставляется с пространством имен `System`.  
  
-   Если источником является представлением коллекции, текущий элемент можно указать с косой чертой (/). Например, предложение `Path=/` задает привязку к текущему элементу в представлении. Если источником является коллекция, этот синтаксис задает текущий элемент представления коллекции по умолчанию.  
  
-   Имена свойств и косые черты можно объединять для обхода свойств, которые являются коллекциями. Например, предложение `Path=/Offices/ManagerName` задает текущий элемент коллекции источников, где свойство `Offices` также является коллекцией. Текущий элемент этой коллекции — объект, содержащий свойство `ManagerName`.  
  
-   При необходимости для привязки к текущему источнику можно использовать путь в виде точки (.). Например, предложение `Text="{Binding}"` эквивалентно предложению `Text="{Binding Path=.}"`.  
  
 Сведения о синтаксисе пути см. в разделе [Общие сведения об объявлениях привязки](~/docs/framework/wpf/data/binding-declarations-overview.md) или [синтаксисе PropertyPath XAML](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
 Сведения [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] о привязках см. <xref:System.Windows.Data.Binding.XPath%2A> в описании свойства.  
  
 Для привязки ко всему объекту не нужно указывать <xref:System.Windows.Data.Binding.Path%2A> свойство. Дополнительные сведения см. в разделе "указание пути к значению" раздела [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 В следующем примере показан триггер стиля, который создает объект <xref:System.Windows.Controls.ToolTip> , который сообщает сообщение об ошибке проверки. Значение метода задания привязывается к содержимому ошибки текущего <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBox> (с использованием стиля) с помощью <xref:System.Windows.Data.Binding.RelativeSource%2A> свойства. Дополнительные сведения об этом примере см. [в разделе Практические руководства. Реализация проверки привязки](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSource RelativeSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.RelativeSource RelativeSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.RelativeSource" />
      <MemberSignature Language="VB.NET" Value="Public Property RelativeSource As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::RelativeSource ^ RelativeSource { System::Windows::Data::RelativeSource ^ get(); void set(System::Windows::Data::RelativeSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSource : System.Windows.Data.RelativeSource with get, set" Usage="System.Windows.Data.Binding.RelativeSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает источник привязки, указывая его расположение относительно положения целевого объекта привязки.</summary>
        <value>Объект <see cref="T:System.Windows.Data.RelativeSource" />, указывающий относительное расположение источника привязки, который требуется использовать. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство обычно используется для привязки одного свойства объекта к другому свойству того же объекта или для определения привязки в стиле или шаблоне.  
  
 По умолчанию привязки наследуют контекст данных, заданный `DataContext` свойством, если он задан. Однако свойство является одним из способов явного задания источника <xref:System.Windows.Data.Binding> и переопределения унаследованного контекста данных. <xref:System.Windows.Data.Binding.RelativeSource%2A> Дополнительные сведения см. в разделе [инструкции. Указание источника привязки](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 Свойства <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> и <xref:System.Windows.Data.Binding.Source%2A?displayProperty=nameWithType>  также позволяют явно задать источник привязки. Однако для каждой привязки должны быть установлены только одно <xref:System.Windows.Data.Binding.ElementName%2A>из <xref:System.Windows.Data.Binding.Source%2A>трех свойств <xref:System.Windows.Data.Binding.RelativeSource%2A>,, и, или может возникнуть конфликт. Это свойство создает исключение при конфликте источника привязки.  
  
 Дополнительные [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] сведения см. в разделе [RelativeSource MarkupExtension](~/docs/framework/wpf/advanced/relativesource-markupextension.md).  
    
## Examples  
 В следующем примере показан триггер стиля, который создает объект <xref:System.Windows.Controls.ToolTip> , который сообщает сообщение об ошибке проверки. Значение метода задания привязывается к содержимому ошибки текущего <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.TextBox> (с использованием стиля) с помощью <xref:System.Windows.Data.Binding.RelativeSource%2A> свойства. Дополнительные сведения об этом примере см. [в разделе Практические руководства. Реализация проверки привязки](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 Полный пример см. в разделе [Пример проверки привязки](https://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Source" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, прослушивающий событие.</param>
        <param name="handler">Удаляемый обработчик.</param>
        <summary>Удаляет обработчик для вложенного события <see cref="E:System.Windows.Data.Binding.SourceUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод поддерживает использование присоединенных событий [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]в.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">Объект <see cref="T:System.Windows.UIElement" /> или <see cref="T:System.Windows.ContentElement" />, прослушивающий событие.</param>
        <param name="handler">Удаляемый обработчик.</param>
        <summary>Удаляет обработчик для вложенного события <see cref="E:System.Windows.Data.Binding.TargetUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод поддерживает использование присоединенных событий [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]в.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetXmlNamespaceManager(class System.Windows.DependencyObject target, class System.Xml.XmlNamespaceManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetXmlNamespaceManager (target As DependencyObject, value As XmlNamespaceManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetXmlNamespaceManager(System::Windows::DependencyObject ^ target, System::Xml::XmlNamespaceManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetXmlNamespaceManager : System.Windows.DependencyObject * System.Xml.XmlNamespaceManager -&gt; unit" Usage="System.Windows.Data.Binding.SetXmlNamespaceManager (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="target">Объект, из которого требуется получить сведения о пространстве имен.</param>
        <param name="value">Тип <see cref="T:System.Xml.XmlNamespaceManager" /> для оценки пространства имен в переданном элементе.</param>
        <summary>Задает объект диспетчера пространства имен, используемый привязкой, которая подсоединена к предоставленному элементу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод поддерживает использование присоединенного свойства для <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> присоединенного свойства.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePath">
      <MemberSignature Language="C#" Value="public bool ShouldSerializePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializePath" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializePath () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializePath();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializePath : unit -&gt; bool" Usage="binding.ShouldSerializePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет необходимость сохранения значения свойства <see cref="P:System.Windows.Data.Binding.Path" />.</summary>
        <returns>Значение <see langword="true" />, если значение свойства было изменено (относительно значения по умолчанию); в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот `ShouldSerialize` метод предоставляется, <xref:System.Windows.Data.Binding.Path%2A> поскольку свойство не имеет простого значения по умолчанию. Этот метод указывает, изменилось ли свойство со значения по умолчанию. Этот метод обычно вызывается при разработке конструктора для <xref:System.Windows.Data.Binding> или разработки собственного элемента управления, включающего. <xref:System.Windows.Data.Binding>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSource">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeSource" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSource () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSource();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSource : unit -&gt; bool" Usage="binding.ShouldSerializeSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет необходимость сохранения значения свойства <see cref="P:System.Windows.Data.Binding.Source" />.</summary>
        <returns>Значение <see langword="true" />, если значение свойства было изменено (относительно значения по умолчанию); в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот `ShouldSerialize` метод предоставляется, <xref:System.Windows.Data.Binding.Source%2A> поскольку свойство не имеет простого значения по умолчанию. Этот метод указывает, изменилось ли свойство со значения по умолчанию. Этот метод обычно вызывается при разработке конструктора для <xref:System.Windows.Data.Binding> или разработки собственного элемента управления, включающего. <xref:System.Windows.Data.Binding>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValidationRules">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeValidationRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeValidationRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeValidationRules () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeValidationRules();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeValidationRules : unit -&gt; bool" Usage="binding.ShouldSerializeValidationRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет необходимость сохранения значения свойства <see cref="P:System.Windows.Data.Binding.ValidationRules" />.</summary>
        <returns>Значение <see langword="true" />, если значение свойства было изменено (относительно значения по умолчанию); в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот `ShouldSerialize` метод предоставляется, <xref:System.Windows.Data.Binding.ValidationRules%2A> поскольку свойство не имеет простого значения по умолчанию. Этот метод указывает, изменилось ли свойство со значения по умолчанию. Этот метод обычно вызывается при разработке конструктора для <xref:System.Windows.Data.Binding> или разработки собственного элемента управления, включающего. <xref:System.Windows.Data.Binding>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.Data.Binding.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект, используемый как источник привязки.</summary>
        <value>Объект, используемый как источник привязки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию привязки наследуют контекст данных, заданный `DataContext` свойством, если он задан. Однако свойство является одним из способов явного задания источника <xref:System.Windows.Data.Binding> и переопределения унаследованного контекста данных. <xref:System.Windows.Data.Binding.Source%2A> Если не требуется функциональность установки области, в которой несколько свойств наследуют один и тот же контекст данных, можно использовать <xref:System.Windows.Data.Binding.Source%2A> свойство вместо `DataContext` свойства.  
  
 Свойства <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> и <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=nameWithType>  также позволяют явно задать источник привязки. Однако для каждой привязки должны быть установлены только одно <xref:System.Windows.Data.Binding.ElementName%2A>из <xref:System.Windows.Data.Binding.Source%2A>трех свойств <xref:System.Windows.Data.Binding.RelativeSource%2A>,, и, или может возникнуть конфликт. Это свойство создает исключение при конфликте источника привязки.  
  
 Чтобы очистить это свойство, задайте для <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>него значение.  
  
<a name="xamlAttributeUsage_Source"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object Source="object"/>  
```  
  
<a name="xamlValues_Source"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *object*  
 Существующий объект. Для ссылки на существующий объект используйте [расширение разметки StaticResource](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)  
  
   
  
## Examples  
 В следующем примере используется `Person` объект со строковым свойством с именем `PersonName` `SDKSample` , определенным в пространстве имен, как первая выделенная строка показана. `<src>` В выделенной строке, содержащей элемент, создается экземпляр `Person` объекта `Joe`со `PersonName` значением свойства. Это делается в `Resources` разделе и `x:Key`назначено.  
  
 [!code-xaml[BindingInstantiation](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml?highlight=4,9,37)]  
  
 Выделенная строка, содержащая `<TextBlock>` элементы, показывает, как выполнить привязку `PersonName` к свойству. В результате <xref:System.Windows.Controls.TextBlock> элемент управления отображается со значением Joe.  
  
 <xref:System.Windows.Data.Binding.Source%2A> В следующем примере <xref:System.Windows.Application.Current%2A?displayProperty=nameWithType>значения <xref:System.Windows.Data.Binding> объектов задаются для свойства: `static`  
  
 [!code-xaml[DataBindingLab#ComboBoxMultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/AddProductWindow.xaml#comboboxmultibinding)]  
  
 Полный пример см. в разделе [Демонстрация привязки данных](https://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" Usage="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возникает, когда значение передается от целевого объекта привязки к источнику привязки, но только для привязок, у которых значение <see cref="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" /> равно <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_SourceUpdatedEvent"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Data.Binding.SourceUpdatedEvent>|  
|Стратегия маршрутизации|Восходящей маршрутизации|  
|делегат|<xref:System.EventHandler%601>, ограничено <xref:System.Windows.Data.DataTransferEventArgs>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="SourceUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SourceUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SourceUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SourceUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SourceUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное событие <see cref="E:System.Windows.Data.Binding.SourceUpdated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" Usage="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возникает, когда значение передается от источника привязки к целевому объекту привязки, но только для привязок, у которых значение <see cref="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" /> равно <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TargetUpdatedEvent"></a>   
## <a name="routed-event-information"></a>Сведения о маршрутизируемом событии  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Data.Binding.TargetUpdatedEvent>|  
|Стратегия маршрутизации|Восходящей маршрутизации|  
|делегат|<xref:System.EventHandler%601>, ограничено <xref:System.Windows.Data.DataTransferEventArgs>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TargetUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TargetUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TargetUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное событие <see cref="E:System.Windows.Data.Binding.TargetUpdated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceExceptionFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceExceptionFilter As UpdateSourceExceptionFilterCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceExceptionFilterCallback ^ UpdateSourceExceptionFilter { System::Windows::Data::UpdateSourceExceptionFilterCallback ^ get(); void set(System::Windows::Data::UpdateSourceExceptionFilterCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceExceptionFilter : System.Windows.Data.UpdateSourceExceptionFilterCallback with get, set" Usage="System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceExceptionFilterCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает обработчик, который можно использовать для предоставления пользовательской логики для обработки исключений, которые механизм привязки находит при обновлении значения источника привязки. Это применимо, только если имеется правило <see cref="T:System.Windows.Controls.ExceptionValidationRule" />, связанное с привязкой.</summary>
        <value>Метод, предоставляющий пользовательскую логику для обработки исключений, которые механизм привязки находит при обновлении значения источника привязки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ExceptionValidationRule> — Это встроенное правило проверки, которое проверяет наличие исключений, возникающих во время обновления свойства источника привязки. Если <xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Data.Binding> объект связан с объектом, можно использовать это свойство, чтобы задать для обработчика настраиваемую логику для обработки этих исключений. Если параметр не указан <xref:System.Windows.Data.Binding>в, подсистема привязки создает <xref:System.Windows.Controls.ValidationError> исключение и добавляет его в <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> коллекцию связанного элемента. <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>  
  
   
  
## Examples  
 Свойство следующего <xref:System.Windows.Controls.TextBox> объекта привязано к данным свойства `Age3` источника, которое имеет тип  `int` .  <xref:System.Windows.Controls.TextBox.Text%2A> <xref:System.Windows.Controls.ExceptionValidationRule> Проверяет наличие исключений, возникающих во время обновления свойства источника (например, когда пользователь вводит значение, которое не может быть преобразовано в целое число).  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 Для обработки этих исключений можно указать пользовательскую логику. В следующем примере показано, как использовать <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> свойство для <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>задания.  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 Ниже приведен пример реализации <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 Может также возвращать `null`, само <xref:System.Windows.Controls.ValidationError>исключение или. <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> Для получения дополнительной информации см. <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 Полный пример см. в разделе [Пример проверки привязки](https://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger UpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, определяющее расписание обновлений источника привязки.</summary>
        <value>Одно из значений <see cref="T:System.Windows.Data.UpdateSourceTrigger" />. Значение по умолчанию — <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />, которое возвращает значение по умолчанию <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> целевого свойства зависимостей. Однако значение по умолчанию для большинства свойств зависимостей — <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />, а свойство <see cref="P:System.Windows.Controls.TextBox.Text" /> имеет значение по умолчанию <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />.  
  
Программный способ определения значения по умолчанию <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> свойства зависимостей заключается в получении метаданных свойства с помощью <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> и последующей проверке значения свойства <see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Привязки, которые <xref:System.Windows.Data.BindingMode.TwoWay> или <xref:System.Windows.Data.BindingMode.OneWayToSource> ожидают изменения в целевом свойстве, и распространяют их обратно в источник. Это называется обновлением источника. Обычно эти обновления происходят при изменении целевого свойства. Это подходит для флажков и других простых элементов управления, но обычно он не подходит для текстовых полей. Обновление после каждого нажатия клавиши может снизить производительность, и оно запрещает пользователю обычные возможности по возврату и исправлению ошибок ввода перед фиксацией нового значения. <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> Поэтому значение <xref:System.Windows.Controls.TextBox.Text%2A> свойства по умолчанию — <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> , а не <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  
  
 Если задано <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> <xref:System.Windows.Data.UpdateSourceTrigger.Explicit>значение <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> , необходимо вызвать метод, иначе изменения не будут переданы обратно в источник.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Mode" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, включать ли объект <see cref="T:System.Windows.Controls.DataErrorValidationRule" />.</summary>
        <value><see langword="true" /> для включения <see cref="T:System.Windows.Controls.DataErrorValidationRule" />; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задание этого свойства предоставляет альтернативу явному использованию <xref:System.Windows.Controls.DataErrorValidationRule> элемента. — Это встроенное правило проверки, которое проверяет наличие ошибок, вызванных <xref:System.ComponentModel.IDataErrorInfo> реализацией исходного объекта. <xref:System.Windows.Controls.DataErrorValidationRule> При возникновении ошибки обработчик привязки создает объект <xref:System.Windows.Controls.ValidationError> с ошибкой и добавляет его <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> в коллекцию связанного элемента. Отсутствие ошибки очищает этот отзыв, если только другое правило не вызывает проверку.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A>вводится в .NET Framework версии 3,5.  Дополнительные сведения см. в разделе [Платформа.NET Framework: версии и зависимости](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 В следующих примерах <xref:System.ComponentModel.IDataErrorInfo> используется <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> и для <xref:System.Windows.Controls.TextBox>проверки вводимых пользователем данных в. В первом примере создается тип данных, который реализуется <xref:System.ComponentModel.IDataErrorInfo> для отчетов об ошибках проверки.  
  
 [!code-csharp[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#idataerrorinfodata)]
 [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#idataerrorinfodata)]  
  
 В следующем `Age` примере свойство привязывается <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> <xref:System.Windows.Controls.TextBox> к свойству и устанавливается `true` в значение <xref:System.Windows.Data.Binding>в параметре.  Когда пользователь вводит недопустимое значение, в окне <xref:System.Windows.Controls.TextBox> появляется красная граница, а в <xref:System.Windows.Controls.ToolTip> сообщении отображается сообщение об ошибке.  
  
 [!code-xaml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#idataerrorinfoxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnExceptions">
      <MemberSignature Language="C#" Value="public bool ValidatesOnExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnExceptions : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, включать ли объект <see cref="T:System.Windows.Controls.ExceptionValidationRule" />.</summary>
        <value><see langword="true" /> для включения <see cref="T:System.Windows.Controls.ExceptionValidationRule" />; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задание этого свойства предоставляет альтернативу явному использованию <xref:System.Windows.Controls.ExceptionValidationRule> элемента. <xref:System.Windows.Controls.ExceptionValidationRule> — Это встроенное правило проверки, которое проверяет наличие исключений, возникающих во время обновления свойства Source. При возникновении исключения подсистема привязки создает <xref:System.Windows.Controls.ValidationError> исключение и добавляет его <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> в коллекцию связанного элемента. Отсутствие ошибки очищает этот отзыв, если только другое правило не вызывает проверку.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A>вводится в .NET Framework версии 3,5.  Дополнительные сведения см. в разделе [Платформа.NET Framework: версии и зависимости](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 В следующих примерах <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> используется для проверки вводимых пользователем данных <xref:System.Windows.Controls.TextBox>в. В первом примере создается тип данных, который создает исключение, если `Age` свойству задано недопустимое свойство.  
  
 [!code-csharp[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#throwexceptiondata)]
 [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#throwexceptiondata)]  
  
 В следующем `Age` примере свойство привязывается <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> <xref:System.Windows.Controls.TextBox> к свойству и устанавливается `true` в значение <xref:System.Windows.Data.Binding>в параметре. Когда пользователь вводит недопустимое значение, в окне <xref:System.Windows.Controls.TextBox> появляется красная граница, а в <xref:System.Windows.Controls.ToolTip> сообщении отображается сообщение об ошибке.  
  
 [!code-xaml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#throwexceptionxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, включать ли объект <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />.</summary>
        <value><see langword="true" /> для включения <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A> имеет `true`значение, то привязка проверяет и сообщает об ошибках, вызываемых источником данных, <xref:System.ComponentModel.INotifyDataErrorInfo>реализующим.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.Binding.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию правил, проверяющих правильность пользовательского ввода.</summary>
        <value>Коллекция объектов <see cref="T:System.Windows.Controls.ValidationRule" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Модель привязки <xref:System.Windows.Data.Binding.ValidationRules%2A> <xref:System.Windows.Data.Binding> данных позволяет связываться с объектом или  <xref:System.Windows.Data.MultiBinding> . [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Можно создавать пользовательские правила, производные от <xref:System.Windows.Controls.ValidationRule> класса и <xref:System.Windows.Controls.ValidationRule.Validate%2A> реализуя метод, или можно <xref:System.Windows.Controls.ExceptionValidationRule>использовать встроенный объект, который делает недействительным значение, если во время обновлений источника возникли исключения.  
  
 Механизм привязки проверяет каждый <xref:System.Windows.Controls.ValidationRule> связанный с привязкой, каждый раз, когда входное значение (значение свойства целевого объекта привязки) передается в свойство источника привязки. Подробное обсуждение процесса проверки см. в разделе "Проверка данных" в статье [Общие сведения о привязке данных](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!NOTE]
>  Это свойство можно задать [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] только с помощью показанного синтаксиса коллекции или путем доступа к объекту коллекции и использования его различных методов, таких как. `Add` Свойство для доступа к объекту коллекции доступно только для чтения, в то время как сама коллекция доступна для чтения и записи.  
  
<a name="xamlPropertyElementUsage_ValidationRules"></a>   
## <a name="xaml-property-element-usage"></a>Использование элемента свойства XAML  
  
```  
<object>  
  <object.ValidationRules>  
    oneOrMoreValidationRules  
  </object.ValidationRules>  
</object>  
  
```  
  
<a name="xamlValues_ValidationRules"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *онеорморевалидатионрулес*  
 Один или несколько <xref:System.Windows.Controls.ValidationRule> объектов. Можно использовать <xref:System.Windows.Controls.ExceptionValidationRule> класс или создать настраиваемые правила, подклассом которого <xref:System.Windows.Controls.ValidationRule> является класс.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Validation" />
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManager">
      <MemberSignature Language="C#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="ILAsm" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XmlNamespaceManager" />
      <MemberSignature Language="VB.NET" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="F#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" Usage="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает или задает объект <see cref="T:System.Xml.XmlNamespaceManager" />, используемый для выполнения учитывающих пространство имен запросов <see langword="XPath" /> в привязках XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это присоединенное свойство использует наследование значения свойства, которое воссоздает поведение наследования пространства имен, присутствующего [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]в. Подробнее см. в разделе [Наследование значения свойства](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
<a name="dependencyPropertyInfo_XmlNamespaceManager"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Data.Binding.XmlNamespaceManagerProperty>|  
|Свойства метаданных, для которых задано значение`true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty XmlNamespaceManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly XmlNamespaceManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ XmlNamespaceManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable XmlNamespaceManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентифицирует присоединенное свойство <see cref="P:System.Windows.Data.Binding.XmlNamespaceManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Windows.Data.Binding.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see langword="XPath" /> запрос, возвращающий значение источника привязки [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)], которое нужно использовать.</summary>
        <value>Запрос <see langword="XPath" /> . Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] Если источником привязки являются данные, а [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] не объект, <xref:System.Windows.Data.Binding.XPath%2A> свойство используется вместо <xref:System.Windows.Data.Binding.Path%2A> свойства для указания пути к значению в источнике привязки для использования.  
  
 Настроив <xref:System.Windows.Data.Binding.XPath%2A> свойство, вы `XPath` создаете запрос для выбора узла или коллекции узлов (<xref:System.Xml.XmlElement?displayProperty=nameWithType> и <xref:System.Xml.XmlAttribute?displayProperty=nameWithType> оба являются производными от <xref:System.Xml.XmlNode?displayProperty=nameWithType>). <xref:System.Xml.XmlNode?displayProperty=nameWithType>— Это <xref:System.Windows.Data.Binding.Path%2A> объект, который означает, что можно выполнить привязку к его свойствам с помощью свойства. [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]  
  
 Метод обрабатывает выражения из <xref:System.Windows.Data.Binding.XPath%2A> Свойства. `XPath` <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> `XPath`функции не поддерживаются. Сведения о <xref:System.Xml.XmlNode.SelectNodes%2A> выражениях см. в документации и некоторых примерах, приведенных в разделе "пример". `XPath`  
  
 LINQ to XML объекты <xref:System.Xml.Linq.XDocument> и <xref:System.Xml.Linq.XElement> не используют `XPath`. Дополнительные сведения см. в разделе [как привязать к таблице XDocument, XElement или LINQ для результатов запроса XML](~/docs/framework/wpf/data/how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
