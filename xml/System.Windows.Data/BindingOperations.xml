<Type Name="BindingOperations" FullName="System.Windows.Data.BindingOperations">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cc449894fff95cd6a3750ab3ac29b923170bf08" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75052246" /></Metadata><TypeSignature Language="C#" Value="public static class BindingOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BindingOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingOperations" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingOperations abstract sealed" />
  <TypeSignature Language="F#" Value="type BindingOperations = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет статические методы для работы с привязками, включая объекты <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" /> и <see cref="T:System.Windows.Data.PriorityBinding" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс предоставляет набор статических методов, которые служат вспомогательными операциями для привязок данных.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessCollection">
      <MemberSignature Language="C#" Value="public static void AccessCollection (System.Collections.IEnumerable collection, Action accessMethod, bool writeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AccessCollection(class System.Collections.IEnumerable collection, class System.Action accessMethod, bool writeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.AccessCollection(System.Collections.IEnumerable,System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AccessCollection (collection As IEnumerable, accessMethod As Action, writeAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AccessCollection(System::Collections::IEnumerable ^ collection, Action ^ accessMethod, bool writeAccess);" />
      <MemberSignature Language="F#" Value="static member AccessCollection : System.Collections.IEnumerable * Action * bool -&gt; unit" Usage="System.Windows.Data.BindingOperations.AccessCollection (collection, accessMethod, writeAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="accessMethod" Type="System.Action" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writeAccess" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="collection">Коллекция для доступа.</param>
        <param name="accessMethod">Действие, выполняемое для коллекции.</param>
        <param name="writeAccess">Значение <see langword="true" />, если метод <paramref name="accessMethod" /> будет производить запись в коллекцию; в противном случае — значение <see langword="false" />.</param>
        <summary>Предоставляет доступ к коллекции с помощью механизма синхронизации, заданного приложением при вызове EnableCollectionSynchronization.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllBindings">
      <MemberSignature Language="C#" Value="public static void ClearAllBindings (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllBindings(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearAllBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllBindings (target As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllBindings(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member ClearAllBindings : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Data.BindingOperations.ClearAllBindings target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Объект, из которого нужно удалить привязки.</param>
        <summary>Удаляет все привязки, включая привязки типа <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" /> и <see cref="T:System.Windows.Data.PriorityBinding" />, из указанного объекта <see cref="T:System.Windows.DependencyObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указанный объект не привязан к данным, этот метод не оказывает никакого влияния.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="target" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearBinding">
      <MemberSignature Language="C#" Value="public static void ClearBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearBinding (target As DependencyObject, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member ClearBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; unit" Usage="System.Windows.Data.BindingOperations.ClearBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, из которого нужно удалить привязку.</param>
        <param name="dp">Свойство зависимостей, из которого нужно удалить привязку.</param>
        <summary>Удаляет привязку из свойства, если она существует.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если заданное свойство привязано к данным с помощью <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>или <xref:System.Windows.Data.MultiBinding>, этот метод удаляет соответствующее выражение привязки и восстанавливает значение свойства до тех пор, пока не было задано локальное значение с помощью привязки.  
  
 Если заданное свойство не привязано к данным, этот метод не оказывает никакого влияния.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CollectionRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CollectionRegistering As EventHandler(Of CollectionRegisteringEventArgs) " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionRegisteringEventArgs ^&gt; ^ CollectionRegistering;" />
      <MemberSignature Language="F#" Value="member this.CollectionRegistering : EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; " Usage="member this.CollectionRegistering : System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionRegistering As EventHandler(Of CollectionRegisteringEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда система привязки данных замечает коллекцию.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionViewRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CollectionViewRegistering As EventHandler(Of CollectionViewRegisteringEventArgs) " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionViewRegisteringEventArgs ^&gt; ^ CollectionViewRegistering;" />
      <MemberSignature Language="F#" Value="member this.CollectionViewRegistering : EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; " Usage="member this.CollectionViewRegistering : System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionViewRegistering As EventHandler(Of CollectionViewRegisteringEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда система привязки данных замечает представление коллекции.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void DisableCollectionSynchronization (System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableCollectionSynchronization(class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.DisableCollectionSynchronization(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisableCollectionSynchronization (collection As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisableCollectionSynchronization(System::Collections::IEnumerable ^ collection);" />
      <MemberSignature Language="F#" Value="static member DisableCollectionSynchronization : System.Collections.IEnumerable -&gt; unit" Usage="System.Windows.Data.BindingOperations.DisableCollectionSynchronization collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="collection">Коллекция, у которой требуется удалить синхронизируемый доступ.</param>
        <summary>Удаляет синхронизацию, зарегистрированную для указанной коллекции.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectedSource">
      <MemberSignature Language="C#" Value="public static object DisconnectedSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property object DisconnectedSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DisconnectedSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Object ^ DisconnectedSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisconnectedSource : obj" Usage="System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, заменяющий <see cref="P:System.Windows.FrameworkElement.DataContext" /> при удалении контейнера элементов из визуального дерева.</summary>
        <value>Объект, заменяющий <see cref="P:System.Windows.FrameworkElement.DataContext" /> при удалении контейнера элементов из визуального дерева.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство используется, если необходимо работать с <xref:System.Windows.FrameworkElement.DataContext%2A> контейнера элементов.  Контейнер элемента — это элемент пользовательского интерфейса, который отображает элемент в <xref:System.Windows.Controls.ItemsControl>.  Если <xref:System.Windows.Controls.ItemsControl> данные привязаны к коллекции, для каждого элемента создается контейнер элементов.  В некоторых случаях контейнеры элементов удаляются из визуального дерева.  Два типичных случая удаления контейнера элементов — при удалении элемента из базовой коллекции и при включении виртуализации на <xref:System.Windows.Controls.ItemsControl>.  В этих случаях свойству <xref:System.Windows.FrameworkElement.DataContext%2A> контейнера элемента будет присвоено значение свойства <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> необходимо проверить, равен ли <xref:System.Windows.FrameworkElement.DataContext%2A> <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A>, прежде чем обращаться к <xref:System.Windows.FrameworkElement.DataContext%2A> в событии <xref:System.Windows.FrameworkElement.DataContextChanged> для контейнеров элементов. Дополнительные сведения о контейнерах элементов и виртуализации см. в разделе Примечания в классе <xref:System.Windows.Controls.VirtualizingStackPanel>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableCollectionSynchronization">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Позволяет объекту <see cref="T:System.Windows.Data.CollectionView" /> участвовать в синхронизированном доступе к коллекции, используемой в нескольких потоках.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Приложение WPF может отображать коллекцию данных с помощью <xref:System.Windows.Controls.ItemsControl> или одного из его подклассов (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>и т. д.). WPF обращается к коллекции по каналу через подкласс <xref:System.Windows.Data.CollectionView>. И <xref:System.Windows.Controls.ItemsControl>, и <xref:System.Windows.Data.CollectionView> имеют сходство с потоком, в котором была создана <xref:System.Windows.Controls.ItemsControl>, что означает, что их использование в другом потоке запрещено и создает исключение. В действительности это ограничение также применяется к коллекции.
 
Может потребоваться использовать коллекцию в нескольких потоках.   Например, необходимо обновить коллекцию (добавить или удалить элементы) в потоке сбора данных, отображая результаты в потоке пользовательского интерфейса, чтобы пользовательский интерфейс оставался в рабочем процессе во время сбора данных. В такой ситуации вы несете ответственность за обеспечение синхронизированного ("потокобезопасным") доступа к коллекции.   Обычно это делается с помощью простого механизма блокировки или более тщательного механизма синхронизации, такого как семафоры, события сброса и т. д.   хотя необходимо синхронизировать доступ приложения к коллекции, необходимо также гарантировать, что доступ из WPF (в частности, от <xref:System.Windows.Data.CollectionView>) участвует в одном механизме синхронизации.  Это делается путем вызова метода <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>.
 
Чтобы использовать коллекцию в нескольких потоках, одним из которых является поток пользовательского интерфейса, владеющий <xref:System.Windows.Controls.ItemsControl>, приложение имеет следующие обязанности:

1. Выберите механизм синхронизации.

1. Синхронизировать весь доступ из приложения к коллекции с помощью этого механизма.

1. Вызовите <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>, чтобы сообщить платформе WPF о механизме.

   - Вызов должен осуществляться в потоке пользовательского интерфейса.

   - Вызов должен осуществляться перед использованием коллекции в другом потоке или перед присоединением коллекции к <xref:System.Windows.Controls.ItemsControl>, в зависимости от того, какое значение будет позже.

   - Вызовите перегрузку <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>, если используется простой механизм блокировки; вызовите перегрузку <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>, если используется более сложный механизм.

1. Убедитесь, что изменение в коллекции и уведомление об этом изменении (с помощью <xref:System.Collections.Specialized.INotifyCollectionChanged>) являются атомарными; нет доступа из других потоков.  (Обычно это бесплатно. Например, <xref:System.Collections.ObjectModel.ObservableCollection%601> гарантирует это при условии, что все изменения защищены синхронизацией.)

1. При вызове <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>этот вызов также должен выполняться в потоке пользовательского интерфейса.

1. Если вы хотите использовать одну и ту же коллекцию в нескольких потоках пользовательского интерфейса, необходимо по отдельности вызвать <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (и <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>при необходимости) в каждом потоке пользовательского интерфейса.

1. Избегайте взаимоблокировок.  Это уже является обязанностью приложения после того, как она выбрала синхронизацию, но также должна учитывать участие в синхронизации WPF, как описано в следующем абзаце.

В случае возврата WPF обеспечивает следующее поведение:

- <xref:System.Windows.Data.CollectionView> обращается к коллекции, используя заданный механизм синхронизации.

- <xref:System.Windows.Data.CollectionView> поддерживает "теневую копию" коллекции для использования в потоке пользовательского интерфейса.

- <xref:System.Windows.Data.CollectionView.CollectionChanged> события помещаются в очередь по мере их прибытия (в любом потоке).

- Ожидающие события применяются к теневому копированию асинхронно в потоке пользовательского интерфейса, когда у него есть возможность сделать это.

- <xref:System.Windows.Data.CollectionView> не будет напрямую использовать любой другой механизм синхронизации, видимый для приложения. Это способ предотвращения взаимоблокировок в WPF (см. предыдущий элемент 7).   

В итоге вы можете изменить коллекцию в любом потоке, и эти изменения отобразятся в <xref:System.Windows.Controls.ItemsControl>, когда поток пользовательского интерфейса имеет время на «отследить».  Реализация была настроена для регулирования скорости передачи изменений в поток пользовательского интерфейса, чтобы обеспечить фоновый поток от насыщенного потока пользовательского интерфейса и избежать ответа на обычные входные данные пользователя.

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object lockObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object lockObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, lockObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ lockObject);" />
      <MemberSignature Language="F#" Value="static member EnableCollectionSynchronization : System.Collections.IEnumerable * obj -&gt; unit" Usage="System.Windows.Data.BindingOperations.EnableCollectionSynchronization (collection, lockObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="lockObject" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="collection">Коллекция, которой требуется синхронизированный доступ.</param>
        <param name="lockObject">Объект, который будет блокироваться при доступе к коллекции.</param>
        <summary>Позволяет объекту <see cref="T:System.Windows.Data.CollectionView" /> участвовать в синхронизированном доступе к коллекции, используемой в нескольких потоках, с помощью простого механизма блокировки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Приложение WPF может отображать коллекцию данных с помощью <xref:System.Windows.Controls.ItemsControl> или одного из его подклассов (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>и т. д.). WPF обращается к коллекции по каналу через подкласс <xref:System.Windows.Data.CollectionView>. И <xref:System.Windows.Controls.ItemsControl>, и <xref:System.Windows.Data.CollectionView> имеют сходство с потоком, в котором была создана <xref:System.Windows.Controls.ItemsControl>, что означает, что их использование в другом потоке запрещено и создает исключение. В действительности это ограничение также применяется к коллекции.
 
Может потребоваться использовать коллекцию в нескольких потоках.   Например, необходимо обновить коллекцию (добавить или удалить элементы) в потоке сбора данных, отображая результаты в потоке пользовательского интерфейса, чтобы пользовательский интерфейс оставался в рабочем процессе во время сбора данных. В такой ситуации вы несете ответственность за обеспечение синхронизированного ("потокобезопасным") доступа к коллекции и гарантирует, что доступ из WPF (в частности <xref:System.Windows.Data.CollectionView>) участвует в одном механизме синхронизации. Вызвав метод <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>, можно сделать это с помощью простого механизма блокировки. 
 
Чтобы использовать коллекцию в нескольких потоках, одним из которых является поток пользовательского интерфейса, владеющий <xref:System.Windows.Controls.ItemsControl>, необходимо выполнить следующие действия.

1. Создайте экземпляр объекта для блокировки при доступе к коллекции.

1. Синхронизировать весь доступ из приложения к коллекции, заключив этот объект.

1. Вызовите <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>, чтобы сообщить WPF, что вы используете простой механизм блокировки.

   - Вызов должен осуществляться в потоке пользовательского интерфейса.

   - Вызов должен осуществляться перед использованием коллекции в другом потоке или перед присоединением коллекции к <xref:System.Windows.Controls.ItemsControl>, в зависимости от того, какое значение будет позже.

1. Убедитесь, что изменение в коллекции и уведомление об этом изменении (с помощью <xref:System.Collections.Specialized.INotifyCollectionChanged>) являются атомарными; нет доступа из других потоков.  (Обычно это бесплатно. Например, <xref:System.Collections.ObjectModel.ObservableCollection%601> гарантирует это при условии, что все изменения защищены синхронизацией.)

1. При вызове <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>этот вызов также должен выполняться в потоке пользовательского интерфейса.

1. Если вы хотите использовать одну и ту же коллекцию в нескольких потоках пользовательского интерфейса, необходимо по отдельности вызвать <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (и <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>при необходимости) в каждом потоке пользовательского интерфейса.

1. Избегайте взаимоблокировок.  Это уже является обязанностью приложения после того, как она выбрала синхронизацию, но также должна учитывать участие WPF в синхронизации. (Дополнительные сведения см. ниже.)

В случае возврата WPF обеспечивает следующее поведение:

- <xref:System.Windows.Data.CollectionView> обращается к коллекции с помощью механизма блокировки.

- <xref:System.Windows.Data.CollectionView> поддерживает "теневую копию" коллекции для использования в потоке пользовательского интерфейса.

- <xref:System.Windows.Data.CollectionView.CollectionChanged> события помещаются в очередь по мере их прибытия (в любом потоке).

- Ожидающие события применяются к теневому копированию асинхронно в потоке пользовательского интерфейса, когда у него есть возможность сделать это.

- <xref:System.Windows.Data.CollectionView> не будет напрямую использовать какой бы то ни было другой механизм синхронизации, видимый для приложения. Это способ предотвращения взаимоблокировок в WPF (см. предыдущий элемент 7).   

В итоге вы можете изменить коллекцию в любом потоке, и эти изменения отобразятся в <xref:System.Windows.Controls.ItemsControl>, когда поток пользовательского интерфейса имеет время на «отследить».  Реализация была настроена для регулирования скорости передачи изменений в поток пользовательского интерфейса, чтобы обеспечить фоновый поток от насыщенного потока пользовательского интерфейса и избежать ответа на обычные входные данные пользователя.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object context, System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object context, class System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, context As Object, synchronizationCallback As CollectionSynchronizationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ context, System::Windows::Data::CollectionSynchronizationCallback ^ synchronizationCallback);" />
      <MemberSignature Language="F#" Value="static member EnableCollectionSynchronization : System.Collections.IEnumerable * obj * System.Windows.Data.CollectionSynchronizationCallback -&gt; unit" Usage="System.Windows.Data.BindingOperations.EnableCollectionSynchronization (collection, context, synchronizationCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="synchronizationCallback" Type="System.Windows.Data.CollectionSynchronizationCallback" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="collection">Коллекция, которой требуется синхронизированный доступ.</param>
        <param name="context">Объект, который передается в функцию обратного вызова.</param>
        <param name="synchronizationCallback">Функция обратного вызова, которая вызывается каждый раз, когда запрашивается доступ к коллекции. С его помощью можно проверить, осуществляет ли доступ к коллекции одновременно только один поток.</param>
        <summary>Позволяет объекту <see cref="T:System.Windows.Data.CollectionView" /> участвовать в синхронизированном доступе к коллекции, используемой в нескольких потоках, с помощью механизма, отличного от простой блокировки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Приложение WPF может отображать коллекцию данных с помощью <xref:System.Windows.Controls.ItemsControl> или одного из его подклассов (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>и т. д.). WPF обращается к коллекции по каналу через подкласс <xref:System.Windows.Data.CollectionView>. И <xref:System.Windows.Controls.ItemsControl>, и <xref:System.Windows.Data.CollectionView> имеют сходство с потоком, в котором была создана <xref:System.Windows.Controls.ItemsControl>, что означает, что их использование в другом потоке запрещено и создает исключение. В действительности это ограничение также применяется к коллекции.
 
Может потребоваться использовать коллекцию в нескольких потоках.   Например, необходимо обновить коллекцию (добавить или удалить элементы) в потоке сбора данных, отображая результаты в потоке пользовательского интерфейса, чтобы пользовательский интерфейс оставался в рабочем процессе во время сбора данных. В такой ситуации вы несете ответственность за обеспечение синхронизированного ("потокобезопасным") доступа к коллекции и гарантирует, что доступ из WPF (в частности <xref:System.Windows.Data.CollectionView>) участвует в одном механизме синхронизации. Вызывая метод <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>, это можно сделать с помощью механизма синхронизации, такого как семафоры, событие сброса и т. д.  , чтобы использовать коллекцию в нескольких потоках, один из которых является потоком пользовательского интерфейса, которому принадлежит <xref:System.Windows.Controls.ItemsControl>, необходимо выполнить следующие действия.

1. Выберите механизм синхронизации.

1. Синхронизировать весь доступ из приложения к коллекции с помощью этого механизма.

1. Вызовите перегрузку <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>, чтобы сообщить WPF, что вы используете механизм, отличный от простой блокировки.

   - Вызов должен осуществляться в потоке пользовательского интерфейса.

   - Вызов должен осуществляться перед использованием коллекции в другом потоке или перед присоединением коллекции к <xref:System.Windows.Controls.ItemsControl>, в зависимости от того, какое значение будет позже.

1. Убедитесь, что изменение в коллекции и уведомление об этом изменении (с помощью <xref:System.Collections.Specialized.INotifyCollectionChanged>) являются атомарными; нет доступа из других потоков.  (Обычно это бесплатно. Например, <xref:System.Collections.ObjectModel.ObservableCollection%601> гарантирует это при условии, что все изменения защищены синхронизацией.)

1. При вызове <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>этот вызов также должен выполняться в потоке пользовательского интерфейса.

1. Если вы хотите использовать одну и ту же коллекцию в нескольких потоках пользовательского интерфейса, необходимо по отдельности вызвать <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (и <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>при необходимости) в каждом потоке пользовательского интерфейса.

1. Избегайте взаимоблокировок.  Это уже является обязанностью приложения после того, как она выбрала синхронизацию, но также должна учитывать участие WPF в синхронизации. (Дополнительные сведения см. ниже.)

В случае возврата WPF обеспечивает следующее поведение:

- <xref:System.Windows.Data.CollectionView> обращается к коллекции, вызывая зарегистрированный <xref:System.Windows.Data.CollectionSynchronizationCallback> со следующими аргументами:

   - `collection`: интересующая коллекция.
   - `context`: зарегистрированный объект context.
   - `accessMethod`: делегат, который выполняет фактический доступ.
   - `writeAccess`: `true`, если делегат будет изменять коллекцию; в противном случае `false`.

   <xref:System.Windows.Data.CollectionSynchronizationCallback> должны установить синхронизацию в коллекции (используя объект `context` и `writeAccess` значение соответственно), вызвать `accessMethod`, а затем отпустить синхронизацию.

- <xref:System.Windows.Data.CollectionView> поддерживает "теневую копию" коллекции для использования в потоке пользовательского интерфейса.

- <xref:System.Windows.Data.CollectionView.CollectionChanged> события помещаются в очередь по мере их прибытия (в любом потоке).

- Ожидающие события применяются к теневому копированию асинхронно в потоке пользовательского интерфейса, когда у него есть возможность сделать это.

- <xref:System.Windows.Data.CollectionView> не будет напрямую использовать какой бы то ни было другой механизм синхронизации, видимый для приложения. Это способ предотвращения взаимоблокировок в WPF (см. предыдущий элемент 7).   

В итоге вы можете изменить коллекцию в любом потоке, и эти изменения отобразятся в <xref:System.Windows.Controls.ItemsControl>, когда поток пользовательского интерфейса имеет время на «отследить».  Реализация была настроена для регулирования скорости передачи изменений в поток пользовательского интерфейса, чтобы обеспечить фоновый поток от насыщенного потока пользовательского интерфейса и избежать ответа на обычные входные данные пользователя.

 Параметр `context` — это произвольный объект, который передается `callback`. Его можно использовать для определения механизма синхронизации, используемого для управления доступом к `collection`. `Context` можно `null`.  
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.Binding GetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.Binding GetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBinding (target As DependencyObject, dp As DependencyProperty) As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::Binding ^ GetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.Binding" Usage="System.Windows.Data.BindingOperations.GetBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.Binding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, в котором находится <paramref name="dp" />.</param>
        <param name="dp">Свойство цели привязки, из которого извлекается привязка.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.Binding" />, установленный на указанное свойство.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.Binding" />, установленный для заданного свойства, или <see langword="null" />, если объект <see cref="T:System.Windows.Data.Binding" /> не установлен.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingBase GetBindingBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingBase GetBindingBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingBase (target As DependencyObject, dp As DependencyProperty) As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingBase ^ GetBindingBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingBase : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingBase" Usage="System.Windows.Data.BindingOperations.GetBindingBase (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, в котором находится <paramref name="dp" />.</param>
        <param name="dp">Целевое свойство привязки, из которого извлекается объект <see cref="T:System.Windows.Data.BindingBase" />.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.BindingBase" />, установленный на указанное свойство.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.BindingBase" />, установленный для заданного свойства, или <see langword="null" />, если объект привязки не установлен.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.Windows.Data.BindingBase> является общим базовым классом для классов <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>и <xref:System.Windows.Data.MultiBinding>. Можно использовать методы <xref:System.Windows.Data.BindingOperations.GetBinding%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBinding%2A>и <xref:System.Windows.Data.BindingOperations.GetMultiBinding%2A>, если заранее известно, что тип привязки задан для свойства.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpression (target As DependencyObject, dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="System.Windows.Data.BindingOperations.GetBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Целевой объект привязки, где находится <paramref name="dp" />.</param>
        <param name="dp">Целевое свойство привязки, из которого извлекается объект <see cref="T:System.Windows.Data.BindingExpression" />.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.BindingExpression" />, связанный с указанным целевым свойством привязки в указанном объекте.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.BindingExpression" />, связанный с указанным свойством, или <see langword="null" />, если его не существует. Если в свойстве задается объект <see cref="T:System.Windows.Data.PriorityBindingExpression" />, возвращается <see cref="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Data.BindingExpression> поддерживает соединение между источником привязки и целевым объектом привязки. Объект <xref:System.Windows.Data.BindingExpression> можно получить, вызвав этот статический метод или вызвав метод <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> для привязанного к данным <xref:System.Windows.FrameworkElement> или объекта <xref:System.Windows.FrameworkContentElement>.  
  
   
  
## Examples  
 В следующем примере показана реализация обработчика <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событий, который использует метод <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A> для получения <xref:System.Windows.Data.BindingExpression>, а затем вызывает свойство <xref:System.Windows.Data.BindingExpression.DataItem%2A> для доступа к объекту источника привязки.  
  
 <xref:System.Windows.Controls.TextBlock>`SavingsText` является целевым объектом привязки, а <xref:System.Windows.Controls.TextBlock.Text%2A> является свойством цели привязки.  
  
 [!code-csharp[DirectionalBinding#OnRentRaise](~/samples/snippets/csharp/VS_Snippets_Wpf/DirectionalBinding/CSharp/Page1.xaml.cs#onrentraise)]
 [!code-vb[DirectionalBinding#OnRentRaise](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DirectionalBinding/VisualBasic/DirectionalBinding.vb#onrentraise)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpressionBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase GetBindingExpressionBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase GetBindingExpressionBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpressionBase (target As DependencyObject, dp As DependencyProperty) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ GetBindingExpressionBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingExpressionBase : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpressionBase" Usage="System.Windows.Data.BindingOperations.GetBindingExpressionBase (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, в котором находится <paramref name="dp" />.</param>
        <param name="dp">Целевое свойство привязки, из которого извлекается объект <see cref="T:System.Windows.Data.BindingExpressionBase" />.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.BindingExpressionBase" />, установленный на указанное свойство.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.BindingExpressionBase" />, установленный для заданного свойства, или <see langword="null" />, если объект привязки не установлен.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.Windows.Data.BindingExpressionBase> является общим базовым классом для классов <xref:System.Windows.Data.BindingExpression>, <xref:System.Windows.Data.PriorityBindingExpression>и <xref:System.Windows.Data.MultiBindingExpression>. Можно использовать методы <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBindingExpression%2A>и <xref:System.Windows.Data.BindingOperations.GetMultiBindingExpression%2A>, если известно, что для свойства задан тип привязки "предварительный".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBinding GetMultiBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBinding GetMultiBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBinding (target As DependencyObject, dp As DependencyProperty) As MultiBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBinding ^ GetMultiBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetMultiBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.MultiBinding" Usage="System.Windows.Data.BindingOperations.GetMultiBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, в котором находится <paramref name="dp" />.</param>
        <param name="dp">Свойство цели привязки, из которого извлекается привязка.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.MultiBinding" />, установленный на указанное свойство.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.MultiBinding" />, установленный для заданного свойства, или <see langword="null" />, если объект <see cref="T:System.Windows.Data.MultiBinding" /> не установлен.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBindingExpression GetMultiBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBindingExpression GetMultiBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBindingExpression (target As DependencyObject, dp As DependencyProperty) As MultiBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBindingExpression ^ GetMultiBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetMultiBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.MultiBindingExpression" Usage="System.Windows.Data.BindingOperations.GetMultiBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Целевой объект привязки, где находится <paramref name="dp" />.</param>
        <param name="dp">Целевое свойство привязки, из которого извлекается объект <see cref="T:System.Windows.Data.MultiBindingExpression" />.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.MultiBindingExpression" />, связанный с указанным целевым свойством привязки в указанном объекте.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.MultiBindingExpression" />, связанный с указанным свойством, или <see langword="null" />, если его не существует.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Data.MultiBindingExpression>, связанный с указанным свойством, или `null`, если его не существует.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBinding GetPriorityBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBinding GetPriorityBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBinding (target As DependencyObject, dp As DependencyProperty) As PriorityBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBinding ^ GetPriorityBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetPriorityBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.PriorityBinding" Usage="System.Windows.Data.BindingOperations.GetPriorityBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, в котором находится <paramref name="dp" />.</param>
        <param name="dp">Свойство цели привязки, из которого извлекается привязка.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.PriorityBinding" />, установленный на указанное свойство.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.PriorityBinding" />, установленный для заданного свойства, или <see langword="null" />, если объект <see cref="T:System.Windows.Data.PriorityBinding" /> не установлен.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBindingExpression (target As DependencyObject, dp As DependencyProperty) As PriorityBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBindingExpression ^ GetPriorityBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetPriorityBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.PriorityBindingExpression" Usage="System.Windows.Data.BindingOperations.GetPriorityBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Целевой объект привязки, где находится <paramref name="dp" />.</param>
        <param name="dp">Целевое свойство привязки, из которого извлекается объект <see cref="T:System.Windows.Data.PriorityBindingExpression" />.</param>
        <summary>Возвращает объект <see cref="T:System.Windows.Data.PriorityBindingExpression" />, связанный с указанным целевым свойством привязки в указанном объекте.</summary>
        <returns>Объект <see cref="T:System.Windows.Data.PriorityBindingExpression" />, связанный с указанным свойством, или <see langword="null" />, если его не существует.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметры <paramref name="target" /> и <paramref name="dp" /> не могут иметь значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindingGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindingGroups (root As DependencyObject) As ReadOnlyCollection(Of BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingGroup ^&gt; ^ GetSourceUpdatingBindingGroups(System::Windows::DependencyObject ^ root);" />
      <MemberSignature Language="F#" Value="static member GetSourceUpdatingBindingGroups : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;" Usage="System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="root">Корневой элемент <see cref="T:System.Windows.UIElement" />, для которого требуется получить группы привязки.  Этот метод возвращает объекты <see cref="T:System.Windows.Data.BindingGroup" />, связанные с данным элементом или его элементами-потомками.</param>
        <summary>Получает все объекты <see cref="T:System.Windows.Data.BindingGroup" />, которые содержат недопустимые значения или целевые значения и не прошедших обновление источника.</summary>
        <returns>Коллекция объектов <see cref="T:System.Windows.Data.BindingGroup" />, связанных с заданным элементом, имеющих недопустимые значения или целевые значения и не прошедших обновление источника.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `root` `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups%2A> возвращает все недопустимые или не обновленные объекты <xref:System.Windows.Data.BindingGroup>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindings">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindings (root As DependencyObject) As ReadOnlyCollection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ GetSourceUpdatingBindings(System::Windows::DependencyObject ^ root);" />
      <MemberSignature Language="F#" Value="static member GetSourceUpdatingBindings : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;" Usage="System.Windows.Data.BindingOperations.GetSourceUpdatingBindings root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="root">Корневой элемент <see cref="T:System.Windows.UIElement" />, для которого требуется получить группы привязки.  Этот метод возвращает объекты <see cref="T:System.Windows.Data.BindingExpressionBase" />, связанные с данным элементом или его элементами-потомками.</param>
        <summary>Получает все объекты <see cref="T:System.Windows.Data.BindingExpressionBase" />, которые содержат недопустимые значения или целевые значения и не прошедших обновление источника.</summary>
        <returns>Коллекция объектов <see cref="T:System.Windows.Data.BindingExpressionBase" />, связанных с заданным элементом, имеющих недопустимые значения или целевые значения и не прошедших обновление источника.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `root` `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings%2A> возвращает все недопустимые или не обновленные объекты <xref:System.Windows.Data.BindingExpressionBase>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDataBound">
      <MemberSignature Language="C#" Value="public static bool IsDataBound (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDataBound(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.IsDataBound(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDataBound (target As DependencyObject, dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDataBound(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member IsDataBound : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.Data.BindingOperations.IsDataBound (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Объект, в котором находится <paramref name="dp" />.</param>
        <param name="dp">Проверяемое свойство зависимости.</param>
        <summary>Возвращает значение, указывающее, является ли заданное свойство на текущий момент привязанным к данным.</summary>
        <returns><see langword="true" />, если указанное свойство является привязанным к данным, иначе <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Если <paramref name="target" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetBinding (target As DependencyObject, dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="static member SetBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="System.Windows.Data.BindingOperations.SetBinding (target, dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="target">Цель привязки.</param>
        <param name="dp">Целевое свойство привязки.</param>
        <param name="binding">Объект <see cref="T:System.Windows.Data.BindingBase" />, описывающий привязку.</param>
        <summary>Создает экземпляр <see cref="T:System.Windows.Data.BindingExpressionBase" /> и связывает его с заданным свойством целевого объекта привязки.</summary>
        <returns>Экземпляр <see cref="T:System.Windows.Data.BindingExpressionBase" />, созданный для заданного свойства и связанный с ним. Класс <see cref="T:System.Windows.Data.BindingExpressionBase" /> является базовым классом для <see cref="T:System.Windows.Data.BindingExpression" />, <see cref="T:System.Windows.Data.MultiBindingExpression" /> и <see cref="T:System.Windows.Data.PriorityBindingExpression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает новый экземпляр <xref:System.Windows.Data.BindingExpressionBase> и связывает с ним экземпляр с заданным свойством зависимости данного объекта. Этот метод является способом присоединения привязки к произвольному <xref:System.Windows.DependencyObject>, который может не предоставлять собственный метод SetBinding.  
  
   
  
## Examples  
 В следующем примере показано, как использовать этот метод для установки привязки. В этом примере `myNewBindDef` является объектом <xref:System.Windows.Data.Binding>, описывающим привязку. Целью привязки является `myDateText`, экземпляр класса <xref:System.Windows.Controls.TextBlock>.  
  
 [!code-csharp[BindConversion#BOSetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#bosetbinding)]
 [!code-vb[BindConversion#BOSetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#bosetbinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="binding" /> не может иметь значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
