<Type Name="BindingGroup" FullName="System.Windows.Data.BindingGroup">
  <Metadata><Meta Name="ms.openlocfilehash" Value="620aae8c2d7ce9f1a1ba9c6bdc442323dfc2e618" /><Meta Name="ms.sourcegitcommit" Value="bfce49b3a0c0685f994313d2e44a7c70def1694a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/05/2019" /><Meta Name="ms.locfileid" Value="66690866" /></Metadata><TypeSignature Language="C#" Value="public class BindingGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BindingGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingGroup : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type BindingGroup = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Содержит коллекцию привязок и объекты <see cref="T:System.Windows.Controls.ValidationRule" />, используемые для проверки объекта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Data.BindingGroup> создает связь между несколькими привязками, которые могут быть проверены и обновляются вместе. Например предположим, что приложение предлагает пользователю ввести адрес. Затем приложение заполняет объект типа `Address`, который имеет свойства, `Street`, `City`, `ZipCode`, и `Country`, со значениями, предоставленного пользователем. Приложение имеет панель, которая содержит четыре <xref:System.Windows.Controls.TextBox> элементов управления, каждый из которых представляет данные, привязанные к одному из свойств объекта. Можно использовать <xref:System.Windows.Controls.ValidationRule> в <xref:System.Windows.Data.BindingGroup> проверяемый `Address` объекта. Если привязок участвовать в том же <xref:System.Windows.Data.BindingGroup>, убедитесь, что zip код является допустимым для страны или региона адреса.  
  
 Можно задать <xref:System.Windows.FrameworkElement.BindingGroup%2A> свойство <xref:System.Windows.FrameworkElement> или <xref:System.Windows.FrameworkContentElement>. Дочерние элементы наследуют <xref:System.Windows.Data.BindingGroup> от своих родительских элементов, как и в других наследуемое свойство. Привязки для потомков элемента добавляется к <xref:System.Windows.Data.BindingGroup> Если возникает одно из следующих ситуаций:  
  
-   Источник привязки и <xref:System.Windows.FrameworkElement.DataContext%2A> элемента, который имеет <xref:System.Windows.Data.BindingGroup> объекта являются и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> свойство не задано.  
  
-   <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> Привязки равно <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.FrameworkContentElement.BindingGroup%2A> и они не заданы явным образом `null`.  
  
 Предположим, что в примере адреса <xref:System.Windows.FrameworkElement.DataContext%2A> из <xref:System.Windows.Controls.Panel> присваивается объект типа `Address`. Привязки для каждого <xref:System.Windows.Controls.TextBox> добавляется <xref:System.Windows.Data.BindingGroup> панели.  
  
 Добавляемые <xref:System.Windows.Controls.ValidationRule> объектов <xref:System.Windows.Data.BindingGroup>. <xref:System.Windows.Data.BindingGroup> Передается как первый параметр <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод при <xref:System.Windows.Controls.ValidationRule> выполняется. Можно использовать <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> или <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> , метод <xref:System.Windows.Data.BindingGroup> для получения предполагаемых значений объекта и <xref:System.Windows.Data.BindingGroup.Items%2A> свойство для получения источников привязки.  
  
 Объект <xref:System.Windows.Data.BindingGroup> обновляет источники привязки, в то же время, а не каждой привязки, обновляется отдельно. При вызове одного из методов для проверки данных (<xref:System.Windows.Data.BindingGroup.ValidateWithoutUpdate%2A>, <xref:System.Windows.Data.BindingGroup.UpdateSources%2A>, или <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>), привязка для каждого <xref:System.Windows.Controls.TextBox> в примере проверяется и потенциально обновляется. Если привязка является частью <xref:System.Windows.Data.BindingGroup>, источник привязки не обновляется до вызова метода <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> или <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> на <xref:System.Windows.Data.BindingGroup>, если не задано явно <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> свойство.  
  
   
  
## Examples  
 В следующих примерах создаются приложение, пользователю будет предложено ввести описание и цену продукта и Дата истечения срока действия предложения. Приложение отображает текущие данные для элемента под формой. Пользователь может отправить или отменить изменения.  
  
 Приложение выполняет следующие действия, чтобы добиться этого поведения.  
  
-   Создает <xref:System.Windows.Data.BindingGroup> и добавляет его в корне <xref:System.Windows.Controls.StackPanel> при создании [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] приложения.  
  
-   Вызовы <xref:System.Windows.Data.BindingGroup.BeginEdit%2A>, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>, и <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> в логику приложения для включения отката изменений.  
  
-   Вызовы <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> в <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод для получения входных данных пользователя и проверьте, что элемент через 100 долларов доступен по крайней мере семь дней.  
  
 В следующем примере создается [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] приложения. Корневой <xref:System.Windows.Controls.StackPanel> имеет <xref:System.Windows.Data.BindingGroup> , содержащий <xref:System.Windows.Controls.ValidationRule> , проверяющий элемент, как описано выше. Привязка объектов на `Price` свойство и `OfferExpires` свойства становятся частью <xref:System.Windows.Data.BindingGroup> и каждой привязки есть <xref:System.Windows.Controls.ValidationRule> чтобы убедиться в том, что цены и Дата, соответственно, не допустимые значения. Правила проверки для отдельных свойств запуска перед <xref:System.Windows.Controls.ValidationRule> на <xref:System.Windows.Data.BindingGroup>.  
  
 [!code-xaml[BindingGroupSnippets#WindowLayout](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#windowlayout)]  
  
 В следующем примере обработчики событий для приложения. При нажатии кнопки отправки, приложение вызывает <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> для выполнения каждого <xref:System.Windows.Controls.ValidationRule> , связанный с <xref:System.Windows.Data.BindingGroup>. Если каждый <xref:System.Windows.Controls.ValidationRule> завершается успешно, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> сохраняет значения в объект и завершает транзакцию изменения. Если <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> является успешной, приложение начинает другую транзакцию изменения. Когда <xref:System.Windows.Controls.ValidationRule> в случае сбоя <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> событие возникает, так как приложение <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> для `true` на <xref:System.Windows.Data.BindingGroup> (в предыдущем примере). `ItemError` дескрипторы <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> событий и отображает сведения об ошибке проверки для пользователя. В примере также обрабатываются <xref:System.Windows.FrameworkElement.Loaded> событие для <xref:System.Windows.Controls.StackPanel> и <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событие для **отменить** кнопки.  
  
 [!code-csharp[BindingGroupSnippets#WindowLogic](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#windowlogic)]
 [!code-vb[BindingGroupSnippets#WindowLogic](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#windowlogic)]  
  
 В следующем примере показано пользовательский <xref:System.Windows.Controls.ValidationRule> `ValidateDateAndPrice`, который был добавлен <xref:System.Windows.Data.BindingGroup> в первом примере. <xref:System.Windows.Controls.ValidationRule> Использует <xref:System.Windows.Data.BindingGroup> в его <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод для получения значений, введенных в форму и проверяет, что если элемент имеет более чем 100 долларов, она будет доступна для по крайней мере семь дней пользователем.  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindingGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public void BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.BeginEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginEdit();" />
      <MemberSignature Language="F#" Value="member this.BeginEdit : unit -&gt; unit" Usage="bindingGroup.BeginEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает транзакцию изменения для источников в объекте <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если эти источники в <xref:System.Windows.Data.BindingGroup> поддерживают Отмена ожидающих изменений, вы можете вызвать <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> чтобы начать транзакцию изменения, вызовите <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> для сохранения ожидающих изменений, вызовите <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> отменить ожидающие изменения.  
  
 Для каждого объекта в <xref:System.Windows.Data.BindingGroup.Items%2A> , реализующий <xref:System.ComponentModel.IEditableObject>, <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> вызовы <xref:System.ComponentModel.IEditableObject.BeginEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> при загрузке окна, чтобы начать транзакцию изменения.  
  
 [!code-csharp[BindingGroupSnippets#BeginEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#beginedit)]
 [!code-vb[BindingGroupSnippets#BeginEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#beginedit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingExpressions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt; BindingExpressions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; BindingExpressions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.BindingExpressions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingExpressions As Collection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ BindingExpressions { System::Collections::ObjectModel::Collection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingExpressions : System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt;" Usage="System.Windows.Data.BindingGroup.BindingExpressions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию объектов <see cref="T:System.Windows.Data.BindingExpression" />, которая содержит информацию для каждого объекта Binding в объекте <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Коллекция объектов <see cref="T:System.Windows.Data.BindingExpression" />, которая содержит информацию для каждой привязки в объекте <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Windows.Data.BindingExpression> принадлежит <xref:System.Windows.Data.BindingGroup> Если возникает одно из следующих случаев:  
  
-   Источник привязки и <xref:System.Windows.FrameworkElement.DataContext%2A> элемента, который имеет <xref:System.Windows.Data.BindingGroup> объекта являются и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> не задано.  
  
-   <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> Свойства привязки и <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> присваивается то же значение отличное от null и <xref:System.Windows.Data.BindingGroup> принадлежит родительского элемента привязки целевого элемента.  
  
-   Добавляемые <xref:System.Windows.Data.BindingExpression> для <xref:System.Windows.Data.BindingGroup.BindingExpressions%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : unit -&gt; unit" Usage="bindingGroup.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает транзакцию изменения и отменяет ожидающие изменения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывает источников отменить ожидающие изменения, в том случае, если объект источника может это сделать и завершение транзакции. Затем метод обновляет целевые свойства с сохраненными исходными значениями.  
  
 Для каждого объекта в <xref:System.Windows.Data.BindingGroup.Items%2A> , реализующий <xref:System.ComponentModel.IEditableObject>, <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> вызовы <xref:System.ComponentModel.IEditableObject.CancelEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> отменить ожидающие изменения, а затем вызывает <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> для подготовки повторно измененного источника.  
  
 [!code-csharp[BindingGroupSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[BindingGroupSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRestoreValues">
      <MemberSignature Language="C#" Value="public bool CanRestoreValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRestoreValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.CanRestoreValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRestoreValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRestoreValues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRestoreValues : bool" Usage="System.Windows.Data.BindingGroup.CanRestoreValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, может ли каждый источник привязки отменить ожидающие изменения и восстановить исходные значения.</summary>
        <value><see langword="true" />, если каждый источник привязки может отменить ожидающие изменения и восстановить исходные значения; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Источник может отклонить отложенные изменения, если он реализует <xref:System.ComponentModel.IEditableObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitEdit () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CommitEdit();" />
      <MemberSignature Language="F#" Value="member this.CommitEdit : unit -&gt; bool" Usage="bindingGroup.CommitEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет все объекты <see cref="T:System.Windows.Controls.ValidationRule" /> и обновляет источники привязки, если все правила проверки выполняются успешно.</summary>
        <returns><see langword="true" />, если каждый объект <see cref="T:System.Windows.Controls.ValidationRule" /> выполняется успешно и значения зафиксированы в источниках; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если каждый <xref:System.Windows.Controls.ValidationRule> завершается успешно, этот метод вызывает источников для фиксации ожидающих изменений и завершение транзакции, если объект источника может это сделать.  
  
 Для каждого объекта в <xref:System.Windows.Data.BindingGroup.Items%2A> , реализующий <xref:System.ComponentModel.IEditableObject>, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> вызовы <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> Сохранить ожидающие изменения, а затем вызывает <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> для подготовки повторно измененного источника.  
  
 [!code-csharp[BindingGroupSnippets#BeginEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#beginedit)]
 [!code-vb[BindingGroupSnippets#BeginEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#beginedit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object item, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object item, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (item As Object, propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ item, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="override this.GetValue : obj * string -&gt; obj" Usage="bindingGroup.GetValue (item, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">Объект, содержащий заданное свойство.</param>
        <param name="propertyName">Свойство, предложенное значение которого требуется получить.</param>
        <summary>Возвращает предложенное значение для заданного свойства и элемента.</summary>
        <returns>Предложенное значение свойства.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод в <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=nameWithType> метод, чтобы получить значение должно быть переданы в источник. Тип возвращаемого значения зависит от рабочей области, по которому <xref:System.Windows.Controls.ValidationRule> происходит. Например если <xref:System.Windows.Controls.TextBox> привязан к свойству целочисленного типа данных и <xref:System.Windows.Controls.ValidationRule> , который вызывает <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> имеет его <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> присвоено <xref:System.Windows.Controls.ValidationStep.RawProposedValue>, метод возвращает строку. Если <xref:System.Windows.Controls.ValidationRule> имеет его <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> присвоено <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>, метод возвращает любой тип, возвращаемый преобразователем привязки. В этом примере <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> обычно возвращает целое число.  
  
   
  
## Examples  
 Следующий пример является частью приложения, пользователю будет предложено ввести несколько клиентов и назначить Торговый представитель для каждого клиента. Приложение проверяет, что торговый представитель и клиент, находятся в одном регионе. В примере показан <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод, который использует <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> метод для получения значения, введенные для клиента.  
  
 [!code-csharp[BindingGroupSnippets#ItemBindGroupValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml.cs#itembindgroupvalidationrule)]
 [!code-vb[BindingGroupSnippets#ItemBindGroupValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window2.xaml.vb#itembindgroupvalidationrule)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Для заданного элемента и свойства привязка отсутствует.</exception>
        <exception cref="T:System.Windows.Data.ValueUnavailableException">Значение заданного свойства недоступно из-за ошибки преобразования или потому, что ранее завершилось неудачей выполнение правила проверки.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasValidationError">
      <MemberSignature Language="C#" Value="public bool HasValidationError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.HasValidationError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidationError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValidationError : bool" Usage="System.Windows.Data.BindingGroup.HasValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, прошел ли <see cref="T:System.Windows.Data.BindingGroup" /> правило проверки.</summary>
        <value>Значение <see langword="true" />, если <see cref="T:System.Windows.Data.BindingGroup" /> не прошел правило проверки; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Windows.Data.BindingGroup.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, содержит ли <see cref="T:System.Windows.Data.BindingGroup" /> предложенное значение, которое не было записано в источник.</summary>
        <value>Значение <see langword="true" />, если объект <see cref="T:System.Windows.Data.BindingGroup" /> содержит предложенное значение, которое не было записано в источник; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Collections.IList Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Items { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Collections.IList" Usage="System.Windows.Data.BindingGroup.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает источники, используемые объектами Binding в <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Источники, используемые объектами Binding в <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый объект, который используется как источник добавляется в <xref:System.Windows.Data.BindingGroup.Items%2A> свойства один раз, даже если объект используется в качестве источника для нескольких привязок. Зачастую имеется только один элемент в <xref:System.Windows.Data.BindingGroup.Items%2A>, который является объектом, <xref:System.Windows.FrameworkElement.DataContext%2A> элемента, который использует <xref:System.Windows.Data.BindingGroup>. Существует возможность <xref:System.Windows.Data.BindingGroup> для нескольких источников, тем не менее. Например, если объекты привязки одного и того же <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> , но использовать объекты различных источников, каждый объект, который используется в качестве источника в <xref:System.Windows.Data.BindingGroup.Items%2A>.  
  
 Также может существовать несколько объектов в <xref:System.Windows.Data.BindingGroup.Items%2A> Если путь привязки возвращает значение вложенного свойства источника. Например, предположим, что <xref:System.Windows.Controls.TextBox> привязку элемента управления является частью <xref:System.Windows.Data.BindingGroup> и его <xref:System.Windows.FrameworkElement.DataContext%2A> — `Customer` объект, который имеет свойство типа `Address`. Если <xref:System.Windows.Data.Binding.Path%2A> из <xref:System.Windows.Data.Binding> — `Address.ZipCode` свойство, `Address` добавляется <xref:System.Windows.Data.BindingGroup.Items%2A> свойство.  
  
   
  
## Examples  
 Следующие примеры являются частью приложения, которое проверяет, ли пользователь задать свойства двух объектов одинаковые значения. В первом примере создается два <xref:System.Windows.Controls.TextBox> элементов управления, каждый из которых будут привязаны к другому источнику данных. Привязки первого <xref:System.Windows.Controls.TextBox> получает его источник `object1`, из <xref:System.Windows.FrameworkElement.DataContext%2A> из <xref:System.Windows.Controls.TextBox> родительского элемента для элемента управления ( <xref:System.Windows.Controls.StackPanel>). На второй <xref:System.Windows.Controls.TextBox>, источник привязки устанавливается как `object2`. В примере также создается <xref:System.Windows.Controls.Label> , отображает ошибки проверки.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 В следующем примере показан <xref:System.Windows.Controls.ValidationRule> , используемый в предыдущем примере. В <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод, в примере показано получение каждого исходного объекта из <xref:System.Windows.Data.BindingGroup> и проверяет, равны ли свойства объектов.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Data.BindingGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя, идентифицирующее объект <see cref="T:System.Windows.Data.BindingGroup" />, который может использоваться для включения и исключения объектов Binding в <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Имя, идентифицирующее объект <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Data.BindingGroup.Name%2A> — `null`, привязки, в которых источника, один и тот же объект как <xref:System.Windows.FrameworkElement.DataContext%2A> элемента, который имеет <xref:System.Windows.Data.BindingGroup> участвовать в <xref:System.Windows.Data.BindingGroup>.  
  
 Можно включить привязки, в которых источник, который отличается от <xref:System.Windows.FrameworkElement.DataContext%2A> родительского элемента, имеющего <xref:System.Windows.Data.BindingGroup> , задав <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> свойство привязки, то же значение. Вы можете исключить привязки, в которых один и тот же источник как <xref:System.Windows.FrameworkElement.DataContext%2A> родительского элемента, имеющего <xref:System.Windows.Data.BindingGroup> , задав <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> свойство привязки разные значения.  
  
   
  
## Examples  
 Следующие примеры являются частью приложения, которое проверяет, ли пользователь задать свойства двух объектов одинаковые значения. В первом примере создается два <xref:System.Windows.Controls.TextBox> элементов управления, каждый из которых будут привязаны к другому источнику данных. Привязки первого <xref:System.Windows.Controls.TextBox> является частью <xref:System.Windows.Data.BindingGroup> поскольку <xref:System.Windows.Controls.TextBox> наследует <xref:System.Windows.FrameworkElement.DataContext%2A> и <xref:System.Windows.Data.BindingGroup> от родительского <xref:System.Windows.Controls.StackPanel>.  
  
 Привязка на второй <xref:System.Windows.Controls.TextBox> является частью <xref:System.Windows.Data.BindingGroup> поскольку <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> из <xref:System.Windows.Data.Binding> устанавливается `bindingGroup`.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 В следующем примере показан <xref:System.Windows.Controls.ValidationRule> , используемый в предыдущем примере. В <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод, в примере показано получение каждого исходного объекта из <xref:System.Windows.Data.BindingGroup> и проверяет, равны ли свойства объектов.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.BindingGroup.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, происходит ли событие <see cref="E:System.Windows.Controls.Validation.Error" /> при изменении состояния объекта <see cref="T:System.Windows.Controls.ValidationRule" />.</summary>
        <value><see langword="true" />, если событие <see cref="E:System.Windows.Controls.Validation.Error" /> происходит, когда состояние <see cref="T:System.Windows.Controls.ValidationRule" /> изменяется; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> Присоединенное событие происходит на элемент, имеющий <xref:System.Windows.Data.BindingGroup>.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Data.BindingGroup> и задает <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> для `true` таким образом, приложение может обрабатывать <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> событий при <xref:System.Windows.Controls.ValidationRule> завершается ошибкой.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#bindinggroup)]  
  
 В следующем примере показана обработка <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> событий.  
  
 [!code-csharp[BindingGroupSnippets#ErrorHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml.cs#errorhandler)]
 [!code-vb[BindingGroupSnippets#ErrorHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window1.xaml.vb#errorhandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Owner { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.DependencyObject" Usage="System.Windows.Data.BindingGroup.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, которому назначен этот объект <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Объект, которому назначен этот объект <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharesProposedValues">
      <MemberSignature Language="C#" Value="public bool SharesProposedValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SharesProposedValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.SharesProposedValues" />
      <MemberSignature Language="VB.NET" Value="Public Property SharesProposedValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SharesProposedValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SharesProposedValues : bool with get, set" Usage="System.Windows.Data.BindingGroup.SharesProposedValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, использует ли объект <see cref="T:System.Windows.Data.BindingGroup" /> повторно целевые значения, которые не были переданы в источник.</summary>
        <value>Значение <see langword="true" />, если объект <see cref="T:System.Windows.Data.BindingGroup" /> повторно использует целевые значения, не переданные в источник; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Предложенное значение является значение, которое было изменено на целевой объект привязки, но не были зафиксированы в источнике. Например, предположим, что на представляет собой двустороннюю привязку <xref:System.Windows.Controls.TextBox> и <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> свойству <xref:System.Windows.Data.UpdateSourceTrigger.Explicit>. Если пользователь изменяет значение <xref:System.Windows.Controls.TextBox>, предложенное значение является значением, которое находится в <xref:System.Windows.Controls.TextBox> перед их сохранением к источнику.  
  
 Когда <xref:System.Windows.Data.BindingGroup.SharesProposedValues%2A> — `true`, <xref:System.Windows.Data.BindingGroup> использует предложенное значение, когда одна привязка оставляет BindingGroup и другая привязка с тем же источником присоединится BindingGroup.  Например предположим, что приложение позволяет пользователям редактировать несколько полей и обновить исходный объект путем нажатия кнопки. Когда поле не редактируется, оно выводит его в <xref:System.Windows.Controls.TextBlock>. Когда пользователь начинает для изменения поля, приложение заменяет <xref:System.Windows.Controls.TextBlock> с <xref:System.Windows.Controls.TextBox>. Когда пользователь заканчивает правку этого поля, приложение заменяет <xref:System.Windows.Controls.TextBox> с <xref:System.Windows.Controls.TextBlock>. Так как источник не обновляется, пока пользователь не щелкнет кнопку, должен существовать способ <xref:System.Windows.Controls.TextBlock> для отображения предложенное значение. Установив <xref:System.Windows.Data.BindingGroup.SharesProposedValues%2A> для `true`, приложение будет отображать изменения пользователя к полю, даже в том случае, когда источник не была обновлена.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (object item, string propertyName, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(object item, string propertyName, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (item As Object, propertyName As String, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(System::Object ^ item, System::String ^ propertyName, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : obj * string *  -&gt; bool" Usage="bindingGroup.TryGetValue (item, propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item">Объект, содержащий заданное свойство.</param>
        <param name="propertyName">Свойство, предложенное значение которого требуется получить.</param>
        <param name="value">При возвращении из данного метода содержит объект, представляющий предложенное значение свойства. Этот параметр передается неинициализированным.</param>
        <summary>Пытается получить предложенное значение для заданного свойства и элемента.</summary>
        <returns><see langword="true" />, если значение является предложенным значением для заданного свойства; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> Возвращает `false` Если нет привязки для заданного элемента и свойства или если значение заданного свойства недоступно, из-за ошибки преобразования или из-за сбоя в более ранних правило проверки.  
  
 Используйте этот метод в <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=nameWithType> метод, чтобы получить значение должно быть переданы в источник. Тип `value` зависит от этапа, по которому <xref:System.Windows.Controls.ValidationRule> происходит. Например если <xref:System.Windows.Controls.TextBox> — это данные, связанное со свойством целочисленного типа, `value` представляет собой строку, если <xref:System.Windows.Controls.ValidationRule> , который вызывает <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> имеет его <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> присвоено <xref:System.Windows.Controls.ValidationStep.RawProposedValue>. Если <xref:System.Windows.Controls.ValidationRule> имеет его <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> присвоено <xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>, тип `value` — это любой тип, возвращаемый преобразователем привязки. В этом примере `value` обычно должно быть целым числом.  
  
   
  
## Examples  
 В следующем примере создается пользовательский <xref:System.Windows.Controls.ValidationRule> с именем `ValidateDateAndPrice`. В <xref:System.Windows.Controls.ValidationRule.Validate%2A> в примере используется метод, <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> метод и <xref:System.Windows.Data.BindingGroup.Items%2A> свойство для получения значений, введенных в форму пользователем. Затем в примере проверяется, что если элемент имеет более чем 100 долларов, она будет доступна для по крайней мере семь дней. Этот пример является частью большего примера на <xref:System.Windows.Data.BindingGroup> класса  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSources">
      <MemberSignature Language="C#" Value="public bool UpdateSources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UpdateSources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.UpdateSources" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateSources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UpdateSources();" />
      <MemberSignature Language="F#" Value="member this.UpdateSources : unit -&gt; bool" Usage="bindingGroup.UpdateSources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет преобразователь для привязки и объектов <see cref="T:System.Windows.Controls.ValidationRule" />, у которых свойство <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> имеет значение <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" />, <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" /> или <see cref="F:System.Windows.Controls.ValidationStep.UpdatedValue" />, и сохраняет значения целевых объектов в исходных объектах, если все правила проверки выполнены успешно.</summary>
        <returns><see langword="true" />, если все правила проверки выполнены успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод обновляет источник, если каждый <xref:System.Windows.Controls.ValidationRule> завершается успешно, но это не вызывает источников для фиксации ожидающих изменений и завершение транзакции. То есть если объект источника реализует <xref:System.ComponentModel.IEditableObject>. Вызов этого метода не приводит к <xref:System.ComponentModel.IEditableObject.EndEdit%2A> для вызова. Используйте <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> методу иметь источники зафиксировать ожидающие изменения.  
  
   
  
## Examples  
 Следующий пример является частью приложения, пользователю будет предложено ввести несколько клиентов и назначить Торговый представитель для каждого клиента. Приложение проверяет, что торговый представитель и клиент, находятся в одном регионе. В примере вызывается <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> для проверки привязок и сохранить значения в источнике, если все правила проверки выполнены успешно.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSources](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window2.xaml.cs#updatesources)]
 [!code-vb[BindingGroupSnippets#UpdateSources](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window2.xaml.vb#updatesources)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataError">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataError : bool with get, set" Usage="System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, включать ли объект <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />.</summary>
        <value><see langword="true" /> для включения <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError%2A> — `true`, привязки проверяет наличие и сообщает об ошибках, возникающих в источнике данных, который реализует <xref:System.ComponentModel.INotifyDataErrorInfo>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateWithoutUpdate">
      <MemberSignature Language="C#" Value="public bool ValidateWithoutUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValidateWithoutUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingGroup.ValidateWithoutUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateWithoutUpdate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValidateWithoutUpdate();" />
      <MemberSignature Language="F#" Value="member this.ValidateWithoutUpdate : unit -&gt; bool" Usage="bindingGroup.ValidateWithoutUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет преобразователь для привязки и объектов <see cref="T:System.Windows.Controls.ValidationRule" />, свойство <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> которых имеет значение <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" /> или <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" />.</summary>
        <returns><see langword="true" />, если правила проверки выполнены успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Источники не обновляются при вызове этого метода.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationErrors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt; ValidationErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Controls.ValidationError&gt; ValidationErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidationErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationErrors As ReadOnlyCollection(Of ValidationError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ ValidationErrors { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Controls::ValidationError ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationErrors : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt;" Usage="System.Windows.Data.BindingGroup.ValidationErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию объектов <see cref="T:System.Windows.Controls.ValidationError" />, которые сделали <see cref="T:System.Windows.Data.BindingGroup" /> недопустимым.</summary>
        <value>Коллекция объектов <see cref="T:System.Windows.Controls.ValidationError" />, которые сделали <see cref="T:System.Windows.Data.BindingGroup" /> недопустимым.  Если ошибки отсутствуют, значение равно <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingGroup.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.BindingGroup.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию объектов <see cref="T:System.Windows.Controls.ValidationRule" />, проверяющих объекты-источники в <see cref="T:System.Windows.Data.BindingGroup" />.</summary>
        <value>Коллекция объектов <see cref="T:System.Windows.Controls.ValidationRule" />, проверяющих объекты-источники в <see cref="T:System.Windows.Data.BindingGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Windows.Controls.ValidationRule> добавляется <xref:System.Windows.Data.BindingGroup>, <xref:System.Windows.Data.BindingGroup> передается как первый параметр <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод. Предложенные значения объекта можно получить с помощью <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> или <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> метод. Вы можете получить объекты, которые являются источниками привязки от <xref:System.Windows.Data.BindingGroup.Items%2A> свойство.  
  
   
  
## Examples  
 В следующем примере добавляется пользовательский <xref:System.Windows.Controls.ValidationRule>, `ValidateDateAndPrice`, <xref:System.Windows.Data.BindingGroup>.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroup](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#bindinggroup)]  
  
 В следующем примере демонстрируется класс `ValidateDateAndPrice`. <xref:System.Windows.Controls.ValidationRule.Validate%2A> Использует метод <xref:System.Windows.Data.BindingGroup> для получения значений, введенных в форму и проверяет, что если элемент имеет более чем 100 долларов, она будет доступна для по крайней мере семь дней пользователем.  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>