<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d79c7605daf68e0c4169c32fac48c2c1ac277dad" /><Meta Name="ms.sourcegitcommit" Value="cfc0e4215fd0d259582ada2141878befd7c3c8c6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/12/2019" /><Meta Name="ms.locfileid" Value="67854887" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Абстрактный класс, позволяющий инструментировать код для ведения журнала расширенных полезных данных во время производства, которые будут использоваться в инструментированном процессе.</summary>
    <remarks>Дополнительные сведения см. в разделе [руководство пользователя DiagnosticSource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя записываемого события.</param>
        <summary>Проверяет, включено ли событие уведомления.</summary>
        <returns>Значение <see langword="true" />, если событие уведомления включено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Если для уведомления дорогостоящие настроен, можно вызвать IsEnabled перед выполнением этой установки. Потребители не должен предполагать только получить уведомления, для которых IsEnabled имеет значение true. Однако это необязательно для производителей для вызова этого API. Имя должно быть теми же, что передаваемый <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="name">Имя записываемого события.</param>
        <param name="arg1">Объект, представляющий дополнительный контекст для метода IsEnabled. Объектам-получателям следует ожидать получения значения <see langword="null" />. Это может означать, что производитель вызывал чистый метод IsEnabled(string), чтобы проверить, хочет ли объект-получатель получать уведомления о таких событиях. Исходя из этого, производитель может снова вызвать метод IsEnabled(string, object, object) с контекстом не-<see langword="null" />.</param>
        <param name="arg2">Необязательный параметр. Объект, представляющий дополнительный контекст для метода IsEnabled. По умолчанию: <see langword="null" />. Объектам-получателям следует ожидать получения значения <see langword="null" />. Это может означать, что производитель вызвал чистый метод IsEnabled(string) или передал весь необходимый контекст в <paramref name="arg1" />.</param>
        <summary>Проверяет, включено ли событие уведомления.</summary>
        <returns>Значение <see langword="true" />, если событие уведомления включено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
Если для уведомления дорогостоящие настроен, можно вызвать этот метод и предоставить контекст перед выполнением установки.
          
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">To be added.</param>
        <param name="payload">To be added.</param>
        <summary>Передает состояние действия какому-либо событию или операции, например исходящему HTTP-запросу, который будет выполнен за пределами процесса.</summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Если на сайте instumentation находится в месте, где действия оставить их (например, исходящие HTTP-запросы), этот сайт необходимо для передачи состояния из действия для исходящего запроса.

В степени, возможно, это должен сделать веб-узел инструментирования, так как отсутствует контракт между <xref:System.Diagnostics.Activity> и логику запроса ougoing на сайте инструментирования.   Тем не менее на сайте инструментирования не может обрабатывать политики (например, ли сведения о действии должны быть отключены или записаны в старом формате для обеспечения совместимости).
Для этого сайта инструментирования необходимо обратный вызов системой ведения журналов и служит для разрешения политики. Это назначение `OnActivityExport` метод.

`OnActivityExport` Предоставляется метод <xref:System.Diagnostics.Activity> а также объект полезных данных, представляющий исходящего запроса. Объект <xref:System.Diagnostics.DiagnosticSource> подписчик затем имеет возможность обновления исходящего запроса перед его отправкой.
 
Обратите внимание на то, что этот метод редко используется на сайтах инструментирования (только узлы, которые находятся на границе исходящих процесса).   Кроме того как правило политики по умолчанию, что сайт инструментирования выполняет (например, для передачи всех действий состояния в определенной исходящих соглашение о), вероятнее всего порядке. Этот метод предназначен только для случаев, где то есть проблема. Таким образом, этот метод следует использовать очень редко и всегда с главным образом symetry с `OnActivityImport` и перспективность.

Обратите внимание, что `payload` типизируется как <xref:System.Object> здесь, но какого-либо конкретного сайта инструментирования и подписчика должны знать тип полезных данных и таким образом привести и раскодировать их при необходимости.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">Действие, на которое влияет внешнее событие.</param>
        <param name="payload">Полезные данные, представляющие входящий запрос.</param>
        <summary>Передает состояние действию из какого-либо события или операции, например входящего запроса, который был выполнен за пределами процесса.</summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Если на сайте instumentation создает новое действие в ответ на некоторые события вне процесса, таких как входящими HTTP запрос), `OnActivityImport` метод позволяет потребуется создание нового состояния действия и передачи из входящего запроса для этого сайта действие. 

В степени, возможно, это должен сделать веб-узел инструментария, так как отсутствует контракт между <xref:System.Diagnostics.Activity> и логику запроса входящими на сайте инструментирования.   Тем не менее на сайте инструментирования не может обрабатывать политики. (Например, если выборка выполняется, точно, какие запросы следует брать пробу?) В таком случае сайт инструментирования должен обратный вызов системой ведения журналов и служит для разрешения политики (например, чтобы решить, если бит действия «выборки» должно быть установлено). Это назначение `OnActivityImport` метод. Ему присваивается действия, а также объект полезных данных, представляющий запрос входящими. Подписчики <xref:System.Diagnostics.DiagnosticSource> то иметь возможность обновлять это действие, при необходимости. 

Этот метод редко используется на сайтах инструментирования (только узлы, которые находятся на границе процесса), а на сайте instrumetation реализует некоторые политики по умолчанию (он задает действие, которое *некоторые* способом), и поэтому не требуется Переопределите этот метод, если эту политику по умолчанию подходит. Другими словами следует переопределить этот метод в случаях очень редко (но часто важно).

Обратите внимание, что `payload` типизируется как <xref:System.Object> здесь, но какого-либо конкретного сайта инструментирования и подписчика будут знать тип полезных данных и таким образом привести и декодировать его при необходимости.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">Подлежащий запуску класс <see cref="T:System.Diagnostics.Activity" />.</param>
        <param name="args">Объект, представляющий значение, которое передается в виде полезных данных для события.</param>
        <summary>Запускает класс <see cref="T:System.Diagnostics.Activity" /> и записывает событие запуска.</summary>
        <returns>Запущенное действие для удобного связывания.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
           
<xref:System.Diagnostics.Activity> Описывает логическую операцию, контекст и родительское отношение; текущий <xref:System.Diagnostics.Activity> будет проходить через операцию обработки.

Этот метод запускает заданный <xref:System.Diagnostics.Activity>, ведет глобальный <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> и <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType> действия для заданного <xref:System.Diagnostics.Activity>и уведомляет объекты-получатели, новый <xref:System.Diagnostics.Activity> был запущен. Потребители могут получить доступ к <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> Чтобы добавить контекст и/или пополняющие телеметрии.

Дополнительные сведения о производители передать объекту-получателю в полезных данных.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">Подлежащее остановке действие.</param>
        <param name="args">Объект, представляющий значение, переданное в виде полезных данных для события.</param>
        <summary>Останавливает данный класс <see cref="T:System.Diagnostics.Activity" />, поддерживает глобальное действие <see cref="P:System.Diagnostics.Activity.Current" /> и уведомляет объекты-получатели об остановке класса <see cref="T:System.Diagnostics.Activity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Дополнительные сведения о производители передать объекту-получателю в полезных данных.

Потребители могут получить доступ к <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> Чтобы добавить контекст и/или пополняющие телеметрии.


         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Имя записываемого события.</param>
        <param name="value">Объект, представляющий значение, которое передается в виде полезных данных для события. Как правило, это анонимный тип, который содержит несколько вложенных значений.</param>
        <summary>Обеспечивает универсальный способ ведения журнала сложных полезных данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Каждое уведомление присваивается имя, идентифицирующее его, а также объект (обычно анонимного типа), который предоставляет произвольные сведения для передачи в уведомление.  

`name` должны быть короткими. Не используйте полное доменное имя, если у вас нет в целях устранения неоднозначности, поскольку `name` должно быть глобально уникальным. Как правило *componentName.eventName*, где *componentName* и *eventName* это строки менее 10 символов, это хороший компромисс.

Имена уведомлений не должны иметь `.` в них так как компонент имена точек и они оба были точки приводит к неоднозначности. Мы рекомендуем использовать `_` вместо этого.

Предположим, что прослушиватели будет использовать строку префикса для фильтрации групп. Таким образом имеющими иерархическую имена компонентов является хорошей практикой.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
