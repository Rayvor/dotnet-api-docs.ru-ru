<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca0175415a9b3efa6744d302dadd2224067d1ce1" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75137851" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Абстрактный класс, позволяющий инструментировать код для ведения журнала расширенных полезных данных во время производства, которые будут использоваться в инструментированном процессе.</summary>
    <remarks>Дополнительные сведения см. в разделе [DiagnosticSource пользователя](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует экземпляр класса <see cref="T:System.Diagnostics.DiagnosticSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя записываемого события.</param>
        <summary>Проверяет, включено ли событие уведомления.</summary>
        <returns>Значение <see langword="true" />, если событие уведомления включено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

При наличии дорогостоящей настройки для уведомления можно вызвать функцию OnEnable перед выполнением этой установки. Потребители не должны рассчитывать на то, что они только получают уведомления, для которых включено значение «включено». Однако производителям не обязательно вызывать этот API. Имя должно совпадать с именем, переданным в <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">Имя записываемого события.</param>
        <param name="arg1">Объект, представляющий дополнительный контекст для метода IsEnabled. Объектам-получателям следует ожидать получения значения <see langword="null" />. Это может означать, что производитель вызывал чистый метод IsEnabled(string), чтобы проверить, хочет ли объект-получатель получать уведомления о таких событиях. Исходя из этого, производитель может снова вызвать метод IsEnabled(string, object, object) с контекстом не-<see langword="null" />.</param>
        <param name="arg2">Необязательный элемент. Объект, представляющий дополнительный контекст для метода IsEnabled. По умолчанию: <see langword="null" />. Объектам-получателям следует ожидать получения значения <see langword="null" />. Это может означать, что производитель вызвал чистый метод IsEnabled(string) или передал весь необходимый контекст в <paramref name="arg1" />.</param>
        <summary>Проверяет, включено ли событие уведомления.</summary>
        <returns>Значение <see langword="true" />, если событие уведомления включено; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
При наличии дорогостоящей настройки для уведомления можно вызвать этот метод и предоставить контекст перед выполнением установки.
          
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Действие, на которое влияет внешнее событие.</param>
        <param name="payload">Объект, представляющий исходящий запрос.</param>
        <summary>Передает состояние действия какому-либо событию или операции, например исходящему HTTP-запросу, который будет выполнен за пределами процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Если сайт инструментирования находится в расположении, где действия оставляют процесс (например, исходящие HTTP-запросы), этот сайт будет передавать состояние из действия в исходящий запрос.

В такой степени это должно выполняться сайтом инструментирования, так как между <xref:System.Diagnostics.Activity> и логикой запроса аугоинг на сайте инструментирования существует контракт.   Однако сайт инструментирования не может обрабатывать политику (например, следует ли отключать или записывать сведения о действиях в старом формате по соображениям совместимости).
Для этого узел инструментирования должен выполнить обратный вызов к системе ведения журнала и попросить его разрешить политику. Это назначение метода `OnActivityExport`.

Методу `OnActivityExport` присваивается <xref:System.Diagnostics.Activity>, а также объект полезных данных, представляющий исходящий запрос. После этого подписчик <xref:System.Diagnostics.DiagnosticSource> может обновить исходящий запрос перед его отправкой.
 
Обратите внимание, что этот метод редко используется на сайтах инструментирования (только сайты, находящиеся на исходящих границах процесса).   Более того, обычно это политика по умолчанию, которую выполняет сайт инструментария (например, для перемещения всех состояний действий в определенном исходящем соглашении), скорее всего, будет хорошо. Этот метод предназначен только для случаев, когда это является проблемой. Таким образом, этот метод следует использовать крайне редко, и он в основном предназначен для симетри с `OnActivityImport` и будущим правописанием.

Обратите внимание, что `payload` вводится как <xref:System.Object>, но каждый конкретный сайт и подписчик инструментария должны иметь представление о типе полезных данных и, таким образом, приводить и декодировать их при необходимости.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Действие, на которое влияет внешнее событие.</param>
        <param name="payload">Полезные данные, представляющие входящий запрос.</param>
        <summary>Передает состояние действию из какого-либо события или операции, например входящего запроса, который был выполнен за пределами процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Если сайт инструментирования создает новое действие в ответ на какое-либо событие за пределами процесса (например, HTTP-запрос), метод `OnActivityImport` позволяет этому сайту создавать новое действие и передавать состояние из входящего запроса в действие. 

В такой степени это должно выполняться сайтом инструментирования, поскольку между <xref:System.Diagnostics.Activity> и логикой запроса на сайте инструментирования есть контракт.   Однако сайт инструментирования не может управлять политикой. (Например, если выборка выполняется, точно какие запросы следует выборке?) В таких случаях узел инструментария должен выполнить обратный вызов к системе ведения журнала и попросить его разрешить политику (например, определить, следует ли задать бит выборки для действия). Это назначение метода `OnActivityImport`. Ему предоставляется действие, а также объект полезных данных, представляющий запрос. У подписчиков на <xref:System.Diagnostics.DiagnosticSource> есть возможность обновить это действие. 

Этот метод редко используется на сайтах инструментирования (только сайты, находящиеся в границах процесса), а сайт инструметатион реализует определенную политику по умолчанию (это действие задается каким- *либо* образом), поэтому нет необходимости переопределять этот метод, если политика по умолчанию подходит. Иными словами, этот метод следует переопределить в редких (но часто важных) случаях.

Обратите внимание, что `payload` вводится как <xref:System.Object>, но каждый конкретный сайт и подписчик инструментирования будут иметь известный тип полезных данных и, таким образом, декодировать их при необходимости.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Подлежащий запуску класс <see cref="T:System.Diagnostics.Activity" />.</param>
        <param name="args">Объект, представляющий значение, которое передается в виде полезных данных для события.</param>
        <summary>Запускает класс <see cref="T:System.Diagnostics.Activity" /> и записывает событие запуска.</summary>
        <returns>Запущенное действие для удобного связывания.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
           
<xref:System.Diagnostics.Activity> описывает логическую операцию, ее контекст и родительскую связь; текущий <xref:System.Diagnostics.Activity> проходит через обработку операции.

Этот метод запускает заданную <xref:System.Diagnostics.Activity>, обслуживает глобальное <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> и <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType>ное действие для заданного <xref:System.Diagnostics.Activity>и уведомляет потребителей о том, что была запущена новая <xref:System.Diagnostics.Activity>. Потребители могут получить доступ к <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>, чтобы добавить контекст и (или) расширить телеметрию.

Производители могут передавать дополнительные сведения потребителю в полезных данных.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Подлежащее остановке действие.</param>
        <param name="args">Объект, представляющий значение, переданное в виде полезных данных для события.</param>
        <summary>Останавливает данный класс <see cref="T:System.Diagnostics.Activity" />, поддерживает глобальное действие <see cref="P:System.Diagnostics.Activity.Current" /> и уведомляет объекты-получатели об остановке класса <see cref="T:System.Diagnostics.Activity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Производители могут передавать дополнительные сведения потребителю в полезных данных.

Потребители могут получить доступ к <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType>, чтобы добавить контекст и (или) расширить телеметрию.


         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Имя записываемого события.</param>
        <param name="value">Объект, представляющий значение, которое передается в виде полезных данных для события. Как правило, это анонимный тип, который содержит несколько вложенных значений.</param>
        <summary>Обеспечивает универсальный способ ведения журнала сложных полезных данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Каждому уведомлению присваивается имя, которое идентифицирует его, а также объект (обычно анонимный тип), предоставляющий произвольную информацию для передачи в уведомление.  

`name` должны быть короткими. Не используйте полное имя, если не нужно избегать неоднозначности, так как `name` должны быть глобально уникальными. Как правило, *componentName. EventName*, где *componentName* и *EventName* являются строками меньше 10 символов, являются хорошей компромиссом.

В именах уведомлений не должно быть `.`, так как имена компонентов содержат точки, а для обоих точек приводит к неоднозначности. Мы рекомендуем использовать вместо этого `_`.

Предположим, что прослушиватели будут использовать префикс строки для фильтрации групп. Поэтому рекомендуется иметь иерархию имен компонентов.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
