<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56c730333d780971f7e47e4ba34ae4aaf2551d23" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70691466" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет набор методов и свойств, которые можно использовать для точного измерения затраченного времени.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Stopwatch> Экземпляр может измерять затраченное время для одного интервала или общее время, затраченное на несколько интервалов. В типичном <xref:System.Diagnostics.Stopwatch> <xref:System.Diagnostics.Stopwatch.Start%2A> сценарии вызывается метод, <xref:System.Diagnostics.Stopwatch.Stop%2A> затем вызывается метод, а <xref:System.Diagnostics.Stopwatch.Elapsed%2A> затем проверяются затраченное время с помощью свойства.  
  
 Экземпляр либо работает, либо остановлен; используйте <xref:System.Diagnostics.Stopwatch.IsRunning%2A> для определения текущего состояния  <xref:System.Diagnostics.Stopwatch> .  <xref:System.Diagnostics.Stopwatch> Используйте <xref:System.Diagnostics.Stopwatch.Start%2A> для начала измерения затраченного времени; используйте <xref:System.Diagnostics.Stopwatch.Stop%2A> для отмены измерения затраченного времени. Запросите значение затраченного времени с помощью <xref:System.Diagnostics.Stopwatch.Elapsed%2A>свойств <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, или <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Вы можете запросить свойства затраченного времени во время выполнения или остановки экземпляра. Свойства затраченного времени постоянно увеличиваются во время <xref:System.Diagnostics.Stopwatch> работы. они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение <xref:System.Diagnostics.Stopwatch> затраченного времени экземпляра равно сумме всех измеренных интервалов времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает подсчитаться на совокупное затраченное время; каждый <xref:System.Diagnostics.Stopwatch.Stop%2A> вызов завершает текущую меру интервала и замораживает совокупное значение затраченного времени. Используйте метод для очистки совокупного истекшего времени в существующем <xref:System.Diagnostics.Stopwatch> экземпляре. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
 <xref:System.Diagnostics.Stopwatch> Меры времени, затраченные на подсчет тактов таймера в базовом механизме таймера. Если установленное оборудование и операционная система поддерживают счетчик производительности с высоким разрешением, <xref:System.Diagnostics.Stopwatch> то класс использует этот счетчик для измерения затраченного времени. В противном случае класс использует системный таймер для измерения затраченного времени. <xref:System.Diagnostics.Stopwatch> Используйте поля <xref:System.Diagnostics.Stopwatch.IsHighResolution> <xref:System.Diagnostics.Stopwatch> и, чтобы определить точность и разрешение реализации времени. <xref:System.Diagnostics.Stopwatch.Frequency>  
  
 <xref:System.Diagnostics.Stopwatch> Класс помогает управлять счетчиками производительности, связанными со временем, в рамках управляемого кода. В частности, <xref:System.Diagnostics.Stopwatch.Frequency> поле и <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> метод можно использовать вместо неуправляемых интерфейсов API `QueryPerformanceFrequency` Windows и `QueryPerformanceCounter`.  
  
> [!NOTE]
>  На многопроцессорном компьютере не имеет значения, на каком процессоре выполняется поток. Однако из-за ошибок в BIOS или слое абстрагирования оборудования (HAL) можно получить разные временные результаты на разных процессорах. Чтобы указать соответствие процессоров для потока, используйте <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Diagnostics.Stopwatch> класс для определения времени выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 В следующем примере показано использование <xref:System.Diagnostics.Stopwatch> класса для вычисления данных о производительности.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемый <xref:System.Diagnostics.Stopwatch> экземпляр остановлен, свойство затраченного времени экземпляра равно нулю.  
  
 Используйте метод, чтобы начать измерение затраченного времени с помощью нового <xref:System.Diagnostics.Stopwatch> экземпляра. <xref:System.Diagnostics.Stopwatch.Start%2A> Используйте метод, чтобы инициализировать новый <xref:System.Diagnostics.Stopwatch> экземпляр и сразу же запустить его. <xref:System.Diagnostics.Stopwatch.StartNew%2A>  
  
   
  
## Examples  
 В следующем примере <xref:System.Diagnostics.Stopwatch> экземпляр инициализируется с помощью простого конструктора класса.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время, измеренное текущим экземпляром.</summary>
        <value>Доступный только для чтения экземпляр <see cref="T:System.TimeSpan" /> представляет общее затраченное время, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном <xref:System.Diagnostics.Stopwatch> <xref:System.Diagnostics.Stopwatch.Start%2A> сценарии вызывается метод, <xref:System.Diagnostics.Stopwatch.Stop%2A> затем вызывается метод, а <xref:System.Diagnostics.Stopwatch.Elapsed%2A> затем проверяются затраченное время с помощью свойства.  
  
 Используйте свойство для получения значения затраченного времени с помощью <xref:System.TimeSpan> методов и свойств. <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Например, можно отформатировать возвращаемый <xref:System.TimeSpan> экземпляр в текстовое представление или передать его другому классу, для которого <xref:System.TimeSpan> требуется параметр.  
  
 Можно запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> во время <xref:System.Diagnostics.Stopwatch> работы или остановки экземпляра. Свойства затраченного времени постоянно увеличиваются во время <xref:System.Diagnostics.Stopwatch> работы. они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение <xref:System.Diagnostics.Stopwatch> затраченного времени экземпляра равно сумме всех измеренных интервалов времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает подсчитаться на совокупное затраченное время; каждый <xref:System.Diagnostics.Stopwatch.Stop%2A> вызов завершает текущую меру интервала и замораживает совокупное значение затраченного времени. Используйте метод для очистки совокупного истекшего времени в существующем <xref:System.Diagnostics.Stopwatch> экземпляре. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Diagnostics.Stopwatch.Elapsed%2A> свойство для определения времени выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время в миллисекундах, измеренное текущим экземпляром.</summary>
        <value>Доступное только для чтения длинное целое число, представляющее общее число миллисекунд, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство представляет затраченное время с округлением до ближайшего целого значения миллисекунды. Для измерений с <xref:System.Diagnostics.Stopwatch.Elapsed%2A> большей точностью используйте свойства <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> или.  
  
 Можно запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> во время <xref:System.Diagnostics.Stopwatch> работы или остановки экземпляра. Свойства затраченного времени постоянно увеличиваются во время <xref:System.Diagnostics.Stopwatch> работы. они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение <xref:System.Diagnostics.Stopwatch> затраченного времени экземпляра равно сумме всех измеренных интервалов времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает подсчитаться на совокупное затраченное время; каждый <xref:System.Diagnostics.Stopwatch.Stop%2A> вызов завершает текущую меру интервала и замораживает совокупное значение затраченного времени. Используйте метод для очистки совокупного истекшего времени в существующем <xref:System.Diagnostics.Stopwatch> экземпляре. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 В следующем примере <xref:System.Diagnostics.Stopwatch> класс используется для измерения производительности четырех различных реализаций для синтаксического анализа целого числа из строки. Этот пример кода является частью большого примера, <xref:System.Diagnostics.Stopwatch> приведенного для класса.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время в тактах таймера, измеренное текущим экземпляром.</summary>
        <value>Доступное только для чтения длинное целое число, представляющее общее число тактов таймера, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство представляет количество прошедших тактов в базовом механизме таймера. Такт — это наименьшая единица времени, которую <xref:System.Diagnostics.Stopwatch> может измерять таймер. Используйте поле, чтобы преобразовать значение в число секунд. <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> <xref:System.Diagnostics.Stopwatch.Frequency>  
  
 Можно запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> во время <xref:System.Diagnostics.Stopwatch> работы или остановки экземпляра. Свойства затраченного времени постоянно увеличиваются во время <xref:System.Diagnostics.Stopwatch> работы. они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение <xref:System.Diagnostics.Stopwatch> затраченного времени экземпляра равно сумме всех измеренных интервалов времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает подсчитаться на совокупное затраченное время; каждый <xref:System.Diagnostics.Stopwatch.Stop%2A> вызов завершает текущую меру интервала и замораживает совокупное значение затраченного времени. Используйте метод для очистки совокупного истекшего времени в существующем <xref:System.Diagnostics.Stopwatch> экземпляре. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch>такты отличаются от <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Каждый Квант в <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> значении представляет интервал 1 100-наносекундных. Каждый Квант в <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> значении представляет интервал времени, равный 1 секунде, деленный на <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 В следующем примере <xref:System.Diagnostics.Stopwatch> класс используется для измерения производительности четырех различных реализаций для синтаксического анализа целого числа из строки. Этот пример кода является частью большого примера, <xref:System.Diagnostics.Stopwatch> приведенного для класса.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает частоту таймера в виде количества тактов в секунду. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Частота таймера указывает точность и разрешение таймера. Например, частота таймера 2 000 000 тактов в секунду равна разрешению таймера 500 наносекунд на такт. Иными словами, поскольку одна секунда равна 1 000 000 000 наносекунд, частота таймера 2 000 000 тактов в секунду равна 2 000 000 тактов в 1 000 000 000 наносекундах, что может быть более простым, чем 1 такт на 500 в секунду.  
  
 Это <xref:System.Diagnostics.Stopwatch.Frequency> значение зависит от разрешения базового механизма обработки времени. Если установленное оборудование и операционная система поддерживают счетчик производительности с высоким разрешением, <xref:System.Diagnostics.Stopwatch.Frequency> то значение отражает частоту этого счетчика. В противном случае значение зависит от частоты системного таймера. <xref:System.Diagnostics.Stopwatch.Frequency>  
  
 Так как <xref:System.Diagnostics.Stopwatch.Frequency> частота зависит от установленного оборудования и операционной системы, значение остается постоянным во время работы системы. <xref:System.Diagnostics.Stopwatch>  
  
   
  
## Examples  
 В следующем примере выводятся частота и разрешение <xref:System.Diagnostics.Stopwatch> таймера. Этот пример кода является частью большого примера, <xref:System.Diagnostics.Stopwatch> приведенного для класса.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает текущее число тактов временного механизма.</summary>
        <returns>Длинное целое число со знаком, представляющее значение счетчика тактов базового механизма таймера.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если класс использует счетчик производительности с высоким разрешением, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> возвращает текущее значение этого счетчика. <xref:System.Diagnostics.Stopwatch> Если класс использует системный таймер, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> возвращает текущее <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> свойство <xref:System.DateTime.Now%2A?displayProperty=nameWithType> экземпляра. <xref:System.Diagnostics.Stopwatch>  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> метода для обновления счетчика производительности.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, зависит ли таймер от счетчика производительности высокого разрешения. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таймер, используемый <xref:System.Diagnostics.Stopwatch> классом, зависит от системного оборудования и операционной системы. <xref:System.Diagnostics.Stopwatch.IsHighResolution>значение `true` , <xref:System.Diagnostics.Stopwatch>  Если таймер основан на счетчике производительности с высоким разрешением. В противном `false`случае <xref:System.Diagnostics.Stopwatch> — значение, указывающее, что таймер основан на системном таймере. <xref:System.Diagnostics.Stopwatch.IsHighResolution>  
  
   
  
## Examples  
 В следующем примере выводятся частота и разрешение <xref:System.Diagnostics.Stopwatch> таймера. Этот пример кода является частью большого примера, <xref:System.Diagnostics.Stopwatch> приведенного для класса.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, запущен ли таймер <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <value>Значение<see langword="true" /> , если экземпляр <see cref="T:System.Diagnostics.Stopwatch" /> в настоящее время выполняется и измеряет затраченное время интервала; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр начинает выполняться с <xref:System.Diagnostics.Stopwatch.Start%2A> вызовом или  <xref:System.Diagnostics.Stopwatch.StartNew%2A> .  <xref:System.Diagnostics.Stopwatch> Экземпляр прекращает выполнение с вызовом <xref:System.Diagnostics.Stopwatch.Stop%2A> или. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение интервала времени и обнуляет затраченное время.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Stopwatch> Экземпляр вычисляет и удерживает совокупное затраченное время на несколько временных интервалов до тех пор, пока экземпляр не будет сброшен. Используйте <xref:System.Diagnostics.Stopwatch.Stop%2A> , чтобы прерывать текущее измерение интервалов и хранить совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> , чтобы отключить все выполняемые измерения интервала и очистить значение затраченного времени.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение интервала времени, обнуляет затраченное время и начинает измерение затраченного времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Stopwatch> Экземпляр вычисляет и удерживает совокупное время, затраченное на несколько временных интервалов, до тех пор, пока экземпляр не будет сброшен или перезапущен. Используйте <xref:System.Diagnostics.Stopwatch.Stop%2A> , чтобы прерывать текущее измерение интервалов и хранить совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> , чтобы отключить все выполняемые измерения интервала и очистить значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Restart%2A> для отмены текущего измерения интервала и запуска нового измерения интервала.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает или возобновляет измерение затраченного времени для интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном <xref:System.Diagnostics.Stopwatch> <xref:System.Diagnostics.Stopwatch.Start%2A> сценарии вызывается метод, <xref:System.Diagnostics.Stopwatch.Stop%2A> затем вызывается метод, а <xref:System.Diagnostics.Stopwatch.Elapsed%2A> затем проверяются затраченное время с помощью свойства.  
  
 После запуска <xref:System.Diagnostics.Stopwatch> таймер измеряет текущий интервал в астрономических тактах таймера до тех пор, пока экземпляр не будет остановлен или сброшен. <xref:System.Diagnostics.Stopwatch> Запуск, который уже выполняется, не изменяет состояние таймера или сбрасывает свойства истекшего времени.  
  
 Если экземпляр измеряет более одного интервала <xref:System.Diagnostics.Stopwatch.Start%2A> , метод возобновляет измерение времени из текущего значения затраченного времени. <xref:System.Diagnostics.Stopwatch> <xref:System.Diagnostics.Stopwatch> Экземпляр вычисляет и удерживает совокупное затраченное время на несколько временных интервалов до тех пор, пока экземпляр не будет сброшен. Используйте метод перед вызовом <xref:System.Diagnostics.Stopwatch.Start%2A> метода, чтобы очистить совокупное <xref:System.Diagnostics.Stopwatch> затраченное время в экземпляре. <xref:System.Diagnostics.Stopwatch.Reset%2A> Используйте метод для <xref:System.Diagnostics.Stopwatch.Reset%2A> и <xref:System.Diagnostics.Stopwatch.Start%2A> с помощью одной команды. <xref:System.Diagnostics.Stopwatch>  <xref:System.Diagnostics.Stopwatch.Restart%2A>  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Diagnostics.Stopwatch.Start%2A> метод для запуска таймера, который измеряет время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Stopwatch" />, задает свойство затраченного времени равным нулю и запускает измерение затраченного времени.</summary>
        <returns>Экземпляр <see cref="T:System.Diagnostics.Stopwatch" />, который только что начал измерять затраченное время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод эквивалентен вызову <xref:System.Diagnostics.Stopwatch> конструктора и последующему вызову <xref:System.Diagnostics.Stopwatch.Start%2A> в новом экземпляре.  
  
   
  
## Examples  
 В следующем примере <xref:System.Diagnostics.Stopwatch> класс используется для измерения производительности четырех различных реализаций для синтаксического анализа целого числа из строки. Этот пример кода является частью большого примера, <xref:System.Diagnostics.Stopwatch> приведенного для класса.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение затраченного времени для интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном <xref:System.Diagnostics.Stopwatch> <xref:System.Diagnostics.Stopwatch.Start%2A> сценарии вызывается метод, <xref:System.Diagnostics.Stopwatch.Stop%2A> затем вызывается метод, а <xref:System.Diagnostics.Stopwatch.Elapsed%2A> затем проверяются затраченное время с помощью свойства.  
  
 <xref:System.Diagnostics.Stopwatch.Stop%2A> Метод завершает текущую единицу измерения интервала времени. <xref:System.Diagnostics.Stopwatch> Остановка, которая не выполняется, не изменяет состояние таймера или сбрасывает свойства истекшего времени.  
  
 Если экземпляр измеряет более одного интервала <xref:System.Diagnostics.Stopwatch.Stop%2A> , метод эквивалентен приостановке измерения затраченного времени. <xref:System.Diagnostics.Stopwatch> Последующий вызов метода <xref:System.Diagnostics.Stopwatch.Start%2A> возобновляет измерение времени из текущего значения затраченного времени. Используйте метод для очистки совокупного истекшего времени <xref:System.Diagnostics.Stopwatch> в экземпляре. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Diagnostics.Stopwatch.Stop%2A> метод для завершения таймера, который измеряет время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>
