<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="83c3b607978c70bd0cc3214d68c2e0ae69e2403b" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75137240" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет набор методов и свойств, которые можно использовать для точного измерения затраченного времени.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр <xref:System.Diagnostics.Stopwatch> может измерять затраченное время для одного интервала или общее время, затраченное на несколько интервалов. В типичном сценарии <xref:System.Diagnostics.Stopwatch> вызывается метод <xref:System.Diagnostics.Stopwatch.Start%2A>, в конечном итоге вызывается метод <xref:System.Diagnostics.Stopwatch.Stop%2A>, а затем проверяются затраченное время с помощью свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>.  
  
 Экземпляр <xref:System.Diagnostics.Stopwatch> либо работает, либо остановлен; чтобы определить текущее состояние <xref:System.Diagnostics.Stopwatch>, используйте <xref:System.Diagnostics.Stopwatch.IsRunning%2A>. Используйте <xref:System.Diagnostics.Stopwatch.Start%2A>, чтобы начать измерение затраченного времени; для завершения измерения затраченного времени используйте <xref:System.Diagnostics.Stopwatch.Stop%2A>. Запросите значение затраченного времени с помощью свойств <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>или <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Вы можете запросить свойства затраченного времени во время выполнения или остановки экземпляра. Свойства затраченного времени постоянно увеличиваются во время выполнения <xref:System.Diagnostics.Stopwatch>; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение затраченного времени экземпляра <xref:System.Diagnostics.Stopwatch> равно сумме всех измеренных интервалов времени. При каждом вызове <xref:System.Diagnostics.Stopwatch.Start%2A> начинается подсчет совокупного истекшего времени; Каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервалов и закрепляет совокупное значение затраченного времени. Используйте метод <xref:System.Diagnostics.Stopwatch.Reset%2A> для очистки совокупного затраченного времени в существующем экземпляре <xref:System.Diagnostics.Stopwatch>.  
  
 <xref:System.Diagnostics.Stopwatch> измеряет затраченное время, выполнив подсчет тактов таймера в базовом механизме таймера. Если установленное оборудование и операционная система поддерживают счетчик производительности с высоким разрешением, то класс <xref:System.Diagnostics.Stopwatch> использует этот счетчик для измерения затраченного времени. В противном случае класс <xref:System.Diagnostics.Stopwatch> использует системный таймер для измерения затраченного времени. Используйте поля <xref:System.Diagnostics.Stopwatch.Frequency> и <xref:System.Diagnostics.Stopwatch.IsHighResolution>, чтобы определить точность и разрешение реализации <xref:System.Diagnostics.Stopwatch> времени.  
  
 Класс <xref:System.Diagnostics.Stopwatch> помогает управлять счетчиками производительности, связанными со временем, в рамках управляемого кода. В частности, <xref:System.Diagnostics.Stopwatch.Frequency> поля и метод <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> можно использовать вместо неуправляемых API-интерфейсов Windows `QueryPerformanceFrequency` и `QueryPerformanceCounter`.  
  
> [!NOTE]
>  На многопроцессорном компьютере не имеет значения, на каком процессоре выполняется поток. Однако из-за ошибок в BIOS или слое абстрагирования оборудования (HAL) можно получить разные временные результаты на разных процессорах. Чтобы указать сходство процессоров для потока, используйте метод <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать класс <xref:System.Diagnostics.Stopwatch> для определения времени выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 В следующем примере показано использование класса <xref:System.Diagnostics.Stopwatch> для вычисления данных о производительности.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращенный <xref:System.Diagnostics.Stopwatch> экземпляр остановлен, свойство затраченного времени экземпляра равно нулю.  
  
 Используйте метод <xref:System.Diagnostics.Stopwatch.Start%2A>, чтобы начать измерение затраченного времени с помощью нового экземпляра <xref:System.Diagnostics.Stopwatch>. Используйте метод <xref:System.Diagnostics.Stopwatch.StartNew%2A> для инициализации нового экземпляра <xref:System.Diagnostics.Stopwatch> и его немедленного запуска.  
  
   
  
## Examples  
 В следующем примере экземпляр <xref:System.Diagnostics.Stopwatch> инициализируется с помощью простого конструктора класса.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время, измеренное текущим экземпляром.</summary>
        <value>Доступный только для чтения объект <see cref="T:System.TimeSpan" />, который представляет общее затраченное время, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном сценарии <xref:System.Diagnostics.Stopwatch> вызывается метод <xref:System.Diagnostics.Stopwatch.Start%2A>, в конечном итоге вызывается метод <xref:System.Diagnostics.Stopwatch.Stop%2A>, а затем проверяются затраченное время с помощью свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>.  
  
 Используйте свойство <xref:System.Diagnostics.Stopwatch.Elapsed%2A> для получения значения затраченного времени с помощью методов и свойств <xref:System.TimeSpan>. Например, можно отформатировать возвращаемый <xref:System.TimeSpan>ный экземпляр в текстовое представление или передать его другому классу, для которого требуется параметр <xref:System.TimeSpan>.  
  
 Вы можете запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> во время работы или остановки экземпляра <xref:System.Diagnostics.Stopwatch>. Свойства затраченного времени постоянно увеличиваются во время выполнения <xref:System.Diagnostics.Stopwatch>; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение затраченного времени экземпляра <xref:System.Diagnostics.Stopwatch> равно сумме всех измеренных интервалов времени. При каждом вызове <xref:System.Diagnostics.Stopwatch.Start%2A> начинается подсчет совокупного истекшего времени; Каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервалов и закрепляет совокупное значение затраченного времени. Используйте метод <xref:System.Diagnostics.Stopwatch.Reset%2A> для очистки совокупного затраченного времени в существующем экземпляре <xref:System.Diagnostics.Stopwatch>.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A> для определения времени выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время в миллисекундах, измеренное текущим экземпляром.</summary>
        <value>Доступное только для чтения длинное целое число, представляющее общее число миллисекунд, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство представляет затраченное время с округлением до ближайшего целого значения миллисекунды. Для измерений с более высокой точностью используйте свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A> или <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>.  
  
 Вы можете запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> во время работы или остановки экземпляра <xref:System.Diagnostics.Stopwatch>. Свойства затраченного времени постоянно увеличиваются во время выполнения <xref:System.Diagnostics.Stopwatch>; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение затраченного времени экземпляра <xref:System.Diagnostics.Stopwatch> равно сумме всех измеренных интервалов времени. При каждом вызове <xref:System.Diagnostics.Stopwatch.Start%2A> начинается подсчет совокупного истекшего времени; Каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервалов и закрепляет совокупное значение затраченного времени. Используйте метод <xref:System.Diagnostics.Stopwatch.Reset%2A> для очистки совокупного затраченного времени в существующем экземпляре <xref:System.Diagnostics.Stopwatch>.  
  
   
  
## Examples  
 В следующем примере класс <xref:System.Diagnostics.Stopwatch> используется для измерения производительности четырех различных реализаций для синтаксического анализа целого числа из строки. Этот пример кода является частью большого примера, приведенного для класса <xref:System.Diagnostics.Stopwatch>.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время в тактах таймера, измеренное текущим экземпляром.</summary>
        <value>Доступное только для чтения длинное целое число, представляющее общее число тактов таймера, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство представляет количество прошедших тактов в базовом механизме таймера. Квант — это наименьшая единица времени, которую может измерять таймер <xref:System.Diagnostics.Stopwatch>. Используйте поле <xref:System.Diagnostics.Stopwatch.Frequency> для преобразования значения <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> в число секунд.  
  
 Вы можете запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> во время работы или остановки экземпляра <xref:System.Diagnostics.Stopwatch>. Свойства затраченного времени постоянно увеличиваются во время выполнения <xref:System.Diagnostics.Stopwatch>; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение затраченного времени экземпляра <xref:System.Diagnostics.Stopwatch> равно сумме всех измеренных интервалов времени. При каждом вызове <xref:System.Diagnostics.Stopwatch.Start%2A> начинается подсчет совокупного истекшего времени; Каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервалов и закрепляет совокупное значение затраченного времени. Используйте метод <xref:System.Diagnostics.Stopwatch.Reset%2A> для очистки совокупного затраченного времени в существующем экземпляре <xref:System.Diagnostics.Stopwatch>.  
  
> [!NOTE]
>  такты <xref:System.Diagnostics.Stopwatch> отличаются от <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Каждый Квант в значении <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> представляет интервал 1 100-наносекундных. Каждый Квант в <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> значение представляет интервал времени, равный 1 секунде, деленный на <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 В следующем примере класс <xref:System.Diagnostics.Stopwatch> используется для измерения производительности четырех различных реализаций для синтаксического анализа целого числа из строки. Этот пример кода является частью большого примера, приведенного для класса <xref:System.Diagnostics.Stopwatch>.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает частоту таймера в виде количества тактов в секунду. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Частота таймера указывает точность и разрешение таймера. Например, частота таймера 2 000 000 тактов в секунду равна разрешению таймера 500 наносекунд на такт. Иными словами, поскольку одна секунда равна 1 000 000 000 наносекунд, частота таймера 2 000 000 тактов в секунду равна 2 000 000 тактов в 1 000 000 000 наносекундах, что может быть более простым, чем 1 такт на 500 в секунду.  
  
 Значение <xref:System.Diagnostics.Stopwatch.Frequency> зависит от разрешения базового механизма обработки времени. Если установленное оборудование и операционная система поддерживают счетчик производительности с высоким разрешением, то <xref:System.Diagnostics.Stopwatch.Frequency> значение отражает частоту этого счетчика. В противном случае значение <xref:System.Diagnostics.Stopwatch.Frequency> зависит от частоты системного таймера.  
  
 Так как частота <xref:System.Diagnostics.Stopwatch> зависит от установленного оборудования и операционной системы, значение <xref:System.Diagnostics.Stopwatch.Frequency> остается постоянным во время работы системы.  
  
   
  
## Examples  
 В следующем примере показана частота и разрешение таймера <xref:System.Diagnostics.Stopwatch>. Этот пример кода является частью большого примера, приведенного для класса <xref:System.Diagnostics.Stopwatch>.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает текущее число тактов временного механизма.</summary>
        <returns>Длинное целое число со знаком, представляющее значение счетчика тактов базового механизма таймера.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Diagnostics.Stopwatch> класс использует счетчик производительности высокого разрешения, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> возвращает текущее значение этого счетчика. Если класс <xref:System.Diagnostics.Stopwatch> использует системный таймер, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> возвращает текущее свойство <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> экземпляра <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> для обновления счетчика производительности.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, зависит ли таймер от счетчика производительности высокого разрешения. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таймер, используемый классом <xref:System.Diagnostics.Stopwatch>, зависит от оборудования системы и операционной системы. <xref:System.Diagnostics.Stopwatch.IsHighResolution> `true`, если таймер <xref:System.Diagnostics.Stopwatch> основан на счетчике производительности с высоким разрешением. В противном случае <xref:System.Diagnostics.Stopwatch.IsHighResolution> `false`, что означает, что таймер <xref:System.Diagnostics.Stopwatch> основан на системном таймере.  
  
   
  
## Examples  
 В следующем примере показана частота и разрешение таймера <xref:System.Diagnostics.Stopwatch>. Этот пример кода является частью большого примера, приведенного для класса <xref:System.Diagnostics.Stopwatch>.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, запущен ли таймер <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <value>Значение <see langword="true" />, если экземпляр <see cref="T:System.Diagnostics.Stopwatch" /> в настоящее время выполняется и измеряет затраченное время интервала; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр <xref:System.Diagnostics.Stopwatch> начинает выполняться с вызовом <xref:System.Diagnostics.Stopwatch.Start%2A> или <xref:System.Diagnostics.Stopwatch.StartNew%2A>. Экземпляр прекращает выполнение с вызовом <xref:System.Diagnostics.Stopwatch.Stop%2A> или <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение интервала времени и обнуляет затраченное время.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр <xref:System.Diagnostics.Stopwatch> вычисляет и удерживает совокупное время, затраченное на несколько временных интервалов, до тех пор, пока экземпляр не будет сброшен. Используйте <xref:System.Diagnostics.Stopwatch.Stop%2A>, чтобы прерывать текущее измерение интервалов и хранить совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A>, чтобы отключить все выполняемые измерения интервала и очистить значение затраченного времени.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение интервала времени, обнуляет затраченное время и начинает измерение затраченного времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр <xref:System.Diagnostics.Stopwatch> вычисляет и удерживает совокупное время, затраченное на несколько временных интервалов, до тех пор, пока экземпляр не будет сброшен или перезапущен. Используйте <xref:System.Diagnostics.Stopwatch.Stop%2A>, чтобы прерывать текущее измерение интервалов и хранить совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A>, чтобы отключить все выполняемые измерения интервала и очистить значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Restart%2A>, чтобы прерывать текущее измерение интервалов и начать новое измерение интервалов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает или возобновляет измерение затраченного времени для интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном сценарии <xref:System.Diagnostics.Stopwatch> вызывается метод <xref:System.Diagnostics.Stopwatch.Start%2A>, в конечном итоге вызывается метод <xref:System.Diagnostics.Stopwatch.Stop%2A>, а затем проверяются затраченное время с помощью свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>.  
  
 После запуска таймер <xref:System.Diagnostics.Stopwatch> измеряет текущий интервал в астрономических тактах таймера до тех пор, пока экземпляр не будет остановлен или сброшен. Запуск <xref:System.Diagnostics.Stopwatch>, который уже выполняется, не приводит к изменению состояния таймера или сбросу свойств истекшего времени.  
  
 Если экземпляр <xref:System.Diagnostics.Stopwatch> измеряет более одного интервала, метод <xref:System.Diagnostics.Stopwatch.Start%2A> возобновляет измерение времени из текущего значения затраченного времени. Экземпляр <xref:System.Diagnostics.Stopwatch> вычисляет и удерживает совокупное время, затраченное на несколько временных интервалов, до тех пор, пока экземпляр не будет сброшен. Используйте метод <xref:System.Diagnostics.Stopwatch.Reset%2A> перед вызовом <xref:System.Diagnostics.Stopwatch.Start%2A>, чтобы очистить совокупное время, прошедшее с <xref:System.Diagnostics.Stopwatch> экземпляра. Используйте метод <xref:System.Diagnostics.Stopwatch.Restart%2A> для <xref:System.Diagnostics.Stopwatch.Reset%2A> и <xref:System.Diagnostics.Stopwatch.Start%2A> <xref:System.Diagnostics.Stopwatch> с помощью одной команды.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод <xref:System.Diagnostics.Stopwatch.Start%2A> для запуска таймера, который измеряет время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Stopwatch" />, задает свойство затраченного времени равным нулю и запускает измерение затраченного времени.</summary>
        <returns>Объект <see cref="T:System.Diagnostics.Stopwatch" />, который только что начал измерять затраченное время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод эквивалентен вызову конструктора <xref:System.Diagnostics.Stopwatch> и последующему вызову <xref:System.Diagnostics.Stopwatch.Start%2A> в новом экземпляре.  
  
   
  
## Examples  
 В следующем примере класс <xref:System.Diagnostics.Stopwatch> используется для измерения производительности четырех различных реализаций для синтаксического анализа целого числа из строки. Этот пример кода является частью большого примера, приведенного для класса <xref:System.Diagnostics.Stopwatch>.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение затраченного времени для интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном сценарии <xref:System.Diagnostics.Stopwatch> вызывается метод <xref:System.Diagnostics.Stopwatch.Start%2A>, в конечном итоге вызывается метод <xref:System.Diagnostics.Stopwatch.Stop%2A>, а затем проверяются затраченное время с помощью свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>.  
  
 Метод <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущую единицу измерения интервала времени. Остановка неработающего <xref:System.Diagnostics.Stopwatch> не приводит к изменению состояния таймера или сбросу свойств истекшего времени.  
  
 Если экземпляр <xref:System.Diagnostics.Stopwatch> измеряет более одного интервала, метод <xref:System.Diagnostics.Stopwatch.Stop%2A> эквивалентен приостановке измерения затраченного времени. Последующий вызов <xref:System.Diagnostics.Stopwatch.Start%2A> возобновляет измерение времени из текущего значения затраченного времени. Используйте метод <xref:System.Diagnostics.Stopwatch.Reset%2A> для очистки совокупного истекшего времени в экземпляре <xref:System.Diagnostics.Stopwatch>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать метод <xref:System.Diagnostics.Stopwatch.Stop%2A> для завершения таймера, который измеряет время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>
