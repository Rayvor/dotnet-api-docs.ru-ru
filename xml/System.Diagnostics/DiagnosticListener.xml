<Type Name="DiagnosticListener" FullName="System.Diagnostics.DiagnosticListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14db37d0bc3e99847cfb73dc13621747177a53d2" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75137890" /></Metadata><TypeSignature Language="C#" Value="public class DiagnosticListener : System.Diagnostics.DiagnosticSource, IDisposable, IObservable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DiagnosticListener extends System.Diagnostics.DiagnosticSource implements class System.IDisposable, class System.IObservable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DiagnosticListener&#xA;Inherits DiagnosticSource&#xA;Implements IDisposable, IObservable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticListener : System::Diagnostics::DiagnosticSource, IDisposable, IObservable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type DiagnosticListener = class&#xA;    inherit DiagnosticSource&#xA;    interface IDisposable&#xA;    interface IObservable&lt;KeyValuePair&lt;string, obj&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.DiagnosticSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IObservable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9b797-101">Предоставляет реализацию абстрактного класса <see cref="T:System.Diagnostics.DiagnosticSource" />, которые представляет именованное место, куда источник отправляет данные (события).</span><span class="sxs-lookup"><span data-stu-id="9b797-101">Provides an implementation of the abstract <see cref="T:System.Diagnostics.DiagnosticSource" /> class that represents a named place to which a source sends its information (events).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9b797-102">`DiagnosticListener` является Нотификатионсаурце, что означает, что возвращаемый результат можно использовать для регистрации уведомлений, но у него также есть метод <xref:System.Diagnostics.DiagnosticListener.Subscribe%2A>, чтобы уведомления можно было перенаправлять произвольно.</span><span class="sxs-lookup"><span data-stu-id="9b797-102">`DiagnosticListener` is a NotificationSource, which means the returned result can be used to  log notifications, but it also has a <xref:System.Diagnostics.DiagnosticListener.Subscribe%2A> method so notifications can be forwarded arbitrarily.</span></span> <span data-ttu-id="9b797-103">Таким же заданием является пересылка действий от производителя ко всем прослушивателям (множественное приведение).</span><span class="sxs-lookup"><span data-stu-id="9b797-103">Thus, its job is to forward things from the producer to all the listeners (multi-casting).</span></span> <span data-ttu-id="9b797-104">Как правило, не следует делать собственный <xref:System.Diagnostics.DiagnosticListener>, но использовать значение по умолчанию, чтобы уведомления были как можно более общедоступными.</span><span class="sxs-lookup"><span data-stu-id="9b797-104">Generally, you should not be making your own <xref:System.Diagnostics.DiagnosticListener> but use the default, so that notifications are as public as possible.</span></span>

<span data-ttu-id="9b797-105">Дополнительные сведения о классах <xref:System.Diagnostics.DiagnosticSource> и <xref:System.Diagnostics.DiagnosticListener> см. в разделе [DiagnosticSource пользователя](https://github.com/dotnet/corefx/blob/d3942d4671919edb0cca6ddc1840190f524a809d/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span><span class="sxs-lookup"><span data-stu-id="9b797-105">For more information on the <xref:System.Diagnostics.DiagnosticSource> and <xref:System.Diagnostics.DiagnosticListener> classes, see [DiagnosticSource User's Guide](https://github.com/dotnet/corefx/blob/d3942d4671919edb0cca6ddc1840190f524a809d/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span></span>

        ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiagnosticListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DiagnosticListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DiagnosticListener : string -&gt; System.Diagnostics.DiagnosticListener" Usage="new System.Diagnostics.DiagnosticListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9b797-106">Имя этого аспекта <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-106">The name of this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></param>
        <summary><span data-ttu-id="9b797-107">Создает <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-107">Creates a new <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllListeners">
      <MemberSignature Language="C#" Value="public static IObservable&lt;System.Diagnostics.DiagnosticListener&gt; AllListeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IObservable`1&lt;class System.Diagnostics.DiagnosticListener&gt; AllListeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DiagnosticListener.AllListeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AllListeners As IObservable(Of DiagnosticListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property IObservable&lt;System::Diagnostics::DiagnosticListener ^&gt; ^ AllListeners { IObservable&lt;System::Diagnostics::DiagnosticListener ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllListeners : IObservable&lt;System.Diagnostics.DiagnosticListener&gt;" Usage="System.Diagnostics.DiagnosticListener.AllListeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;System.Diagnostics.DiagnosticListener&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b797-108">Возвращает коллекцию прослушивателей для данного <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-108">Gets the collection of listeners for this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="9b797-109">При оформлении подписки вы получаете обратные вызовы для всех Нотификатионлистенерс в AppDomain, а также те, которые произошли в прошлом, и все будущие прослушиватели, созданные в будущем.</span><span class="sxs-lookup"><span data-stu-id="9b797-109">When you subscribe to this, you get callbacks for all NotificationListeners in the appdomain, as well as those that occurred in the past, and all future Listeners created in the future.</span></span>

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="diagnosticListener.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b797-110">Удаляет NotificationListeners.</span><span class="sxs-lookup"><span data-stu-id="9b797-110">Disposes the NotificationListeners.</span></span></summary>
        <remarks><span data-ttu-id="9b797-111">Прослушиватели уведомлений не вскрываются самостоятельно, так как они находятся в глобальном списке (для обнаружения).</span><span class="sxs-lookup"><span data-stu-id="9b797-111">Notification listeners do not die on their own because they are in a global list (for discoverability).</span></span> <span data-ttu-id="9b797-112">Их необходимо явным образом удалить.</span><span class="sxs-lookup"><span data-stu-id="9b797-112">You must dispose of them explicitly.</span></span> <span data-ttu-id="9b797-113">Обратите внимание, что не нужно использовать шаблон <c>Dispose (bool)</c> , так как мы не хотим поддерживать подклассы с неуправляемым состоянием.</span><span class="sxs-lookup"><span data-stu-id="9b797-113">Note that we do not do the <c>Dispose(bool)</c> pattern because we don't want to support subclasses that have non-managed state.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEnabled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEnabled();" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : unit -&gt; bool" Usage="diagnosticListener.IsEnabled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b797-114">Определяет наличие зарегистрированных подписчиков.</span><span class="sxs-lookup"><span data-stu-id="9b797-114">Determines whether there are any registered subscribers.</span></span></summary>
        <returns><span data-ttu-id="9b797-115"><see langword="true" /> при наличии зарегистрированных подписчиков, в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-115"><see langword="true" /> if there are any registered subscribers, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="9b797-116">Если программа установки для уведомления является дорогостоящей, можно вызвать `IsEnabled()` перед выполнением этой установки.</span><span class="sxs-lookup"><span data-stu-id="9b797-116">If setup for the notification is expensive, you can call `IsEnabled()` before performing this setup.</span></span> <span data-ttu-id="9b797-117">Производители могут при необходимости вызвать `IsEnabled()` перед вызовом <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)> в критически важных для производительности компонентах приложения, чтобы определить, есть ли какие-либо прослушиватели для <xref:System.Diagnostics.DiagnosticListener>.</span><span class="sxs-lookup"><span data-stu-id="9b797-117">Producers may optionally call `IsEnabled()` before calling <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)> in performance-critical parts of the application to determine whether there are any listeners to the <xref:System.Diagnostics.DiagnosticListener>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public override bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : string -&gt; bool" Usage="diagnosticListener.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary><span data-ttu-id="9b797-118">Проверяет, включен ли <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-118">Checks whether the <see cref="T:System.Diagnostics.DiagnosticListener" /> is enabled.</span></span></summary>
        <returns><span data-ttu-id="9b797-119"><see langword="true" />, если уведомления включены; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-119"><see langword="true" /> if notifications are enabled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public override bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticListener.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9b797-120">Имя проверяемого события.</span><span class="sxs-lookup"><span data-stu-id="9b797-120">The name of the event to check.</span></span></param>
        <param name="arg1"><span data-ttu-id="9b797-121">Объект, представляющий контекст.</span><span class="sxs-lookup"><span data-stu-id="9b797-121">The object that represents a context.</span></span></param>
        <param name="arg2"><span data-ttu-id="9b797-122">Объект, представляющий контекст.</span><span class="sxs-lookup"><span data-stu-id="9b797-122">The object that represents a context.</span></span></param>
        <summary><span data-ttu-id="9b797-123">Проверяет, необходимо ли какому-либо подписчику на события диагностики получать события с этим именем.</span><span class="sxs-lookup"><span data-stu-id="9b797-123">Checks if any subscriber to the diagnostic events is interested in receiving events with this name.</span></span> <span data-ttu-id="9b797-124">Подписчики указывают интересующие их события с помощью делегата, предоставленного в <see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-124">Subscribers indicate their interest using a delegate provided in <see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" />.</span></span></summary>
        <returns><span data-ttu-id="9b797-125">Значение <see langword="true" />, если включен; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-125"><see langword="true" /> if it is enabled, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DiagnosticListener.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Diagnostics.DiagnosticListener.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b797-126">Возвращает имя этого аспекта <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-126">Gets the name of this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <value><span data-ttu-id="9b797-127">Имя <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="9b797-127">The name of the <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public override void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticListener.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="9b797-128">Действие, на которое влияет внешнее событие.</span><span class="sxs-lookup"><span data-stu-id="9b797-128">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="9b797-129">Объект, представляющий исходящий запрос.</span><span class="sxs-lookup"><span data-stu-id="9b797-129">An object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="9b797-130">Вызывает метод OnActivityExport для всех подписчиков.</span><span class="sxs-lookup"><span data-stu-id="9b797-130">Invokes the OnActivityExport method of all the subscribers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public override void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticListener.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="9b797-131">Действие, на которое влияет внешнее событие.</span><span class="sxs-lookup"><span data-stu-id="9b797-131">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="9b797-132">Объект, представляющий входящий запрос.</span><span class="sxs-lookup"><span data-stu-id="9b797-132">An object that represents the incoming request.</span></span></param>
        <summary><span data-ttu-id="9b797-133">Вызывает метод OnActivityImport для всех подписчиков.</span><span class="sxs-lookup"><span data-stu-id="9b797-133">Invokes the OnActivityImport method of all the subscribers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subscribe">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9b797-134">Эти методы допускают добавление подписчика, а некоторые из них предоставляют дополнительные методы фильтрации событий.</span><span class="sxs-lookup"><span data-stu-id="9b797-134">These methods allow adding a subscriber, and some of them provide optional event filtering methods.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe observer" />
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IObservable`1.Subscribe(System.IObserver{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="9b797-135">Подписчик.</span><span class="sxs-lookup"><span data-stu-id="9b797-135">A subscriber.</span></span></param>
        <summary><span data-ttu-id="9b797-136">Добавляет подписчика.</span><span class="sxs-lookup"><span data-stu-id="9b797-136">Adds a subscriber.</span></span></summary>
        <returns><span data-ttu-id="9b797-137">Ссылка на интерфейс, которая позволяет прослушивателю прекратить получение уведомлений до того, как источник <see cref="T:System.Diagnostics.DiagnosticSource" /> закончил отправлять их.</span><span class="sxs-lookup"><span data-stu-id="9b797-137">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Func&lt;string,object,object,bool&gt; isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Func`4&lt;string, object, object, bool&gt; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Func(Of String, Object, Object, Boolean)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer, Func&lt;System::String ^, System::Object ^, System::Object ^, bool&gt; ^ isEnabled);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="9b797-138">Подписчик.</span><span class="sxs-lookup"><span data-stu-id="9b797-138">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="9b797-139">Делегат, который фильтрует события по имени и максимум двум объектам контекста (которые могут быть <see langword="null" />), либо значение <see langword="null" />, если фильтр событий не требуется.</span><span class="sxs-lookup"><span data-stu-id="9b797-139">A delegate that filters events based on their name and up to two context objects (which can be <see langword="null" />), or <see langword="null" /> to if an event filter is not desirable.</span></span></param>
        <summary><span data-ttu-id="9b797-140">Добавляет подписчик и при необходимости фильтрует события по имени и максимум двум объектам контекста.</span><span class="sxs-lookup"><span data-stu-id="9b797-140">Adds a subscriber, and optionally filters events based on their name and up to two context objects.</span></span></summary>
        <returns><span data-ttu-id="9b797-141">Ссылка на интерфейс, которая позволяет прослушивателю прекратить получение уведомлений до того, как источник <see cref="T:System.Diagnostics.DiagnosticSource" /> закончил отправлять их.</span><span class="sxs-lookup"><span data-stu-id="9b797-141">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="9b797-142">Если `isEnabled` не `null`, это означает, что некоторые события могут быть пропущены для повышения эффективности.</span><span class="sxs-lookup"><span data-stu-id="9b797-142">If `isEnabled` is not `null`, it indicates that some events are uninteresting can be skipped for efficiency.</span></span>

<span data-ttu-id="9b797-143">Определенный сайт инструментирования имеет возможность вызова одной или нескольких <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> перегрузок, в которых он передает имя события, а также до двух других (зависящих от конкретного сайта) объектов в качестве аргументов.</span><span class="sxs-lookup"><span data-stu-id="9b797-143">A particular instrumentation site has the option of calling one or more <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> overloads  in which it passes the name of the event and up to two other (instrumentation site specific) objects as arguments.</span></span> <span data-ttu-id="9b797-144">Если выполняется любой из этих <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A>ных вызовов, этот `isEnabled`ный предикат вызывается с переданными значениями (если используются более короткие перегрузки, `null` передается для отсутствующих объектов контекста).</span><span class="sxs-lookup"><span data-stu-id="9b797-144">If any of these <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> calls are made then this `isEnabled` predicate is invoked with passed values (if shorter overloads are used, `null` is passed for missing context objects).</span></span>

<span data-ttu-id="9b797-145">Это дает любому конкретному узлу инструментирования возможность передавать на подписчик два фрагмента информации для выполнения сложной и эффективной фильтрации.</span><span class="sxs-lookup"><span data-stu-id="9b797-145">This gives any particular instrumentation site the ability to pass up to two pieces of information to the subscriber to do sophisticated, efficient filtering.</span></span> <span data-ttu-id="9b797-146">Для этого требуется более тесная связь между сайтом инструментирования и кодом подписчика.</span><span class="sxs-lookup"><span data-stu-id="9b797-146">This requires more coupling between the instrumentation site and the subscriber code.</span></span>

<span data-ttu-id="9b797-147">Ожидается, что конкретный сайт инструментария может вызывать разные перегрузки `IsEnabled` для одного и того же события, сначала вызывая <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)>, который вызывает фильтр с двумя объектами контекста `null`.</span><span class="sxs-lookup"><span data-stu-id="9b797-147">It is expected that a particular instrumentation site may call different overloads of `IsEnabled` for the same event, first calling <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)>, which calls the filter with two `null` context objects.</span></span> <span data-ttu-id="9b797-148">Если `isEnabled` возвращает `true`, он вызывается снова с объектами контекста.</span><span class="sxs-lookup"><span data-stu-id="9b797-148">If `isEnabled` returns `true`, it calls again with context objects.</span></span> <span data-ttu-id="9b797-149">Этот фильтр `isEnabled` должен быть спроектирован с учетом этого.</span><span class="sxs-lookup"><span data-stu-id="9b797-149">The `isEnabled` filter should be designed with this in mind.</span></span>

<span data-ttu-id="9b797-150">Обратите внимание, что `isEnabled` предикат — это необязательная оптимизация, позволяющая сайту инструментирования избегать настройки полезных данных и вызова <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>, когда подписчик не заботится о нем.</span><span class="sxs-lookup"><span data-stu-id="9b797-150">Note that the `isEnabled` predicate is an optional optimization to allow the instrumentation site to avoid setting up the payload and calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> when no subscriber cares about it.</span></span> <span data-ttu-id="9b797-151">В частности, на сайте инструментирования можно пропустить предикат <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> (без его вызова) и просто вызвать <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span><span class="sxs-lookup"><span data-stu-id="9b797-151">In particular, the instrumentation site has the option of ignoring the <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> predicate (not calling it) and simply calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span></span> <span data-ttu-id="9b797-152">Таким же, если подписчику требуется фильтрация, он должен сделать это самостоятельно.</span><span class="sxs-lookup"><span data-stu-id="9b797-152">Thus, if the subscriber requires the filtering, it needs to do it itself.</span></span>

<span data-ttu-id="9b797-153">Если этот параметр имеет значение `null`, фильтрация не выполняется (все перегрузки <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> возвращают `true`).</span><span class="sxs-lookup"><span data-stu-id="9b797-153">If this parameter is `null`, no filtering is done (all overloads of <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> return `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Predicate&lt;string&gt; isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Predicate`1&lt;string&gt; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Predicate(Of String)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer, Predicate&lt;System::String ^&gt; ^ isEnabled);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Predicate&lt;string&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Predicate&lt;string&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="isEnabled" Type="System.Predicate&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="9b797-154">Подписчик.</span><span class="sxs-lookup"><span data-stu-id="9b797-154">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="9b797-155">Делегат, который фильтрует события на основе их имени (<see cref="T:System.String" />).</span><span class="sxs-lookup"><span data-stu-id="9b797-155">A delegate that filters events based on their name (<see cref="T:System.String" />).</span></span> <span data-ttu-id="9b797-156">Делегат должен возвращать <see langword="true" />, если событие включено.</span><span class="sxs-lookup"><span data-stu-id="9b797-156">The delegate should return <see langword="true" /> if the event is enabled.</span></span></param>
        <summary><span data-ttu-id="9b797-157">Добавляет подписчик и при необходимости фильтрует события по имени.</span><span class="sxs-lookup"><span data-stu-id="9b797-157">Adds a subscriber, and optionally filters events based on their name.</span></span></summary>
        <returns><span data-ttu-id="9b797-158">Ссылка на интерфейс, которая позволяет прослушивателю прекратить получение уведомлений до того, как источник <see cref="T:System.Diagnostics.DiagnosticSource" /> закончил отправлять их.</span><span class="sxs-lookup"><span data-stu-id="9b797-158">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="9b797-159">Если `isEnabled` не `null`, некоторые события являются неинтересными и могут быть пропущены для повышения эффективности.</span><span class="sxs-lookup"><span data-stu-id="9b797-159">If `isEnabled` is not `null`, some events are uninteresting and can be skipped for efficiency.</span></span> <span data-ttu-id="9b797-160">`isEnabled` предикат — это необязательная оптимизация, позволяющая сайту инструментирования избегать настройки полезных данных и вызова <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>, когда подписчик не заботится о нем.</span><span class="sxs-lookup"><span data-stu-id="9b797-160">The `isEnabled` predicate is an optional optimization to allow the instrumentation site to avoid setting up the payload and calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> when no subscriber cares about it.</span></span> <span data-ttu-id="9b797-161">В частности, на сайте инструментирования можно пропустить предикат <xref:System.Diagnostics.DiagnosticListener.IsEnabled> (без его вызова) и просто вызвать <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span><span class="sxs-lookup"><span data-stu-id="9b797-161">In particular the instrumentation site has the option of ignoring the <xref:System.Diagnostics.DiagnosticListener.IsEnabled> predicate (not calling it) and simply calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span></span> <span data-ttu-id="9b797-162">Поэтому, если подписчику требуется фильтрация, ему нужно сделать это.</span><span class="sxs-lookup"><span data-stu-id="9b797-162">Thus if the subscriber requires the filtering, it needs to do it itself.</span></span>

<span data-ttu-id="9b797-163">Если `isEnabled` `null`, фильтрация не выполняется (все перегрузки <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> возвращают `true`).</span><span class="sxs-lookup"><span data-stu-id="9b797-163">If `isEnabled` is `null`, no filtering is done (all overloads of <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> return `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Func&lt;string,object,object,bool&gt; isEnabled, Action&lt;System.Diagnostics.Activity,object&gt; onActivityImport = null, Action&lt;System.Diagnostics.Activity,object&gt; onActivityExport = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Func`4&lt;string, object, object, bool&gt; isEnabled, class System.Action`2&lt;class System.Diagnostics.Activity, object&gt; onActivityImport, class System.Action`2&lt;class System.Diagnostics.Activity, object&gt; onActivityExport) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean},System.Action{System.Diagnostics.Activity,System.Object},System.Action{System.Diagnostics.Activity,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Func(Of String, Object, Object, Boolean), Optional onActivityImport As Action(Of Activity, Object) = null, Optional onActivityExport As Action(Of Activity, Object) = null) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled, onActivityImport, onActivityExport)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="onActivityImport" Type="System.Action&lt;System.Diagnostics.Activity,System.Object&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="onActivityExport" Type="System.Action&lt;System.Diagnostics.Activity,System.Object&gt;" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="9b797-164">Подписчик.</span><span class="sxs-lookup"><span data-stu-id="9b797-164">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="9b797-165">Делегат, который фильтрует события по имени и максимум двум объектам контекста (которые могут быть <see langword="null" />), либо значение <see langword="null" />, если фильтр событий не требуется.</span><span class="sxs-lookup"><span data-stu-id="9b797-165">A delegate that filters events based on their name and up to two context objects (which can be <see langword="null" />), or <see langword="null" /> if an event filter is not desirable.</span></span></param>
        <param name="onActivityImport"><span data-ttu-id="9b797-166">Делегат действия, получающий действие, затронутое внешним событием, и объект, представляющий входящий запрос.</span><span class="sxs-lookup"><span data-stu-id="9b797-166">An action delegate that receives the activity affected by an external event and an object that represents the incoming request.</span></span></param>
        <param name="onActivityExport"><span data-ttu-id="9b797-167">Делегат действия, получающий действие, затронутое внешним событием, и объект, представляющий исходящий запрос.</span><span class="sxs-lookup"><span data-stu-id="9b797-167">An action delegate that receives the activity affected by an external event and an object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="9b797-168">Добавляет подписчик, при необходимости фильтрует события по имени и максимум двум объектам контекста и определяет методы, вызываемые, когда поставщики импортируют или экспортируют действия извне процесса.</span><span class="sxs-lookup"><span data-stu-id="9b797-168">Adds a subscriber, optionally filters events based on their name and up to two context objects, and specifies methods to call when providers import or export activites from outside the process.</span></span></summary>
        <returns><span data-ttu-id="9b797-169">Ссылка на интерфейс, которая позволяет прослушивателю прекратить получение уведомлений до того, как источник <see cref="T:System.Diagnostics.DiagnosticSource" /> закончил отправлять их.</span><span class="sxs-lookup"><span data-stu-id="9b797-169">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9b797-170">Если `isEnabled` не равно null, некоторые события могут быть пропущены для повышения эффективности.</span><span class="sxs-lookup"><span data-stu-id="9b797-170">If `isEnabled` is non-null, some events are uninteresting can be skipped for efficiency.</span></span>  

<span data-ttu-id="9b797-171">Можно также указать методы "Онактивитимпорт" и "Онактивитекспорт", которые вызываются, когда поставщики импортируют или экспортируют действия извне процесса (например, из HTTP-запросов).</span><span class="sxs-lookup"><span data-stu-id="9b797-171">You can also supply 'onActivityImport' and 'onActivityExport' methods that are called when providers importing or export activities from outside the process (for example, from HTTP requests).</span></span> <span data-ttu-id="9b797-172">Эти методы вызываются после импорта или экспорта действия и могут использоваться для изменения действия или исходящего запроса на Добавление политики.</span><span class="sxs-lookup"><span data-stu-id="9b797-172">These methods are called after importing or exporting the activity and can be used to modify the activity or the outgoing request to add policy.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="diagnosticListener.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b797-173">Возвращает строку с именем этого DiagnosticListener.</span><span class="sxs-lookup"><span data-stu-id="9b797-173">Returns a string with the name of this DiagnosticListener.</span></span></summary>
        <returns><span data-ttu-id="9b797-174">Имя этого DiagnosticListener.</span><span class="sxs-lookup"><span data-stu-id="9b797-174">The name of this DiagnosticListener.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string name, object value);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string name, object value) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (name As String, value As Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ name, System::Object ^ value);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="diagnosticListener.Write (name, value)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="public override void Write (string name, object parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string name, object parameters) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (name As String, parameters As Object)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ name, System::Object ^ parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="diagnosticListener.Write (name, parameters)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
        <Parameter Name="parameters" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9b797-175">Имя регистрируемого события.</span><span class="sxs-lookup"><span data-stu-id="9b797-175">The name of the event to log.</span></span></param>
        <param name="value"><span data-ttu-id="9b797-176">Объект, представляющий полезные данные для события.</span><span class="sxs-lookup"><span data-stu-id="9b797-176">An object that represents the payload for the event.</span></span></param>
        <param name="parameters"><span data-ttu-id="9b797-177">Объект, представляющий полезные данные для события.</span><span class="sxs-lookup"><span data-stu-id="9b797-177">An object that represents the payload for the event.</span></span></param>
        <summary><span data-ttu-id="9b797-178">Записывает уведомление в журнал.</span><span class="sxs-lookup"><span data-stu-id="9b797-178">Logs a notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9b797-179">Дополнительные сведения см. в описании метода <xref:System.Diagnostics.DiagnosticSource.Write%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9b797-179">For more information, see the <xref:System.Diagnostics.DiagnosticSource.Write%2A?displayProperty=nameWithType> method.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
