<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5547cfd812823bc4784c80d4d1f24c3e6767adfd" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63888085" /></Metadata><TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Источник события.</param>
    <param name="e">Объект <see cref="T:System.Diagnostics.DataReceivedEventArgs" />, содержащий данные события.</param>
    <summary>Предоставляет метод, обрабатывающий событие <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> или событие <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> объекта <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании делегата <xref:System.Diagnostics.DataReceivedEventHandler> необходимо указать метод, обрабатывающий событие. Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата. Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален. Дополнительные сведения о делегатов обработчиков событий, см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Для асинхронного сбора перенаправленного <xref:System.Diagnostics.Process.StandardOutput%2A> или <xref:System.Diagnostics.Process.StandardError%2A> поток выходных данных процесса, добавьте обработчик событий для <xref:System.Diagnostics.Process.OutputDataReceived> или <xref:System.Diagnostics.Process.ErrorDataReceived> событий. Эти события создаются каждый раз, когда процесс записывает строку в соответствующий перенаправленный поток. При закрытии перенаправленного потока, в обработчик событий отправляется строка null. Убедитесь, что ваш обработчик событий для проверки этого условия перед доступом к <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> свойство. Например, можно использовать `static` метод <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> проверяемый <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> свойство в обработчике событий.  
  
   
  
## Examples  
 В следующем примере кода показано, как для выполнения асинхронных операций чтения в перенаправленном <xref:System.Diagnostics.Process.StandardOutput%2A> поток **сортировки** команды. **Сортировки** команда представляет собой консольное приложение, который считывает и сортирует ввода текста.  
  
 В примере создается <xref:System.Diagnostics.DataReceivedEventHandler> делегат для `SortOutputHandler` обработчик событий и связывает делегат с <xref:System.Diagnostics.Process.OutputDataReceived> событий. Обработчик событий получает строки текста из перенаправленного <xref:System.Diagnostics.Process.StandardOutput%2A> поток, форматирует текст и выводит текст на экран.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>