<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ab0a3879d8998d81018620266d617c4acd9861e3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69228314" /></Metadata><TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Представляет свойства и методы обработчика HTTP-данных, заданного по умолчанию.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler> Объект перехватывает входящие запросы в конвейере HTTP, когда оба запроса перехватываются с помощью службы IIS (IIS) 6,0, и к запрошенному расширению не применяются явные привязки.  
  
 Перехват запросов можно настроить с помощью функции сопоставления приложений с подстановочными знаками, представленной в IIS 6,0. Дополнительные сведения см. в [библиотеке MSDN](https://go.microsoft.com/fwlink/?linkid=37118) , в которой приведены сведения об использовании универсальных схем приложений для сопоставления URL-адресов.  
  
 <xref:System.Web.DefaultHttpHandler> Класс<xref:System.Web.IHttpAsyncHandler> реализует интерфейс, который обеспечивает обработку асинхронных запросов. Общие сведения о обработчиках HTTP см. в разделе " [обработчики HTTP" и "Общие](https://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b)сведения о МОДУЛЯх HTTP". Кроме того, дополнительные сведения см. в следующих статьях:  
  
-   О создании асинхронных обработчиков HTTP [см. в разделе Пошаговое руководство. Создание асинхронного обработчика](https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9)HTTP.  
  
-   Сведения о регистрации обработчиков HTTP [см. в разделе как Регистрация обработчиков](https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60)HTTP.  
  
 Классы могут быть производными от <xref:System.Web.DefaultHttpHandler> класса для предоставления настраиваемой обработки запросов. Асинхронный обработчик HTTP, производный от, <xref:System.Web.DefaultHttpHandler> может <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> переопределить метод для изменения способа обработки запросов.  
  
 В <xref:System.Web.DefaultHttpHandler> не используются ошибки ASP.NET. Существующее содержимое, использующее ошибки IIS или собственный механизм специальных ошибок ISAPI, будет работать без изменений.  
  
   
  
## Examples  
 В следующем примере кода показано, как реализовать настраиваемый обработчик HTTP, производный от <xref:System.Web.DefaultHttpHandler> класса.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">Практическое руководство. Регистрация обработчиков HTTP</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">Практическое руководство. Создание асинхронного обработчика HTTP</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Объект, предоставляющий ссылки на внутренние серверные объекты, используемые для обслуживания HTTP-запросов.</param>
        <param name="callback">Метод, который вызывается после завершения асинхронного вызова метода. Если значение параметра <paramref name="callback" /> равно <see langword="null" />, делегат не вызывается.</param>
        <param name="state">Любые данные о состоянии, которые необходимы для обработки запроса.</param>
        <summary>Запускает асинхронный вызов обработчика НТТР.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, содержащий сведения о состоянии процесса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании обработчика HTTP для асинхронного использования обработчик должен реализовать асинхронные <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> методы и <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> , которые вызываются асинхронно с помощью ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Предварительные условия для обработки запроса завершены с ошибкой, и запрошенный файл имеет суффикс .asp или запрос был отправлен с использованием метода POST.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает контекст, связанный с текущим объектом <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <value>Объект <see cref="T:System.Web.HttpContext" />, содержащий текущий контекст.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство предоставляет доступ к текущему <xref:System.Web.HttpContext> объекту для производных классов. <xref:System.Web.DefaultHttpHandler.Context%2A> Объект предоставляет доступ к внутренним <xref:System.Web.HttpApplication.Request%2A>свойствам <xref:System.Web.HttpApplication.Response%2A>, и <xref:System.Web.HttpApplication.Server%2A> для запроса. <xref:System.Web.HttpContext> Дополнительные сведения о доступе к контекстной информации <xref:System.Web.HttpContext>см. в разделе.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Объект, содержащий сведения о состоянии процесса.</param>
        <summary>Предоставляет метод "End" для асинхронного процесса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> Метод можно использовать для создания исключений, перехваченных во время асинхронного процесса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию заголовков и значений запросов для передачи ее вместе с запросом.</summary>
        <value>Объект <see cref="T:System.Collections.Specialized.NameValueCollection" />, содержащий заголовки и значения запросов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство возвращает пустую коллекцию, если она не заполнена классом, производным <xref:System.Web.DefaultHttpHandler> от класса. <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> Добавленные заголовки добавляются к коллекции заголовков в запросе перед передачей запроса в службы IIS (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает логическое значение, показывающее, что другой запрос может использовать текущий экземпляр класса <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <value>Значение <see langword="true" />, если объект <see cref="T:System.Web.DefaultHttpHandler" /> используется повторно; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы явно задать <xref:System.Web.DefaultHttpHandler.IsReusable%2A> для `true` свойства значение или `false`, переопределите <xref:System.Web.DefaultHttpHandler.IsReusable%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывается, когда предварительные условия препятствуют обработке запроса объектом <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Предусловия задаются клиентом в полях заголовка запроса и оцениваются на веб-сервере. Например, с помощью предусловий клиенты могут препятствовать применению запрошенного метода (например, GET) к ресурсу, отличному от предполагаемого. Дополнительные сведения см. в разделе 14, «определения полей заголовка» в спецификации [HTTP/1.1](https://go.microsoft.com/fwlink/?LinkID=73147) на веб-сайте консорциум W3C (W3C).  
  
 Метод <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> вызывается, когда предусловия не <xref:System.Web.DefaultHttpHandler> позволяют объекту обрабатывать запрос. Производный класс может переопределить <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> метод для создания исключения при сбое предусловий. Не создает исключение <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> в методе. <xref:System.Web.DefaultHttpHandler>  
  
 Любое из следующих действий приведет к сбою предусловий:  
  
-   Вызов <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Вызов <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Вызов <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Изменение политики кэширования для ответа.  
  
-   Добавление объекта в качестве фильтра <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> к свойству. <xref:System.IO.Stream>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределяет целевой URL-адрес для текущего запроса.</summary>
        <returns>Переопределенный URL-адрес, используемый в запросе; или значение <see langword="null" />, если переопределенный URL-адрес не предоставлен.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> возвращается `null` , если он не переопределен в классе <xref:System.Web.DefaultHttpHandler> , производном от класса.  
  
 Метод <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> вызывается, только если ASP.NET работает в режиме изоляции рабочих процессов в IIS 6,0 и если ответ не был изменен <xref:System.Web.DefaultHttpHandler> до вызова объекта. Ответ изменяется любым из следующих элементов:  
  
-   Вызов <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Вызов <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Вызов <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Изменение политики кэширования для ответа.  
  
-   Добавление объекта в качестве фильтра <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> к свойству. <xref:System.IO.Stream>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Объект, предоставляющий ссылки на внутренние серверные объекты, используемые для обслуживания HTTP-запросов.</param>
        <summary>Включает объект <see cref="T:System.Web.DefaultHttpHandler" /> для обработки веб-запросов HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> Метод не должен вызываться синхронно. Классы, производные от <xref:System.Web.DefaultHttpHandler> класса, могут переопределять, <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> чтобы обеспечить настраиваемую обработку запросов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> вызывается синхронно.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>
