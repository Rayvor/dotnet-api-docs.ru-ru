<Type Name="ClaimTypeRequirement" FullName="System.ServiceModel.Security.Tokens.ClaimTypeRequirement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50d39a8f6a898d99c48ad42aec9a27c7ea07bfee" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70501455" /></Metadata><TypeSignature Language="C#" Value="public class ClaimTypeRequirement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimTypeRequirement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimTypeRequirement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimTypeRequirement" />
  <TypeSignature Language="F#" Value="type ClaimTypeRequirement = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Задает типы обязательных и необязательных утверждений, которые могут появляться в федеративных учетных данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В федеративном сценарии службы предъявляют требования к входящим учетным данным. Например, входящие учетные данные должны обладать определенным набором типов утверждений. Это требование представлено в политике безопасности. Когда клиент запрашивает маркер безопасности в службе маркеров безопасности (например, [!INCLUDE[infocard](~/includes/infocard-md.md)]), требования помещаются в запрос маркера, что позволяет службе маркеров безопасности выдать маркер безопасности, полностью отвечающий требованиям.  
  
   
  
## Examples  
 В следующем примере кода к привязке безопасности добавляется два требования с типом утверждения.  
  
 [!code-csharp[S_UEClaimTypeRequirement#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclaimtyperequirement/cs/client.cs#1)]  
  
 Следующий файл CONFIG используется в вышеописанном примере кода.  
  
 [!code-xml[S_UEClaimTypeRequirement#101](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclaimtyperequirement/common/app.config#101)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimTypeRequirement (string claimType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string claimType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimTypeRequirement(System::String ^ claimType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Security.Tokens.ClaimTypeRequirement : string -&gt; System.ServiceModel.Security.Tokens.ClaimTypeRequirement" Usage="new System.ServiceModel.Security.Tokens.ClaimTypeRequirement claimType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="claimType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="claimType">Тип утверждения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> для указанного обязательного утверждения заданного типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Предварительно определенные типы утверждений находятся в объекте класса <xref:System.IdentityModel.Claims.ClaimTypes>.  
  
   
  
## Examples  
 В следующем примере кода к привязке безопасности добавляется два требования с типом утверждения.  
  
 [!code-csharp[S_UEClaimTypeRequirement#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclaimtyperequirement/cs/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimTypeRequirement (string claimType, bool isOptional);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string claimType, bool isOptional) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimType As String, isOptional As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimTypeRequirement(System::String ^ claimType, bool isOptional);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Security.Tokens.ClaimTypeRequirement : string * bool -&gt; System.ServiceModel.Security.Tokens.ClaimTypeRequirement" Usage="new System.ServiceModel.Security.Tokens.ClaimTypeRequirement (claimType, isOptional)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimType" Type="System.String" />
        <Parameter Name="isOptional" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="claimType">Тип утверждения.</param>
        <param name="isOptional">Если имеет значение <see langword="false" />, требуется утверждение, в противном случае значение необязательно.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> для указанного обязательного утверждения заданного типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода к привязке безопасности добавляется два требования с типом утверждения.  
  
 [!code-csharp[S_UEClaimTypeRequirement#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclaimtyperequirement/cs/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClaimType">
      <MemberSignature Language="C#" Value="public string ClaimType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClaimType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.ClaimType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClaimType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClaimType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClaimType : string" Usage="System.ServiceModel.Security.Tokens.ClaimTypeRequirement.ClaimType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип утверждения, заданный в конструкторе.</summary>
        <value>Тип утверждения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство содержит URI, который определяет тип утверждения.  Например, для покупки товара с веб-узла пользователь должен представить действительную кредитную карту с достаточным кредитным лимитом. Типом утверждения будет универсальный код ресурса (URI) кредитной карты.  
  
   
  
## Examples  
 В следующем примере кода показано, как возвратить это свойство.  
  
 [!code-csharp[S_UEClaimTypeRequirement#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclaimtyperequirement/cs/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOptional">
      <MemberSignature Language="C#" Value="public bool IsOptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOptional" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.IsOptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOptional : bool" Usage="System.ServiceModel.Security.Tokens.ClaimTypeRequirement.IsOptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, является ли утверждение необязательным.</summary>
        <value>Имеет значение <see langword="true" />, если этот экземпляр класса предназначен для необязательного утверждения, имеет значение <see langword="false" />, если он задает обязательное утверждение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пример использования этого свойства в сценарии, в котором служба запрашивает сведения, но их предоставление не является обязательным. Например, пользователь должен ввести имя, фамилию и адрес, а номер телефона является необязательным.  
  
   
  
## Examples  
 В следующем примере кода показано, как возвратить это свойство.  
  
 [!code-csharp[S_UEClaimTypeRequirement#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclaimtyperequirement/cs/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
