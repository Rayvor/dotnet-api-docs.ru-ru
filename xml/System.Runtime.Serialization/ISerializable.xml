<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ee75ecf7b1938e5642e874d12f4cf3685c2b87b" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75083329" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет объекту управлять его собственной сериализацией и десериализацией.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Любой класс, который может быть сериализован, должен быть помечен <xref:System.SerializableAttribute>. Если классу требуется управлять процессом сериализации, он может реализовать интерфейс <xref:System.Runtime.Serialization.ISerializable>. <xref:System.Runtime.Serialization.Formatter> вызывает <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> во время сериализации и заполняет переданный <xref:System.Runtime.Serialization.SerializationInfo> всеми данными, необходимыми для представления объекта. <xref:System.Runtime.Serialization.Formatter> создает <xref:System.Runtime.Serialization.SerializationInfo> с типом объекта в графе. Объекты, которым необходимо отправлять собственные прокси-серверы, могут использовать методы <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> и <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> в <xref:System.Runtime.Serialization.SerializationInfo> для изменения передаваемых данных.  
  
 В случае наследования класса можно сериализовать класс, производный от базового класса, реализующего <xref:System.Runtime.Serialization.ISerializable>. В этом случае производный класс должен вызвать реализацию базового класса <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> в своей реализации <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. В противном случае данные из базового класса не будут сериализованы.  
  
 Интерфейс <xref:System.Runtime.Serialization.ISerializable> подразумевает конструктор с конструктором сигнатуры (<xref:System.Runtime.Serialization.SerializationInfo> сведения, <xref:System.Runtime.Serialization.StreamingContext> контекст). Во время десериализации текущий конструктор вызывается только после того, как данные в <xref:System.Runtime.Serialization.SerializationInfo> десериализованы модулем форматирования. В общем случае этот конструктор должен быть защищен, если класс не запечатан.  
  
 Порядок, в котором выполняется десериализация объектов, не может быть гарантирован. Например, если один тип ссылается на тип, который еще не был десериализован, возникнет исключение. При создании типов с такими зависимостями можно обойти эту проблему, реализовав интерфейс `IDeserializationCallback` и метод `OnDeserialization`.  
  
 Архитектура сериализации обрабатывает типы объектов, которые расширяются <xref:System.MarshalByRefObject> такими же, как типы, расширяющие <xref:System.Object>. Эти типы можно пометить <xref:System.SerializableAttribute> и реализовать интерфейс <xref:System.Runtime.Serialization.ISerializable> как любой другой тип объекта. Их состояние объекта будет захвачено и сохранено в потоке.  
  
 Если эти типы используются в <xref:System.Runtime.Remoting>, инфраструктура удаленного взаимодействия предоставляет суррогат, который загружает обычную сериализацию, а вместо этого сериализует прокси-сервер в <xref:System.MarshalByRefObject>. Суррогат — это вспомогательный метод, который знает, как сериализовать и десериализовать объекты определенного типа. Прокси-сервер, невидимый для пользователя в большинстве случаев, будет иметь тип <xref:System.Runtime.Remoting.ObjRef>.  
  
 Как общий шаблон разработки, класс должен быть нередко помечен атрибутом Serializable и расширять <xref:System.MarshalByRefObject>. Разработчикам следует внимательно думать о возможных сценариях сериализации и удаленного взаимодействия при объединении этих двух характеристик. Один из примеров, где это может быть применимо, — это <xref:System.IO.MemoryStream>. В то время как базовый класс <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) расширяется <xref:System.MarshalByRefObject>, можно записать состояние <xref:System.IO.MemoryStream> и восстановить его. Таким образом, это может быть полезно для сериализации состояния этого потока в базу данных и его восстановления в более поздней момент времени. Однако при использовании через удаленное взаимодействие объект этого типа будет прокси-сервером.  
  
 Дополнительные сведения о сериализации классов, расширяющих <xref:System.MarshalByRefObject>, см. в разделе <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. Дополнительные сведения о реализации <xref:System.Runtime.Serialization.ISerializable>см. в разделе [настраиваемая сериализация](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование интерфейса <xref:System.Runtime.Serialization.ISerializable> для определения пользовательского поведения сериализации для класса.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Реализуйте этот интерфейс, чтобы разрешить объекту принимать участие в собственной сериализации и десериализации.</para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Сериализация XML и SOAP</related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Пользовательская сериализация</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> для заполнения данными.</param>
        <param name="context">Конечный объект (см. <see cref="T:System.Runtime.Serialization.StreamingContext" />) для этой сериализации.</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все объекты, которые включены в <xref:System.Runtime.Serialization.SerializationInfo>, автоматически отправляются и сериализуются модулем форматирования.  
  
 Код, вызывающий <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>, требует <xref:System.Security.Permissions.SecurityPermission> для предоставления служб сериализации. Связанное перечисление: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Не гарантируется, что этот метод будет вызываться только один раз для каждого экземпляра объекта во время сериализации. Поэтому метод должен быть реализован таким образом, что его поведение будет одинаковым, независимо от числа вызовов.  
  
   
  
## Examples  
 В следующем примере метод <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> используется для задания альтернативных значений для сериализованного объекта. В коде используется метод <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> класса <xref:System.Runtime.Serialization.SerializationInfo> для хранения альтернативных значений при сериализации объекта. И наоборот, когда конструктор класса `Person` вызывается во время десериализации, значения алтернатве извлекаются с помощью метода <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> и переназначаются в поля объекта.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Пользовательская сериализация</related>
      </Docs>
    </Member>
  </Members>
</Type>
