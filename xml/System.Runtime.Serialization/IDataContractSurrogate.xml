<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="617c066c3343fb596eba0b6450751da5943e7337" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70628796" /></Metadata><TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет методы, необходимые для замены одного типа другим с помощью метода <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> во время сериализации, десериализации, а также экспорта и импорта документов схемы XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод <xref:System.Runtime.Serialization.IDataContractSurrogate> при применении <xref:System.Runtime.Serialization.DataContractSerializer>, если необходимо выполнить одно из следующих действий: заменить один тип или объект другим или динамически создать варианты схемы. Пример приложения см. в разделе " [суррогатный объект DataContract](~/docs/framework/wcf/samples/datacontract-surrogate.md)". Дополнительные сведения о контрактах данных см. [в разделе Использование контрактов данных](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 Во время выполнения можно найти специальный метод <xref:System.Runtime.Serialization.DataContractSerializer> для любой операции в службе с помощью метода <xref:System.ServiceModel.Description.OperationDescription> для поиска экземпляра <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>. Дополнительные сведения о реализации интерфейса для создания суррогата см. в разделе [суррогаты контракта данных](~/docs/framework/wcf/extending/data-contract-surrogates.md).  
  
 Также можно использовать интерфейс <xref:System.Runtime.Serialization.IDataContractSurrogate> для влияния на импорт и экспорт схем XML при использовании классов <xref:System.Runtime.Serialization.XsdDataContractExporter> и <xref:System.Runtime.Serialization.XsdDataContractImporter>. Это можно сделать и посредством назначения интерфейса <xref:System.Runtime.Serialization.IDataContractSurrogate> свойству <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> класса <xref:System.Runtime.Serialization.ExportOptions> или свойству <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> класса <xref:System.Runtime.Serialization.ImportOptions>.  Дополнительные сведения см. в разделе [Импорт и экспорт схемы](~/docs/framework/wcf/feature-details/schema-import-and-export.md).  
  
   
  
## Examples  
 В следующем примере показана реализация интерфейса <xref:System.Runtime.Serialization.IDataContractSurrogate>. Сериализация типа `Person` заменяется классом `PersonSurrogated`.  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
    <related type="Article" href="https://msdn.microsoft.com/library/b0188f3c-00a9-4cf0-a887-a2284c8fb014">Образец суррогата DataContract</related>
    <related type="Article" href="https://msdn.microsoft.com/library/8c31134c-46c5-4ed7-94af-bab0ac0dfce5">Суррогаты контрактов данных</related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md">Использование контрактов данных</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Во время операций экспорта схемы вставляет в схему заметки для возвращаемых значений, не равных null.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo">Объект <see cref="T:System.Reflection.MemberInfo" />, описывающий элемент.</param>
        <param name="dataContractType">Объект <see cref="T:System.Type" />.</param>
        <summary>Во время операций экспорта схемы вставляет в схему заметки для возвращаемых значений, не равных null.</summary>
        <returns>Объект, представляющий заметку, которая вставляется в определение схемы XML.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">Заменяемый тип среды CLR.</param>
        <param name="dataContractType">Тип контракта данных, для которого создается заметка.</param>
        <summary>Во время операций экспорта схемы вставляет в схему заметки для возвращаемых значений, не равных null.</summary>
        <returns>Объект, представляющий заметку, которая вставляется в определение схемы XML.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Заменяемый тип среды CLR <see cref="T:System.Type" />.</param>
        <summary>При выполнении сериализации, десериализации, а также импорта и экспорта схемы возвращает тип контракта данных, заменяющий указанный тип.</summary>
        <returns>Тип <see cref="T:System.Type" />, заменяемый значением <paramref name="type" />. Этот тип должен быть сериализуем методом <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Например, он должен быть помечен атрибутом <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> или другими распознаваемыми сериализатором механизмами.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A>.  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">Заменяемый десериализованный объект.</param>
        <param name="targetType">Тип <see cref="T:System.Type" />, который назначается замененному объекту.</param>
        <summary>При выполнении десериализации возвращает объект, являющийся заменой указанного объекта.</summary>
        <returns>Замененный десериализованный объект. Этот объект должен иметь тип, сериализуемый методом <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Например, он должен быть помечен атрибутом <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> или другими распознаваемыми сериализатором механизмами.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В простой реализации используйте структуру управления "if…then…else" для проверки, является ли тип значения `obj` суррогатным. Если тип является суррогатным, преобразуйте его необходимым образом и верните замененный объект. Замененный объект может быть новым экземпляром или экземпляром `obj`.  
  
   
  
## Examples  
 В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A>.  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes">Объект <see cref="T:System.Collections.ObjectModel.Collection`1" /> типа <see cref="T:System.Type" />, в который добавляются известные типы.</param>
        <summary>Задает коллекцию известных типов, используемую для сериализации и десериализации пользовательских объектов данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод необходим при экспорте или импорте схемы, только если заметки вставляются в схему с помощью метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">Заменяемый объект.</param>
        <param name="targetType">Тип <see cref="T:System.Type" />, который назначается замененному объекту.</param>
        <summary>При выполнении сериализации возвращает объект, заменяющий указанный объект.</summary>
        <returns>Замененный объект, который будет сериализован. Этот объект должен быть сериализуем методом <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Например, он должен быть помечен атрибутом <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> или другими распознаваемыми сериализатором механизмами.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не должен возвращать `null` значение, поскольку при десериализации данные будут приведены к типу <xref:System.Object> , а <xref:System.InvalidCastException> создается исключение.  
  
   
  
## Examples  
 В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A>.  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName">Имя типа в схеме.</param>
        <param name="typeNamespace">Пространство имен типа в схеме.</param>
        <param name="customData">Объект, представляющий вставленную в определение схемы XML заметку, содержащую данные, которые можно использовать для поиска типа, на который задана ссылка.</param>
        <summary>При выполнении импорта схемы возвращает тип, на который ссылается схема.</summary>
        <returns>Тип <see cref="T:System.Type" />, используемый для типа, на который задана ссылка.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если тип среды CLR для представления типа схемы не существует, должно быть возвращено значение `Null`. В результате этого при выполнении импорта схемы будет создан новый тип.  
  
   
  
## Examples  
 В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A>.  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration">Обрабатываемый объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, представляющий объявление типа, создаваемого при выполнении импорта схемы.</param>
        <param name="compileUnit">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, содержащий другой код, созданный при выполнении импорта схемы.</param>
        <summary>Обрабатывает тип, созданный из импортированной схемы.</summary>
        <returns>Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, содержащий обработанный тип.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Входные данные <xref:System.CodeDom.CodeTypeDeclaration> или другие данные в объекте <xref:System.CodeDom.CodeCompileUnit> могут быть изменены пользователем в этом методе. Если будет возвращено значение `null`, тип не будет создан. Если будет возвращен новый объект <xref:System.CodeDom.CodeTypeDeclaration>, он заменит исходный тип.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
