<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="617c066c3343fb596eba0b6450751da5943e7337" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70628796" /></Metadata><TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3890a-101">Предоставляет методы, необходимые для замены одного типа другим с помощью метода <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> во время сериализации, десериализации, а также экспорта и импорта документов схемы XML (XSD).</span><span class="sxs-lookup"><span data-stu-id="3890a-101">Provides the methods needed to substitute one type for another by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> during serialization, deserialization, and export and import of XML schema documents (XSD).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3890a-102">Используйте метод <xref:System.Runtime.Serialization.IDataContractSurrogate> при применении <xref:System.Runtime.Serialization.DataContractSerializer>, если необходимо выполнить одно из следующих действий: заменить один тип или объект другим или динамически создать варианты схемы.</span><span class="sxs-lookup"><span data-stu-id="3890a-102">Use the <xref:System.Runtime.Serialization.IDataContractSurrogate> when using the <xref:System.Runtime.Serialization.DataContractSerializer> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</span></span> <span data-ttu-id="3890a-103">Пример приложения см. в разделе " [суррогатный объект DataContract](~/docs/framework/wcf/samples/datacontract-surrogate.md)".</span><span class="sxs-lookup"><span data-stu-id="3890a-103">For a sample application, see [DataContract Surrogate](~/docs/framework/wcf/samples/datacontract-surrogate.md).</span></span> <span data-ttu-id="3890a-104">Дополнительные сведения о контрактах данных см. [в разделе Использование контрактов данных](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="3890a-104">For more information about data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="3890a-105">Во время выполнения можно найти специальный метод <xref:System.Runtime.Serialization.DataContractSerializer> для любой операции в службе с помощью метода <xref:System.ServiceModel.Description.OperationDescription> для поиска экземпляра <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>.</span><span class="sxs-lookup"><span data-stu-id="3890a-105">At run time, you can find the specific <xref:System.Runtime.Serialization.DataContractSerializer> for any operation in a service by using the <xref:System.ServiceModel.Description.OperationDescription> to find the <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> instance.</span></span> <span data-ttu-id="3890a-106">Дополнительные сведения о реализации интерфейса для создания суррогата см. в разделе [суррогаты контракта данных](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span><span class="sxs-lookup"><span data-stu-id="3890a-106">For more information about implementing the interface to create a surrogate, see [Data Contract Surrogates](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span></span>  
  
 <span data-ttu-id="3890a-107">Также можно использовать интерфейс <xref:System.Runtime.Serialization.IDataContractSurrogate> для влияния на импорт и экспорт схем XML при использовании классов <xref:System.Runtime.Serialization.XsdDataContractExporter> и <xref:System.Runtime.Serialization.XsdDataContractImporter>.</span><span class="sxs-lookup"><span data-stu-id="3890a-107">You can also use the <xref:System.Runtime.Serialization.IDataContractSurrogate> to affect the import and export of XML schemas when you are using the <xref:System.Runtime.Serialization.XsdDataContractExporter> and <xref:System.Runtime.Serialization.XsdDataContractImporter> classes.</span></span> <span data-ttu-id="3890a-108">Это можно сделать и посредством назначения интерфейса <xref:System.Runtime.Serialization.IDataContractSurrogate> свойству <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> класса <xref:System.Runtime.Serialization.ExportOptions> или свойству <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> класса <xref:System.Runtime.Serialization.ImportOptions>.</span><span class="sxs-lookup"><span data-stu-id="3890a-108">You can do so by assigning the <xref:System.Runtime.Serialization.IDataContractSurrogate> to the <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ExportOptions> class, or to the <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ImportOptions> class.</span></span>  <span data-ttu-id="3890a-109">Дополнительные сведения см. в разделе [Импорт и экспорт схемы](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span><span class="sxs-lookup"><span data-stu-id="3890a-109">For more information, see [Schema Import and Export](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3890a-110">В следующем примере показана реализация интерфейса <xref:System.Runtime.Serialization.IDataContractSurrogate>.</span><span class="sxs-lookup"><span data-stu-id="3890a-110">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate> interface.</span></span> <span data-ttu-id="3890a-111">Сериализация типа `Person` заменяется классом `PersonSurrogated`.</span><span class="sxs-lookup"><span data-stu-id="3890a-111">The code substitutes the serialization of the `Person` type for a `PersonSurrogated` class.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
    <related type="Article" href="https://msdn.microsoft.com/library/b0188f3c-00a9-4cf0-a887-a2284c8fb014"><span data-ttu-id="3890a-112">Образец суррогата DataContract</span><span class="sxs-lookup"><span data-stu-id="3890a-112">DataContract Surrogate Sample</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/8c31134c-46c5-4ed7-94af-bab0ac0dfce5"><span data-ttu-id="3890a-113">Суррогаты контрактов данных</span><span class="sxs-lookup"><span data-stu-id="3890a-113">Data Contract Surrogates</span></span></related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="3890a-114">Использование контрактов данных</span><span class="sxs-lookup"><span data-stu-id="3890a-114">Using Data Contracts</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3890a-115">Во время операций экспорта схемы вставляет в схему заметки для возвращаемых значений, не равных null.</span><span class="sxs-lookup"><span data-stu-id="3890a-115">During schema export operations, inserts annotations into the schema for non-null return values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo"><span data-ttu-id="3890a-116">Объект <see cref="T:System.Reflection.MemberInfo" />, описывающий элемент.</span><span class="sxs-lookup"><span data-stu-id="3890a-116">A <see cref="T:System.Reflection.MemberInfo" /> that describes the member.</span></span></param>
        <param name="dataContractType"><span data-ttu-id="3890a-117">Объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="3890a-117">A <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="3890a-118">Во время операций экспорта схемы вставляет в схему заметки для возвращаемых значений, не равных null.</span><span class="sxs-lookup"><span data-stu-id="3890a-118">During schema export operations, inserts annotations into the schema for non-null return values.</span></span></summary>
        <returns><span data-ttu-id="3890a-119">Объект, представляющий заметку, которая вставляется в определение схемы XML.</span><span class="sxs-lookup"><span data-stu-id="3890a-119">An object that represents the annotation to be inserted into the XML schema definition.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType"><span data-ttu-id="3890a-120">Заменяемый тип среды CLR.</span><span class="sxs-lookup"><span data-stu-id="3890a-120">The CLR type to be replaced.</span></span></param>
        <param name="dataContractType"><span data-ttu-id="3890a-121">Тип контракта данных, для которого создается заметка.</span><span class="sxs-lookup"><span data-stu-id="3890a-121">The data contract type to be annotated.</span></span></param>
        <summary><span data-ttu-id="3890a-122">Во время операций экспорта схемы вставляет в схему заметки для возвращаемых значений, не равных null.</span><span class="sxs-lookup"><span data-stu-id="3890a-122">During schema export operations, inserts annotations into the schema for non-null return values.</span></span></summary>
        <returns><span data-ttu-id="3890a-123">Объект, представляющий заметку, которая вставляется в определение схемы XML.</span><span class="sxs-lookup"><span data-stu-id="3890a-123">An object that represents the annotation to be inserted into the XML schema definition.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3890a-124">Заменяемый тип среды CLR <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="3890a-124">The CLR type <see cref="T:System.Type" /> to substitute.</span></span></param>
        <summary><span data-ttu-id="3890a-125">При выполнении сериализации, десериализации, а также импорта и экспорта схемы возвращает тип контракта данных, заменяющий указанный тип.</span><span class="sxs-lookup"><span data-stu-id="3890a-125">During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</span></span></summary>
        <returns><span data-ttu-id="3890a-126">Тип <see cref="T:System.Type" />, заменяемый значением <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="3890a-126">The <see cref="T:System.Type" /> to substitute for the <paramref name="type" /> value.</span></span> <span data-ttu-id="3890a-127">Этот тип должен быть сериализуем методом <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span><span class="sxs-lookup"><span data-stu-id="3890a-127">This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="3890a-128">Например, он должен быть помечен атрибутом <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> или другими распознаваемыми сериализатором механизмами.</span><span class="sxs-lookup"><span data-stu-id="3890a-128">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3890a-129">В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A>.</span><span class="sxs-lookup"><span data-stu-id="3890a-129">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3890a-130">Заменяемый десериализованный объект.</span><span class="sxs-lookup"><span data-stu-id="3890a-130">The deserialized object to be substituted.</span></span></param>
        <param name="targetType"><span data-ttu-id="3890a-131">Тип <see cref="T:System.Type" />, который назначается замененному объекту.</span><span class="sxs-lookup"><span data-stu-id="3890a-131">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span></span></param>
        <summary><span data-ttu-id="3890a-132">При выполнении десериализации возвращает объект, являющийся заменой указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="3890a-132">During deserialization, returns an object that is a substitute for the specified object.</span></span></summary>
        <returns><span data-ttu-id="3890a-133">Замененный десериализованный объект.</span><span class="sxs-lookup"><span data-stu-id="3890a-133">The substituted deserialized object.</span></span> <span data-ttu-id="3890a-134">Этот объект должен иметь тип, сериализуемый методом <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span><span class="sxs-lookup"><span data-stu-id="3890a-134">This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="3890a-135">Например, он должен быть помечен атрибутом <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> или другими распознаваемыми сериализатором механизмами.</span><span class="sxs-lookup"><span data-stu-id="3890a-135">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3890a-136">В простой реализации используйте структуру управления "if…then…else" для проверки, является ли тип значения `obj` суррогатным.</span><span class="sxs-lookup"><span data-stu-id="3890a-136">In a simple implementation, use an if…then…else control structure to test whether the `obj` value is of the surrogated type.</span></span> <span data-ttu-id="3890a-137">Если тип является суррогатным, преобразуйте его необходимым образом и верните замененный объект.</span><span class="sxs-lookup"><span data-stu-id="3890a-137">If so, transform it as necessary and return the substituted object.</span></span> <span data-ttu-id="3890a-138">Замененный объект может быть новым экземпляром или экземпляром `obj`.</span><span class="sxs-lookup"><span data-stu-id="3890a-138">The substituted object can be a new instance or the same `obj` instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3890a-139">В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="3890a-139">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes"><span data-ttu-id="3890a-140">Объект <see cref="T:System.Collections.ObjectModel.Collection`1" /> типа <see cref="T:System.Type" />, в который добавляются известные типы.</span><span class="sxs-lookup"><span data-stu-id="3890a-140">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of <see cref="T:System.Type" /> to add known types to.</span></span></param>
        <summary><span data-ttu-id="3890a-141">Задает коллекцию известных типов, используемую для сериализации и десериализации пользовательских объектов данных.</span><span class="sxs-lookup"><span data-stu-id="3890a-141">Sets the collection of known types to use for serialization and deserialization of the custom data objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3890a-142">Этот метод необходим при экспорте или импорте схемы, только если заметки вставляются в схему с помощью метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>.</span><span class="sxs-lookup"><span data-stu-id="3890a-142">This method is required during schema export or schema import only if annotations are inserted into the schema using the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3890a-143">Заменяемый объект.</span><span class="sxs-lookup"><span data-stu-id="3890a-143">The object to substitute.</span></span></param>
        <param name="targetType"><span data-ttu-id="3890a-144">Тип <see cref="T:System.Type" />, который назначается замененному объекту.</span><span class="sxs-lookup"><span data-stu-id="3890a-144">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span></span></param>
        <summary><span data-ttu-id="3890a-145">При выполнении сериализации возвращает объект, заменяющий указанный объект.</span><span class="sxs-lookup"><span data-stu-id="3890a-145">During serialization, returns an object that substitutes the specified object.</span></span></summary>
        <returns><span data-ttu-id="3890a-146">Замененный объект, который будет сериализован.</span><span class="sxs-lookup"><span data-stu-id="3890a-146">The substituted object that will be serialized.</span></span> <span data-ttu-id="3890a-147">Этот объект должен быть сериализуем методом <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span><span class="sxs-lookup"><span data-stu-id="3890a-147">The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="3890a-148">Например, он должен быть помечен атрибутом <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> или другими распознаваемыми сериализатором механизмами.</span><span class="sxs-lookup"><span data-stu-id="3890a-148">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3890a-149">Этот метод не должен возвращать `null` значение, поскольку при десериализации данные будут приведены к типу <xref:System.Object> , а <xref:System.InvalidCastException> создается исключение.</span><span class="sxs-lookup"><span data-stu-id="3890a-149">This method must not return `null` because on deserialization the data will be cast to type <xref:System.Object> and an <xref:System.InvalidCastException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3890a-150">В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A>.</span><span class="sxs-lookup"><span data-stu-id="3890a-150">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3890a-151">Имя типа в схеме.</span><span class="sxs-lookup"><span data-stu-id="3890a-151">The name of the type in schema.</span></span></param>
        <param name="typeNamespace"><span data-ttu-id="3890a-152">Пространство имен типа в схеме.</span><span class="sxs-lookup"><span data-stu-id="3890a-152">The namespace of the type in schema.</span></span></param>
        <param name="customData"><span data-ttu-id="3890a-153">Объект, представляющий вставленную в определение схемы XML заметку, содержащую данные, которые можно использовать для поиска типа, на который задана ссылка.</span><span class="sxs-lookup"><span data-stu-id="3890a-153">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</span></span></param>
        <summary><span data-ttu-id="3890a-154">При выполнении импорта схемы возвращает тип, на который ссылается схема.</span><span class="sxs-lookup"><span data-stu-id="3890a-154">During schema import, returns the type referenced by the schema.</span></span></summary>
        <returns><span data-ttu-id="3890a-155">Тип <see cref="T:System.Type" />, используемый для типа, на который задана ссылка.</span><span class="sxs-lookup"><span data-stu-id="3890a-155">The <see cref="T:System.Type" /> to use for the referenced type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3890a-156">Если тип среды CLR для представления типа схемы не существует, должно быть возвращено значение `Null`.</span><span class="sxs-lookup"><span data-stu-id="3890a-156">`Null` should be returned if a CLR type does not exist for representing the schema type.</span></span> <span data-ttu-id="3890a-157">В результате этого при выполнении импорта схемы будет создан новый тип.</span><span class="sxs-lookup"><span data-stu-id="3890a-157">This will cause a new type to be generated during schema import.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3890a-158">В следующем примере показана реализация метода <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A>.</span><span class="sxs-lookup"><span data-stu-id="3890a-158">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration"><span data-ttu-id="3890a-159">Обрабатываемый объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, представляющий объявление типа, создаваемого при выполнении импорта схемы.</span><span class="sxs-lookup"><span data-stu-id="3890a-159">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to process that represents the type declaration generated during schema import.</span></span></param>
        <param name="compileUnit"><span data-ttu-id="3890a-160">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, содержащий другой код, созданный при выполнении импорта схемы.</span><span class="sxs-lookup"><span data-stu-id="3890a-160">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains the other code generated during schema import.</span></span></param>
        <summary><span data-ttu-id="3890a-161">Обрабатывает тип, созданный из импортированной схемы.</span><span class="sxs-lookup"><span data-stu-id="3890a-161">Processes the type that has been generated from the imported schema.</span></span></summary>
        <returns><span data-ttu-id="3890a-162">Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, содержащий обработанный тип.</span><span class="sxs-lookup"><span data-stu-id="3890a-162">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that contains the processed type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3890a-163">Входные данные <xref:System.CodeDom.CodeTypeDeclaration> или другие данные в объекте <xref:System.CodeDom.CodeCompileUnit> могут быть изменены пользователем в этом методе.</span><span class="sxs-lookup"><span data-stu-id="3890a-163">The input <xref:System.CodeDom.CodeTypeDeclaration> or other information in the <xref:System.CodeDom.CodeCompileUnit> can be modified by the user in this method.</span></span> <span data-ttu-id="3890a-164">Если будет возвращено значение `null`, тип не будет создан.</span><span class="sxs-lookup"><span data-stu-id="3890a-164">If `null` is returned, it will cause the type to not be generated.</span></span> <span data-ttu-id="3890a-165">Если будет возвращен новый объект <xref:System.CodeDom.CodeTypeDeclaration>, он заменит исходный тип.</span><span class="sxs-lookup"><span data-stu-id="3890a-165">If a new <xref:System.CodeDom.CodeTypeDeclaration> is returned, it will replace the original type generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
