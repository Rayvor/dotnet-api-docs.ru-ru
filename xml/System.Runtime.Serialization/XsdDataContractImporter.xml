<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d66e8d135305fa433d16bdd35ec387e0480f348" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70543455" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Позволяет преобразовать набор файлов схемы XML (XSD) в типы среды CLR.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas. <xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language. Для создания кода используйте классы в пространстве имен <xref:System.CodeDom>.  
  
 И наоборот, если была создана веб-служба, которая добавляет данные, представленные типами среды CLR, и требуется экспортировать схемы XML для каждого типа данных, используемого другими веб-службами, используйте класс <xref:System.Runtime.Serialization.XsdDataContractExporter>. Таким образом, <xref:System.Runtime.Serialization.XsdDataContractExporter> преобразует набор типов среды CLR в набор схем XML.  
  
> [!NOTE]
>  Для создания типов CLR из схем XML во время разработки используйте [средство служебной программы метаданных ServiceModel (Svcutil. exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). Чтобы создать код из XSD-файлов, используйте `/dataContractOnly` параметр средства. Кроме того, класс <xref:System.Runtime.Serialization.XsdDataContractImporter> можно использовать при необходимости дополнительных средств управления процессом или необходимости программного управления.  
  
   
  
## Examples  
 В следующем примере создается экземпляр класса <xref:System.Xml.Schema.XmlSchemaSet> и вызывается метод <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> для создания экземпляра класса <xref:System.CodeDom.CodeCompileUnit>. Объект <xref:System.CodeDom.CodeCompileUnit> затем используется для создания файлов кода на языках Visual C# и Visual Basic.  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md">Использование контрактов данных</related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md">Типы, поддерживаемые сериализатором контракта данных</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, который будет использоваться для хранения кода.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> с <see cref="T:System.CodeDom.CodeCompileUnit" />, который будет использоваться для создания кода среды CLR.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот конструктор, чтобы добавить сегмент кода в уже созданный объект <xref:System.CodeDom.CodeCompileUnit>.  
  
   
  
## Examples  
 В следующем примере создается экземпляр класса <xref:System.Xml.Schema.XmlSchemaSet> и вызывается метод <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> для создания экземпляра класса <xref:System.CodeDom.CodeCompileUnit>. Объект <xref:System.CodeDom.CodeCompileUnit> затем используется для создания файлов кода на языках Visual C# и Visual Basic.  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, указывающее, можно ли преобразовать схемы в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о типах, которые можно импортировать, см. [в разделе Типы, поддерживаемые сериализатором контрактов данных](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий преобразуемые схемы.</param>
        <summary>Возвращает значение, указывающее, можно ли преобразовать схемы, содержащиеся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>Значение <see langword="true" />, если схемы можно преобразовать в типы контрактов данных; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере вызывается метод <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> для определения, может ли быть создан экземпляр класса <xref:System.CodeDom.CodeCompileUnit>.  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="schemas" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Участвующий в импорте контракт данных недействителен.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий преобразуемые схемы.</param>
        <param name="typeNames">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, принадлежащий к типу <see cref="T:System.Xml.XmlQualifiedName" />, представляющий импортируемый набор типов схемы.</param>
        <summary>Возвращает значение, указывающее, возможно ли преобразование набора типов, содержащегося в объекте <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в типы CLR, созданные в объекте <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>Значение <see langword="true" />, если схемы можно преобразовать; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="schemas" /> или <paramref name="typeNames" /> — <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Участвующий в импорте контракт данных недействителен.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">Импортируемый объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <param name="element">Конкретный элемент <see cref="T:System.Xml.Schema.XmlSchemaElement" />, для которого возвращается набор схем.</param>
        <summary>Возвращает значение, указывающее, можно ли импортировать конкретный элемент схемы, содержащийся в объекте <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Значение <see langword="true" />, если элемент можно импортировать; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод проверяет тип и все типы схем, на которые ссылается этот тип.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="schemas" /> или <paramref name="element" /> — <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Участвующий в импорте контракт данных недействителен.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий представления схемы.</param>
        <param name="typeName">Интерфейс <see cref="T:System.Collections.IList" />, принадлежащий к типу <see cref="T:System.Xml.XmlQualifiedName" />, задающий имена типов схем, которые требуется импортировать из набора <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Возвращает значение, указывающее, можно ли преобразовать схемы, содержащиеся в <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>Значение <see langword="true" />, если схемы можно преобразовать в типы контрактов данных; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о типах, которые можно импортировать, см. [в разделе Типы, поддерживаемые сериализатором контрактов данных](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="schemas" /> или <paramref name="typeName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Участвующий в импорте контракт данных недействителен.</exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.CodeDom.CodeCompileUnit" />, используемый для хранения созданных типов среды CLR.</summary>
        <value>Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, используемый для хранения созданных типов среды CLR.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите это свойство после импорта схем с помощью метода <xref:System.Runtime.Serialization.XsdDataContractImporter>, чтобы получить доступ к объекту <xref:System.CodeDom.CodeCompileUnit>, в котором хранится весь созданный код.  
  
   
  
## Examples  
 В следующем примере создается объект <xref:System.CodeDom.CodeCompileUnit>. Объект <xref:System.CodeDom.CodeCompileUnit> затем используется для создания файла кода на языках Visual C# и Visual Basic.  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает <see cref="T:System.CodeDom.CodeTypeReference" /> для заданного элемента.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">Объект <see cref="T:System.Xml.XmlQualifiedName" />, указывающий искомый тип схемы.</param>
        <summary>Возвращает <see cref="T:System.CodeDom.CodeTypeReference" /> типу среды CLR, созданному для типа схемы с указанным <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
        <returns>Ссылка <see cref="T:System.CodeDom.CodeTypeReference" /> на тип среды CLR, созданный для типа схемы с указанным <paramref name="typeName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для поиска ссылки на созданный тип среды CLR после вызова метода <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>. Объект <xref:System.CodeDom.CodeTypeReference> содержит имя созданного типа и может быть использован для поиска соответствующего <xref:System.CodeDom.CodeTypeDeclaration> в объекте <xref:System.CodeDom.CodeCompileUnit>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName">Объект <see cref="T:System.Xml.XmlQualifiedName" />, указывающий искомое полное имя XML типа схемы.</param>
        <param name="element">Элемент <see cref="T:System.Xml.Schema.XmlSchemaElement" />, указывающий элемент в схеме XML.</param>
        <summary>Возвращает объект <see cref="T:System.CodeDom.CodeTypeReference" /> для указанного полного XML-элемента и элемента схемы XML.</summary>
        <returns>Объект <see cref="T:System.CodeDom.CodeTypeReference" />, представляющий тип, созданный для указанного типа схемы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот элемент схемы необходим для получения сведений о типе, заданном в области элемента. Основным его примером является атрибут XSD `nillable`. В схеме задание атрибуту `nillable` значения `true` указывается в элементе, содержащем схему, в то время как понятие нулевого значения выражается в типе среды CLR <xref:System.Nullable%601>. Элемент передается таким образом, что это средство импорта может выполнить поиск сведений об уровне элемента и вернуть в соответствии с ними правильную ссылку на тип.  
  
 При импорте языка WSDL каждый параметр импортируется отдельно и, таким образом, требуется передавать элементы параметра по отдельности.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">Тип <see cref="T:System.Xml.XmlQualifiedName" />, представляющий тип схемы, для которого выполняется поиск известных типов.</param>
        <summary>Возвращает список объектов <see cref="T:System.CodeDom.CodeTypeReference" />, представляющий известные типы, созданные при создании кода для указанного типа схемы.</summary>
        <returns><see cref="T:System.Collections.Generic.IList`1" /> типа <see cref="T:System.CodeDom.CodeTypeReference" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании типов среды CLR для типов схемы известные типы также создаются для всех производных типов, присутствующих в схеме. Во многих случаях эти известные типы добавляются с применением атрибутов к созданному коду. (Например, см <xref:System.Runtime.Serialization.KnownTypeAttribute> . класс. Однако для типа верхнего уровня должен быть способ вернуть набор известных типов, созданных. Этот метод возвращает объект <xref:System.CodeDom.CodeTypeReference> для известных типов, созданных для конкретного типа схемы.  
  
 Дополнительные сведения см. в статье о [известных типах контрактов данных](~/docs/framework/wcf/feature-details/data-contract-known-types.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/1a0baea1-27b7-470d-9136-5bbad86c4337">Известные типы контрактов данных</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует набор схем XML в объект <see cref="T:System.CodeDom.CodeCompileUnit" />, используемый для создания кода среды CLR.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий представления схем, для которых генерируются типы среды CLR.</param>
        <summary>Преобразует указанный набор схем XML, содержащийся в объекте <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере метод <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> используется для проверки, можно ли импортировать набор схем. Если метод <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> возвращает значение `true`, код вызывает метод <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>.  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="schemas" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий представления схемы.</param>
        <param name="typeNames"><see cref="T:System.Collections.Generic.ICollection`1" /> (принадлежащий к типу <see cref="T:System.Xml.XmlQualifiedName" />), представляющий импортируемый набор типов схемы.</param>
        <summary>Преобразует указанный набор типов схемы XML, содержащийся в объекте <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в типы CLR, созданные в объекте <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий преобразуемые схемы.</param>
        <param name="element">Объект <see cref="T:System.Xml.Schema.XmlSchemaElement" />, представляющий конкретный преобразуемый элемент схемы.</param>
        <summary>Преобразует указанный элемент схемы из набора указанных схем XML в объект <see cref="T:System.CodeDom.CodeCompileUnit" /> и возвращает <see cref="T:System.Xml.XmlQualifiedName" />, представляющий имя контракта данных для указанного элемента.</summary>
        <returns>Класс <see cref="T:System.Xml.XmlQualifiedName" />, представляющий указанный элемент.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="schemas" /> или <paramref name="element" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">Объект <see cref="T:System.Xml.Schema.XmlSchemaSet" />, содержащий представления схемы.</param>
        <param name="typeName">Тип <see cref="T:System.Xml.XmlQualifiedName" />, представляющий конкретный импортируемый тип схемы.</param>
        <summary>Преобразует указанный тип схемы XML, содержащийся в объекте <see cref="T:System.Xml.Schema.XmlSchemaSet" />, в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="schemas" /> или <paramref name="typeName" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект <see cref="T:System.Runtime.Serialization.ImportOptions" />, содержащий параметры, которые могут быть заданы для операции импорта.</summary>
        <value>Объект <see cref="T:System.Runtime.Serialization.ImportOptions" />, содержащий параметры, которые могут быть заданы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте класс <xref:System.Runtime.Serialization.ImportOptions> для настройки создания типов среды CLR при выполнении импорта схемы.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>
