<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5ddb80a6d71816ce8f565903642ddd9938ac1b5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145613" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет доступ к функциям установленного модуля синтеза речи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании нового <xref:System.Speech.Synthesis.SpeechSynthesizer> объекта используется системный Voice по умолчанию. Чтобы настроить <xref:System.Speech.Synthesis.SpeechSynthesizer> для использования одного из установленных голосов для синтеза речи (преобразования текста в речь), <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> используйте метод или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> . Чтобы получить сведения о том, какие голоса установлены, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> метод <xref:System.Speech.Synthesis.VoiceInfo> и класс.  
  
 Этот класс также обеспечивает управление следующими аспектами синтеза речи:  
  
-   Чтобы <xref:System.Speech.Synthesis.SpeechSynthesizer> настроить выходные данные для объекта, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>используйте методы, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> .  
  
-   Чтобы создать <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>речь, используйте метод, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>или. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> Может создавать речь из текста <xref:System.Speech.Synthesis.Prompt> , объекта или <xref:System.Speech.Synthesis.PromptBuilder> или из языка разметки [речи (SSML) версии 1,0](https://go.microsoft.com/fwlink/?LinkId=201763). <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
-   Чтобы приостановить и возобновить синтез речи, <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> методы и.  
  
-   Чтобы добавить или удалить лексиконы, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> методы и. <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> В <xref:System.Speech.Synthesis.SpeechSynthesizer> можно использовать один или несколько лексиконов для указания произношения слов.  
  
-   Чтобы изменить доставку речевого вывода, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> свойства и. <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A>  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>Компонент вызывает события при обнаружении в запросах определенных функций: (,, и). <xref:System.Speech.Synthesis.SpeechSynthesizer> Он также создает события, сообщающие о начале (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) и окончании<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>(), которые говорят об операциях, и о смене<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>речи ().  
  
> [!NOTE]
>  Всегда вызывайте метод <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> перед освобождением последней ссылки на класс <xref:System.Speech.Synthesis.SpeechSynthesizer>. В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Speech.Synthesis.SpeechSynthesizer> метод <xref:System.Object.Finalize%2A>.  
  
   
  
## Examples  
 Следующий пример является частью консольного приложения, которое инициализирует <xref:System.Speech.Synthesis.SpeechSynthesizer> объект и выступает в качестве строки.  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)">Синтез речи</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При инициализации нового <xref:System.Speech.Synthesis.SpeechSynthesizer> экземпляра используется системный Voice по умолчанию. Чтобы настроить <xref:System.Speech.Synthesis.SpeechSynthesizer> для использования одного из установленных голосов для синтеза речи (преобразования текста в речь), <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> используйте метод или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> . Чтобы получить сведения о том, какие голоса установлены, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> метод <xref:System.Speech.Synthesis.VoiceInfo> и класс.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">Расположение сведений о лексиконе.</param>
        <param name="mediaType">Тип носителя лексикона. Значения типов мультимедиа не учитывают регистр.</param>
        <summary>Добавляет лексикон в объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Лексикон произношения — это набор слов или фраз вместе с их произношением, который состоит из букв и символов из поддерживаемого фонетического алфавита. Вы можете использовать словарь, чтобы указать пользовательские произношения для специализированного словаря в приложении.  
  
 Произношение, указанное во внешнем файле лексики, имеет более высокий приоритет, чем произношение внутреннего лексикона или словаря синтезатора речи. Тем не менее, произношение, заданное в тексте запросов <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, созданных с помощью любого из методов, или <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> , имеет приоритет над произношением, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>указанными в любом лексиконе. Встроенные произношения применяются только к одному вхождению слова. Дополнительные сведения см. в разделе [лексиконы и фонетические алфавиты](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) .  
  
 К <xref:System.Speech.Synthesis.SpeechSynthesizer> объекту можно добавить несколько лексиконов. В настоящее время для `mediaType` параметра поддерживаются два значения:  
  
-   Значение `application/pls+xml` указывает, что лексикон соответствует [спецификации озвученного лексикона (областей) версии 1,0](https://go.microsoft.com/fwlink/?LinkId=201766). Это предпочтительный формат для использования.  
  
-   Значение `application/vdn.ms-sapi-lex` указывает на то, что формат лексикона является несжатым лексиконом, который является форматом, разработанным корпорацией Майкрософт. Это устаревший формат, поэтому рекомендуется использовать формат областей, описанный выше.  
  
   
  
## Examples  
 В следующем примере показан результат добавления и удаления лексикона, содержащего пользовательское произношение слова «Blue». Этот словарь определяет фонетическое значение «Blue», например «блип». Во время загрузки лексикона речевой синтезатор использует произношение, определенное в лексиконе.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 Ниже приведено содержимое файла лексикона Blue. областей:  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> встречает закладку в запросе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Вызывает это событие при обработке любого из методов,, или. <xref:System.Speech.Synthesis.SpeechSynthesizer> Дополнительные сведения о данных, связанных с событием, <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>см. в разделе.  
  
 Закладки можно добавлять с помощью <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> метода.  
  
   
  
## Examples  
 В следующем примере создается запрос, включающий две закладки и отправляющий выходные данные в WAV-файл для воспроизведения. Обработчик <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> события записывает имя закладки и ее расположение в потоке аудио при возникновении события в консоли.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> и освобождает ресурсы, используемые во время сеанса.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Является резервным вариантом очистки ресурсов в событии на тот случай, если метод <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> не будет вызван.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает запрос, который указывает <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <returns>Возвращает запроса объект, который в данный момент говорится.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает коллекцию голосов синтеза речи (текст в голос), которые в настоящее время установлены в системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов (обработчиков для преобразования текста в речь), найденный в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает все установленные голоса синтеза речи (текст в речь).</summary>
        <returns>Возвращает доступную только для чтения коллекцию голосов в данный момент установленных в системе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Речь — это подсистема для синтеза речи (преобразования текста в речь или TTS), установленная в системе.  
  
   
  
## Examples  
 Следующий пример является частью консольного приложения, которое инициализирует <xref:System.Speech.Synthesis.SpeechSynthesizer> объект и выводит на консоль список установленных голосов (обработчиков для синтеза речи) и демонстрирует сведения, доступные для каждого голоса.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Языковой стандарт, который должен поддерживаться голосом.</param>
        <summary>Возвращает все установленные голоса синтеза речи (преобразования текста в речь), которые поддерживают указанный языковой стандарт.</summary>
        <returns>Возвращает доступную только для чтения коллекцию голосов в данный момент установленных в системе, которые поддерживают указанный языковой стандарт.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если ни один из установленных голосов не поддерживает указанный языковой стандарт, этот метод возвращает пустую коллекцию.  
  
 Microsoft Windows и API System. Speech принимают все допустимые коды языковых стран. Чтобы выполнить преобразование текста в речь с помощью языка, указанного в свойстве Culture, необходимо установить модуль синтеза речи, поддерживающий этот код языка и страны. Модули синтеза речи, поставляемые вместе с Microsoft Windows 7, работают со следующими кодами языков:  
  
-   EN-US. Английский (США)  
  
-   zh-CN. Китайский (Китай)  
  
-   zh-TW. Китайский (Тайвань)  
  
 Также разрешены двухбуквенный код языка, например "en".  
  
   
  
## Examples  
 Следующий пример является частью консольного приложения, которое инициализирует <xref:System.Speech.Synthesis.SpeechSynthesizer> объект и выводит на консоль список установленных голосов, которые поддерживают языковой стандарт EN-US.  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Приостанавливает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Вызывается по достижении фонемы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Phoneme является базовым компонентом письменного языка, обычно буквой алфавита (или сочетанием двух букв), представляющей один или несколько отдельных звуков. Например, буква "c" является phoneme, которая может показаться "s" в "Циндер", или как "k" в "Catch". Написанное слово — это сборка фонемы. Изменение phoneme в слове приведет к изменению его орфографии.  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Экземпляр<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> создает событие для каждой части слова, составляющего phoneme. Например, для слова «Theme» будет создано три <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> события: один для «th», один для звука «e» и один для «m» звука (Me).  
  
 Пример и сведения о данных, связанных с событием, см. <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>в разделе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает скорость произношения объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <value>Возвращает скорость произношения объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, от -10 до 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример говорит о том, что для строки со скоростью речи задано значение-2.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Расположения документа лексикона.</param>
        <summary>Удаляет лексикон из объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пример см. в разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возобновляет объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> после того, как он был приостановлен.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя голоса для выбора.</param>
        <summary>Выберите конкретный голос по имени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод и <xref:System.Speech.Synthesis.VoiceInfo> класс для получения имен установленных голосов (TTS) текста, которые можно выбрать. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Чтобы выбрать голосовое значение, передайте все содержимое <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> свойства в качестве аргумента <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> метода. Объект выбирает первый установленный голоса, содержащийся `name` в <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> свойстве голоса. <xref:System.Speech.Synthesis.SpeechSynthesizer> Выполняет сравнение подстроки с учетом регистра, чтобы определить, `name`соответствует ли голоса. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов, найденных в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 Чтобы выбрать голосовое значение по полу, возрасту или языку, используйте один <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> из методов.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выбирает голос с определенными свойствами.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод и <xref:System.Speech.Synthesis.VoiceInfo> класс для получения имен установленных голосов (TTS) текста, которые можно выбрать. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer> Объект выбирает первый установленный голосовой, соответствующий указанным характеристикам.  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов, найденных в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 Чтобы выбрать голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">Пол выбираемого голоса.</param>
        <summary>Выбирает голос с определенным полом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод и <xref:System.Speech.Synthesis.VoiceInfo> класс для получения имен установленных голосов (TTS) текста, которые можно выбрать. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Объект выбирает первый установленный голосовой, <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> свойство которого соответствует `gender` параметру. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов, найденных в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 Чтобы выбрать голоса на основе других характеристик, см. другие <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> методы.  
  
 Чтобы выбрать голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">Пол выбираемого голоса.</param>
        <param name="age">Возраст выбираемого голоса.</param>
        <summary>Выбирает голос с конкретным полом и возрастом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод и <xref:System.Speech.Synthesis.VoiceInfo> класс для получения имен установленных голосов (TTS) текста, которые можно выбрать. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> `age` `gender` Объект выбирает первый установленный голосовой, свойства и которого соответствуют параметрам и. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов, найденных в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 Чтобы выбрать голоса на основе других характеристик, см. другие <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> методы.  
  
 Чтобы выбрать голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">Пол выбираемого голоса.</param>
        <param name="age">Возраст выбираемого голоса.</param>
        <param name="voiceAlternate">Позиция выбираемого голоса.</param>
        <summary>Выбирает голос с определенными полом и возрастом, в зависимости от позиции, в которой упорядочиваются голоса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод и <xref:System.Speech.Synthesis.VoiceInfo> класс для получения имен установленных голосов (TTS) текста, которые можно выбрать. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> `age` Объект находит установленные голоса, свойства и которых соответствуют `gender` параметрам и. <xref:System.Speech.Synthesis.SpeechSynthesizer> Счетчик находит найденные совпадения и возвращает голосовое значение, если число `voiceAlternate` равно значению параметра. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов, найденных в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 Чтобы выбрать голоса на основе других характеристик, см. другие <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> перегрузки.  
  
 Чтобы выбрать голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender">Пол выбираемого голоса.</param>
        <param name="age">Возраст выбираемого голоса.</param>
        <param name="voiceAlternate">Позиция выбираемого голоса.</param>
        <param name="culture">Языковой стандарт выбираемого голоса.</param>
        <summary>Выбирает голос с определенными полом, возрастом и Языковым стандартом, в зависимости от позиции, в которой упорядочиваются голоса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> `gender` `age`Объект находит голоса, свойства, и которых соответствуют параметрам, и `culture`. <xref:System.Speech.Synthesis.SpeechSynthesizer> Счетчик находит найденные совпадения и возвращает голосовое значение, если число `voiceAlternate` равно значению параметра. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Microsoft Windows и API System. Speech принимают все допустимые коды языковых стран. Чтобы выполнить преобразование текста в речь с помощью языка, указанного в `culture` параметре, необходимо установить модуль синтеза речи, поддерживающий этот код языка и страны. Модули синтеза речи, поставляемые вместе с Microsoft Windows 7, работают со следующими кодами языков:  
  
-   EN-US. Английский (США)  
  
-   zh-CN. Китайский (Китай)  
  
-   zh-TW. Китайский (Тайвань)  
  
 Также разрешены двухбуквенный код языка, например "en".  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>приложения метод проверяет, что каждый из голосов, найденных в реестре, соответствует определенным минимальным критериям. Для любого голоса, который не проходит <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> проверку, <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> устанавливает для `False`его свойства значение. Приложение не может выбрать голосовое значение <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> , свойство `False`которого равно. Как правило, приложения не устанавливают <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> свойство голоса.  
  
 Чтобы выбрать голоса на основе других характеристик, см. другие <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> перегрузки.  
  
 Чтобы выбрать голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination">Поток, в который требуется добавить выходные данные синтеза.</param>
        <param name="formatInfo">Формат для использования с выходными данными синтеза.</param>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> для добавления выходных данных в аудиопоток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите метод <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> , <xref:System.Speech.Synthesis.SpeechSynthesizer>чтобы освободить ссылку на поток.  
  
 Другие параметры конфигурации вывода см. в <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>разделе методы, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> для отправки выходных данных в аудиоустройство по умолчанию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете использовать окно **звук** на **панели управления** Windows для настройки звукового устройства по умолчанию для компьютера.  
  
 Другие параметры конфигурации вывода см. в <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>разделе методы, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> .  
  
   
  
## Examples  
 В следующем примере синтезатор используется для заключения фразы в звуковые выходные данные по умолчанию.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, чтобы не отправлять выходные данные из операций синтеза в устройство, файл или поток.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы освободить <xref:System.Speech.Synthesis.SpeechSynthesizer>ссылку на файл или поток. Пример см. в разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>.  
  
 Другие параметры конфигурации вывода см. в <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>разделе методы, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> для добавления выходных данных в файла аудиоданных в формате WAV.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы освободить <xref:System.Speech.Synthesis.SpeechSynthesizer>ссылку на файл, <xref:System.Speech.Synthesis.SpeechSynthesizer>перенастройте выходные данные, например, вызвав <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Другие параметры конфигурации вывода см. в <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>разделе методы, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Путь к файлу.</param>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> для добавления выходных данных в файл, содержащий данные в формате WAV.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы настроить выходные данные и указать формат звука, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> метод.  
  
   
  
## Examples  
 В следующем примере экземпляр класса <xref:System.Media.SoundPlayer> используется для воспроизведения запроса, который был выведен в WAV-файл. Поскольку вызов является асинхронным <xref:System.Media.SoundPlayer> , экземпляр создается (и <xref:System.Media.SoundPlayer.Play%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> вызывается метод) в обработчике события. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path">Путь к файлу.</param>
        <param name="formatInfo">Сведения об аудиоформате.</param>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> для добавления выходных данных в файл с аудиоданными определенного формата.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере задается формат вывода синтеза речи и его отправка в WAV-файл.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination">Поток, в который требуется добавить выходные данные синтеза.</param>
        <summary>Настраивает объект <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> для добавления выходных данных в поток содержащий данные в формате WAV.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы освободить <xref:System.Speech.Synthesis.SpeechSynthesizer>ссылку на поток, перенастройте выходные данные синтезатора, например, вызвав <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Другие параметры конфигурации вывода см. в <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>разделе методы, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> .  
  
   
  
## Examples  
 В следующем примере в поток WAV выводится фраза.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает речевой вывод синхронно из строки, объекта <see cref="T:System.Speech.Synthesis.Prompt" /> или объекта <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> Методы генерируют речь синхронно. Методы не возвращают, пока содержимое <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> экземпляра не будет полностью обработано. Это самый простой способ создания речи. Однако, если приложение должно выполнять задачи во время диктовки, например выделение текста, анимацию рисования, элементы управления монитора или другие задачи, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> методы <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> или метод для асинхронного создания речи.  
  
 Во время вызова этого метода метод <xref:System.Speech.Synthesis.SpeechSynthesizer> может вызвать следующие события:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Возникает при изменении состояния речи синтезатора.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Возникает, когда синтезатор начинает создавать речь.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Создается каждый раз, когда синтезатор достигает буквы или сочетания букв, которые составляют скрытыеный звук речи на языке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Порождается каждый раз, когда синтезатор завершает проговаривание слов.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. При каждом выводе выходных данных необходимо изменить расположение рта или межмышцыических лиц, используемых для создания речи.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Возникает, когда синтезатор встречает закладку в командной строке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Возникает при изменении голоса речи для синтезатора.  
  
 Не вызывает событие при обработке любого из методов. <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Содержимое для озвучки.</param>
        <summary>Синхронно произносит содержимое объекта <see cref="T:System.Speech.Synthesis.Prompt" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для асинхронного произношения содержимого <xref:System.Speech.Synthesis.Prompt> объекта используйте. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Synthesis.Prompt> объект из строки и объект передается в качестве аргумента <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> в метод.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Содержимое для озвучки.</param>
        <summary>Синхронно произносит содержимое объекта <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для асинхронного произношения содержимого <xref:System.Speech.Synthesis.PromptBuilder> объекта используйте. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Synthesis.PromptBuilder> объект из строки и объект передается в качестве аргумента <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> в метод.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Текст для озвучки.</param>
        <summary>Синхронно произносит содержимое строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы синхронно поговорить со строкой, содержащей разметку SSML, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> используйте метод. Для асинхронного произношения содержимого строки используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> метод.  
  
   
  
## Examples  
 Как показано в следующем примере, <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> метод предоставляет простейшие средства для синхронного создания речевого вывода.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает речевой вывод асинхронно из строки, объекта <see cref="T:System.Speech.Synthesis.Prompt" /> или объекта <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Методы <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> создают речь в асинхронном режиме. Методы немедленно возвращают, не дожидаясь завершения работы с содержимым <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> объекта. Используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> , если приложение должно выполнять задачи во время диктовки, например выделение текста, анимацию рисования, элементы управления монитора или другие задачи.  
  
 Во время вызова этого метода метод <xref:System.Speech.Synthesis.SpeechSynthesizer> может вызвать следующие события:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Возникает при изменении состояния речи синтезатора.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Возникает, когда синтезатор начинает создавать речь.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Создается каждый раз, когда синтезатор достигает буквы или сочетания букв, которые составляют скрытыеный звук речи на языке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Порождается каждый раз, когда синтезатор завершает проговаривание слов.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. При каждом выводе выходных данных необходимо изменить расположение рта или межмышцыических лиц, используемых для создания речи.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Возникает, когда синтезатор встречает закладку в командной строке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Возникает при изменении голоса речи для синтезатора.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Возникает, когда синтезатор завершает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> операцию.  
  
 Если приложению не нужно выполнять задачи во время диктовки, можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> методы <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> или метод для синхронного создания речи.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Содержимое для озвучки.</param>
        <summary>Асинхронно указывает содержимое объекта <see cref="T:System.Speech.Synthesis.Prompt" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно отменить асинхронную диктовку запроса с <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> помощью <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> метода или.  
  
 Чтобы синхронно проговаривать содержимое <xref:System.Speech.Synthesis.Prompt> объекта, используйте. <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Synthesis.Prompt> объект из строки и объект передается в качестве аргумента <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> в метод.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Содержимое для озвучки.</param>
        <summary>Асинхронно указывает содержимое объекта <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</summary>
        <returns>Возвращает объект, в котором находится содержимое для произношения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы синхронно проговаривать содержимое <xref:System.Speech.Synthesis.PromptBuilder> объекта, используйте. <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Synthesis.PromptBuilder> объект из строки и объект передается в качестве аргумента <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> в метод.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Текст для озвучки.</param>
        <summary>Асинхронно указывает содержимое строки.</summary>
        <returns>Возвращает объект, в котором находится содержимое для произношения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для асинхронного произношения строки, содержащей разметку SSML, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> используйте метод. Чтобы синхронно проговаривать содержимое строки, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> метод. Можно отменить асинхронную диктовку запроса с <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> помощью <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> метода или.  
  
   
  
## Examples  
 Как показано в следующем примере, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> метод предоставляет простейшие средства для асинхронного создания речевого вывода.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Содержимое, для которого нужно отменить операцию произношения.</param>
        <summary>Отменяет асинхронную операцию синтеза для запроса в очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод также можно использовать для отмены асинхронной операции произношения для следующих действий:  
  
-   Содержимое <xref:System.String> объекта, заданного <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> методом.  
  
-   Содержимое <xref:System.Speech.Synthesis.PromptBuilder> объекта, заданного <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> методом.  
  
-   Содержимое <xref:System.String> содержащего SSML, заданное <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> методом.  
  
 При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>метода <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>система System. Speech создает <xref:System.Speech.Synthesis.Prompt> объект и заполняет его содержимым параметра метода и возвращает <xref:System.Speech.Synthesis.Prompt> объект. Если вы сохранили <xref:System.Speech.Synthesis.Prompt>копию возвращенного объекта, можно передать ее в <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> , чтобы отменить содержимое <xref:System.String> речи, <xref:System.Speech.Synthesis.PromptBuilder> указанное в объекте или.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отменяет все асинхронные операции синтеза речи, в очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> для отмены асинхронного диктовки запроса, чтобы можно было говорить о новом приглашении. Обратите внимание <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> , что событие срабатывает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> при отмене операции.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> завершает воспроизводить запрос.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывает событие после завершения любого <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> из методов или.<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Класс не имеет свойств и не возвращает данные <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> из события. <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> Он предоставляется, чтобы позволить авторам приложений создавать обработчики событий для <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> события.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает после того, как <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> сообщает каждое отдельное слово запроса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Вызывает это событие для каждого нового слова, которое оно говорит в запросе, используя любой из методов,, или. <xref:System.Speech.Synthesis.SpeechSynthesizer> Пример и дополнительные сведения о данных, связанных с событием, см. <xref:System.Speech.Synthesis.SpeakProgressEventArgs>в разделе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Строка SSML для озвучки.</param>
        <summary>Синхронно произносит <see cref="T:System.String" />, содержащий разметку SSML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Содержимое `textToSpeak` параметра должно `speak` включать элемент и должно соответствовать языку разметки [речи (SSML) версии 1,0](https://go.microsoft.com/fwlink/?LinkId=201763). Дополнительные сведения см. в разделе [Справочник по языку разметки речи](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Для асинхронного произношения строки, содержащей разметку SSML, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> используйте метод. Можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> для инициации синхронного диктовки строки, которая не содержит разметки SSML.  
  
 Во время вызова этого метода метод <xref:System.Speech.Synthesis.SpeechSynthesizer> может вызвать следующие события:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Возникает при изменении состояния речи синтезатора.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Возникает, когда синтезатор начинает создавать речь.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Создается каждый раз, когда синтезатор достигает буквы или сочетания букв, которые составляют скрытыеный звук речи на языке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Порождается каждый раз, когда синтезатор завершает проговаривание слов.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. При каждом выводе выходных данных необходимо изменить расположение рта или межмышцыических лиц, используемых для создания речи.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Возникает, когда синтезатор встречает закладку в командной строке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Возникает при изменении голоса речи для синтезатора.  
  
 Не вызывает событие при обработке <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>метода. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
   
  
## Examples  
 В следующем примере дата 1/29/2009 подготавливается к просмотру в виде даты, в месяц, день, в порядке года.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Разметка SMML для разговора.</param>
        <summary>Асинхронно сообщает <see cref="T:System.String" />, содержащий разметку SSML.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Содержимое `textToSpeak` параметра должно `speak` включать элемент и должно соответствовать языку разметки [речи (SSML) версии 1,0](https://go.microsoft.com/fwlink/?LinkId=201763). Дополнительные сведения см. в разделе [Справочник по языку разметки речи](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Чтобы синхронно поговорить со строкой, содержащей разметку SSML, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> используйте метод. Можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> для инициации асинхронного диктовки строки, которая не содержит разметки SSML.  
  
 Во время вызова этого метода метод <xref:System.Speech.Synthesis.SpeechSynthesizer> может вызвать следующие события:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Возникает при изменении состояния речи синтезатора.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Возникает, когда синтезатор начинает создавать речь.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Создается каждый раз, когда синтезатор достигает буквы или сочетания букв, которые составляют скрытыеный звук речи на языке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Порождается каждый раз, когда синтезатор завершает проговаривание слов.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. При каждом выводе выходных данных необходимо изменить расположение рта или межмышцыических лиц, используемых для создания речи.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Возникает, когда синтезатор встречает закладку в командной строке.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Возникает при изменении голоса речи для синтезатора.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Возникает, когда синтезатор заканчивает обработку <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> операции.  
  
 Если приложению DOS не нужно выполнять задачи во время диктовки, можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> метод или для синхронного создания речи.  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> начинает воспроизводить запрос.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Вызывает это событие при начале обработки запроса с помощью любого из методов,, или. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Класс не имеет свойств и не возвращает данные <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> из события. <xref:System.Speech.Synthesis.SpeakStartedEventArgs> Он предоставляется, чтобы позволить авторам приложений создавать обработчики событий для <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> события.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущее состояние произношения объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <value>Возвращает текущее состояние произношения объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы получить новое состояние <xref:System.Speech.Synthesis.SpeechSynthesizer> после изменения, <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> используйте свойство <xref:System.Speech.Synthesis.StateChangedEventArgs> класса.  
  
   
  
## Examples  
 В следующем примере показано состояние <xref:System.Speech.Synthesis.SpeechSynthesizer> до, во время и после диктовки запроса.  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда меняется состояние <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывает это событие при изменении его речи <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A>. <xref:System.Speech.Synthesis.SpeechSynthesizer> Пример и дополнительные сведения о данных, связанных с событием, см. <xref:System.Speech.Synthesis.StateChangedEventArgs>в разделе.  
  
 Чтобы приостановить и возобновить синтез речи, <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> методы и.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Вызывается по достижении виземы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Висеме — это базовая координата рот и лица, когда пронаунЦинг phoneme. Висемес являются визуальными представлениями фонемы.  
  
 System. Speech поддерживает 21 висемес для английского языка (США), каждый из которых соответствует одному или нескольким фонемы.  <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>события возникают при достижении нового phoneme, отличного от висеме предыдущего phoneme. Поскольку некоторые висемес представляют более одного phoneme, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> событие не создается, если следующий phoneme соответствует тому же висеме, что и предыдущий phoneme. Например, для произносимых слов «эта зона» <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> создается событие для «s» в «this» и «z» в «Zone». Однако <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> событие для "z" в "Zone" не вызывается, так как оно соответствует тому же висеме, что и "s" в "this".  
  
 Ниже приведен список групп 21 SAPI фонемы и phoneme, соответствующих висеме на английском языке США.  
  
|висеме|Phoneme|  
|------------|------------------|  
|0|отключить|  
|1|AE, AX, AH|  
|2|aa|  
|3|AO|  
|4|клю, EH, вероятно|  
|5|ER|  
|6|y, ий, IH, IX|  
|7|w, UW|  
|8|разрешить|  
|9|AW|  
|10|Oy|  
|11|гг|  
|12|h|  
|13|процедура|  
|14|l|  
|15|s, z|  
|16|SH, CH, жх, zh|  
|17|TH, DH|  
|18|f, v|  
|19|d, t, n|  
|20|k, g, NG|  
|21|p, b, m|  
  
 Дополнительные сведения о данных, связанных с `VisemeReached` событием, <xref:System.Speech.Synthesis.VisemeReachedEventArgs>см. в разделе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о текущем голосе объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <value>Возвращает сведения о текущем голосе объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При инициализации нового <xref:System.Speech.Synthesis.SpeechSynthesizer>используется системный Voice по умолчанию. Чтобы настроить <xref:System.Speech.Synthesis.SpeechSynthesizer> объект для использования одного из установленных голосов синтеза речи, <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> используйте метод или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> . Чтобы получить сведения о том, какие голоса установлены, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> метод <xref:System.Speech.Synthesis.VoiceInfo> и класс.  
  
   
  
## Examples  
 В следующем примере инициализируется экземпляр <xref:System.Speech.Synthesis.SpeechSynthesizer> и получает сведения о текущем голоса.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда меняется голос <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пример и сведения о данных, связанных с событием, см. <xref:System.Speech.Synthesis.VoiceChangeEventArgs>в разделе.  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Можно изменить голосовое значение, используемое с помощью любого <xref:System.Speech.Synthesis.PromptBuilder>из <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> методов или <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> методов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает выходной объем объекта <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <value>Возвращает громкость <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> от 0 до 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере задается громкость <xref:System.Speech.Synthesis.SpeechSynthesizer>звукового выхода для синтезированного голоса и файла WAV.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
