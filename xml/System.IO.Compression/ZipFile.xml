<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e00610c697172215daaa207fe700f08493b8315" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69357096" /></Metadata><TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <TypeSignature Language="F#" Value="type ZipFile = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет статические методы для создания, извлечения и открытия ZIP-архивов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Чтобы использовать <xref:System.IO.Compression.ZipFile> класс, необходимо добавить в проект ссылку `System.IO.Compression.FileSystem` на сборку. в противном случае при попытке компиляции будет выводится следующее сообщение об ошибке: **Имя "ZipFile" не существует в текущем контексте**. Дополнительные сведения о том, как добавить ссылку на проект в Visual Studio, см. в [разделе как Добавление и удаление ссылок с помощью диспетчера ссылок](https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb).  
  
 Методы управления ZIP-архивами и их файлами распределяются по трем классам: <xref:System.IO.Compression.ZipFile> <xref:System.IO.Compression.ZipArchive> и <xref:System.IO.Compression.ZipArchiveEntry>.  
  
|Кому...|Используйте:|  
|---------|----------|  
|Создание ZIP-архива из каталога|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|Извлечение содержимого ZIP-архива в каталог|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|Добавление новых файлов в существующий ZIP-архив|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|Получение файла в ZIP-архиве|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|Получение всех файлов в ZIP-архиве|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|Открытие потока для отдельного файла, содержащегося в ZIP-архиве|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|Удаление файла из ZIP-архива|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 Нельзя использовать <xref:System.IO.Compression.ZipFile> классы или <xref:System.IO.Compression.ZipFileExtensions> в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложениях. В [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложениях для работы с сжатыми файлами следует использовать следующие классы.  
  
-   <xref:System.IO.Compression.ZipArchive>  
  
-   <xref:System.IO.Compression.ZipArchiveEntry>  
  
-   <xref:System.IO.Compression.DeflateStream>  
  
-   <xref:System.IO.Compression.GZipStream>  
  
   
  
## Examples  
 В этом примере показано, как создать и извлечь ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив, а затем извлекает это содержимое в новую папку.  
  
> [!TIP]
>  Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb">Практическое руководство. Добавление и удаление ссылок с помощью диспетчера ссылок</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает ZIP архив, содержащий файлы и каталоги из указанного каталога.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Путь к архивируемому каталогу, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="destinationArchiveFileName">Путь создаваемого архива, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <summary>Создает ZIP архив, содержащий файлы и каталоги из указанного каталога.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура каталогов из файловой системы сохраняется в архиве. Если каталог пуст, создается пустой архив. Эта перегрузка метода не включает базовый каталог в архив и не позволяет указать уровень сжатия. Если необходимо включить базовый каталог или указать уровень сжатия, вызовите <xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29> перегрузку метода.  
  
 Если архив уже существует, <xref:System.IO.IOException> возникает исключение. Если запись с указанным именем уже существует в архиве, то создается вторая запись с идентичным именем.  
  
 Если файл в каталоге не может быть добавлен в архив, архив остается неполным и недопустимым, а метод создает <xref:System.IO.IOException> исключение.  
  
   
  
## Examples  
 В этом примере показано, как создать и извлечь ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив, а затем извлекает это содержимое в новую папку. Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В<paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Параметр <paramref name="sourceDirectoryName" /> недопустим или не существует (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> уже существует.  
  
- или - 
Не удалось открыть файл в указанном каталоге.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="destinationArchiveFileName" /> указывает каталог.  
  
- или - 
Вызывающий код не имеет необходимого разрешения на доступ к каталогу, указанному в <paramref name="sourceDirectoryName" />, или к файлу, указанному в <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> содержит недопустимый формат.  
  
-или- 
ZIP-архив не поддерживает запись.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Путь к архивируемому каталогу, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="destinationArchiveFileName">Путь создаваемого архива, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="compressionLevel">Одно из значений перечисления, указывающее, акцентировать ли внимание на скорости или эффективности сжатия при создании записи.</param>
        <param name="includeBaseDirectory">Значение <see langword="true" />, чтобы включить имя каталога из параметра <paramref name="sourceDirectoryName" /> в корень архива; значение <see langword="false" />, чтобы включать только содержимое этого каталога.</param>
        <summary>Создает ZIP-архив, содержащий файлы и каталоги из указанного каталога, использует указанный уровень сжатия и необязательно включает базовый каталог.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура каталогов из файловой системы сохраняется в архиве. Если каталог пуст, создается пустой архив. Используйте эту перегрузку метода, чтобы задать уровень сжатия и указать, следует ли включать базовый каталог в архив.  
  
 Если архив уже существует, <xref:System.IO.IOException> возникает исключение. Если запись с указанным именем уже существует в архиве, то создается вторая запись с идентичным именем.  
  
 Если файл в каталоге не может быть добавлен в архив, архив остается неполным и недопустимым, а метод создает <xref:System.IO.IOException> исключение.  
  
   
  
## Examples  
 В этом примере показано, как создать и извлечь ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив, а затем извлекает это содержимое в новую папку. При сжатии архива включается базовый каталог, а уровень сжатия устанавливается, чтобы подчеркнуть скорость операции. Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipFile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В<paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Параметр <paramref name="sourceDirectoryName" /> недопустим или не существует (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> уже существует.  
  
- или - 
Не удалось открыть файл в указанном каталоге.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="destinationArchiveFileName" /> указывает каталог.  
  
- или - 
Вызывающий код не имеет необходимого разрешения на доступ к каталогу, указанному в <paramref name="sourceDirectoryName" />, или к файлу, указанному в <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> содержит недопустимый формат.  
  
- или - 
ZIP-архив не поддерживает запись.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Путь к архивируемому каталогу, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="destinationArchiveFileName">Путь создаваемого архива, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="compressionLevel">Одно из значений перечисления, указывающее, акцентировать ли внимание на скорости или эффективности сжатия при создании записи.</param>
        <param name="includeBaseDirectory">Значение <see langword="true" />, чтобы включить имя каталога из параметра <paramref name="sourceDirectoryName" /> в корень архива; значение <see langword="false" />, чтобы включать только содержимое этого каталога.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении или записи имен записей в этом архиве. Задайте значение для этого параметра, только если кодирование требуется для взаимодействия с инструментами и библиотеками ZIP-архива, которые не поддерживают кодирование UTF-8 для имен записей.</param>
        <summary>Создает ZIP-архив, содержащий файлы и каталоги из указанного каталога, использует указанный уровень сжатия и кодировку символов для имен записей и необязательно включает базовый каталог.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура каталогов из файловой системы сохраняется в архиве. Если каталог пуст, создается пустой архив. Используйте эту перегрузку метода, чтобы задать уровень сжатия и кодировку символов, а также указать, следует ли включать базовый каталог в архив.  
  
 Если архив уже существует, <xref:System.IO.IOException> возникает исключение. Если запись с указанным именем уже существует в архиве, то создается вторая запись с идентичным именем.  
  
 Если файл в каталоге не может быть добавлен в архив, архив остается неполным и недопустимым, а метод создает <xref:System.IO.IOException> исключение.  
  
 Если `entryNameEncoding` для параметра задано значение, отличное `null`от, имена записей кодируются с помощью указанной кодировки. Если указанная кодировка является UTF-8, флаг кодировки языка (в битовом флаге общего назначения локального заголовка файла) задается для каждой записи.  
  
 Если `entryNameEncoding` параметр имеет `null`значение, имена записей кодируются в соответствии со следующими правилами.  
  
-   Для имен записей, содержащих символы за пределами диапазона ASCII, устанавливается флаг кодировки языка, а для кодирования имени записи используется UTF-8.  
  
-   Для имен записей, содержащих только символы ASCII, установлен флаг кодировки языка, и текущая системная кодовая страница по умолчанию используется для кодирования имен записей.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.  
  
- или - 
 <paramref name="entryNameEncoding" /> установлено на кодировку Юникода, отличное от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В<paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Параметр <paramref name="sourceDirectoryName" /> недопустим или не существует (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> уже существует.  
  
-или- 
Не удалось открыть файл в указанном каталоге.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="destinationArchiveFileName" /> указывает каталог.  
  
- или - 
Вызывающий код не имеет необходимого разрешения на доступ к каталогу, указанному в <paramref name="sourceDirectoryName" />, или к файлу, указанному в <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> содержит недопустимый формат.  
  
-или- 
ZIP-архив не поддерживает запись.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Извлекает все файлы в указанном ZIP-архиве в каталогу в файловой системе.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь к архиву, который требуется извлечь.</param>
        <param name="destinationDirectoryName">Путь к каталогу, в котором следует поместить извлеченные файлы, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <summary>Извлекает все файлы в указанном ZIP-архиве в каталогу в файловой системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает указанный каталог и все подкаталоги. Каталог назначения не может уже существовать. Исключения, связанные с проверкой путей в `destinationDirectoryName` параметрах или `sourceArchiveFileName` , вызываются перед извлечением. В противном случае, если во время извлечения возникает ошибка, архив остается частично извлеченным. Каждый извлеченный файл имеет тот же относительный путь к каталогу, `destinationDirectoryName` который указан в качестве исходной записи в корневую папку архива.  
  
   
  
## Examples  
 В этом примере показано, как создать и извлечь ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Она сжимает содержимое папки в ZIP-архив и извлекает это содержимое в новую папку. Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Указанная длина пути в <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> превышает максимальную длину, определенную в системе.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Указанный путь недопустим (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Каталог, заданный параметром <paramref name="destinationDirectoryName" />, уже существует.  
  
-или- 
Имя записи в архиве имеет значение <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.  
  
- или - 
Извлечение записи архива создаст файл, который находится вне каталога, заданного <paramref name="destinationDirectoryName" />. (Например, это может произойти, если имя записи содержит методы доступа родительского каталога.) 
-или- 
Запись архива, которую требуется извлечь, имеет то же имя, что и запись, которая уже была извлекается из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Вызывающий код не имеет необходимого разрешения на доступ к архиву или целевому каталогу.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" />, не является допустимым ZIP-архивом.  
  
-или- 
Не удалось найти запись архива или она была повреждена.  
  
- или - 
Запись архива была сжата с помощью неподдерживаемого метода сжатия.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь в файловой системе к архиву, который требуется извлечь.</param>
        <param name="destinationDirectoryName">Путь к целевому каталогу в файловой системе. Указанный каталог не должен существовать, но каталог, в котором он находится, должен существовать.</param>
        <param name="overwriteFiles">Значение <see langword="true" /> для перезаписи файлов; в противном случае — значение <see langword="false" />.</param>
        <summary>Извлекает все файлы в указанном архиве в каталоге в файловой системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Указанный каталог не должен существовать. Метод создает указанный каталог и все подкаталоги.
 
 Если при извлечении архива возникла ошибка, архив будет извлечен частично.
  
 Каждая запись будет извлечена таким образом, что извлеченный файл имеет тот же относительный путь к тому `destinationDirectoryName` , что и запись в архив.
 
 Путь может указывать сведения относительного или абсолютного пути. Относительный путь интерпретируется относительно текущего рабочего каталога.
 
 Если файл для архивации имеет неверное время последнего изменения, то будет использоваться первая дата и время, представленные в формате метки времени ZIP (полночь 1 января 1980).

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> представляет собой строку нулевой длины, содержащую только пробелы или один или несколько недопустимых символов, заданных методом <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> указывает путь, имя файла или оба параметра, которые превышают установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Путь, указанный <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" />, является недопустимым (например, он ведет на несопоставленный диск).</exception>
        <exception cref="T:System.IO.IOException">Каталог, заданный параметром <paramref name="destinationDirectoryName" />, уже существует.

-или-

Произошла ошибка ввода-вывода.

- или -

Имя <see cref="T:System.IO.Compression.ZipArchiveEntry" /> имеет нулевую длину, содержит только пробелы или один или несколько недопустимых символов, заданных методом <see cref="F:System.IO.Path.InvalidPathChars" />.

-или-

Извлечение <see cref="T:System.IO.Compression.ZipArchiveEntry" /> может привести к назначению файла, находящегося за пределами целевого каталога (например, из-за наличия методов доступа к родительскому каталогу).

- или -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> имеет то же имя, что и уже извлеченная запись из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
        <exception cref="T:System.NotSupportedException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" />, не является допустимым <see cref="T:System.IO.Compression.ZipArchive" />.

- или -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> поврежден или не может быть найден.

- или -

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> сжат с помощью неподдерживаемого метода сжатия.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь к архиву, который требуется извлечь.</param>
        <param name="destinationDirectoryName">Путь к каталогу, в котором следует поместить извлеченные файлы, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении или записи имен записей в этом архиве. Задайте значение для этого параметра, только если кодирование требуется для взаимодействия с инструментами и библиотеками ZIP-архива, которые не поддерживают кодирование UTF-8 для имен записей.</param>
        <summary>Извлекает все файлы в указанном ZIP-архиве к каталог в файловой системе и использует указанную кодировку для имен записей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает указанный каталог и все подкаталоги. Каталог назначения не может уже существовать. Исключения, связанные с проверкой путей в `destinationDirectoryName` параметрах или `sourceArchiveFileName` , вызываются перед извлечением. В противном случае, если во время извлечения возникает ошибка, архив остается частично извлеченным. Каждый извлеченный файл имеет тот же относительный путь к каталогу, `destinationDirectoryName` который указан в качестве исходной записи в корневую папку архива.  
  
 Если `entryNameEncoding` для параметра задано значение, отличное `null`от, имена записей декодированы в соответствии со следующими правилами.  
  
-   Для имен записей, в которых не задан флаг кодировки языка (в битовом флаге общего назначения локального заголовка файла), имена записей декодированы с использованием указанной кодировки.  
  
-   Для записей, в которых установлен флаг кодировки языка, имена записей декодированы с помощью UTF-8.  
  
 Если `entryNameEncoding` параметр имеет `null`значение, имена записей декодированы в соответствии со следующими правилами.  
  
-   Для записей, в которых не задан флаг кодировки языка (в битовом флаге общего назначения локального заголовка файла), имена записей декодированы с использованием текущей системной кодовой страницы по умолчанию.  
  
-   Для записей, в которых установлен флаг кодировки языка, имена записей декодированы с помощью UTF-8.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.  
  
-или- 
 <paramref name="entryNameEncoding" /> установлено на кодировку Юникода, отличное от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Указанная длина пути в <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> превышает максимальную длину, определенную в системе.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Указанный путь недопустим (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Каталог, заданный параметром <paramref name="destinationDirectoryName" />, уже существует.  
  
- или - 
Имя записи в архиве имеет значение <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.  
  
- или - 
Извлечение записи архива создаст файл, который находится вне каталога, заданного <paramref name="destinationDirectoryName" />. (Например, это может произойти, если имя записи содержит методы доступа родительского каталога.) 
- или - 
Запись архива, которую требуется извлечь, имеет то же имя, что и запись, которая уже была извлекается из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Вызывающий код не имеет необходимого разрешения на доступ к архиву или целевому каталогу.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" />, не является допустимым ZIP-архивом.  
  
- или - 
Не удалось найти запись архива или она была повреждена.  
  
-или- 
Запись архива была сжата с помощью неподдерживаемого метода сжатия.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь в файловой системе к архиву, который требуется извлечь.</param>
        <param name="destinationDirectoryName">Путь к целевому каталогу в файловой системе. Указанный каталог не должен существовать, но каталог, в котором он находится, должен существовать.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении имен записей в этом <see cref="T:System.IO.Compression.ZipArchive" />.</param>
        <param name="overwriteFiles">Значение <see langword="true" /> для перезаписи файлов; в противном случае — значение <see langword="false" />.</param>
        <summary>Извлекает все файлы в указанном архиве в каталоге в файловой системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Указанный каталог не должен существовать. Этот метод создаст указанный каталог и все подкаталоги.

 Если при извлечении архива возникла ошибка, архив будет извлечен частично.

 Каждая запись будет извлечена таким образом, что извлеченный файл имеет тот же относительный путь к тому `destinationDirectoryName` , что и запись в архив.

 Путь может указывать сведения относительного или абсолютного пути. Относительный путь интерпретируется относительно текущего рабочего каталога.

 Если файл для архивации имеет неверное время последнего изменения, то будет использоваться первая дата и время, представленные в формате метки времени ZIP (полночь 1 января 1980).
 
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> представляет собой строку нулевой длины, содержащую только пробелы или один или несколько недопустимых символов, заданных методом <see cref="F:System.IO.Path.InvalidPathChars" />.
 
- или - 
 <paramref name="entryNameEncoding" /> установлено на кодировку Юникода, отличное от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> указывает путь, имя файла или оба параметра, которые превышают установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Путь, указанный <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" />, является недопустимым (например, он ведет на несопоставленный диск).</exception>
        <exception cref="T:System.IO.IOException">Каталог, заданный параметром <paramref name="destinationDirectoryName" />, уже существует.

- или -

Произошла ошибка ввода-вывода.

- или -

Имя <see cref="T:System.IO.Compression.ZipArchiveEntry" /> имеет нулевую длину, содержит только пробелы или один или несколько недопустимых символов, заданных методом <see cref="F:System.IO.Path.InvalidPathChars" />.

- или -

Извлечение <see cref="T:System.IO.Compression.ZipArchiveEntry" /> может привести к назначению файла, находящегося за пределами целевого каталога (например, из-за наличия методов доступа к родительскому каталогу).

-или-

<see cref="T:System.IO.Compression.ZipArchiveEntry" /> имеет то же имя, что и уже извлеченная запись из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
        <exception cref="T:System.NotSupportedException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" />, не является допустимым <see cref="T:System.IO.Compression.ZipArchive" />.

- или -

Не удалось найти запись архива или она была повреждена.

-или-

Запись архива была сжата с использованием неподдерживаемого метода сжатия.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Открывает ZIP-архив по указанному пути и в заданном режиме.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">Путь к открываемому архиву, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="mode">Одно из значений перечисления, указывающее действия, которые разрешены над записями в открытом архиве.</param>
        <summary>Открывает ZIP-архив по указанному пути и в заданном режиме.</summary>
        <returns>Открытый ZIP-архив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `mode` Если для <xref:System.IO.Compression.ZipArchiveMode.Read>параметра задано значение, Архив открывается с <xref:System.IO.FileMode.Open> из <xref:System.IO.FileMode> перечисления в качестве значения в режиме файла. Если архив не существует, <xref:System.IO.FileNotFoundException> возникает исключение. Присвоение `mode` <xref:System.IO.Compression.ZipFile.OpenRead%2A> параметру значения эквивалентно вызову метода. <xref:System.IO.Compression.ZipArchiveMode.Read>  
  
 Если для `mode` <xref:System.IO.Compression.ZipArchiveMode.Create>параметра задано значение, Архив открывается <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> в качестве значения режима файла. Если архив уже существует, <xref:System.IO.IOException> создается исключение.  
  
 Если для `mode` <xref:System.IO.Compression.ZipArchiveMode.Update>параметра задано значение, Архив открывается <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> в качестве значения режима файла. Если архив существует, он будет открыт. Существующие записи могут быть изменены, и можно создавать новые записи. Если архив не существует, создается новый архив. Однако создание ZIP-архива в <xref:System.IO.Compression.ZipArchiveMode.Update> режиме не так эффективно, как создание его в <xref:System.IO.Compression.ZipArchiveMode.Create> режиме.  
  
   
  
## Examples  
 В следующем примере показано, как открыть ZIP-архив в режиме обновления и добавить запись в архив.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="archiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="archiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Параметр <paramref name="archiveFileName" /> недопустим или не существует (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Не удалось открыть <paramref name="archiveFileName" />.  
  
- или - 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />, однако файл, указанный в <paramref name="archiveFileName" />, уже существует.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="archiveFileName" /> указывает каталог.  
  
- или - 
У вызывающего оператора отсутствует разрешение на доступ к файлу, указанному в параметре <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="mode" /> содержит недопустимое значение.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />, однако файл, указанный в <paramref name="archiveFileName" />, не найден.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> не может интерпретироваться как ZIP-архив.  
  
-или- 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись отсутствует в архиве или повреждена и не может быть прочитана.  
  
- или - 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись слишком велика, чтобы поместиться в памяти.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">Путь к открываемому архиву, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="mode">Одно из значений перечисления, указывающее действия, которые разрешены над записями в открытом архиве.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении или записи имен записей в этом архиве. Задайте значение для этого параметра, только если кодирование требуется для взаимодействия с инструментами и библиотеками ZIP-архива, которые не поддерживают кодирование UTF-8 для имен записей.</param>
        <summary>Открывает ZIP-архив по указанному пути в указанном режиме и с использованием указанной кодировки символов для имен записей.</summary>
        <returns>Открытый ZIP-архив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если для `mode` <xref:System.IO.Compression.ZipArchiveMode.Read>параметра задано значение, Архив открывается <xref:System.IO.FileMode.Open?displayProperty=nameWithType> в качестве значения режима файла. Если архив не существует, <xref:System.IO.FileNotFoundException> возникает исключение. Присвоение `mode` <xref:System.IO.Compression.ZipFile.OpenRead%2A> параметру значения эквивалентно вызову метода. <xref:System.IO.Compression.ZipArchiveMode.Read>  
  
 Если для `mode` <xref:System.IO.Compression.ZipArchiveMode.Create>параметра задано значение, Архив открывается <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> в качестве значения режима файла. Если архив уже существует, <xref:System.IO.IOException> создается исключение.  
  
 Если для `mode` <xref:System.IO.Compression.ZipArchiveMode.Update>параметра задано значение, Архив открывается <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> в качестве значения режима файла. Если архив существует, он будет открыт. Существующие записи могут быть изменены, и можно создавать новые записи. Если архив не существует, создается новый архив. Однако создание ZIP-архива в <xref:System.IO.Compression.ZipArchiveMode.Update> режиме не так эффективно, как создание его в <xref:System.IO.Compression.ZipArchiveMode.Create> режиме.  
  
 При открытии файла ZIP-архива для чтения и `entryNameEncoding` имеет `null`значение, имена записей декодированы в соответствии со следующими правилами.  
  
-   Если не задан флаг кодирования языка (в битовом флаге общего назначения локального заголовка файла), то для декодирования имени записи используется текущая системная кодовая страница по умолчанию.  
  
-   При установке флага кодировки языка UTF-8 используется для декодирования имени записи.  
  
 При открытии файла ZIP-архива для чтения и `entryNameEncoding` задании значения, отличного от `null`, имена записей декодированы в соответствии со следующими правилами.  
  
-   Если флаг кодировки языка не установлен, указанный `entryNameEncoding` объект используется для декодирования имени записи.  
  
-   При установке флага кодировки языка UTF-8 используется для декодирования имени записи.  
  
 При записи в архивные файлы и `entryNameEncoding` `null`задано значение, имена записей кодируются в соответствии со следующими правилами.  
  
-   Для имен записей, содержащих символы за пределами диапазона ASCII, установлен флаг кодировки языка, а имена записей кодируются с помощью UTF-8.  
  
-   Для имен записей, содержащих только символы ASCII, не задан флаг кодировки языка, а имена записей кодируются с использованием текущей системной кодовой страницы по умолчанию.  
  
 При записи в архивные файлы и `entryNameEncoding` задании значения, отличного от `null`, указанное `entryNameEncoding` значение используется для кодирования имен записей в байты. Флаг кодировки языка (в битовом флаге общего назначения локального заголовка файла) задается только в том случае, если указанная кодировка является кодировкой UTF-8.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="archiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.  
  
- или - 
 <paramref name="entryNameEncoding" /> установлено на кодировку Юникода, отличное от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="archiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="archiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Параметр <paramref name="archiveFileName" /> недопустим или не существует (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Не удалось открыть <paramref name="archiveFileName" />.  
  
-или- 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />, однако файл, указанный в <paramref name="archiveFileName" />, уже существует.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="archiveFileName" /> указывает каталог.  
  
-или- 
У вызывающего оператора отсутствует разрешение на доступ к файлу, указанному в параметре <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="mode" /> содержит недопустимое значение.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />, однако файл, указанный в <paramref name="archiveFileName" />, не найден.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> не может интерпретироваться как ZIP-архив.  
  
- или - 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись отсутствует в архиве или повреждена и не может быть прочитана.  
  
-или- 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись слишком велика, чтобы поместиться в памяти.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.OpenRead archiveFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">Путь к открываемому архиву, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <summary>Открывает для чтения ZIP-архив по указанному пути.</summary>
        <returns>Открытый ZIP-архив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод эквивалентен вызову <xref:System.IO.Compression.ZipFile.Open%2A> метода и `mode` присвоению параметру <xref:System.IO.Compression.ZipArchiveMode.Read>значения. Архив открывается <xref:System.IO.FileMode.Open?displayProperty=nameWithType> в качестве значения файлового режима. Если архив не существует, <xref:System.IO.FileNotFoundException> возникает исключение.  
  
   
  
## Examples  
 В следующем примере показано, как открыть ZIP-архив для чтения.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="archiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или хотя бы один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="archiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Параметр <paramref name="archiveFileName" /> недопустим или не существует (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Не удалось открыть <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="archiveFileName" /> указывает каталог.  
  
- или - 
У вызывающего оператора отсутствует разрешение на доступ к файлу, указанному в параметре <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Файл, заданный в <paramref name="archiveFileName" />, не найден.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> не может интерпретироваться как ZIP-архив.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
