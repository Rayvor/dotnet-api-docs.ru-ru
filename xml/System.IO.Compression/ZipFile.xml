<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f42d501d4a4e27c5f60e5ebfc94999139760a66b" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996903" /></Metadata><TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <TypeSignature Language="F#" Value="type ZipFile = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет статические методы для создания, извлечения и открытия ZIP-архивов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Чтобы использовать <xref:System.IO.Compression.ZipFile> класса, необходимо добавить ссылку на `System.IO.Compression.FileSystem` сборки в проекте; в противном случае вы получите следующее сообщение об ошибке при попытке компиляции: **Имя «ZipFile» не существует в текущем контексте**. Дополнительные сведения о том, как добавить ссылку на проект в Visual Studio см. в разделе [как: Добавление и удаление ссылок с помощью диспетчера ссылок](https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb).  
  
 Методы для работы с ZIP-архивов и их файлы будут распределены среди трех классов: <xref:System.IO.Compression.ZipFile>, <xref:System.IO.Compression.ZipArchive> и <xref:System.IO.Compression.ZipArchiveEntry>.  
  
|Кому...|Используйте:|  
|---------|----------|  
|Создайте ZIP-архив, из каталога|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|Извлеките содержимое ZIP-архива в каталог|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|Добавление новых файлов в существующий zip-архив|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|Извлечь файл в ZIP-архив|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|Получить все файлы в ZIP-архив|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|Для открытия потока к отдельному файлу, содержащихся в ZIP-архив|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|Удалить файл из ZIP-архив|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 Нельзя использовать <xref:System.IO.Compression.ZipFile> или <xref:System.IO.Compression.ZipFileExtensions> классы в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений. В [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, следует использовать следующие классы для работы со сжатыми файлами.  
  
-   <xref:System.IO.Compression.ZipArchive>  
  
-   <xref:System.IO.Compression.ZipArchiveEntry>  
  
-   <xref:System.IO.Compression.DeflateStream>  
  
-   <xref:System.IO.Compression.GZipStream>  
  
   
  
## Examples  
 В этом примере показано, как создать и извлеките ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив, а затем извлекает это содержимое в новую папку.  
  
> [!TIP]
>  Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb">Практическое руководство. Добавление и удаление ссылок с помощью диспетчера ссылок</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает ZIP архив, содержащий файлы и каталоги из указанного каталога.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Путь к архивируемому каталогу, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="destinationArchiveFileName">Путь создаваемого архива, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <summary>Создает ZIP архив, содержащий файлы и каталоги из указанного каталога.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура каталогов из файловой системы сохраняются в архиве. Если каталог является пустым, будет создан пустой архив. Эта перегрузка метода не включает базовый каталог в архиве и не позволяют пользователю указать уровень сжатия. Если вы хотите включить базовый каталог или указать вызов уровня сжатия <xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29> перегрузки метода.  
  
 Если архив уже существует, <xref:System.IO.IOException> возникает исключение. Если запись с указанным именем уже существует в архиве, вторая запись создается с идентичными именами.  
  
 Если файл в каталоге не может быть добавлен в архив и архив остается неполными или недопустимыми метод вызывает <xref:System.IO.IOException> исключение.  
  
   
  
## Examples  
 В этом примере показано, как создать и извлеките ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив, а затем извлекает это содержимое в новую папку. Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" />, указанный путь, имя файла или обоих параметров превышает Максимальная длина, определенная системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> не существует или является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> уже существует.  
  
-или- 
Не удалось открыть файл в указанном каталоге.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="destinationArchiveFileName" /> задает каталог.  
  
-или- 
Вызывающий объект не имеет необходимых разрешений на доступ к каталогу, указанный в <paramref name="sourceDirectoryName" /> или файл, указанный в <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> содержит недопустимый формат.  
  
-или- 
ZIP-архив не поддерживает запись.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Путь к архивируемому каталогу, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="destinationArchiveFileName">Путь создаваемого архива, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="compressionLevel">Одно из значений перечисления, указывающее, акцентировать ли внимание на скорости или эффективности сжатия при создании записи.</param>
        <param name="includeBaseDirectory"><see langword="true" /> Чтобы включить имя каталога из <paramref name="sourceDirectoryName" /> в корень архива; <see langword="false" /> для включения только содержимого каталога.</param>
        <summary>Создает ZIP-архив, содержащий файлы и каталоги из указанного каталога, использует указанный уровень сжатия и необязательно включает базовый каталог.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура каталогов из файловой системы сохраняются в архиве. Если каталог является пустым, будет создан пустой архив. Данная перегрузка метода, чтобы указать уровень сжатия и следует ли включать в базовом каталоге в архиве.  
  
 Если архив уже существует, <xref:System.IO.IOException> возникает исключение. Если запись с указанным именем уже существует в архиве, вторая запись создается с идентичными именами.  
  
 Если файл в каталоге не может быть добавлен в архив и архив остается неполными или недопустимыми метод вызывает <xref:System.IO.IOException> исключение.  
  
   
  
## Examples  
 В этом примере показано, как создать и извлеките ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив, а затем извлекает это содержимое в новую папку. При сжатии архива, базовый каталог включен и имеет значение уровень сжатия подчеркивает эффективность скорость выполнения операции. Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipFile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" />, указанный путь, имя файла или обоих параметров превышает Максимальная длина, определенная системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> не существует или является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> уже существует.  
  
-или- 
Не удалось открыть файл в указанном каталоге.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="destinationArchiveFileName" /> задает каталог.  
  
-или- 
Вызывающий объект не имеет необходимых разрешений на доступ к каталогу, указанный в <paramref name="sourceDirectoryName" /> или файл, указанный в <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> содержит недопустимый формат.  
  
-или- 
ZIP-архив не поддерживает запись.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Путь к архивируемому каталогу, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="destinationArchiveFileName">Путь создаваемого архива, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="compressionLevel">Одно из значений перечисления, указывающее, акцентировать ли внимание на скорости или эффективности сжатия при создании записи.</param>
        <param name="includeBaseDirectory"><see langword="true" /> Чтобы включить имя каталога из <paramref name="sourceDirectoryName" /> в корень архива; <see langword="false" /> для включения только содержимого каталога.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении или записи имен записей в этом архиве. Задайте значение для этого параметра, только если кодирование требуется для взаимодействия с инструментами и библиотеками ZIP-архива, которые не поддерживают кодирование UTF-8 для имен записей.</param>
        <summary>Создает ZIP-архив, содержащий файлы и каталоги из указанного каталога, использует указанный уровень сжатия и кодировку символов для имен записей и необязательно включает базовый каталог.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура каталогов из файловой системы сохраняются в архиве. Если каталог является пустым, будет создан пустой архив. Данная перегрузка метода, чтобы указать уровень сжатия и кодировку символов и следует ли включать в базовом каталоге в архиве.  
  
 Если архив уже существует, <xref:System.IO.IOException> возникает исключение. Если запись с указанным именем уже существует в архиве, вторая запись создается с идентичными именами.  
  
 Если файл в каталоге не может быть добавлен в архив и архив остается неполными или недопустимыми метод вызывает <xref:System.IO.IOException> исключение.  
  
 Если `entryNameEncoding` задано значение, отличное от `null`, имена входа, кодируются с помощью указанной кодировки. Если указанная кодировка UTF-8, кодировки, флаг (в общего назначения битовый флаг, локальный файл заголовка) имеет значение для каждой записи  
  
 Если `entryNameEncoding` присваивается `null`, имена входа, кодируются по следующим правилам:  
  
-   Для имен записей, которые содержат символы вне диапазона ASCII установлен флаг кодировки языка и UTF-8, используемый для кодирования имя записи.  
  
-   Для имен записей, которые содержат только символы ASCII установлен флаг кодировки языка и текущей кодовой странице системы по умолчанию, используемый для кодирования имен записей.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.  
  
-или- 
 <paramref name="entryNameEncoding" /> Кодировка ли задано строкой символов Юникод отличные от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" />, указанный путь, имя файла или обоих параметров превышает Максимальная длина, определенная системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> не существует или является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> уже существует.  
  
-или- 
Не удалось открыть файл в указанном каталоге.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="destinationArchiveFileName" /> задает каталог.  
  
-или- 
Вызывающий объект не имеет необходимых разрешений на доступ к каталогу, указанный в <paramref name="sourceDirectoryName" /> или файл, указанный в <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> или <paramref name="destinationArchiveFileName" /> содержит недопустимый формат.  
  
-или- 
ZIP-архив не поддерживает запись.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Извлекает все файлы в указанном ZIP-архиве в каталогу в файловой системе.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь к архиву, который требуется извлечь.</param>
        <param name="destinationDirectoryName">Путь к каталогу, в котором следует поместить извлеченные файлы, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <summary>Извлекает все файлы в указанном ZIP-архиве в каталогу в файловой системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает в указанном каталоге и всех подкаталогах. Каталог назначения не может уже существовать. Исключения, относящиеся к проверке путей в `destinationDirectoryName` или `sourceArchiveFileName` параметров, в которых создаются перед извлечением. В противном случае при возникновении ошибки во время извлечения, остается частично извлеченные архива. Каждый извлеченный файл имеет тот же относительный путь, в каталоге, заданном параметром `destinationDirectoryName` в качестве источника запись имеет в корень архива.  
  
   
  
## Examples  
 В этом примере показано, как создать и извлеките ZIP-архив с помощью <xref:System.IO.Compression.ZipFile> класса. Он сжимает содержимое папки в ZIP-архив и извлекает это содержимое в новую папку. Чтобы использовать класс <xref:System.IO.Compression.ZipFile>, укажите в проекте ссылку на сборку `System.IO.Compression.FileSystem`.  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Пути, указанному в <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> превышает максимальную длину, определенная системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Указан недопустимый путь (например, он ведет на несопоставленный диск).</exception>
        <exception cref="T:System.IO.IOException">Каталог, указанный в параметре <paramref name="destinationDirectoryName" />, уже существует.  
  
-или- 
Имя записи в архиве имеет значение <see cref="F:System.String.Empty" />, содержит только пробел или по крайней мере один недопустимый символ.  
  
-или- 
Извлечение записи архива создаст файл, который находится за пределами каталога, заданного параметром <paramref name="destinationDirectoryName" />. (Это может произойти, например, если имя записи содержит методы доступа к родительскому каталогу.) 
-или- 
Запись архива для извлечения имеет то же имя, что запись, которая уже была извлекается из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Вызывающий объект не имеет необходимых разрешений на доступ к архиву или целевому каталогу.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" /> не является допустимым ZIP-архив.  
  
-или- 
Не удалось найти запись архива или она была повреждена.  
  
-или- 
Запись архива была сжата с помощью неподдерживаемого метода сжатия.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь в файловой системе к архиву, который должно быть извлечено.</param>
        <param name="destinationDirectoryName">Путь к целевому каталогу в файловой системе. Указанный каталог не должен существовать, но должен существовать каталог, содержащийся в.</param>
        <param name="overwriteFiles"><see langword="true" /> Чтобы перезаписать файлы; <see langword="false" /> в противном случае.</param>
        <summary>Извлекает все файлы в архива в каталог в файловой системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Указанный каталог должен не существует. Метод создает в указанном каталоге и всех подкаталогах.
 
 Если возникает ошибка при извлечении архива, архив будет оставаться частично извлеченные.
  
 Каждая запись будут извлечены, таким образом, что извлеченный файл имеет тот же относительный путь к `destinationDirectoryName` как операция имеет в архив.
 
 Путь можно указать относительный или абсолютный путь сведения. Относительный путь интерпретируется относительно текущего рабочего каталога.
 
 Если файл для архивирования имеет недопустимое последнее время изменения, первый Дата и время, которое можно представить в формате Zip timestamp (полуночи 1 января 1980) будет использоваться.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> представляет собой строку нулевой длины, содержит только пробелы или содержит один или несколько недопустимых символов в соответствии с определением <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> указывает путь, имя файла или обоих, превышает максимальную длину, определенную системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Путь, указанный <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Каталог, указанный в параметре <paramref name="destinationDirectoryName" />, уже существует.

-или-

Произошла ошибка ввода-вывода.

-или-

Имя <see cref="T:System.IO.Compression.ZipArchiveEntry" /> нулевой длины, содержит только пробелы или содержит один или несколько недопустимых символов в соответствии с определением <see cref="F:System.IO.Path.InvalidPathChars" />.

-или-

Извлечение <see cref="T:System.IO.Compression.ZipArchiveEntry" /> приведет к назначения файл, который находится за пределами каталог назначения (например, из-за доступа к свойствам родительского каталога).

-или-

Объект <see cref="T:System.IO.Compression.ZipArchiveEntry" /> имеет имя, как запись уже извлеченный из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
        <exception cref="T:System.NotSupportedException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" /> не является допустимым <see cref="T:System.IO.Compression.ZipArchive" />.

-или-

Объект <see cref="T:System.IO.Compression.ZipArchiveEntry" /> не найден или поврежден.

-или-

Объект <see cref="T:System.IO.Compression.ZipArchiveEntry" /> сжатия с помощью метода сжатия не поддерживается.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь к архиву, который требуется извлечь.</param>
        <param name="destinationDirectoryName">Путь к каталогу, в котором следует поместить извлеченные файлы, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении или записи имен записей в этом архиве. Задайте значение для этого параметра, только если кодирование требуется для взаимодействия с инструментами и библиотеками ZIP-архива, которые не поддерживают кодирование UTF-8 для имен записей.</param>
        <summary>Извлекает все файлы в указанном ZIP-архиве к каталог в файловой системе и использует указанную кодировку для имен записей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает в указанном каталоге и всех подкаталогах. Каталог назначения не может уже существовать. Исключения, относящиеся к проверке путей в `destinationDirectoryName` или `sourceArchiveFileName` параметров, в которых создаются перед извлечением. В противном случае при возникновении ошибки во время извлечения, остается частично извлеченные архива. Каждый извлеченный файл имеет тот же относительный путь, в каталоге, заданном параметром `destinationDirectoryName` в качестве источника запись имеет в корень архива.  
  
 Если `entryNameEncoding` задано значение, отличное от `null`, декодирование имен записей по следующим правилам:  
  
-   Для имен записей, где не установлен язык, кодирование флаг (в общего назначения битовый флаг, локальный файл заголовка) используя заданную кодировку декодирование имен записей.  
  
-   Для записей, где этот язык кодирования флаг имеет значение имена входа декодируются с помощью UTF-8.  
  
 Если `entryNameEncoding` присваивается `null`, декодирование имен записей по следующим правилам:  
  
-   Для записей, где не установлен язык, кодирование флаг (в общего назначения битовый флаг, локальный файл заголовка) имена входа декодируются с помощью текущей кодовой странице системы по умолчанию.  
  
-   Для записей, где этот язык кодирования флаг имеет значение имена входа декодируются с помощью UTF-8.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> является <see cref="F:System.String.Empty" />, содержит только пробелы или содержит по крайней мере один недопустимый символ.  
  
-или- 
 <paramref name="entryNameEncoding" /> Кодировка ли задано строкой символов Юникод отличные от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Пути, указанному в <paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> превышает максимальную длину, определенная системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Указан недопустимый путь (например, он ведет на несопоставленный диск).</exception>
        <exception cref="T:System.IO.IOException">Каталог, указанный в параметре <paramref name="destinationDirectoryName" />, уже существует.  
  
-или- 
Имя записи в архиве имеет значение <see cref="F:System.String.Empty" />, содержит только пробел или по крайней мере один недопустимый символ.  
  
-или- 
Извлечение записи архива создаст файл, который находится за пределами каталога, заданного параметром <paramref name="destinationDirectoryName" />. (Это может произойти, например, если имя записи содержит методы доступа к родительскому каталогу.) 
-или- 
Запись архива для извлечения имеет то же имя, что запись, которая уже была извлекается из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Вызывающий объект не имеет необходимых разрешений на доступ к архиву или целевому каталогу.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> или <paramref name="sourceArchiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" /> не является допустимым ZIP-архив.  
  
-или- 
Не удалось найти запись архива или она была повреждена.  
  
-или- 
Запись архива была сжата с помощью неподдерживаемого метода сжатия.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">Путь в файловой системе к архиву, который должно быть извлечено.</param>
        <param name="destinationDirectoryName">Путь к целевому каталогу в файловой системе. Указанный каталог не должен существовать, но должен существовать каталог, содержащийся в.</param>
        <param name="entryNameEncoding">Кодировка, используемая при чтении имен записей в этом <see cref="T:System.IO.Compression.ZipArchive" />.</param>
        <param name="overwriteFiles"><see langword="true" /> Чтобы перезаписать файлы; <see langword="false" /> в противном случае.</param>
        <summary>Извлекает все файлы в архива в каталог в файловой системе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Указанный каталог должен не существует. Этот метод создаст в указанном каталоге и всех подкаталогах.

 Если возникает ошибка при извлечении архива, архив будет оставаться частично извлеченные.

 Каждая запись будут извлечены, таким образом, что извлеченный файл имеет тот же относительный путь к `destinationDirectoryName` как операция имеет в архив.

 Путь можно указать относительный или абсолютный путь сведения. Относительный путь интерпретируется относительно текущего рабочего каталога.

 Если файл для архивирования имеет недопустимое последнее время изменения, первый Дата и время, которое можно представить в формате Zip timestamp (полуночи 1 января 1980) будет использоваться.
 
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> представляет собой строку нулевой длины, содержит только пробелы или содержит один или несколько недопустимых символов в соответствии с определением <see cref="F:System.IO.Path.InvalidPathChars" />.
 
-или- 
 <paramref name="entryNameEncoding" /> Кодировка ли задано строкой символов Юникод отличные от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> указывает путь, имя файла или обоих, превышает максимальную длину, определенную системой.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Путь, указанный <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException">Каталог, указанный в параметре <paramref name="destinationDirectoryName" />, уже существует.

-или-

Произошла ошибка ввода-вывода.

-или-

Имя <see cref="T:System.IO.Compression.ZipArchiveEntry" /> нулевой длины, содержит только пробелы или содержит один или несколько недопустимых символов в соответствии с определением <see cref="F:System.IO.Path.InvalidPathChars" />.

-или-

Извлечение <see cref="T:System.IO.Compression.ZipArchiveEntry" /> приведет к назначения файл, который находится за пределами каталог назначения (например, из-за доступа к свойствам родительского каталога).

-или-

Объект <see cref="T:System.IO.Compression.ZipArchiveEntry" /> имеет имя, как запись уже извлеченный из того же архива.</exception>
        <exception cref="T:System.UnauthorizedAccessException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
        <exception cref="T:System.NotSupportedException">Параметр <paramref name="sourceArchiveFileName" /> или <paramref name="destinationDirectoryName" /> имеет недопустимый формат.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Не удалось найти <paramref name="sourceArchiveFileName" />.</exception>
        <exception cref="T:System.IO.InvalidDataException">Архив, заданный параметром <paramref name="sourceArchiveFileName" /> не является допустимым <see cref="T:System.IO.Compression.ZipArchive" />.

-или-

Не удалось найти запись архива или она была повреждена.

-или-

Запись архива была сжата с помощью метода сжатия не поддерживается.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Открывает ZIP-архив по указанному пути и в заданном режиме.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">Путь к открываемому архиву, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="mode">Одно из значений перечисления, указывающее действия, которые разрешены над записями в открытом архиве.</param>
        <summary>Открывает ZIP-архив по указанному пути и в заданном режиме.</summary>
        <returns>Открытый ZIP-архив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Read>, архив открыт с помощью <xref:System.IO.FileMode.Open> из <xref:System.IO.FileMode> перечисления как значение режим файла. Если архив не существует, <xref:System.IO.FileNotFoundException> возникает исключение. Установка `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Read> эквивалентно вызову <xref:System.IO.Compression.ZipFile.OpenRead%2A> метод.  
  
 При задании `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Create>, архив открыт с помощью <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> как значение режим файла. Если архив уже существует, <xref:System.IO.IOException> возникает исключение.  
  
 При задании `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Update>, архив открыт с помощью <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> как значение режим файла. Если архив существует, он открывается. Можно изменить существующие записи и могут быть созданы новые записи. Если архив не существует, будет создан новый архив; Тем не менее, создание ZIP-архив в <xref:System.IO.Compression.ZipArchiveMode.Update> режим не настолько эффективна, насколько создадим ее в <xref:System.IO.Compression.ZipArchiveMode.Create> режиме.  
  
   
  
## Examples  
 В следующем примере показано, как откройте ZIP-архив в режиме обновления и добавить запись в архив.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> имеет значение <see cref="F:System.String.Empty" />, содержит только пробел или по крайней мере один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="archiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="archiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> не существует или является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> не удалось открыть.  
  
-или- 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />, однако файл, указанный в <paramref name="archiveFileName" /> уже существует.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="archiveFileName" /> задает каталог.  
  
-или- 
Вызывающий объект не имеет необходимых разрешений на доступ к файлу, указанному в <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> Задает недопустимое значение.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />, однако файл, указанный в <paramref name="archiveFileName" /> не найден.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> не может быть интерпретирован как ZIP-архив.  
  
-или- 
 <paramref name="mode" /> является <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись отсутствует или поврежден и не удается прочитать.  
  
-или- 
 <paramref name="mode" /> является <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись слишком велик, чтобы поместиться в памяти.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">Путь к открываемому архиву, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <param name="mode">Одно из значений перечисления, указывающее действия, которые разрешены над записями в открытом архиве.</param>
        <param name="entryNameEncoding">Кодирование, используемое при чтении или записи имен записей в этом архиве. Задайте значение для этого параметра, только если кодирование требуется для взаимодействия с инструментами и библиотеками ZIP-архива, которые не поддерживают кодирование UTF-8 для имен записей.</param>
        <summary>Открывает ZIP-архив по указанному пути в указанном режиме и с использованием указанной кодировки символов для имен записей.</summary>
        <returns>Открытый ZIP-архив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Read>, архив открыт с помощью <xref:System.IO.FileMode.Open?displayProperty=nameWithType> как значение режим файла. Если архив не существует, <xref:System.IO.FileNotFoundException> возникает исключение. Установка `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Read> эквивалентно вызову <xref:System.IO.Compression.ZipFile.OpenRead%2A> метод.  
  
 При задании `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Create>, архив открыт с помощью <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> как значение режим файла. Если архив уже существует, <xref:System.IO.IOException> возникает исключение.  
  
 При задании `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Update>, архив открыт с помощью <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> как значение режим файла. Если архив существует, он открывается. Можно изменить существующие записи и могут быть созданы новые записи. Если архив не существует, будет создан новый архив; Тем не менее, создание ZIP-архив в <xref:System.IO.Compression.ZipArchiveMode.Update> режим не настолько эффективна, насколько создадим ее в <xref:System.IO.Compression.ZipArchiveMode.Create> режиме.  
  
 При открытии архив ZIP-файл для чтения и `entryNameEncoding` присваивается `null`, декодирование имен записей по следующим правилам:  
  
-   При кодировки, флаг (в общего назначения битовый флаг, локальный файл заголовка) не задано, декодируемое имя входа используется текущей кодовой странице системы по умолчанию.  
  
-   Если установлен флаг языковой кодировки, декодируемое имя входа используется UTF-8.  
  
 При открытии архив ZIP-файл для чтения и `entryNameEncoding` задано значение, отличное от `null`, декодирование имен записей по следующим правилам:  
  
-   Если языковая кодировка флаг не установлен, указанного `entryNameEncoding` используется для декодирования имени входа.  
  
-   Если установлен флаг языковой кодировки, декодируемое имя входа используется UTF-8.  
  
 При написании для архивации файлов и `entryNameEncoding` присваивается `null`, имена входа кодируются по следующим правилам:  
  
-   Для имен записей, которые содержат символы вне диапазона ASCII установлен флаг кодировки языка и имен записей, кодируются с помощью UTF-8.  
  
-   Для имен записей, которые содержат только символы ASCII флаг кодировки языка не установлен, и имена входа, кодируются с помощью текущей кодовой странице системы по умолчанию.  
  
 При написании для архивации файлов и `entryNameEncoding` задано значение, отличное от `null`, указанного `entryNameEncoding` , используемый для кодирования имен записей в байтах. Языковая кодировка флаг (в общего назначения битовый флаг, локальный файл заголовка) имеет значение только в том случае, если указанная кодировка имеет кодировку UTF-8.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> имеет значение <see cref="F:System.String.Empty" />, содержит только пробел или по крайней мере один недопустимый символ.  
  
-или- 
 <paramref name="entryNameEncoding" /> Кодировка ли задано строкой символов Юникод отличные от UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="archiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="archiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> не существует или является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> не удалось открыть.  
  
-или- 
 <paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />, однако файл, указанный в <paramref name="archiveFileName" /> уже существует.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="archiveFileName" /> задает каталог.  
  
-или- 
Вызывающий объект не имеет необходимых разрешений на доступ к файлу, указанному в <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> Задает недопустимое значение.</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> имеет значение <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />, однако файл, указанный в <paramref name="archiveFileName" /> не найден.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> не может быть интерпретирован как ZIP-архив.  
  
-или- 
 <paramref name="mode" /> является <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись отсутствует или поврежден и не удается прочитать.  
  
-или- 
 <paramref name="mode" /> является <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, однако запись слишком велик, чтобы поместиться в памяти.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.OpenRead archiveFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">Путь к открываемому архиву, заданный как относительный или абсолютный путь. Относительный путь интерпретируется относительно текущего рабочего каталога.</param>
        <summary>Открывает для чтения ZIP-архив по указанному пути.</summary>
        <returns>Открытый ZIP-архив.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод эквивалентен вызову <xref:System.IO.Compression.ZipFile.Open%2A> метод и параметр `mode` параметр <xref:System.IO.Compression.ZipArchiveMode.Read>. Архив открыт с помощью <xref:System.IO.FileMode.Open?displayProperty=nameWithType> как значение режим файла. Если архив не существует, <xref:System.IO.FileNotFoundException> возникает исключение.  
  
   
  
## Examples  
 Следующий пример показывает способ открытия ZIP-архив для чтения.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> имеет значение <see cref="F:System.String.Empty" />, содержит только пробел или по крайней мере один недопустимый символ.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="archiveFileName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">В <paramref name="archiveFileName" /> длина указанного пути, имени файла или обоих параметров превышает установленное в системе максимальное значение.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> не существует или является недопустимым (например, он соответствует неподключенному диску).</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> не удалось открыть.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="archiveFileName" /> задает каталог.  
  
-или- 
Вызывающий объект не имеет необходимых разрешений на доступ к файлу, указанному в <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Файл, указанный в <paramref name="archiveFileName" /> не найден.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> содержит недопустимый формат.</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> не может быть интерпретирован как ZIP-архив.</exception>
      </Docs>
    </Member>
  </Members>
</Type>