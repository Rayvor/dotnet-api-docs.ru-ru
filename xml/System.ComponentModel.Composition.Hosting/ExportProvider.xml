<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa793273dbcd2a8e8cddc5d93a374542a76bcf24" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63905707" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Получает экспорты, соответствующие заданному объекту <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении экспортов в объекте <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении предоставленных экспортов.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает указанный экспорт.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Параметр типа возвращаемого объекта <see cref="T:System.Lazy`1" />. Имя контракта также является производным от этого параметра типа.</typeparam>
        <summary>Возвращает экспорт с именем контракта, производным от указанного параметра типа. В случае отсутствия ровно одного соответствующего экспорта создается исключение.</summary>
        <returns>Экспорт с именем контракта, производным от указанного параметра типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Существует ноль объектов <see cref="T:System.Lazy`1" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- или - 
Существует несколько объектов <see cref="T:System.Lazy`1" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Параметр типа возвращаемого объекта <see cref="T:System.Lazy`1" />.</typeparam>
        <param name="contractName">Имя контракта возвращаемого объекта <see cref="T:System.Lazy`1" /> либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Возвращает экспорт с указанным именем контракта. В случае отсутствия ровно одного соответствующего экспорта создается исключение.</summary>
        <returns>Экспорт с указанным именем контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Существует ноль объектов <see cref="T:System.Lazy`1" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- или - 
Существует несколько объектов <see cref="T:System.Lazy`1" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Параметр типа возвращаемого объекта <see cref="T:System.Lazy`2" />. Имя контракта также является производным от этого параметра типа.</typeparam>
        <typeparam name="TMetadataView">Тип представления метаданных возвращаемого объекта <see cref="T:System.Lazy`2" />.</typeparam>
        <summary>Возвращает экспорт с именем контракта, производным от указанного параметра типа. В случае отсутствия ровно одного соответствующего экспорта создается исключение.</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Существует ноль объектов <see cref="T:System.Lazy`2" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- или - 
Существует несколько объектов <see cref="T:System.Lazy`2" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> не является допустимым типом представления метаданных.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Параметр типа возвращаемого объекта <see cref="T:System.Lazy`2" />.</typeparam>
        <typeparam name="TMetadataView">Тип представления метаданных возвращаемого объекта <see cref="T:System.Lazy`2" />.</typeparam>
        <param name="contractName">Имя контракта возвращаемого объекта <see cref="T:System.Lazy`2" /> либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Возвращает экспорт с указанным именем контракта. В случае отсутствия ровно одного соответствующего экспорта создается исключение.</summary>
        <returns>Экспорт с указанным именем контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Существует ноль объектов <see cref="T:System.Lazy`2" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- или - 
Существует несколько объектов <see cref="T:System.Lazy`2" /> с именем контракта, являющимся производным <paramref name="T" />, в объекте <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> не является допустимым типом представления метаданных.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает экспортированный объект.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Тип возвращаемого экспортированного объекта. Имя контракта также является производным от этого параметра типа.</typeparam>
        <summary>Возвращает экспортированный объект с именем контракта, производным от указанного параметра типа. В случае отсутствия ровно одного соответствующего экспортированного объекта создается исключение.</summary>
        <returns>Экспортированный объект с именем контракта, производным от указанного параметра типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Имеются ноль экспортируемых объектов с именем контракта, являющимся производным <paramref name="T" />, в <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- или - 
В контейнере <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> имеется несколько экспортированных объектов с именем контракта, являющимся производным типа <paramref name="T" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Базовый экспортированный объект не может быть приведен к типу <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Произошла ошибка при композиции. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> будет содержать коллекцию произошедших ошибок.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип возвращаемого экспортированного объекта.</typeparam>
        <param name="contractName">Имя контракта возвращаемого экспортированного объекта либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Возвращает экспортированный объект с указанным именем контракта. В случае отсутствия ровно одного соответствующего экспортированного объекта создается исключение.</summary>
        <returns>Экспортированный объект с указанным именем контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Имеются ноль экспортируемых объектов с именем контракта, являющимся производным <paramref name="T" />, в <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- или - 
В контейнере <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> имеется несколько экспортированных объектов с именем контракта, являющимся производным типа <paramref name="T" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Базовый экспортированный объект не может быть приведен к типу <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Произошла ошибка при композиции. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> будет содержать коллекцию произошедших ошибок.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает указанный экспортированный объект или значение по умолчанию, если он недоступен.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Тип возвращаемого экспортированного объекта. Имя контракта также является производным от этого параметра типа.</typeparam>
        <summary>Получает экспортированный объект с именем контракта, производным от указанного параметра типа, или значение по умолчанию для указанного типа. При наличии более одного соответствующего экспортированного объекта создается исключение.</summary>
        <returns>Экспортированный объект с именем контракта, производным от типа <paramref name="T" />, если оно найдено; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если экспортированный объект не найден, этот метод возвращает соответствующее значение по умолчанию для `T`; например, нулевое значение для типа integer `false` для логических типов и `null` для ссылочных типов.  
  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">В контейнере <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> имеется несколько экспортированных объектов с именем контракта, являющимся производным типа <paramref name="T" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Базовый экспортированный объект не может быть приведен к типу <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Произошла ошибка при композиции. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> будет содержать коллекцию произошедших ошибок.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип возвращаемого экспортированного объекта.</typeparam>
        <param name="contractName">Имя контракта возвращаемого экспортированного объекта либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Получает экспортированный объект с заданным именем контракта или значение по умолчанию для указанного типа. При наличии более одного соответствующего экспортированного объекта создается исключение.</summary>
        <returns>Экспортированный объект с указанным именем контракта, если оно найдено; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если экспортированный объект не найден, этот метод возвращает соответствующее значение по умолчанию для `T`; например, нулевое значение для типа integer `false` для логических типов и `null` для ссылочных типов.  
  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Существует несколько экспортируемых объектов с названием контракта, указанным в <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Базовый экспортированный объект не может быть приведен к типу <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Произошла ошибка при композиции. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> будет содержать коллекцию произошедших ошибок.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает один или несколько экспортированных объектов.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Тип возвращаемого экспортированного объекта. Имя контракта также является производным от этого параметра типа.</typeparam>
        <summary>Получает экспортированные объекты с именем контракта, производным от указанного параметра типа.</summary>
        <returns>Экспортированные объекты с именем контракта, производным от указанного типа, если оно найдено; в противном случае — пустой объект <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Один или несколько базовых экспортируемых объектов не могут быть приведены к <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Произошла ошибка при композиции. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> будет содержать коллекцию произошедших ошибок.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип возвращаемого экспортированного объекта.</typeparam>
        <param name="contractName">Имя контракта возвращаемых экспортированных объектов либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Получает экспортированные объекты с указанным именем контракта.</summary>
        <returns>Экспортированные объекты с указанным именем контракта, если оно найдено; в противном случае — пустой объект <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Одно или несколько базовых экспортируемых значений не могут быть приведены к <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Произошла ошибка при композиции. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> будет содержать коллекцию произошедших ошибок.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает все экспорты, которые соответствуют заданным условиям.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">Объект, определяющий условия получаемых объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</param>
        <summary>Получает все экспорты, которые соответствуют условиям указанного определения импорта.</summary>
        <returns>Коллекция всех объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, соответствующих условию, определенному параметром <paramref name="definition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Свойство <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> равно <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> и имеется ноль объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, которые соответствуют условиям указанного <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.  
  
- или - 
 Свойство <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> равно <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> или <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> и имеется более одного объекта <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, который соответствует условиям указанного <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="definition" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Объект, определяющий условия получаемых объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</param>
        <param name="atomicComposition">Транзакционный контейнер для композиции.</param>
        <summary>Получает все экспорты, которые соответствуют условиям указанного определения импорта и композиции.</summary>
        <returns>Коллекция всех объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, соответствующих условию, определенному параметрами <paramref name="definition" /> и <paramref name="atomicComposition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Свойство <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> равно <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> и имеется ноль объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, которые соответствуют условиям указанного <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.  
  
- или - 
 Свойство <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> равно <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> или <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> и имеется более одного объекта <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, который соответствует условиям указанного <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="definition" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="atomicComposition" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Параметр типа возвращаемых объектов <see cref="T:System.Lazy`2" />.</param>
        <param name="metadataViewType">Тип представления метаданных возвращаемых объектов <see cref="T:System.Lazy`2" />.</param>
        <param name="contractName">Имя контракта возвращаемого объекта <see cref="T:System.Lazy`2" /> либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Получает экспорты с указанным именем контракта.</summary>
        <returns>Коллекция всех объектов <see cref="T:System.Lazy`2" /> для контракта с именем <paramref name="contractName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `type`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="metadataViewType" /> не является допустимым типом представления метаданных.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Параметр типа возвращаемых объектов <see cref="T:System.Lazy`1" />. Имя контракта также является производным от этого параметра типа.</typeparam>
        <summary>Получает все экспорты с именем контракта, производным от указанного параметра типа.</summary>
        <returns>Объекты <see cref="T:System.Lazy`1" /> с именем контракта, производным от типа <paramref name="T" />, если оно найдено; в противном случае — пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Параметр типа возвращаемых объектов <see cref="T:System.Lazy`1" />.</typeparam>
        <param name="contractName">Имя контракта возвращаемых объектов <see cref="T:System.Lazy`1" /> либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Получает экспорты с указанным именем контракта.</summary>
        <returns>Объекты <see cref="T:System.Lazy`1" /> с указанным именем контракта, если оно найдено; в противном случае — пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Параметр типа возвращаемых объектов <see cref="T:System.Lazy`2" />. Имя контракта также является производным от этого параметра типа.</typeparam>
        <typeparam name="TMetadataView">Тип представления метаданных возвращаемых объектов <see cref="T:System.Lazy`2" />.</typeparam>
        <summary>Получает все экспорты с именем контракта, производным от указанного параметра типа.</summary>
        <returns>Объекты <see cref="T:System.Lazy`2" /> с именем контракта, производным от типа <paramref name="T" />, если оно найдено; в противном случае — пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> не является допустимым типом представления метаданных.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Параметр типа возвращаемых объектов <see cref="T:System.Lazy`2" />. Имя контракта также является производным от этого параметра типа.</typeparam>
        <typeparam name="TMetadataView">Тип представления метаданных возвращаемых объектов <see cref="T:System.Lazy`2" />.</typeparam>
        <param name="contractName">Имя контракта возвращаемых объектов <see cref="T:System.Lazy`2" /> либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Получает экспорты с указанным именем контракта.</summary>
        <returns>Объекты <see cref="T:System.Lazy`2" /> с указанным именем контракта, если оно найдено; в противном случае — пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метод `T`.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойство для сравнения с учетом регистра, лингвистическая.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> ликвидирован.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> не является допустимым типом представления метаданных.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Объект, определяющий условия возвращаемых объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</param>
        <param name="atomicComposition">Транзакционный контейнер для композиции.</param>
        <summary>Получает все экспорты, которые соответствуют ограничению, заданному указанным определением.</summary>
        <returns>Коллекция, которая содержит все элементы экспорта, соответствующие заданному условию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Переопределения этого метода не следует обрабатывать несовпадения как ошибки и не должны вызывать исключения в таких случаях. Например если <xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> — <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne> и имеется ноль <xref:System.ComponentModel.Composition.Primitives.Export> объектов, соответствующих условиям указанного <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>, пустой <xref:System.Collections.Generic.IEnumerable%601> коллекции должны быть возвращены.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект класса <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />, содержащий данные события.</param>
        <summary>Вызывает событие <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition *  -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">Объект, определяющий условия получаемых объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</param>
        <param name="atomicComposition">Транзакционный контейнер для композиции.</param>
        <param name="exports">При возвращении данного метода содержит коллекцию объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, соответствующих условиям, определенным объектом <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, если эти объекты найдены; в противном случае — пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" />. Этот параметр передается неинициализированным.</param>
        <summary>Получает все элементы экспорта, которые соответствуют заданным параметрам импорта.</summary>
        <returns>Значение <see langword="true" />, если значение свойства <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> равно <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> или <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> и имеется ноль объектов <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, соответствующих условиям указанного определения <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; значение <see langword="true" />, если значение свойства <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> равно <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> или <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> и имеется ровно один объект <see cref="T:System.ComponentModel.Composition.Primitives.Export" />, соответствующий условиям указанного определения <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="definition" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>