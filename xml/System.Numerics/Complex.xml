<Type Name="Complex" FullName="System.Numerics.Complex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="58682d11c7e967238f2703be6762ec716d97e626" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75169675" /></Metadata><TypeSignature Language="C#" Value="public struct Complex : IEquatable&lt;System.Numerics.Complex&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Complex extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Numerics.Complex&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Complex" />
  <TypeSignature Language="VB.NET" Value="Public Structure Complex&#xA;Implements IEquatable(Of Complex), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Complex : IEquatable&lt;System::Numerics::Complex&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type Complex = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.Complex&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bbb06-101">Представляет комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-101">Represents a complex number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-102">Комплексное число — это число, которое состоит из вещественной части числа и мнимой части числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-102">A complex number is a number that comprises a real number part and an imaginary number part.</span></span> <span data-ttu-id="bbb06-103">Комплексное число z обычно записывается в виде z = x + yi, где *x* и *y* являются реальными числами, а *i* — мнимой единицей, у которой свойство *i*<sup>2</sup> =-1.</span><span class="sxs-lookup"><span data-stu-id="bbb06-103">A complex number z is usually written in the form z = x + yi, where *x* and *y* are real numbers, and *i* is the imaginary unit that has the property *i*<sup>2</sup> = -1.</span></span> <span data-ttu-id="bbb06-104">Вещественная часть комплексного числа представляется по *оси x*, а мнимая часть комплексного числа представляется по *оси y*.</span><span class="sxs-lookup"><span data-stu-id="bbb06-104">The real part of the complex number is represented by *x*, and the imaginary part of the complex number is represented by *y*.</span></span>  
  
 <span data-ttu-id="bbb06-105">Тип <xref:System.Numerics.Complex> использует декартовую систему координат (реальную, мнимую) при создании экземпляра и манипуляции комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-105">The <xref:System.Numerics.Complex> type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers.</span></span> <span data-ttu-id="bbb06-106">Комплексное число может быть представлено в виде точки в двухмерной системе координат, которая называется комплексной плоскостью.</span><span class="sxs-lookup"><span data-stu-id="bbb06-106">A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane.</span></span> <span data-ttu-id="bbb06-107">Вещественная часть комплексного числа располагается на оси x (горизонтальная ось), а мнимая часть — на оси y (вертикальная ось).</span><span class="sxs-lookup"><span data-stu-id="bbb06-107">The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis).</span></span>  
  
 <span data-ttu-id="bbb06-108">Любую точку в составной плоскости можно также выражать на основе ее абсолютного значения с помощью полярной системы координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-108">Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system.</span></span> <span data-ttu-id="bbb06-109">В полярных координатах точка характеризуется двумя числами:</span><span class="sxs-lookup"><span data-stu-id="bbb06-109">In polar coordinates, a point is characterized by two numbers:</span></span>  
  
-   <span data-ttu-id="bbb06-110">Его величина, представляющая расстояние точки от начала координат (то есть 0, 0 или точка пересечения осей x и y).</span><span class="sxs-lookup"><span data-stu-id="bbb06-110">Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).</span></span>  
  
-   <span data-ttu-id="bbb06-111">Его этап, который является углом между реальной осью и линией, нарисованной от начала координат до точки.</span><span class="sxs-lookup"><span data-stu-id="bbb06-111">Its phase, which is the angle between the real axis and the line drawn from the origin to the point.</span></span>  
  
## <a name="instantiating-a-complex-number"></a><span data-ttu-id="bbb06-112">Создание экземпляра комплексного числа</span><span class="sxs-lookup"><span data-stu-id="bbb06-112">Instantiating a Complex Number</span></span>  
 <span data-ttu-id="bbb06-113">Можно присвоить значение комплексному числу одним из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="bbb06-113">You can assign a value to a complex number in one of the following ways:</span></span>  
  
-   <span data-ttu-id="bbb06-114">Путем передачи двух значений <xref:System.Double> в конструктор.</span><span class="sxs-lookup"><span data-stu-id="bbb06-114">By passing two <xref:System.Double> values to its constructor.</span></span> <span data-ttu-id="bbb06-115">Первое значение представляет реальную часть комплексного числа, а второе значение представляет его мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-115">The first value represents the real part of the complex number, and the second value represents its imaginary part.</span></span> <span data-ttu-id="bbb06-116">Эти значения представляют собой положение комплексного числа в двухмерной декартовой системе координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-116">These values represent the position of the complex number in the two-dimensional Cartesian coordinate system.</span></span>  
  
-   <span data-ttu-id="bbb06-117">Вызвав статический метод (`Shared` в Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>, чтобы создать комплексное число из его полярных координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-117">By calling the static (`Shared` in Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType> method to create a complex number from its polar coordinates.</span></span>  
  
-   <span data-ttu-id="bbb06-118">Путем присвоения <xref:System.Int32>объекту значения <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double> или <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-118">By assigning a <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, or <xref:System.Double> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="bbb06-119">Значение станет действительной частью комплексного числа, а его мнимая часть равна 0.</span><span class="sxs-lookup"><span data-stu-id="bbb06-119">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="bbb06-120">Путем приведения ( C#в) или преобразования (в Visual Basic) <xref:System.Decimal> или <xref:System.Numerics.BigInteger> значение в объект <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-120">By casting (in C#) or converting (in Visual Basic) a <xref:System.Decimal> or <xref:System.Numerics.BigInteger> value to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="bbb06-121">Значение станет действительной частью комплексного числа, а его мнимая часть равна 0.</span><span class="sxs-lookup"><span data-stu-id="bbb06-121">The value becomes the real part of the complex number, and its imaginary part equals 0.</span></span>  
  
-   <span data-ttu-id="bbb06-122">Путем присвоения комплексного числа, возвращаемого методом или оператором, объекту <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-122">By assigning the complex number that is returned by a method or operator to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="bbb06-123">Например, <xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> является статическим методом, который возвращает комплексное число, которое является суммой двух комплексных чисел, а оператор <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> складывает два комплексных числа и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-123">For example, <xref:System.Numerics.Complex.Add%2A?displayProperty=nameWithType> is a static method that returns a complex number that is the sum of two complex numbers, and the <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=nameWithType> operator adds two complex numbers and returns the result.</span></span>  
  
 <span data-ttu-id="bbb06-124">В следующем примере демонстрируется каждый из этих пяти способов присваивания значения комплексному числу.</span><span class="sxs-lookup"><span data-stu-id="bbb06-124">The following example demonstrates each of these five ways of assigning a value to a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/create1.cs#2)]
 [!code-vb[System.Numerics.Complex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/create1.vb#2)]  
  
## <a name="operations-with-complex-numbers"></a><span data-ttu-id="bbb06-125">Операции с комплексными числами</span><span class="sxs-lookup"><span data-stu-id="bbb06-125">Operations with Complex Numbers</span></span>  
 <span data-ttu-id="bbb06-126">Структура <xref:System.Numerics.Complex> в .NET Framework содержит члены, обеспечивающие следующие функциональные возможности:</span><span class="sxs-lookup"><span data-stu-id="bbb06-126">The <xref:System.Numerics.Complex> structure in the .NET Framework includes members that provide the following functionality:</span></span>  
  
-   <span data-ttu-id="bbb06-127">Методы для сравнения двух комплексных чисел, чтобы определить, равны ли они.</span><span class="sxs-lookup"><span data-stu-id="bbb06-127">Methods to compare two complex numbers to determine whether they are equal.</span></span>  
  
-   <span data-ttu-id="bbb06-128">Операторы для выполнения арифметических операций над комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-128">Operators to perform arithmetic operations on complex numbers.</span></span> <span data-ttu-id="bbb06-129">операторы <xref:System.Numerics.Complex> позволяют выполнять сложение, вычитание, умножение, деление и унарное отрицание с комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-129"><xref:System.Numerics.Complex> operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers.</span></span>  
  
-   <span data-ttu-id="bbb06-130">Методы для выполнения других числовых операций с комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-130">Methods to perform other numerical operations on complex numbers.</span></span> <span data-ttu-id="bbb06-131">В дополнение к четырем базовым арифметическим операциям можно возвести комплексное число в указанную степень, найти квадратный корень комплексного числа и получить абсолютное значение комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-131">In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number.</span></span>  
  
-   <span data-ttu-id="bbb06-132">Методы для выполнения тригонометрических операций над комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-132">Methods to perform trigonometric operations on complex numbers.</span></span> <span data-ttu-id="bbb06-133">Например, можно вычислить тангенс угла, представленного комплексным числом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-133">For example, you can calculate the tangent of an angle represented by a complex number.</span></span>  
  
 <span data-ttu-id="bbb06-134">Обратите внимание, что, поскольку свойства <xref:System.Numerics.Complex.Real%2A> и <xref:System.Numerics.Complex.Imaginary%2A> доступны только для чтения, изменить значение существующего объекта <xref:System.Numerics.Complex> нельзя.</span><span class="sxs-lookup"><span data-stu-id="bbb06-134">Note that, because the <xref:System.Numerics.Complex.Real%2A> and  <xref:System.Numerics.Complex.Imaginary%2A> properties are read-only, you cannot modify the value of an existing <xref:System.Numerics.Complex> object.</span></span>  <span data-ttu-id="bbb06-135">Все методы, выполняющие операцию с <xref:System.Numerics.Complex>ным числом, если их возвращаемое значение имеет тип <xref:System.Numerics.Complex>, возвращают новый номер <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-135">All methods that perform an operation on a <xref:System.Numerics.Complex> number, if their return value is of type <xref:System.Numerics.Complex>, return a new <xref:System.Numerics.Complex> number.</span></span>  
  
## <a name="precision-and-complex-numbers"></a><span data-ttu-id="bbb06-136">Точность и комплексные числа</span><span class="sxs-lookup"><span data-stu-id="bbb06-136">Precision and Complex Numbers</span></span>  
 <span data-ttu-id="bbb06-137">Действительная и мнимая части комплексного числа представлены двумя значениями двойной точности с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="bbb06-137">The real and imaginary parts of a complex number are represented by two double-precision floating-point values.</span></span> <span data-ttu-id="bbb06-138">Это означает, что <xref:System.Numerics.Complex> значения, такие как значения с плавающей запятой двойной точности, могут терять точность в результате числовых операций.</span><span class="sxs-lookup"><span data-stu-id="bbb06-138">This means that <xref:System.Numerics.Complex> values, like double-precision floating-point values, can lose precision as a result of numerical operations.</span></span> <span data-ttu-id="bbb06-139">Это означает, что для равенства двух значений <xref:System.Numerics.Complex> может произойти сбой, даже если разница между этими значениями обусловлена потерей точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-139">This means that strict comparisons for equality of two <xref:System.Numerics.Complex> values may fail, even if the difference between the two values is due to a loss of precision.</span></span> <span data-ttu-id="bbb06-140">Для получения дополнительной информации см. <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-140">For more information, see <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="bbb06-141">Например, при выполнении возведения в степень в логарифме числа должно возвращаться исходное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-141">For example, performing exponentiation on the logarithm of a number should return the original number.</span></span> <span data-ttu-id="bbb06-142">Однако в некоторых случаях потери точности значений с плавающей запятой могут привести к незначительным различиям между двумя значениями, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-142">However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#5)]
 [!code-vb[System.Numerics.Complex.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#5)]  
  
 <span data-ttu-id="bbb06-143">Аналогичным образом, следующий пример, который вычисляет квадратный корень из <xref:System.Numerics.Complex> числа, выдает несколько отличающихся результатов для 32-разрядных версий и версии IA64 .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="bbb06-143">Similarly, the following example, which calculates the square root of a <xref:System.Numerics.Complex> number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#6)]
 [!code-vb[System.Numerics.Complex.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#6)]  
  
## <a name="complex-numbers-infinity-and-nan"></a><span data-ttu-id="bbb06-144">Комплексные числа, бесконечность и NaN</span><span class="sxs-lookup"><span data-stu-id="bbb06-144">Complex Numbers, Infinity, and NaN</span></span>  
 <span data-ttu-id="bbb06-145">Действительные и мнимые части комплексного числа представлены <xref:System.Double> значениями.</span><span class="sxs-lookup"><span data-stu-id="bbb06-145">The real and imaginary parts of a complex number are represented by <xref:System.Double> values.</span></span> <span data-ttu-id="bbb06-146">В дополнение к диапазону от <xref:System.Double.MinValue?displayProperty=nameWithType> до <xref:System.Double.MaxValue?displayProperty=nameWithType>, фактическая или мнимая часть комплексного числа может иметь значение <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>или <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-146">In addition to ranging from <xref:System.Double.MinValue?displayProperty=nameWithType> to <xref:System.Double.MaxValue?displayProperty=nameWithType>, the real or imaginary part of a complex number can have a value of <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-147"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>и <xref:System.Double.NaN?displayProperty=nameWithType> все они распространяются в любой арифметической или тригонометрический операции.</span><span class="sxs-lookup"><span data-stu-id="bbb06-147"><xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType> all propagate in any arithmetic or trigonometric operation.</span></span>  
  
 <span data-ttu-id="bbb06-148">В следующем примере деление на <xref:System.Numerics.Complex.Zero> создает комплексное число, действительная и мнимая части которой являются <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-148">In the following example, division by <xref:System.Numerics.Complex.Zero> produces a complex number whose real and imaginary parts are both <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-149">В результате при выполнении умножения с этим значением также создается комплексное число, действительная и мнимая части которых <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-149">As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-150">Аналогично, выполнение умножения, которое приводит к выходу диапазона типа <xref:System.Double>, образует комплексное число, вещественная часть которого <xref:System.Double.NaN?displayProperty=nameWithType>, а мнимая часть — <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-150">Similarly, performing a multiplication that overflows the range of the <xref:System.Double> type produces a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-151">Впоследствии выполнение деления с этим комплексным числом возвращает комплексное число, вещественная часть которого <xref:System.Double.NaN?displayProperty=nameWithType>, а мнимая часть — <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-151">Subsequently performing division with this complex number returns a complex number whose real part is <xref:System.Double.NaN?displayProperty=nameWithType> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/nan1.cs#3)]
 [!code-vb[System.Numerics.Complex.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/nan1.vb#3)]  
  
 <span data-ttu-id="bbb06-152">Математические операции с комплексными числами, которые являются недопустимыми или переполнены диапазоном типа данных <xref:System.Double>, не создают исключение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-152">Mathematical operations with complex numbers that are invalid or that overflow the range of the <xref:System.Double> data type do not throw an exception.</span></span> <span data-ttu-id="bbb06-153">Вместо этого они возвращают <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>или <xref:System.Double.NaN?displayProperty=nameWithType> в следующих случаях:</span><span class="sxs-lookup"><span data-stu-id="bbb06-153">Instead, they return a <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> under the following conditions:</span></span>  
  
-   <span data-ttu-id="bbb06-154">Деление положительного числа на ноль возвращает <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-154">The division of a positive number by zero returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="bbb06-155">Любая операция, которая переполняет верхнюю границу <xref:System.Double>ного типа данных, возвращает <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-155">Any operation that overflows the upper bound of the <xref:System.Double> data type returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="bbb06-156">Деление отрицательного числа на ноль возвращает <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-156">The division of a negative number by zero returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="bbb06-157">Любая операция, которая переполняет нижнюю границу <xref:System.Double>ного типа данных, возвращает <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-157">Any operation that overflows the lower bound of the <xref:System.Double> data type returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="bbb06-158">Деление нуля на ноль возвращает <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-158">The division of a zero by zero returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="bbb06-159">Любая операция, выполняемая над операндами, значения которых <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>или <xref:System.Double.NaN?displayProperty=nameWithType> возвращает <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>или <xref:System.Double.NaN?displayProperty=nameWithType>в зависимости от конкретной операции.</span><span class="sxs-lookup"><span data-stu-id="bbb06-159">Any operation that is performed on operands whose values are <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType> returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, or <xref:System.Double.NaN?displayProperty=nameWithType>, depending on the specific operation.</span></span>  
  
 <span data-ttu-id="bbb06-160">Обратите внимание, что это относится к любым промежуточным вычислениям, выполняемым методом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-160">Note that this applies to any intermediate calculations performed by a method.</span></span> <span data-ttu-id="bbb06-161">Например, умножение `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` использует формулу (AC-BD) + (AD + BC).</span><span class="sxs-lookup"><span data-stu-id="bbb06-161">For example, the multiplication of `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` uses the formula (ac - bd) + (ad + bc)i.</span></span> <span data-ttu-id="bbb06-162">Вычисление реального компонента, полученное в результате умножения, вычисляет выражение 9e308 \* 2,5-9e308 \* 3,5.</span><span class="sxs-lookup"><span data-stu-id="bbb06-162">The calculation of the real component that results from the multiplication evaluates the expression 9e308 \* 2.5 - 9e308 \* 3.5.</span></span> <span data-ttu-id="bbb06-163">Каждое промежуточное умножение в этом выражении возвращает <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, а попытка вычесть <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> из <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> возвращает <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-163">Each intermediate multiplication in this expression returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and the attempt to subtract <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> from <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
## <a name="formatting-a-complex-number"></a><span data-ttu-id="bbb06-164">Форматирование комплексного числа</span><span class="sxs-lookup"><span data-stu-id="bbb06-164">Formatting a Complex Number</span></span>  
 <span data-ttu-id="bbb06-165">По умолчанию строковое представление комплексного числа принимает форму `(`*реальных*`,` *мнимой*`)`, где *вещественная* и *мнимая* части представляют собой строковые представления значений <xref:System.Double>, образующих реальные и мнимые компоненты комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-165">By default, the string representation of a complex number takes the form `(`*real*`,` *imaginary*`)`, where *real* and *imaginary* are the string representations of the <xref:System.Double> values that form the complex number's real and imaginary components.</span></span> <span data-ttu-id="bbb06-166">Некоторые перегрузки метода <xref:System.Numerics.Complex.ToString%2A> позволяют настраивать строковые представления этих <xref:System.Double> значений для отражения соглашений о форматировании для конкретного языка и региональных параметров или для отображения в определенном формате, определяемом строкой стандартного или пользовательского числового формата.</span><span class="sxs-lookup"><span data-stu-id="bbb06-166">Some overloads of the <xref:System.Numerics.Complex.ToString%2A> method allow customization of the string representations of these <xref:System.Double> values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string.</span></span> <span data-ttu-id="bbb06-167">(Дополнительные сведения см. в разделе [строки стандартных числовых форматов](~/docs/standard/base-types/standard-numeric-format-strings.md) и [строки настраиваемых числовых форматов](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="bbb06-167">(For more information, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
 <span data-ttu-id="bbb06-168">Один из наиболее распространенных способов выражения строкового представления комплексного числа принимает форму a + bi, где a — реальный компонент комплексного числа, а b — мнимой компонент комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-168">One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number's real component, and b is the complex number's imaginary component.</span></span> <span data-ttu-id="bbb06-169">В электрической технике комплексное число чаще всего выражается в виде + BJ.</span><span class="sxs-lookup"><span data-stu-id="bbb06-169">In electrical engineering, a complex number is most commonly expressed as a + bj.</span></span> <span data-ttu-id="bbb06-170">Можно вернуть строковое представление комплексного числа в любой из этих двух форм.</span><span class="sxs-lookup"><span data-stu-id="bbb06-170">You can return the string representation of a complex number in either of these two forms.</span></span> <span data-ttu-id="bbb06-171">Для этого определите поставщик настраиваемого формата, реализовав интерфейсы <xref:System.ICustomFormatter> и <xref:System.IFormatProvider>, а затем вызовите метод <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-171">To do this, define a custom format provider by implementing the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces, and then call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="bbb06-172">В следующем примере определяется класс `ComplexFormatter`, представляющий комплексное число в виде строки в виде + BI или a + BJ.</span><span class="sxs-lookup"><span data-stu-id="bbb06-172">The following example defines a `ComplexFormatter` class that represents a complex number as a string in the form of either a + bi or a + bj.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#1)]
 [!code-vb[System.Numerics.Complex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#1)]  
  
 <span data-ttu-id="bbb06-173">В следующем примере этот пользовательский модуль форматирования используется для отображения строкового представления комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-173">The following example then uses this custom formatter to display the string representation of a complex number.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#4)]
 [!code-vb[System.Numerics.Complex.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Complex (double real, double imaginary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 real, float64 imaginary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (real As Double, imaginary As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Complex(double real, double imaginary);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Complex : double * double -&gt; System.Numerics.Complex" Usage="new System.Numerics.Complex (real, imaginary)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="real" Type="System.Double" />
        <Parameter Name="imaginary" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="real"><span data-ttu-id="bbb06-174">Действительная часть комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-174">The real part of the complex number.</span></span></param>
        <param name="imaginary"><span data-ttu-id="bbb06-175">Мнимая часть комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-175">The imaginary part of the complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-176">Инициализирует новый экземпляр структуры <see cref="T:System.Numerics.Complex" /> с использованием заданных значений действительного и мнимого чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-176">Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-177">Аргументы `real` или `imaginary` могут потерять точность, если они являются типами данных, для которых требуется явное приведение к <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-177">The `real` or `imaginary` arguments may lose precision if they are data types that require an explicit cast to <xref:System.Double>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-178">В следующем примере создаются два комплексных числа, а затем они используются в операциях сложения, вычитания, умножения и деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-178">The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Numerics.Complex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Complex) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Abs : System.Numerics.Complex -&gt; double" Usage="System.Numerics.Complex.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-179">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-179">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-180">Возвращает абсолютное значение (или величину) комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-180">Gets the absolute value (or magnitude) of a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-181">Абсолютное значение параметра <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-181">The absolute value of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-182">Абсолютное значение комплексного числа эквивалентно его свойству <xref:System.Numerics.Complex.Magnitude%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-182">The absolute value of a complex number is equivalent to its <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span> <span data-ttu-id="bbb06-183">Абсолютное значение вещественного числа a + bi вычисляется следующим образом:</span><span class="sxs-lookup"><span data-stu-id="bbb06-183">The absolute value of a real number a + bi is calculated as follows:</span></span>  
  
-   <span data-ttu-id="bbb06-184">Если b = 0, результат равен 0.</span><span class="sxs-lookup"><span data-stu-id="bbb06-184">If b = 0, the result is 0.</span></span>  
  
-   <span data-ttu-id="bbb06-185">Если > б, то результатом является \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>).</span><span class="sxs-lookup"><span data-stu-id="bbb06-185">If a > b, the result is a \*<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + b<sup>2</sup>/a<sup>2</sup>).</span></span>  
  
-   <span data-ttu-id="bbb06-186">Если b > a, результатом является b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + a<sup>2</sup>/b<sup>2</sup>).</span><span class="sxs-lookup"><span data-stu-id="bbb06-186">If b > a, the result is b \* <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(1 + a<sup>2</sup>/b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="bbb06-187">Если вычисление абсолютного значения приводит к переполнению, метод возвращает либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-187">If the calculation of the absolute value results in an overflow, the method returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-188">Если свойство <xref:System.Numerics.Complex.Real%2A> или <xref:System.Numerics.Complex.Imaginary%2A> имеет значение <xref:System.Double.NaN?displayProperty=nameWithType> а другое свойство не является ни <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, ни <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, метод возвращает <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-188">If either the <xref:System.Numerics.Complex.Real%2A> or <xref:System.Numerics.Complex.Imaginary%2A> property is <xref:System.Double.NaN?displayProperty=nameWithType> and the other property is neither <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> nor <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-189">В следующем примере вычисляется абсолютное значение комплексного числа и демонстрируется, что оно эквивалентно значению свойства <xref:System.Numerics.Complex.Magnitude%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-189">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Acos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Acos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Acos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Acos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Acos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-190">Комплексное число, представляющее косинус.</span><span class="sxs-lookup"><span data-stu-id="bbb06-190">A complex number that represents a cosine.</span></span></param>
        <summary><span data-ttu-id="bbb06-191">Возвращает угол, представляющий собой арккосинус указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-191">Returns the angle that is the arc cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-192">Угол (в радианах), представляющий собой арккосинус параметра <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-192">The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-193">Метод <xref:System.Numerics.Complex.Acos%2A> для комплексных чисел соответствует методу <xref:System.Math.Acos%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-193">The <xref:System.Numerics.Complex.Acos%2A> method for complex numbers corresponds to the <xref:System.Math.Acos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-194">В методе <xref:System.Numerics.Complex.Acos%2A> используется следующая формула:</span><span class="sxs-lookup"><span data-stu-id="bbb06-194">The <xref:System.Numerics.Complex.Acos%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="bbb06-195">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span><span class="sxs-lookup"><span data-stu-id="bbb06-195">(-<xref:System.Numerics.Complex.ImaginaryOne>) \* <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>\*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` \* `value`)))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="bbb06-196">В следующем примере показан метод <xref:System.Numerics.Complex.Acos%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-196">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="bbb06-197">Он показывает, что передача значения, возвращаемого методом <xref:System.Numerics.Complex.Acos%2A>, в метод <xref:System.Numerics.Complex.Cos%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-197">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Acos(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <Docs>
        <summary><span data-ttu-id="bbb06-198">Добавляет заданное число к другому заданному числу, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-198">Adds a specified number to another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks
 <span data-ttu-id="bbb06-199">Методы <xref:System.Numerics.Complex.Add%2A> позволяют выполнять операции сложения с комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-199">The <xref:System.Numerics.Complex.Add%2A> methods allow performing addition operations that involve complex numbers.</span></span> 
  
 <span data-ttu-id="bbb06-200">Если вызов метода приводит к переполнению в действительном или мнимом компоненте, то значение компонента будет либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-200">If the method call results in an overflow in either the real or imaginary component, the value of the component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bbb06-201">Языки, не поддерживающие пользовательские операторы, могут использовать метод <xref:System.Numerics.Complex.Add%2A> для выполнения сложения с комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-201">Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Add%2A> method to perform addition with complex numbers.</span></span>  

 <span data-ttu-id="bbb06-202">Методы <xref:System.Numerics.Complex.Add%2A>, которые получают одно значение Double, более эффективны, чем методы, принимающие два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-202">The <xref:System.Numerics.Complex.Add%2A> methods that receive one double are more efficient than the methods that receive two complex numbers.</span></span>
  
## Examples  

 <span data-ttu-id="bbb06-203">В следующем примере показано сложение с комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-203">The following example illustrates addition with complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add1.cs#1)]
 [!code-vb[System.Numerics.Complex.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add1.vb#1)]  
          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Add : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-204">Действительное значение двойной точности для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-204">The double-precision real value to add.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-205">Комплексное значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-205">The complex value to add.</span></span></param>
        <summary><span data-ttu-id="bbb06-206">Добавляет действительное число двойной точности к комплексному числу и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-206">Adds a double-precision real number to a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-207">Сумма <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-207">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="bbb06-208">Добавление вещественного числа (которое можно рассматривать как комплексное число a + 0i) и комплексное число (c + di) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-208">The addition of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="bbb06-209">(a + c) + di</span><span class="sxs-lookup"><span data-stu-id="bbb06-209">(a + c) + di</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-210">Комплексное значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-210">The complex value to add.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-211">Действительное значение двойной точности для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-211">The double-precision real value to add.</span></span></param>
        <summary><span data-ttu-id="bbb06-212">Добавляет комплексное число к действительному числу двойной точности и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-212">Adds a complex number to a double-precision real number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-213">Сумма <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-213">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="bbb06-214">Добавление комплексного числа (a + BI) и вещественного числа (которое можно рассматривать как комплексное число c + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-214">The addition of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-215">(a + c) + BI</span><span class="sxs-lookup"><span data-stu-id="bbb06-215">(a + c) + bi</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Add(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Add(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-216">Первое комплексное число для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-216">The first complex number to add.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-217">Второе комплексное число для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-217">The second complex number to add.</span></span></param>
        <summary><span data-ttu-id="bbb06-218">Складывает два комплексных числа и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-218">Adds two complex numbers and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-219">Сумма <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-219">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-220">Добавление комплексного числа, + BI и второго комплексного числа, c + di, принимает следующую форму:</span><span class="sxs-lookup"><span data-stu-id="bbb06-220">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="bbb06-221">(a + c) + (б + d) i.</span><span class="sxs-lookup"><span data-stu-id="bbb06-221">(a + c) + (b + d)i.</span></span>  

  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Asin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Asin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Asin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Asin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Asin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Asin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-222">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-222">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-223">Возвращает угол, представляющий собой арксинус указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-223">Returns the angle that is the arc sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-224">Угол, представляющий собой арксинус параметра <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-224">The angle which is the arc sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-225">Метод <xref:System.Numerics.Complex.Asin%2A> для комплексных чисел соответствует методу <xref:System.Math.Asin%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-225">The <xref:System.Numerics.Complex.Asin%2A> method for complex numbers corresponds to the <xref:System.Math.Asin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-226">В методе <xref:System.Numerics.Complex.Asin%2A> используется следующая формула:</span><span class="sxs-lookup"><span data-stu-id="bbb06-226">The <xref:System.Numerics.Complex.Asin%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="bbb06-227">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* value + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> значение \*))</span><span class="sxs-lookup"><span data-stu-id="bbb06-227">-<xref:System.Numerics.Complex.ImaginaryOne> \* <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> \* value + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - value \* value))</span></span>    
  
   
  
## Examples  
 <span data-ttu-id="bbb06-228">В следующем примере показан метод <xref:System.Numerics.Complex.Asin%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-228">The following example illustrates the <xref:System.Numerics.Complex.Asin%2A> method.</span></span> <span data-ttu-id="bbb06-229">Он показывает, что передача значения, возвращаемого методом <xref:System.Numerics.Complex.Asin%2A>, в метод <xref:System.Numerics.Complex.Sin%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-229">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Asin(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Atan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Atan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Atan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Atan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Atan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-230">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-230">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-231">Возвращает угол, представляющий собой арктангенс указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-231">Returns the angle that is the arc tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-232">Угол, представляющий собой арктангенс параметра <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-232">The angle that is the arc tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-233">Метод <xref:System.Numerics.Complex.Atan%2A> для комплексных чисел соответствует методу <xref:System.Math.Atan%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-233">The <xref:System.Numerics.Complex.Atan%2A> method for complex numbers corresponds to the <xref:System.Math.Atan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-234">В методе <xref:System.Numerics.Complex.Atan%2A> используется следующая формула:</span><span class="sxs-lookup"><span data-stu-id="bbb06-234">The <xref:System.Numerics.Complex.Atan%2A> method uses the following formula:</span></span>  
  
 <span data-ttu-id="bbb06-235">(<xref:System.Numerics.Complex.ImaginaryOne>/создать сложный (2.0, 0,0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> \* Value) — <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + Имагинарйоне \* Value))</span><span class="sxs-lookup"><span data-stu-id="bbb06-235">(<xref:System.Numerics.Complex.ImaginaryOne> / new Complex(2.0, 0.0)) \* (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> \* value) - <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne \* value))</span></span>   
  
   
  
## Examples  
 <span data-ttu-id="bbb06-236">В следующем примере показан метод <xref:System.Numerics.Complex.Atan%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-236">The following example illustrates the <xref:System.Numerics.Complex.Atan%2A> method.</span></span> <span data-ttu-id="bbb06-237">Он показывает, что передача значения, возвращаемого методом <xref:System.Numerics.Complex.Atan%2A>, в метод <xref:System.Numerics.Complex.Tan%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-237">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Atan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Conjugate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Conjugate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Conjugate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Conjugate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Conjugate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Conjugate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-238">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-238">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-239">Вычисляет сопряженное число комплексного числа и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-239">Computes the conjugate of a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-240">Сопряженное число для <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-240">The conjugate of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-241">Сопряжение комплексного числа инвертирует знак мнимого компонента; то есть к мнимому компоненту применяется унарное отрицание.</span><span class="sxs-lookup"><span data-stu-id="bbb06-241">The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component.</span></span> <span data-ttu-id="bbb06-242">Если a + BI является комплексным числом, его сопряжение — это-BI.</span><span class="sxs-lookup"><span data-stu-id="bbb06-242">If a + bi is a complex number, its conjugate is a - bi.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-243">В следующем примере показано сопряженное число двух комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-243">The following example displays the conjugate of two complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Conjugate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.conjugate/cs/conjugate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Conjugate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.conjugate/vb/conjugate1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cos (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cos(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cos(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cos(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cos : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cos value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-244">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-244">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-245">Возвращает косинус указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-245">Returns the cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-246">Косинус <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-246">The cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-247">Метод <xref:System.Numerics.Complex.Cos%2A> для комплексных чисел соответствует методу <xref:System.Math.Cos%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-247">The <xref:System.Numerics.Complex.Cos%2A> method for complex numbers corresponds to the <xref:System.Math.Cos%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-248">Метод <xref:System.Numerics.Complex.Cos%2A> использует следующую формулу для вычисления косинуса комплексного числа a + bi:</span><span class="sxs-lookup"><span data-stu-id="bbb06-248">The <xref:System.Numerics.Complex.Cos%2A> method uses the following formula to calculate the cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="bbb06-249">(<xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Cosh%2A>(б),-(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Sinh%2A>(b)))</span><span class="sxs-lookup"><span data-stu-id="bbb06-249">(<xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Cosh%2A>(b), -(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Sinh%2A>(b)))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-250">В следующем примере показан метод <xref:System.Numerics.Complex.Acos%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-250">The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method.</span></span> <span data-ttu-id="bbb06-251">Он показывает, что передача значения, возвращаемого методом <xref:System.Numerics.Complex.Acos%2A>, в метод <xref:System.Numerics.Complex.Cos%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-251">It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]
 [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Acos(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Cos(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Cosh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Cosh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Cosh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Cosh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Cosh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-252">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-252">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-253">Возвращает гиперболический косинус указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-253">Returns the hyperbolic cosine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-254">Гиперболический косинус <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-254">The hyperbolic cosine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-255">Метод <xref:System.Numerics.Complex.Cosh%2A> для комплексных чисел соответствует методу <xref:System.Math.Cosh%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-255">The <xref:System.Numerics.Complex.Cosh%2A> method for complex numbers corresponds to the <xref:System.Math.Cosh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-256">Метод <xref:System.Numerics.Complex.Cosh%2A> использует следующую формулу для вычисления гиперболического косинус комплексного числа a + bi:</span><span class="sxs-lookup"><span data-stu-id="bbb06-256">The <xref:System.Numerics.Complex.Cosh%2A> method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="bbb06-257">(<xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Cos%2A>(б), <xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="bbb06-257">(<xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Cosh(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <Docs>
        <summary><span data-ttu-id="bbb06-258">Делит заданное число на другое заданное число, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-258">Divides a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
## Remarks
 <span data-ttu-id="bbb06-259">Методы <xref:System.Numerics.Complex.Divide%2A> позволяют выполнять операции деления, затрагивающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-259">The <xref:System.Numerics.Complex.Divide%2A> methods allow performing division operations that involve complex numbers.</span></span> 
  
 <span data-ttu-id="bbb06-260">Если вычисление частного результата приводит к переполнению в действительном или мнимом компоненте, то значением этого компонента будет либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-260">If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bbb06-261">Метод <xref:System.Numerics.Complex.Divide%2A> может использоваться в языках, которые не поддерживают пользовательские операторы.</span><span class="sxs-lookup"><span data-stu-id="bbb06-261">The <xref:System.Numerics.Complex.Divide%2A> method can be used by languages that do not support custom operators.</span></span> <span data-ttu-id="bbb06-262">Его поведение идентично поведению деления с помощью оператора деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-262">Its behavior is identical to division using the division operator.</span></span>  

 <span data-ttu-id="bbb06-263">Методы <xref:System.Numerics.Complex.Divide%2A>, которые получают одно значение Double, более эффективны, чем методы, принимающие два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-263">The <xref:System.Numerics.Complex.Divide%2A> methods that receive one double are more efficient than the methods that receive two complex numbers.</span></span>

## Examples  
 <span data-ttu-id="bbb06-264">В следующем примере комплексное число делится на каждый элемент в массиве комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-264">The following example divides a complex number by each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide1.cs#1)]
 [!code-vb[System.Numerics.Complex.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide1.vb#1)]  
   
          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (double dividend, System.Numerics.Complex divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(float64 dividend, valuetype System.Numerics.Complex divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Double, divisor As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(double dividend, System::Numerics::Complex divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="divisor" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="bbb06-265">Действительное число двойной точности для деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-265">The double-precision real number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="bbb06-266">Комплексное число-знаменатель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-266">The complex number to divide by.</span></span></param>
        <summary><span data-ttu-id="bbb06-267">Делит действительное число двойной точности на комплексное число и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-267">Divides one double-precision real number by a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-268">Частное от деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-268">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="bbb06-269">Деление вещественного числа (которое можно рассматривать как комплексное число a + 0i) и комплексное число (c + di) принимает следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-269">The division of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

 <span data-ttu-id="bbb06-270">(AC/(c<sup>2</sup> + d<sup>2</sup>)) + (AD/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-270">(ac / (c<sup>2</sup> + d<sup>2</sup>)) + (ad / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(valuetype System.Numerics.Complex dividend, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Complex, divisor As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(System::Numerics::Complex dividend, double divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="divisor" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="bbb06-271">Комплексное число-числитель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-271">The complex number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="bbb06-272">Действительное число двойной точности, которое будет использоваться как делитель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-272">The double-precision real number to divide by.</span></span></param>
        <summary><span data-ttu-id="bbb06-273">Делит комплексное число на действительное число двойной точности и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-273">Divides one complex number by a double-precision real number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-274">Частное от деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-274">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="bbb06-275">Деление комплексного числа (a + BI) и вещественного числа (которое можно рассматривать как комплексное число c + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-275">The division of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

 <span data-ttu-id="bbb06-276">(AC/c<sup>2</sup>) + (BC/c<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-276">(ac / c<sup>2</sup>) + (bc / c<sup>2</sup>)i</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Divide(valuetype System.Numerics.Complex dividend, valuetype System.Numerics.Complex divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (dividend As Complex, divisor As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Divide(System::Numerics::Complex dividend, System::Numerics::Complex divisor);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Divide (dividend, divisor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.Complex" />
        <Parameter Name="divisor" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="dividend"><span data-ttu-id="bbb06-277">Комплексное число-числитель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-277">The complex number to be divided.</span></span></param>
        <param name="divisor"><span data-ttu-id="bbb06-278">Комплексное число-знаменатель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-278">The complex number to divide by.</span></span></param>
        <summary><span data-ttu-id="bbb06-279">Делит одно комплексное число на другое и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-279">Divides one complex number by another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-280">Частное от деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-280">The quotient of the division.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-281">Деление комплексного числа, a + bi, на второе комплексное число, число, c + di, принимает следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-281">The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="bbb06-282">((AC + BD)/(c<sup>2</sup> + d<sup>2</sup>)) + ((BC-AD)/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-282">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>  
    
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbb06-283">Возвращает значение, указывающее, равны ли два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-283">Returns a value that indicates whether two complex numbers are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.Complex -&gt; bool" Usage="complex.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-284">Комплексное число для сравнения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-284">The complex number to compare.</span></span></param>
        <summary><span data-ttu-id="bbb06-285">Возвращает значение, указывающее, равны ли текущий экземпляр и указанное комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-285">Returns a value that indicates whether the current instance and a specified complex number have the same value.</span></span></summary>
        <returns><span data-ttu-id="bbb06-286">Значение <see langword="true" />, если значения комплексного числа и <paramref name="value" /> совпадают; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-286"><see langword="true" /> if this complex number and <paramref name="value" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-287">Метод <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> предоставляет реализацию <xref:System.IEquatable%601> для структуры <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-287">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method provides the <xref:System.IEquatable%601> implementation for the <xref:System.Numerics.Complex> structure.</span></span> <span data-ttu-id="bbb06-288">Он работает немного лучше, чем метод <xref:System.Numerics.Complex.Equals%28System.Object%29>, поскольку ему не нужно преобразовывать его параметр в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-288">It performs slightly better than <xref:System.Numerics.Complex.Equals%28System.Object%29> method because it does not have to convert its parameter to a complex number.</span></span>  
  
 <span data-ttu-id="bbb06-289">Два комплексных числа равны, если их реальные части равны, а их мнимые части равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-289">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="bbb06-290">Метод <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> эквивалентен следующему выражению:</span><span class="sxs-lookup"><span data-stu-id="bbb06-290">The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#1)]
 [!code-vb[System.Numerics.Complex.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="bbb06-291">Используйте метод <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> с осторожностью, так как два значения, которые являются непохожими, могут считаться неравными из-за разной точности их реальных и мнимых компонентов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-291">Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components.</span></span> <span data-ttu-id="bbb06-292">В следующем примере сообщается, что <c>(3,33333, 0,142857)</c> и <c>(10/3, 1/7)</c> не равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-292">The following example reports that <c>(3.33333, 0.142857)</c> and <c>(10/3, 1/7)</c> are not equal.</span></span>  
  
<span data-ttu-id="bbb06-293">[! code — CSharp[System. Numerics. Complex. Equals # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)] [! code-VB[System. Numerics. Complex. равно # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)]</span><span class="sxs-lookup"><span data-stu-id="bbb06-293">[!code-csharp[System.Numerics.Complex.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#4)] [!code-vb[System.Numerics.Complex.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#4)]</span></span> 
<span data-ttu-id="bbb06-294">Одним из рекомендуемых способов является определение приемлемого поля разности между двумя значениями (например, .01% одного из значений "вещественных и мнимых компонентов") вместо сравнения значений на равенство.</span><span class="sxs-lookup"><span data-stu-id="bbb06-294">One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality.</span></span> <span data-ttu-id="bbb06-295">Если абсолютное значение разницы между двумя значениями меньше или равно этому полю, разница, скорее всего, будет вызвана разницей в точности, и поэтому значения, скорее всего, будут равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-295">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision, and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="bbb06-296">В следующем примере этот метод используется для сравнения двух сложных значений, которые в предыдущем примере кода не равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-296">The following example uses this technique to compare the two complex values that the previous code example found to be unequal.</span></span> <span data-ttu-id="bbb06-297">Он находит два комплексных числа равными.</span><span class="sxs-lookup"><span data-stu-id="bbb06-297">It finds the two complex numbers to be equal.</span></span>  
  
<span data-ttu-id="bbb06-298">[! code-c# CSharp[System. Numerics. Complex. Equals # 5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)] [! code-VB[System. Numerics. сложный. Equals # 5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</span><span class="sxs-lookup"><span data-stu-id="bbb06-298">[!code-csharp[System.Numerics.Complex.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision1.cs#5)] [!code-vb[System.Numerics.Complex.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision1.vb#5)]</span></span></para></block>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="complex.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bbb06-299">Объект для сравнения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-299">The object to compare.</span></span></param>
        <summary><span data-ttu-id="bbb06-300">Возвращает значение, определяющее, равны ли текущий экземпляр и указанный объект.</span><span class="sxs-lookup"><span data-stu-id="bbb06-300">Returns a value that indicates whether the current instance and a specified object have the same value.</span></span></summary>
        <returns><span data-ttu-id="bbb06-301">Значение <see langword="true" />, если параметр <paramref name="obj" /> является объектом <see cref="T:System.Numerics.Complex" /> или типом, поддерживающим неявное преобразование в объект <see cref="T:System.Numerics.Complex" />, а его значение равняется текущему объекту <see cref="T:System.Numerics.Complex" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-301"><see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-302">Два комплексных числа равны, если их реальные части равны, а их мнимые части равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-302">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="bbb06-303">Метод <xref:System.Numerics.Complex.Equals%28System.Object%29> эквивалентен следующему выражению:</span><span class="sxs-lookup"><span data-stu-id="bbb06-303">The <xref:System.Numerics.Complex.Equals%28System.Object%29> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#2)]
 [!code-vb[System.Numerics.Complex.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#2)]  
  
 <span data-ttu-id="bbb06-304">Если параметр `obj` не является <xref:System.Numerics.Complex>ным объектом, но является типом данных, для которого определено неявное преобразование, метод <xref:System.Numerics.Complex.Equals%28System.Object%29> преобразует `obj` в объект <xref:System.Numerics.Complex>, вещественная часть которого равна значению `obj`, а мнимая часть равна нулю, прежде чем выполнять сравнение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-304">If the `obj` parameter is not a <xref:System.Numerics.Complex> object, but it is a data type for which an implicit conversion is defined, the <xref:System.Numerics.Complex.Equals%28System.Object%29> method converts `obj` to a <xref:System.Numerics.Complex> object whose real part is equal to the value of `obj` and whose imaginary part is equal to zero before it performs the comparison.</span></span> <span data-ttu-id="bbb06-305">В следующем примере показано, как найти комплексное число и значение с плавающей запятой двойной точности равно.</span><span class="sxs-lookup"><span data-stu-id="bbb06-305">The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals3.cs#6)]
 [!code-vb[System.Numerics.Complex.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals3.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="bbb06-306">Используйте метод <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> с осторожностью, так как два значения, которые являются непохожими, могут считаться неравными из-за разной точности их реальных и мнимых компонентов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-306">Use the <see cref="M:System.Numerics.Complex.Equals(System.Numerics.Complex)" /> method with caution, because two values that are apparently equivalent can be considered unequal due to the differing precision of their real and imaginary components.</span></span> <span data-ttu-id="bbb06-307">Проблему можно обменять, если перед выполнением сравнения необходимо преобразовать <paramref name="obj" /> в <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-307">The problem can be accentuated if <paramref name="obj" /> must be converted to a <see cref="T:System.Double" /> before performing the comparison.</span></span> <span data-ttu-id="bbb06-308">В следующем примере сравнивается комплексное число, реальный компонент которого выглядит так же, как <see cref="T:System.Single" /> значение с этим <see cref="T:System.Single" /> значением.</span><span class="sxs-lookup"><span data-stu-id="bbb06-308">The following example compares a complex number whose real component appears to be equal to a <see cref="T:System.Single" /> value with that <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="bbb06-309">Как видно из выходных данных, сравнение на равенство возвращает <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-309">As the output shows, the comparison for equality returns <see langword="False" />.</span></span>  
  
<span data-ttu-id="bbb06-310">[! code — CSharp[System. Numerics. Complex. Equals # 8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)] [! code-VB[System. Numerics. Complex. Equals # 8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)]</span><span class="sxs-lookup"><span data-stu-id="bbb06-310">[!code-csharp[System.Numerics.Complex.Equals#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals4.cs#8)] [!code-vb[System.Numerics.Complex.Equals#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals4.vb#8)]</span></span> 
<span data-ttu-id="bbb06-311">Одним из рекомендуемых способов является определение приемлемого поля разности между двумя значениями (например, .01% одного из значений "вещественных и мнимых компонентов") вместо сравнения значений на равенство.</span><span class="sxs-lookup"><span data-stu-id="bbb06-311">One recommended technique is to define an acceptable margin of difference between the two values (such as .01% of one of the values' real and imaginary components) instead of comparing the values for equality.</span></span> <span data-ttu-id="bbb06-312">Если абсолютное значение разницы между двумя значениями меньше или равно этому полю, разница, скорее всего, будет обусловлена различием в точности и, следовательно, значения, скорее всего, будут равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-312">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to a difference in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="bbb06-313">В следующем примере этот метод используется для сравнения двух значений, которые в предыдущем примере кода не равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-313">The following example uses this technique to compare the two values that the previous code example found to be unequal.</span></span> <span data-ttu-id="bbb06-314">Теперь они будут считаться равными.</span><span class="sxs-lookup"><span data-stu-id="bbb06-314">It now finds them to be equal.</span></span>  
  
<span data-ttu-id="bbb06-315">[! code — CSharp[System. Numerics. Complex. Equals # 7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)] [! code-VB[System. Numerics. Complex. Equals # 7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</span><span class="sxs-lookup"><span data-stu-id="bbb06-315">[!code-csharp[System.Numerics.Complex.Equals#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/precision2.cs#7)] [!code-vb[System.Numerics.Complex.Equals#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/precision2.vb#7)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Exp (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Exp(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Exp(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Exp : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Exp value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-316">Комплексное число, определяющее степень.</span><span class="sxs-lookup"><span data-stu-id="bbb06-316">A complex number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="bbb06-317">Возвращает число <see langword="e" />, возведенное в степень, определяемую комплексным числом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-317">Returns <see langword="e" /> raised to the power specified by a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-318">Число <see langword="e" />, возведенное в степень <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-318">The number <see langword="e" /> raised to the power <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-319">Используйте метод <xref:System.Numerics.Complex.Pow%2A> для вычисления степеней других базовых баз.</span><span class="sxs-lookup"><span data-stu-id="bbb06-319">Use the <xref:System.Numerics.Complex.Pow%2A> method to calculate the powers of other bases.</span></span>  
  
 <span data-ttu-id="bbb06-320">Метод <xref:System.Numerics.Complex.Exp%2A> для комплексных чисел соответствует методу <xref:System.Math.Exp%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-320">The <xref:System.Numerics.Complex.Exp%2A> method for complex numbers corresponds to the <xref:System.Math.Exp%2A?displayProperty=nameWithType> method for real numbers.</span></span> <span data-ttu-id="bbb06-321"><xref:System.Numerics.Complex.Exp%2A> является инверсией <xref:System.Numerics.Complex.Log%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-321"><xref:System.Numerics.Complex.Exp%2A> is the inverse of <xref:System.Numerics.Complex.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-322">В следующем примере показан метод <xref:System.Numerics.Complex.Exp%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-322">The following example illustrates the <xref:System.Numerics.Complex.Exp%2A> method.</span></span> <span data-ttu-id="bbb06-323">Это показывает, что, с некоторой поправкой на отсутствие точности <xref:System.Double> типа данных, передача значения, возвращаемого методом <xref:System.Numerics.Complex.Log%2A>, методу <xref:System.Numerics.Complex.Exp%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-323">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromPolarCoordinates">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex FromPolarCoordinates(float64 magnitude, float64 phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPolarCoordinates (magnitude As Double, phase As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex FromPolarCoordinates(double magnitude, double phase);" />
      <MemberSignature Language="F#" Value="static member FromPolarCoordinates : double * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.FromPolarCoordinates (magnitude, phase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="magnitude" Type="System.Double" />
        <Parameter Name="phase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="magnitude"><span data-ttu-id="bbb06-324">Модуль, т. е. расстояние от начала координат (точки пересечения осей X и Y) до числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-324">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</span></span></param>
        <param name="phase"><span data-ttu-id="bbb06-325">Фаза, т. е. угол от прямой до горизонтальной оси в радианах.</span><span class="sxs-lookup"><span data-stu-id="bbb06-325">The phase, which is the angle from the line to the horizontal axis, measured in radians.</span></span></param>
        <summary><span data-ttu-id="bbb06-326">Создает комплексное число из полярных координат точки.</span><span class="sxs-lookup"><span data-stu-id="bbb06-326">Creates a complex number from a point's polar coordinates.</span></span></summary>
        <returns><span data-ttu-id="bbb06-327">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-327">A complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-328">Метод <xref:System.Numerics.Complex.FromPolarCoordinates%2A> создает комплексное число на основе его полярных координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-328">The <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method instantiates a complex number based on its polar coordinates.</span></span>  
  
 <span data-ttu-id="bbb06-329">Поскольку существует несколько представлений точки на сложной плоскости, возвращаемое значение метода <xref:System.Numerics.Complex.FromPolarCoordinates%2A> нормализовано.</span><span class="sxs-lookup"><span data-stu-id="bbb06-329">Because there are multiple representations of a point on a complex plane, the return value of the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method is normalized.</span></span> <span data-ttu-id="bbb06-330">Величина нормализована до положительного числа, а фаза нормализована до значения в диапазоне от-<xref:System.Math.PI> до <xref:System.Math.PI>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-330">The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<xref:System.Math.PI> to <xref:System.Math.PI>.</span></span> <span data-ttu-id="bbb06-331">В результате значения свойств <xref:System.Numerics.Complex.Phase%2A> и <xref:System.Numerics.Complex.Magnitude%2A> полученного комплексного числа могут не совпадать с исходными значениями параметров `magnitude` и `phase`.</span><span class="sxs-lookup"><span data-stu-id="bbb06-331">As a result, the values of the <xref:System.Numerics.Complex.Phase%2A> and <xref:System.Numerics.Complex.Magnitude%2A> properties of the resulting complex number may not equal the original values of the `magnitude` and `phase` parameters.</span></span>  
  
 <span data-ttu-id="bbb06-332">Чтобы преобразовать значение параметра `phase` из градусов в радианы, умножьте его на <xref:System.Math.PI?displayProperty=nameWithType>/180.</span><span class="sxs-lookup"><span data-stu-id="bbb06-332">To convert a value from degrees to radians for the `phase` parameter, multiply it by <xref:System.Math.PI?displayProperty=nameWithType>/180.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-333">В следующем примере используется метод <xref:System.Numerics.Complex.FromPolarCoordinates%2A> для создания экземпляра комплексного числа на основе его полярных координат, а затем отображается значение его свойств <xref:System.Numerics.Complex.Magnitude%2A> и <xref:System.Numerics.Complex.Phase%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-333">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="complex.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bbb06-334">Возвращает хэш-код для текущего объекта <see cref="T:System.Numerics.Complex" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-334">Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <returns><span data-ttu-id="bbb06-335">Хэш-код в виде 32-разрядного целого числа со знаком.</span><span class="sxs-lookup"><span data-stu-id="bbb06-335">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Imaginary" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Imaginary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Imaginary As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Imaginary { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Imaginary : double" Usage="System.Numerics.Complex.Imaginary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-336">Получает мнимую часть текущего объекта <see cref="T:System.Numerics.Complex" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-336">Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <value><span data-ttu-id="bbb06-337">Мнимая часть комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-337">The imaginary component of a complex number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-338">Учитывая комплексное число a + bi, свойство <xref:System.Numerics.Complex.Imaginary%2A> возвращает значение b.</span><span class="sxs-lookup"><span data-stu-id="bbb06-338">Given a complex number a + bi, the <xref:System.Numerics.Complex.Imaginary%2A> property returns the value of b.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-339">В следующем примере создается массив объектов <xref:System.Numerics.Complex> и отображаются действительные и мнимые компоненты каждого типа a + BI.</span><span class="sxs-lookup"><span data-stu-id="bbb06-339">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Real" />
      </Docs>
    </Member>
    <Member MemberName="ImaginaryOne">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex ImaginaryOne;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex ImaginaryOne" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.ImaginaryOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ImaginaryOne As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex ImaginaryOne;" />
      <MemberSignature Language="F#" Value=" staticval mutable ImaginaryOne : System.Numerics.Complex" Usage="System.Numerics.Complex.ImaginaryOne" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-340">Возвращает новый экземпляр объекта <see cref="T:System.Numerics.Complex" /> со значением действительного числа, равным нулю, и значением мнимого числа, равным единице.</span><span class="sxs-lookup"><span data-stu-id="bbb06-340">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bbb06-341">В следующем примере создается экземпляр <xref:System.Numerics.Complex> значения с помощью свойства <xref:System.Numerics.Complex.ImaginaryOne>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-341">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.ImaginaryOne> property.</span></span> <span data-ttu-id="bbb06-342">Затем это значение сравнивается с другим значением, которое создается путем вызова конструктора <xref:System.Numerics.Complex> с реальной частью, равной нулю, и мнимой частью, равной единице.</span><span class="sxs-lookup"><span data-stu-id="bbb06-342">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to one.</span></span> <span data-ttu-id="bbb06-343">Как видно из выходных данных примера, эти два значения равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-343">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/cs/imaginaryone1.cs#1)]
 [!code-vb[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/vb/imaginaryone1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.One" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <Member MemberName="Infinity">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex Infinity" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.Infinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Infinity As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex Infinity;" />
      <MemberSignature Language="F#" Value=" staticval mutable Infinity : System.Numerics.Complex" Usage="System.Numerics.Complex.Infinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-344">Представляет бесконечность как комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-344">Represents infinity as a complex number.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member IsFinite : System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.IsFinite value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-345">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-345">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-346">Определяет, является ли заданное комплексное число конечным.</span><span class="sxs-lookup"><span data-stu-id="bbb06-346">Determines whether the specified complex number is finite.</span></span></summary>
        <returns><span data-ttu-id="bbb06-347">Значение <see langword="true" />, если действительные и мнимые части являются конечными (ноль, поднормальное или нормальное число); в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-347"><see langword="true" /> if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.IsInfinity value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-348">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-348">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-349">Возвращает значение, позволяющее определить, равно ли данное комплексное число бесконечности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-349">Returns a value indicating whether the specified complex number evaluates to infinity.</span></span></summary>
        <returns><span data-ttu-id="bbb06-350">Значение <see langword="true" />, если фактическая или мнимая часть равны <see cref="F:System.Double.PositiveInfinity" /> или <see cref="F:System.Double.NegativeInfinity" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-350"><see langword="true" /> if either, the real or imaginary part are <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (value As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member IsNaN : System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.IsNaN value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-351">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-351">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-352">Возвращает значение, показывающее, что указанный комплексный экземпляр не является числом (NaN).</span><span class="sxs-lookup"><span data-stu-id="bbb06-352">Returns a value that indicates whether the specified complex instance is not a number (NaN).</span></span></summary>
        <returns><span data-ttu-id="bbb06-353"><see langword="true" />, если указанное значение не является конечным или бесконечным; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-353"><see langword="true" /> if the specified value is not finite nor infinite; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbb06-354">Возвращает логарифм комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-354">Returns the logarithm of a complex number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-355">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-355">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-356">Возвращает натуральный логарифм (по основанию <see langword="e" />) указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-356">Returns the natural (base <see langword="e" />) logarithm of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-357">Натуральный логарифм (по основанию <see langword="e" />) значения <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-357">The natural (base <see langword="e" />) logarithm of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-358">Метод <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> для комплексных чисел соответствует методу <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-358">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-359">В следующем примере показан метод <xref:System.Numerics.Complex.Log%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-359">The following example illustrates the <xref:System.Numerics.Complex.Log%2A> method.</span></span> <span data-ttu-id="bbb06-360">Это показывает, что, с некоторой поправкой на отсутствие точности <xref:System.Double> типа данных, передача значения, возвращаемого методом <xref:System.Numerics.Complex.Log%2A>, методу <xref:System.Numerics.Complex.Exp%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-360">It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] 
 [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Log(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Exp(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log(valuetype System.Numerics.Complex value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (value As Complex, baseValue As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log(System::Numerics::Complex value, double baseValue);" />
      <MemberSignature Language="F#" Value="static member Log : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log (value, baseValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-361">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-361">A complex number.</span></span></param>
        <param name="baseValue"><span data-ttu-id="bbb06-362">Основание логарифма.</span><span class="sxs-lookup"><span data-stu-id="bbb06-362">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="bbb06-363">Возвращает логарифм по заданному основанию указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-363">Returns the logarithm of a specified complex number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="bbb06-364">Логарифм <paramref name="value" /> по основанию <paramref name="baseValue" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-364">The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-365">Метод <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> для комплексных чисел соответствует методу <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-365">The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Log10 (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Log10(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Log10(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Log10(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Log10 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-366">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-366">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-367">Возвращает логарифм по основанию 10 указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-367">Returns the base-10 logarithm of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-368">Логарифм <paramref name="value" /> по основанию 10.</span><span class="sxs-lookup"><span data-stu-id="bbb06-368">The base-10 logarithm of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-369">Метод <xref:System.Numerics.Complex.Log10%2A> для комплексных чисел соответствует методу <xref:System.Math.Log10%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-369">The <xref:System.Numerics.Complex.Log10%2A> method for complex numbers corresponds to the <xref:System.Math.Log10%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Magnitude">
      <MemberSignature Language="C#" Value="public double Magnitude { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Magnitude" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Magnitude" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Magnitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Magnitude { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Magnitude : double" Usage="System.Numerics.Complex.Magnitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-370">Возвращает модуль (или абсолютное значение) комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-370">Gets the magnitude (or absolute value) of a complex number.</span></span></summary>
        <value><span data-ttu-id="bbb06-371">Модуль текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="bbb06-371">The magnitude of the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-372">Свойство <xref:System.Numerics.Complex.Magnitude%2A> эквивалентно абсолютному значению комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-372">The <xref:System.Numerics.Complex.Magnitude%2A> property is equivalent to the absolute value of a complex number.</span></span> <span data-ttu-id="bbb06-373">Он задает расстояние от источника (пересечения оси x и оси y в декартовой системе координат) до двухмерной точки, представленной комплексным числом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-373">It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number.</span></span> <span data-ttu-id="bbb06-374">Абсолютное значение вычисляется следующим образом:</span><span class="sxs-lookup"><span data-stu-id="bbb06-374">The absolute value is calculated as follows:</span></span>  
  
 <span data-ttu-id="bbb06-375">&#124;a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(а \* a + b \* b)</span><span class="sxs-lookup"><span data-stu-id="bbb06-375">&#124; a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(a \* a + b \* b)</span></span>  
  
 <span data-ttu-id="bbb06-376">Если вычисление абсолютного значения приводит к переполнению, это свойство возвращает либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-376">If the calculation of the absolute value results in an overflow, this property returns either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bbb06-377">Свойства <xref:System.Numerics.Complex.Magnitude%2A> и <xref:System.Numerics.Complex.Phase%2A> определяют положение точки, представляющей комплексное число в полярной системе координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-377">The <xref:System.Numerics.Complex.Magnitude%2A> and the <xref:System.Numerics.Complex.Phase%2A> properties define the position of a point that represents a complex number in the polar coordinate system.</span></span>  
  
 <span data-ttu-id="bbb06-378">Можно создать экземпляр комплексного числа на основе его полярных координат вместо декартовых координат путем вызова метода <xref:System.Numerics.Complex.FromPolarCoordinates%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-378">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-379">В следующем примере вычисляется абсолютное значение комплексного числа и демонстрируется, что оно эквивалентно значению свойства <xref:System.Numerics.Complex.Magnitude%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-379">The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]
 [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Abs(System.Numerics.Complex)" />
        <altmember cref="P:System.Numerics.Complex.Phase" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <Docs>
        <summary><span data-ttu-id="bbb06-380">Умножает заданное число на другое заданное число, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-380">Multiplies a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-381">Методы <xref:System.Numerics.Complex.Multiply%2A> позволяют выполнять операции умножения, включающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-381">The <xref:System.Numerics.Complex.Multiply%2A> methods allow performing multiplication operations that involve complex numbers.</span></span>

<span data-ttu-id="bbb06-382">Если операция умножения приводит к переполнению в действительном или мнимом компоненте, то значением этого компонента будет либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-382">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>  
 
<span data-ttu-id="bbb06-383">Метод <xref:System.Numerics.Complex.Multiply%2A> реализован для языков, которые не поддерживают пользовательские операторы.</span><span class="sxs-lookup"><span data-stu-id="bbb06-383">The <xref:System.Numerics.Complex.Multiply%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="bbb06-384">Его поведение идентично умножению с помощью оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-384">Its behavior is identical to multiplication using the multiplication operator.</span></span>  

  
## Examples  

<span data-ttu-id="bbb06-385">В следующем примере несколько комплексных чисел являются кратными для каждого элемента в массиве комплексных цифр.</span><span class="sxs-lookup"><span data-stu-id="bbb06-385">The following example multiples a complex number by each element in an array of complex numbers.</span></span>  
  
[!code-csharp[System.Numerics.Complex.Multiply#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply1.cs#1)]
[!code-vb[System.Numerics.Complex.Multiply#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply1.vb#1)]  
  
          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-386">Действительное число двойной точности для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-386">The double-precision real number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-387">Комплексное число для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-387">The complex number to multiply.</span></span></param>
        <summary><span data-ttu-id="bbb06-388">Возвращает произведение комплексного числа и действительного числа двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-388">Returns the product of a double-precision real number and a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-389">Произведение параметров <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-389">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="bbb06-390">Умножение вещественного числа (которое можно рассматривать как комплексное число a + 0i) и комплексное число (c + di) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-390">The multiplication of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>
 
 <span data-ttu-id="bbb06-391">AC + ADI</span><span class="sxs-lookup"><span data-stu-id="bbb06-391">ac + adi</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-392">Комплексное число для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-392">The complex number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-393">Действительное число двойной точности для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-393">The double-precision real number to multiply.</span></span></param>
        <summary><span data-ttu-id="bbb06-394">Возвращает произведение комплексного числа и действительного числа двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-394">Returns the product of a complex number and a double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-395">Произведение параметров <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-395">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-396">Умножение комплексного числа (a + BI) и вещественного числа (которое можно рассматривать как комплексное число c + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-396">The multiplication of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-397">AC + бЦи</span><span class="sxs-lookup"><span data-stu-id="bbb06-397">ac + bci</span></span>
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Multiply(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-398">Первое комплексное число для перемножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-398">The first complex number to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-399">Второе комплексное число для перемножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-399">The second complex number to multiply.</span></span></param>
        <summary><span data-ttu-id="bbb06-400">Возвращает произведение двух комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-400">Returns the product of two complex numbers.</span></span></summary>
        <returns><span data-ttu-id="bbb06-401">Произведение параметров <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-401">The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-402">Умножение комплексного числа, a + bi и второго комплексного числа, c + di, принимает следующую форму:</span><span class="sxs-lookup"><span data-stu-id="bbb06-402">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>  
  
 <span data-ttu-id="bbb06-403">(AC-BD) + (AD + BC) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-403">(ac - bd) + (ad + bc)i</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex NaN" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NaN As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex NaN;" />
      <MemberSignature Language="F#" Value=" staticval mutable NaN : System.Numerics.Complex" Usage="System.Numerics.Complex.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-404">Представляет комплексный экземпляр, не являющийся числом (NaN).</span><span class="sxs-lookup"><span data-stu-id="bbb06-404">Represents a complex instance that is not a number (NaN).</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Negate (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Negate(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Negate(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Negate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-405">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-405">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-406">Возвращает аддитивную инверсию указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-406">Returns the additive inverse of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-407">Результат умножения частей <see cref="P:System.Numerics.Complex.Real" /> и <see cref="P:System.Numerics.Complex.Imaginary" /> параметра <paramref name="value" /> на -1.</span><span class="sxs-lookup"><span data-stu-id="bbb06-407">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-408">Аддитивное обратное комплексное число — это комплексное число, которое создает значение <xref:System.Numerics.Complex.Zero> при добавлении к исходному комплексному числу.</span><span class="sxs-lookup"><span data-stu-id="bbb06-408">The additive inverse of a complex number is a complex number that produces a value of <xref:System.Numerics.Complex.Zero> when it is added to the original complex number.</span></span> <span data-ttu-id="bbb06-409">Этот метод возвращает комплексное число, в котором действительные и мнимые компоненты исходного комплексного числа умножаются на-1.</span><span class="sxs-lookup"><span data-stu-id="bbb06-409">This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.</span></span>  
  
 <span data-ttu-id="bbb06-410">Метод <xref:System.Numerics.Complex.Negate%2A> реализован для языков, которые не поддерживают пользовательские операторы.</span><span class="sxs-lookup"><span data-stu-id="bbb06-410">The <xref:System.Numerics.Complex.Negate%2A> method is implemented for languages that do not support custom operators.</span></span> <span data-ttu-id="bbb06-411">Его поведение идентично поведению отрицания с помощью унарного оператора отрицания, <xref:System.Numerics.Complex.op_UnaryNegation%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-411">Its behavior is identical to negation using the unary negation operator, <xref:System.Numerics.Complex.op_UnaryNegation%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-412">В следующем примере получается обратный инверсия каждого элемента в массиве комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-412">The following example obtains the additive inverse of each element in an array of complex numbers.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate1.cs#1)]
 [!code-vb[System.Numerics.Complex.Negate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex One;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex One" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly One As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex One;" />
      <MemberSignature Language="F#" Value=" staticval mutable One : System.Numerics.Complex" Usage="System.Numerics.Complex.One" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-413">Возвращает новый экземпляр объекта <see cref="T:System.Numerics.Complex" /> со значением действительного числа, равным единице, и значением мнимого числа, равным нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-413">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bbb06-414">В следующем примере создается экземпляр <xref:System.Numerics.Complex> значения с помощью свойства <xref:System.Numerics.Complex.One>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-414">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.One> property.</span></span> <span data-ttu-id="bbb06-415">Затем это значение сравнивается с другим значением, которое создается путем вызова конструктора <xref:System.Numerics.Complex> с реальной частью, равной единице, и мнимой частью, равной нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-415">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to one and an imaginary part equal to zero.</span></span> <span data-ttu-id="bbb06-416">Как видно из выходных данных примера, эти два значения равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-416">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.One#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.one/cs/one1.cs#1)]
 [!code-vb[System.Numerics.Complex.One#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.one/vb/one1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.Zero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <Docs>
        <summary><span data-ttu-id="bbb06-417">Добавляет заданное число к другому заданному числу, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-417">Adds a specified number to another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-418">Оператор <xref:System.Numerics.Complex.op_Addition%2A> позволяет выполнять операции сложения, затрагивающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-418">The <xref:System.Numerics.Complex.op_Addition%2A> operator allows performing addition operations that involve complex numbers.</span></span> <span data-ttu-id="bbb06-419">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-419">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Add#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add3.cs#3)]
[!code-vb[System.Numerics.Complex.Add#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add3.vb#3)]

<span data-ttu-id="bbb06-420">Если сложение приводит к переполнению в действительном или мнимом компоненте, то значение этого компонента либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-420">If the addition results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="bbb06-421">Языки, не поддерживающие пользовательские операторы, могут вызывать вместо этого <xref:System.Numerics.Complex.Add%2A> эквивалентную группу методов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-421">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%2A> equivalent group of methods instead.</span></span>

<span data-ttu-id="bbb06-422">Операторы <xref:System.Numerics.Complex.op_Addition%2A>, получающие одно значение Double, более эффективны, чем операторы, принимающие два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-422">The <xref:System.Numerics.Complex.op_Addition%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

## Examples

<span data-ttu-id="bbb06-423">В следующем примере показано сложение с комплексными числами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-423">The following example illustrates addition with complex numbers:</span></span>

[!code-csharp[System.Numerics.Complex.Add#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add2.cs#2)]
[!code-vb[System.Numerics.Complex.Add#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add2.vb#2)]

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-424">Действительное значение двойной точности для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-424">The double-precision real value to add.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-425">Комплексное значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-425">The complex value to add.</span></span></param>
        <summary><span data-ttu-id="bbb06-426">Добавляет действительное число двойной точности к комплексному числу.</span><span class="sxs-lookup"><span data-stu-id="bbb06-426">Adds a double-precision real number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-427">Сумма <paramref name="left" /> и <paramref name="right" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-427">The sum of <paramref name="left" /> and <paramref name="right" /> as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-428">Добавление вещественного числа (которое можно рассматривать как комплексное число a + 0i) и комплексное число (c + di) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-428">The addition of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="bbb06-429">(a + c) + di</span><span class="sxs-lookup"><span data-stu-id="bbb06-429">(a + c) + di</span></span>

<span data-ttu-id="bbb06-430">Языки, не поддерживающие пользовательские операторы, могут вызывать <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-430">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-431">Комплексное значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-431">The complex value to add.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-432">Действительное значение двойной точности для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-432">The double-precision real value to add.</span></span></param>
        <summary><span data-ttu-id="bbb06-433">Добавляет комплексное число к действительному числу двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-433">Adds a complex number to a double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-434">Сумма <paramref name="left" /> и <paramref name="right" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-434">The sum of <paramref name="left" /> and <paramref name="right" /> as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-435">Добавление комплексного числа (a + BI) и вещественного числа (которое можно рассматривать как комплексное число c + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-435">The addition of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-436">(a + c) + BI</span><span class="sxs-lookup"><span data-stu-id="bbb06-436">(a + c) + bi</span></span>

<span data-ttu-id="bbb06-437">Языки, не поддерживающие пользовательские операторы, могут вызывать <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-437">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator + (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Addition(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator +(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-438">Первое комплексное значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-438">The first complex value to add.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-439">Второе комплексное значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-439">The second complex value to add.</span></span></param>
        <summary><span data-ttu-id="bbb06-440">Складывает два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-440">Adds two complex numbers.</span></span></summary>
        <returns><span data-ttu-id="bbb06-441">Сумма <paramref name="left" /> и <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-441">The sum of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-442">Добавление комплексного числа, + BI и второго комплексного числа, c + di, принимает следующую форму:</span><span class="sxs-lookup"><span data-stu-id="bbb06-442">The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>

<span data-ttu-id="bbb06-443">(a + c) + (б + d) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-443">(a + c) + (b + d)i</span></span>

<span data-ttu-id="bbb06-444">Языки, не поддерживающие пользовательские операторы, могут вызывать <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-444">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Division">
      <Docs>
        <summary><span data-ttu-id="bbb06-445">Делит заданное число на другое заданное число, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-445">Divides a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-446">Оператор <xref:System.Numerics.Complex.op_Division%2A> позволяет выполнять операции деления, затрагивающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-446">The <xref:System.Numerics.Complex.op_Division%2A> operator allows performing division operations that involve complex numbers.</span></span> <span data-ttu-id="bbb06-447">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-447">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Divide#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide2.cs#2)]
[!code-vb[System.Numerics.Complex.Divide#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide2.vb#2)]

<span data-ttu-id="bbb06-448">Если деление приводит к переполнению в действительном или мнимом компоненте, то значение этого компонента либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-448">If the division results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="bbb06-449">Языки, не поддерживающие настраиваемые операторы и перегрузку операторов, могут вызывать <xref:System.Numerics.Complex.Divide%2A> эквивалентную группу метода.</span><span class="sxs-lookup"><span data-stu-id="bbb06-449">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%2A> equivalent group of method instead.</span></span>

<span data-ttu-id="bbb06-450">Операторы <xref:System.Numerics.Complex.op_Division%2A>, получающие одно значение Double, более эффективны, чем операторы, принимающие два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-450">The <xref:System.Numerics.Complex.op_Division%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-451">Действительное значение двойной точности для деления.</span><span class="sxs-lookup"><span data-stu-id="bbb06-451">The double-precision real value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-452">Комплексное значение-знаменатель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-452">The complex value to divide by.</span></span></param>
        <summary><span data-ttu-id="bbb06-453">Делит заданное действительное число двойной точности на указанное комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-453">Divides a specified double-precision real number by a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-454">Результат деления <paramref name="left" /> на <paramref name="right" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-454">The result of dividing <paramref name="left" /> by <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-455">Деление вещественного числа (которое можно рассматривать как комплексное число a + 0i) и комплексное число (c + di) принимает следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-455">The division of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="bbb06-456">(AC/(c<sup>2</sup> + d<sup>2</sup>)) + (AD/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-456">(ac / (c<sup>2</sup> + d<sup>2</sup>)) + (ad / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>

<span data-ttu-id="bbb06-457">Языки, не поддерживающие настраиваемые операторы и перегрузку операторов, могут вызывать <xref:System.Numerics.Complex.Divide%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-457">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-458">Комплексное значение-числитель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-458">The complex value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-459">Действительное значение двойной точности-знаменатель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-459">The double-precision real value to divide by.</span></span></param>
        <summary><span data-ttu-id="bbb06-460">Делит заданное комплексное число на указанное действительное число двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-460">Divides a specified complex number by a specified double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-461">Результат деления <paramref name="left" /> на <paramref name="right" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-461">The result of dividing <paramref name="left" /> by <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-462">Деление комплексного числа (a + BI) и вещественного числа (которое можно рассматривать как комплексное число c + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-462">The division of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-463">(AC/c<sup>2</sup>) + (BC/c<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-463">(ac / c<sup>2</sup>) + (bc / c<sup>2</sup>)i</span></span>

<span data-ttu-id="bbb06-464">Языки, не поддерживающие настраиваемые операторы и перегрузку операторов, могут вызывать <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-464">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator / (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Division(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator /(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-465">Комплексное значение-числитель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-465">The complex value to be divided.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-466">Комплексное значение-знаменатель.</span><span class="sxs-lookup"><span data-stu-id="bbb06-466">The complex value to divide by.</span></span></param>
        <summary><span data-ttu-id="bbb06-467">Делит одно указанное комплексное число на другое.</span><span class="sxs-lookup"><span data-stu-id="bbb06-467">Divides a specified complex number by another specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-468">Результат деления <paramref name="left" /> на <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-468">The result of dividing <paramref name="left" /> by <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-469">Деление комплексного числа, a + bi и второго комплексного числа, c + di, принимает следующую форму:</span><span class="sxs-lookup"><span data-stu-id="bbb06-469">The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>

<span data-ttu-id="bbb06-470">((AC + BD)/(c<sup>2</sup> + d<sup>2</sup>)) + ((BC-AD)/(c<sup>2</sup> + d<sup>2</sup>) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-470">((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i</span></span>

<span data-ttu-id="bbb06-471">Языки, не поддерживающие настраиваемые операторы и перегрузку операторов, могут вызывать <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-471">Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-472">Первое комплексное число для сравнения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-472">The first complex number to compare.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-473">Второе комплексное число для сравнения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-473">The second complex number to compare.</span></span></param>
        <summary><span data-ttu-id="bbb06-474">Возвращает значение, указывающее, равны ли два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-474">Returns a value that indicates whether two complex numbers are equal.</span></span></summary>
        <returns><span data-ttu-id="bbb06-475">Значение <see langword="true" />, если параметры <paramref name="left" /> и <paramref name="right" /> имеют одинаковые значения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-475"><see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-476">Метод <xref:System.Numerics.Complex.op_Equality%2A> определяет операцию оператора равенства для <xref:System.Numerics.Complex> значений.</span><span class="sxs-lookup"><span data-stu-id="bbb06-476">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the equality operator for <xref:System.Numerics.Complex> values.</span></span> <span data-ttu-id="bbb06-477">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-477">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/eqoperator1.cs#9)]
 [!code-vb[System.Numerics.Complex.Equals#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/eqoperator1.vb#9)]  
  
 <span data-ttu-id="bbb06-478">Языки, не поддерживающие пользовательские операторы, могут вызывать метод <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-478">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method instead.</span></span>  
  
 <span data-ttu-id="bbb06-479">Два комплексных числа равны, если их реальные части равны, а их мнимые части равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-479">Two complex numbers are equal if their real parts are equal and their imaginary parts are equal.</span></span> <span data-ttu-id="bbb06-480">Метод <xref:System.Numerics.Complex.op_Equality%2A> эквивалентен следующему выражению:</span><span class="sxs-lookup"><span data-stu-id="bbb06-480">The <xref:System.Numerics.Complex.op_Equality%2A> method is equivalent to the following expression:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#3)]
 [!code-vb[System.Numerics.Complex.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#3)]  
  
 <span data-ttu-id="bbb06-481">Обратите внимание, что из-за различий в точности два комплексных числа, которые являются эквивалентными, могут считаться неравными.</span><span class="sxs-lookup"><span data-stu-id="bbb06-481">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="bbb06-482">Дополнительные сведения и возможные обходные пути см. в описании метода <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-482">For more information and a possible workaround, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 <span data-ttu-id="bbb06-483">Эквивалентным методом для этого оператора является <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="bbb06-483">The equivalent method for this operator is <xref:System.Numerics.Complex.Equals%2A?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbb06-484">Определяет явное преобразование между объектом типа <see cref="T:System.Numerics.Complex" /> и другим типом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-484">Defines an explicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span></span></summary>
        <altmember cref="Overload:System.Numerics.Complex.op_Implicit" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-485">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-485">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-486">Определяет явное преобразование значения <see cref="T:System.Decimal" /> в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-486">Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-487">Комплексное число, вещественная часть которого равна параметру <paramref name="value" />, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-487">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-488">Операторы явного преобразования определяют типы, которые можно преобразовать в объект <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-488">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="bbb06-489">Компиляторы языков не выполняют это преобразование автоматически, так как это может привести к утрате данных.</span><span class="sxs-lookup"><span data-stu-id="bbb06-489">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="bbb06-490">Вместо этого они выполняют преобразование только в том случае, если используется оператор C#приведения (in) или функция преобразования (например, `CType` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-490">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="bbb06-491">В противном случае они выводят ошибку компилятора.</span><span class="sxs-lookup"><span data-stu-id="bbb06-491">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="bbb06-492">Преобразование значения <xref:System.Decimal> в реальную часть комплексного числа может привести к утрате точности, поскольку <xref:System.Double>, который является типом свойства <xref:System.Numerics.Complex.Real%2A> комплексного числа, имеет меньше значимых цифр, чем <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-492">The conversion of a <xref:System.Decimal> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Decimal>.</span></span>



## Examples
 <span data-ttu-id="bbb06-493">В следующем примере показано явное преобразование значений <xref:System.Decimal> в <xref:System.Numerics.Complex> значений.</span><span class="sxs-lookup"><span data-stu-id="bbb06-493">The following example illustrates the explicit conversion of <xref:System.Decimal> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Explicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Complex (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As BigInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Complex(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.BigInteger -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-494">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-494">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-495">Определяет явное преобразование значения <see cref="T:System.Numerics.BigInteger" /> в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-495">Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-496">Комплексное число, вещественная часть которого равна параметру <paramref name="value" />, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-496">A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-497">Операторы явного преобразования определяют типы, которые можно преобразовать в объект <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-497">Explicit conversion operators define types that can be converted to a <xref:System.Numerics.Complex> object.</span></span> <span data-ttu-id="bbb06-498">Компиляторы языков не выполняют это преобразование автоматически, так как это может привести к утрате данных.</span><span class="sxs-lookup"><span data-stu-id="bbb06-498">Language compilers do not perform this conversion automatically because it can involve data loss.</span></span> <span data-ttu-id="bbb06-499">Вместо этого они выполняют преобразование только в том случае, если используется оператор C#приведения (in) или функция преобразования (например, `CType` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-499">Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as `CType` in Visual Basic) is used.</span></span> <span data-ttu-id="bbb06-500">В противном случае они выводят ошибку компилятора.</span><span class="sxs-lookup"><span data-stu-id="bbb06-500">Otherwise, they display a compiler error.</span></span>

 <span data-ttu-id="bbb06-501">Преобразование значения <xref:System.Numerics.BigInteger> в реальную часть комплексного числа может привести к утрате точности, поскольку <xref:System.Double>, который является типом свойства <xref:System.Numerics.Complex.Real%2A> комплексного числа, имеет меньше значимых цифр, чем <xref:System.Numerics.BigInteger>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-501">The conversion of a <xref:System.Numerics.BigInteger> value to the real part of a complex number can result in a loss of precision because a <xref:System.Double>, which is the type of the complex number's <xref:System.Numerics.Complex.Real%2A> property, has fewer significant digits than a <xref:System.Numerics.BigInteger>.</span></span>

 <span data-ttu-id="bbb06-502">Если преобразование завершилось неудачно из-за того, что <xref:System.Numerics.BigInteger> значение выходит за пределы диапазона <xref:System.Double> типа, операция не вызывает <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-502">If the conversion is unsuccessful because the <xref:System.Numerics.BigInteger> value is out of the range of the <xref:System.Double> type, the operation does not throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="bbb06-503">Вместо этого, если `value` меньше <xref:System.Double.MinValue>, результатом является комплексное число с <xref:System.Numerics.Complex.Real%2A> значением свойства, равным <xref:System.Double.NegativeInfinity>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-503">Instead, if `value` is less than <xref:System.Double.MinValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="bbb06-504">Если `value` больше <xref:System.Double.MaxValue>, результатом является комплексное число со значением свойства <xref:System.Numerics.Complex.Real%2A>, равным <xref:System.Double.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-504">If `value` is greater than <xref:System.Double.MaxValue>, the result is a complex number that has a <xref:System.Numerics.Complex.Real%2A> property value equal to <xref:System.Double.PositiveInfinity>.</span></span>



## Examples
 <span data-ttu-id="bbb06-505">В следующем примере показано явное преобразование значений <xref:System.Numerics.BigInteger> в <xref:System.Numerics.Complex> значений.</span><span class="sxs-lookup"><span data-stu-id="bbb06-505">The following example illustrates the explicit conversion of <xref:System.Numerics.BigInteger> values to <xref:System.Numerics.Complex> values.</span></span>

 [!code-csharp[System.Numerics.Complex.Explicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.explicit/cs/explicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Explicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.explicit/vb/explicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbb06-506">Определяет неявное преобразование объекта типа <see cref="T:System.Numerics.Complex" /> в другой тип.</span><span class="sxs-lookup"><span data-stu-id="bbb06-506">Defines an implicit conversion between a <see cref="T:System.Numerics.Complex" /> object and another type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-507">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-507">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-508">Определяет неявное преобразование байта без знака в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-508">Defines an implicit conversion of an unsigned byte to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-509">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-509">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-510">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-510">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-511">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-511">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-512">Эта перегрузка позволяет компилятору выполнять преобразования из <xref:System.Byte>ного значения в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-512">This overload lets the compiler handle conversions from a <xref:System.Byte> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-513">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна значению <xref:System.Byte>, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-513">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Byte> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#1)]   
 [!code-vb[System.Numerics.Complex.Implicit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(double value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-514">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-514">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-515">Определяет неявное преобразование числа с плавающей запятой двойной точности в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-515">Defines an implicit conversion of a double-precision floating-point number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-516">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-516">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-517">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-517">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-518">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-518">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-519">Эта перегрузка позволяет компилятору выполнять преобразования из <xref:System.Double>ного значения в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-519">This overload lets the compiler handle conversions from a <xref:System.Double> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-520">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна значению <xref:System.Double>, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-520">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Double> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#2)]   
 [!code-vb[System.Numerics.Complex.Implicit#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#2)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(short value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-521">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-521">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-522">Определяет неявное преобразование 16-битового целого числа со знаком в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-522">Defines an implicit conversion of a 16-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-523">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-523">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-524">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-524">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-525">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-525">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-526">Эта перегрузка позволяет компилятору выполнять преобразование из 16-разрядного целого числа со знаком в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-526">This overload lets the compiler handle conversions from a signed 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-527">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна 16-разрядному целому числу со знаком, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-527">Note that the result of the conversion is a complex number whose real part is equal to the signed 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#3)]   
 [!code-vb[System.Numerics.Complex.Implicit#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#3)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(int value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-528">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-528">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-529">Определяет неявное преобразование 32-битового целого числа со знаком в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-529">Defines an implicit conversion of a 32-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-530">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-530">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-531">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-531">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-532">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-532">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-533">Эта перегрузка позволяет компилятору выполнять преобразование из 32-разрядного целого числа со знаком в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-533">This overload lets the compiler handle conversions from a signed 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-534">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна 32-разрядному целому числу, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-534">Note that the result of the conversion is a complex number whose real part is equal to the signed 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#4)]   
 [!code-vb[System.Numerics.Complex.Implicit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#4)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(long value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-535">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-535">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-536">Определяет неявное преобразование 64-битового целого числа со знаком в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-536">Defines an implicit conversion of a 64-bit signed integer to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-537">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-537">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-538">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-538">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-539">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-539">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-540">Эта перегрузка позволяет компилятору выполнять преобразование из 64-разрядного целого числа со знаком в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-540">This overload lets the compiler handle conversions from a signed 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-541">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна 64-разрядному целому числу, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-541">Note that the result of the conversion is a complex number whose real part is equal to the signed 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#5)]   
 [!code-vb[System.Numerics.Complex.Implicit#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#5)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-542">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-542">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-543">Определяет неявное преобразование байта со знаком в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-543">Defines an implicit conversion of a signed byte to a complex number.</span></span>   
           
<span data-ttu-id="bbb06-544">Этот интерфейс API CLS-несовместим.</span><span class="sxs-lookup"><span data-stu-id="bbb06-544">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="bbb06-545">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-545">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-546">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-546">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-547">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-547">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-548">Эта перегрузка позволяет компилятору выполнять преобразования из байта со знаком в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-548">This overload lets the compiler handle conversions from a signed byte to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-549">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна байту со знаком, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-549">Note that the result of the conversion is a complex number whose real part is equal to the signed byte and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#6)]   
 [!code-vb[System.Numerics.Complex.Implicit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#6)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Single) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(float value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : single -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-550">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-550">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-551">Определяет неявное преобразование числа с плавающей запятой одиночной точности в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-551">Defines an implicit conversion of a single-precision floating-point number to a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-552">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-552">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-553">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-553">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-554">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-554">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-555">Эта перегрузка позволяет компилятору выполнять преобразования из <xref:System.Single>ного значения в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-555">This overload lets the compiler handle conversions from a <xref:System.Single> value to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-556">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна значению <xref:System.Single>, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-556">Note that the result of the conversion is a complex number whose real part is equal to the <xref:System.Single> value and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#7)]   
 [!code-vb[System.Numerics.Complex.Implicit#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#7)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-557">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-557">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-558">Определяет неявное преобразование 16-битного целого числа без знака в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-558">Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="bbb06-559">Этот интерфейс API CLS-несовместим.</span><span class="sxs-lookup"><span data-stu-id="bbb06-559">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="bbb06-560">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-560">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-561">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-561">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-562">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-562">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-563">Эта перегрузка позволяет компилятору выполнять преобразование из 16-разрядного целого числа без знака в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-563">This overload lets the compiler handle conversions from an unsigned 16-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-564">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна 16-разрядному целому числу без знака, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-564">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 16-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#8)]   
 [!code-vb[System.Numerics.Complex.Implicit#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#8)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-565">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-565">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-566">Определяет неявное преобразование 32-битного целого числа без знака в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-566">Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="bbb06-567">Этот интерфейс API CLS-несовместим.</span><span class="sxs-lookup"><span data-stu-id="bbb06-567">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="bbb06-568">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-568">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-569">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-569">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-570">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-570">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-571">Эта перегрузка позволяет компилятору выполнять преобразования из 32-разрядного целого числа без знака в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-571">This overload lets the compiler handle conversions from an unsigned 32-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-572">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна беззнаковому 32-разрядному целому числу, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-572">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 32-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#9)]   
 [!code-vb[System.Numerics.Complex.Implicit#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#9)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Complex (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Complex(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-573">Значение, преобразуемое в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-573">The value to convert to a complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-574">Определяет неявное преобразование 64-битного целого числа без знака в комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-574">Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</span></span>   
           
<span data-ttu-id="bbb06-575">Этот интерфейс API CLS-несовместим.</span><span class="sxs-lookup"><span data-stu-id="bbb06-575">This API is not CLS-compliant.</span></span></summary>
        <returns><span data-ttu-id="bbb06-576">Объект, содержащий значение параметра <paramref name="value" /> как действительную часть и ноль как мнимую часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-576">An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-577">Перегрузки оператора <xref:System.Numerics.Complex.op_Implicit%2A> определяют типы, из которых компилятор может автоматически преобразовать объект <xref:System.Numerics.Complex> без явного оператора приведения (in C#) или вызова функции преобразования (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bbb06-577">The overloads of the <xref:System.Numerics.Complex.op_Implicit%2A> operator define the types from which a compiler can automatically convert a <xref:System.Numerics.Complex> object without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic).</span></span> <span data-ttu-id="bbb06-578">Они расширяют преобразования, не затрагивающие потери данных, и не создают <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-578">They are widening conversions that do not involve data loss and do not throw an <xref:System.OverflowException>.</span></span>

 <span data-ttu-id="bbb06-579">Эта перегрузка позволяет компилятору выполнять преобразования из 64-разрядного целого числа без знака в комплексное число, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="bbb06-579">This overload lets the compiler handle conversions from an unsigned 64-bit integer to a complex number, as the following example shows.</span></span> <span data-ttu-id="bbb06-580">Обратите внимание, что результатом преобразования является комплексное число, вещественная часть которого равна беззнаковому 64-разрядному целому числу, а мнимая часть равна нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-580">Note that the result of the conversion is a complex number whose real part is equal to the unsigned 64-bit integer and whose imaginary part is equal to zero.</span></span>

 [!code-csharp[System.Numerics.Complex.Implicit#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.implicit/cs/implicit1.cs#10)]   
 [!code-vb[System.Numerics.Complex.Implicit#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.implicit/vb/implicit1.vb#10)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Complex, right As Complex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.Complex * System.Numerics.Complex -&gt; bool" Usage="System.Numerics.Complex.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-581">Первое сравниваемое значение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-581">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-582">Второе сравниваемое значение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-582">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="bbb06-583">Возвращает значение, указывающее, равны ли два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-583">Returns a value that indicates whether two complex numbers are not equal.</span></span></summary>
        <returns><span data-ttu-id="bbb06-584">Значение <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> не равны друг другу; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-584"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-585">Метод <xref:System.Numerics.Complex.op_Equality%2A> определяет операцию оператора неравенства для комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-585">The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the inequality operator for complex numbers.</span></span> <span data-ttu-id="bbb06-586">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-586">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.inequality/cs/inequality1.cs#1)]
 [!code-vb[System.Numerics.Complex.Inequality#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.inequality/vb/inequality1.vb#1)]  
  
 <span data-ttu-id="bbb06-587">Языки, не поддерживающие пользовательские операторы, могут проверить на неравенство, вызвав метод <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> и отменив его значение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-587">Languages that do not support custom operators can test for inequality by calling the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method and reversing its value.</span></span>  
  
 <span data-ttu-id="bbb06-588">Обратите внимание, что из-за различий в точности два комплексных числа, которые являются эквивалентными, могут считаться неравными.</span><span class="sxs-lookup"><span data-stu-id="bbb06-588">Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal.</span></span> <span data-ttu-id="bbb06-589">Одним из возможных решений является реализация метода сравнения, который возвращает `true` только в том случае, если разница между двумя реальными и мнимыми частями комплексных чисел превышает определенный порог (например, .01% от значения действительного или мнимого компонента одного из комплексных чисел).</span><span class="sxs-lookup"><span data-stu-id="bbb06-589">One possible workaround is to implement a comparison method that returns `true` only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers).</span></span> <span data-ttu-id="bbb06-590">Дополнительные сведения см. в описании метода <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-590">For more information, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <Docs>
        <summary><span data-ttu-id="bbb06-591">Умножает заданное число на другое заданное число, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-591">Multiplies a specified number by another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-592">Оператор <xref:System.Numerics.Complex.op_Multiply%2A> позволяет выполнять операции умножения, включающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-592">The <xref:System.Numerics.Complex.op_Multiply%2A> operator allows performing multiplication operations that involve complex numbers.</span></span> <span data-ttu-id="bbb06-593">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-593">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Multiply#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply2.cs#2)]
[!code-vb[System.Numerics.Complex.Multiply#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply2.vb#2)]

<span data-ttu-id="bbb06-594">Если операция умножения приводит к переполнению в действительном или мнимом компоненте, то значением этого компонента будет либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-594">If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="bbb06-595">Языки, не поддерживающие пользовательские операторы, могут вызывать вместо этого <xref:System.Numerics.Complex.Multiply%2A> эквивалентную группу методов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-595">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%2A> equivalent group of methods instead.</span></span>

<span data-ttu-id="bbb06-596">Операторы <xref:System.Numerics.Complex.op_Multiply%2A>, получающие одно значение Double, более эффективны, чем операторы, принимающие два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-596">The <xref:System.Numerics.Complex.op_Multiply%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-597">Действительное значение двойной точности для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-597">The double-precision real value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-598">Комплексное значение для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-598">The complex value to multiply.</span></span></param>
        <summary><span data-ttu-id="bbb06-599">Умножает заданное действительное число двойной точности на указанное комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-599">Multiplies a specified double-precision real number by a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-600">Произведение <paramref name="left" /> и <paramref name="right" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-600">The product of <paramref name="left" /> and <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-601">Умножение вещественного числа (которое можно рассматривать как комплексное число a + 0i) и комплексное число (c + di) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-601">The multiplication of a real number (which can be regarded as the complex number a + 0i) and a complex number (c + di) takes the following form:</span></span>

<span data-ttu-id="bbb06-602">AC + ADI</span><span class="sxs-lookup"><span data-stu-id="bbb06-602">ac + adi</span></span>

<span data-ttu-id="bbb06-603">Языки, не поддерживающие пользовательские операторы, могут вызывать <xref:System.Numerics.Complex.Multiply%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-603">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>


          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-604">Комплексное значение для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-604">The complex value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-605">Действительное значение двойной точности для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-605">The double-precision real value to multiply.</span></span></param>
        <summary><span data-ttu-id="bbb06-606">Умножает указанное комплексное число на указанное действительное число двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-606">Multiplies the specified complex number by a specified double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-607">Произведение <paramref name="left" /> и <paramref name="right" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-607">The product of <paramref name="left" /> and <paramref name="right" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-608">Умножение комплексного числа (a + BI) и вещественного числа (которое можно рассматривать как комплексное число c + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-608">The multiplication of a complex number (a + bi) and a real number (which can be regarded as the complex number c + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-609">AC + бЦи</span><span class="sxs-lookup"><span data-stu-id="bbb06-609">ac + bci</span></span>

<span data-ttu-id="bbb06-610">Языки, не поддерживающие пользовательские операторы, могут вызывать <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-610">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator * (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Multiply(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator *(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-611">Первое комплексное значение для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-611">The first complex value to multiply.</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-612">Второе комплексное значение для умножения.</span><span class="sxs-lookup"><span data-stu-id="bbb06-612">The second complex value to multiply.</span></span></param>
        <summary><span data-ttu-id="bbb06-613">Перемножает два заданных комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-613">Multiplies two specified complex numbers.</span></span></summary>
        <returns><span data-ttu-id="bbb06-614">Произведение <paramref name="left" /> на <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-614">The product of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-615">Умножение комплексного числа, a + bi и второго комплексного числа, c + di, принимает следующую форму:</span><span class="sxs-lookup"><span data-stu-id="bbb06-615">The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:</span></span>

<span data-ttu-id="bbb06-616">(AC-BD) + (AD + BC) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-616">(ac - bd) + (ad + bc)i</span></span>

<span data-ttu-id="bbb06-617">Языки, не поддерживающие пользовательские операторы, могут вызывать <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> эквивалентный метод.</span><span class="sxs-lookup"><span data-stu-id="bbb06-617">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent method instead.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <Docs>
        <summary><span data-ttu-id="bbb06-618">Вычитает заданное число из другого заданного числа, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-618">Subtracts a specified number from another specified number, where at least one of them is a complex number, and the other could be a double-precision real number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-619">Оператор <xref:System.Numerics.Complex.op_Subtraction%2A> позволяет выполнять операции вычитания, затрагивающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-619">The <xref:System.Numerics.Complex.op_Subtraction%2A> operator allows performing subtraction operations that involve complex numbers.</span></span> <span data-ttu-id="bbb06-620">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-620">It enables code such as the following:</span></span>

[!code-csharp[System.Numerics.Complex.Subtract#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract2.cs#2)]
[!code-vb[System.Numerics.Complex.Subtract#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract2.vb#2)]

<span data-ttu-id="bbb06-621">Если вычитание приводит к переполнению в действительном или мнимом компоненте, то значение этого компонента либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-621">If the subtraction results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="bbb06-622">Языки, не поддерживающие пользовательские операторы, могут вызывать вместо этого <xref:System.Numerics.Complex.Subtract%2A> эквивалентную группу методов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-622">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%2A> equivalent group of methods instead.</span></span>

<span data-ttu-id="bbb06-623">Операторы <xref:System.Numerics.Complex.op_Addition%2A>, получающие одно значение Double, более эффективны, чем операторы, принимающие два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-623">The <xref:System.Numerics.Complex.op_Addition%2A> operators that receive one double are more efficient than the operators that receive two Complex numbers.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-624">Действительное значение двойной точности, из которого следует вычитать (уменьшаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-624">The double-precision real value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-625">Комплексное значение для вычитания (вычитаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-625">The complex value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="bbb06-626">Вычитает комплексное число из действительного числа двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-626">Subtracts a complex number from a double-precision real number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-627">Результат вычитания <paramref name="right" /> из <paramref name="left" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-627">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-628">Вычитание комплексного числа (c + di) из вещественного числа (которое можно рассматривать как комплексное число a + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-628">The subtraction of a complex number (c + di) from a real number (which can be regarded as the complex number a + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-629">(a-c) — di</span><span class="sxs-lookup"><span data-stu-id="bbb06-629">(a - c) - di</span></span>

<span data-ttu-id="bbb06-630">Языки, не поддерживающие пользовательские операторы, могут вызывать метод <xref:System.Numerics.Complex.Subtract%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-630">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> method instead.</span></span>
 
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-631">Комплексное значение, из которого следует вычитать (уменьшаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-631">The complex value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-632">Действительное значение двойной точности для вычитания (вычитаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-632">The double-precision real value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="bbb06-633">Вычитает действительное число двойной точности из комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-633">Subtracts a double-precision real number from a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-634">Результат вычитания <paramref name="right" /> из <paramref name="left" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-634">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-635">Вычитание вещественного числа (которое можно рассматривать как комплексное число c + 0i) из комплексного числа (a + BI) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-635">The subtraction of a real number (which can be regarded as the complex number c + 0i) from a complex number (a + bi) takes the following form:</span></span>

<span data-ttu-id="bbb06-636">(a-c) + BI</span><span class="sxs-lookup"><span data-stu-id="bbb06-636">(a - c) + bi</span></span>

<span data-ttu-id="bbb06-637">Языки, не поддерживающие пользовательские операторы, могут вызывать метод <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-637">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> method instead.</span></span>
 
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_Subtraction(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-638">Значение, из которого следует вычитать (уменьшаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-638">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-639">Значение для вычитания (вычитаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-639">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="bbb06-640">Вычитает комплексное число из другого комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-640">Subtracts a complex number from another complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-641">Результат вычитания <paramref name="right" /> из <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-641">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-642">Вычитание комплексного числа, c + di, из другого комплексного числа (+ BI) принимает следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-642">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>

<span data-ttu-id="bbb06-643">(a-c) + (б-d) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-643">(a - c) + (b - d)i</span></span>

<span data-ttu-id="bbb06-644">Языки, не поддерживающие пользовательские операторы, могут вызывать метод <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-644">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> method instead.</span></span>
 
          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex operator - (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Complex op_UnaryNegation(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex operator -(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-645">Инвертируемое значение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-645">The value to negate.</span></span></param>
        <summary><span data-ttu-id="bbb06-646">Возвращает аддитивную инверсию указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-646">Returns the additive inverse of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-647">Результат умножения частей <see cref="P:System.Numerics.Complex.Real" /> и <see cref="P:System.Numerics.Complex.Imaginary" /> параметра <paramref name="value" /> на -1.</span><span class="sxs-lookup"><span data-stu-id="bbb06-647">The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-648">Метод <xref:System.Numerics.Complex.op_UnaryNegation%2A> определяет операцию унарного отрицания (инверсия) для комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-648">The <xref:System.Numerics.Complex.op_UnaryNegation%2A> method defines the operation of the unary negation (additive inverse) operator for complex numbers.</span></span> <span data-ttu-id="bbb06-649">Он включает следующий код:</span><span class="sxs-lookup"><span data-stu-id="bbb06-649">It enables code such as the following:</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Negate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate2.cs#2)]
 [!code-vb[System.Numerics.Complex.Negate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate2.vb#2)]  
  
 <span data-ttu-id="bbb06-650">Полученное комплексное число выдает значение <xref:System.Numerics.Complex.Zero> при добавлении к исходному комплексному числу.</span><span class="sxs-lookup"><span data-stu-id="bbb06-650">The resulting complex number produces a value of <xref:System.Numerics.Complex.Zero> when it is added to the original complex number.</span></span> <span data-ttu-id="bbb06-651">Языки, не поддерживающие пользовательские операторы, могут вызывать метод <xref:System.Numerics.Complex.Negate%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-651">Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Negate%2A> method instead.</span></span>  
  
 <span data-ttu-id="bbb06-652">Эквивалентным методом для этого оператора является <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="bbb06-652">The equivalent method for this operator is <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Negate(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Phase">
      <MemberSignature Language="C#" Value="public double Phase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Phase" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Phase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phase As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Phase { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Phase : double" Usage="System.Numerics.Complex.Phase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-653">Возвращает фазу комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-653">Gets the phase of a complex number.</span></span></summary>
        <value><span data-ttu-id="bbb06-654">Фаза комплексного числа в радианах.</span><span class="sxs-lookup"><span data-stu-id="bbb06-654">The phase of a complex number, in radians.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-655">Для комплексного числа a + bi фаза вычислена как <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b, a).</span><span class="sxs-lookup"><span data-stu-id="bbb06-655">For a complex number a + bi, the phase is computed as <xref:System.Math.Atan2%2A?displayProperty=nameWithType>(b, a).</span></span>  
  
 <span data-ttu-id="bbb06-656">Комплексное число можно вычислить с помощью координат Декарт на сложной плоскости или ее полярных координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-656">You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates.</span></span> <span data-ttu-id="bbb06-657">Этап (аргумент) комплексного числа — это угол для реальной оси линии, нарисованной от точки происхождения (пересечения оси x и оси y) с точкой, представленной комплексным числом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-657">The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number.</span></span> <span data-ttu-id="bbb06-658">Величина (представленная свойством <xref:System.Numerics.Complex.Magnitude%2A>) — это расстояние от точки происхождения до точки, представленной комплексным числом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-658">The magnitude (represented by the <xref:System.Numerics.Complex.Magnitude%2A> property) is the distance from the point of origin to the point that is represented by the complex number.</span></span>  
  
 <span data-ttu-id="bbb06-659">Можно создать экземпляр комплексного числа на основе его полярных координат вместо декартовых координат путем вызова метода <xref:System.Numerics.Complex.FromPolarCoordinates%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-659">You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.</span></span>  
  
 <span data-ttu-id="bbb06-660">Чтобы преобразовать этап из радиан в градусы, умножьте его на 180/<xref:System.Math.PI?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-660">To convert the phase from radians to degrees, multiply it by 180/<xref:System.Math.PI?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-661">В следующем примере используется метод <xref:System.Numerics.Complex.FromPolarCoordinates%2A> для создания экземпляра комплексного числа на основе его полярных координат, а затем отображается значение его свойств <xref:System.Numerics.Complex.Magnitude%2A> и <xref:System.Numerics.Complex.Phase%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-661">The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]
 [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Magnitude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Pow">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbb06-662">Возвращает указанное комплексное число, возведенное в заданную степень.</span><span class="sxs-lookup"><span data-stu-id="bbb06-662">Returns a specified complex number raised to a specified power.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, float64 power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, double power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-663">Комплексное число для возведения в степень.</span><span class="sxs-lookup"><span data-stu-id="bbb06-663">A complex number to be raised to a power.</span></span></param>
        <param name="power"><span data-ttu-id="bbb06-664">Число двойной точности с плавающей запятой, задающее степень.</span><span class="sxs-lookup"><span data-stu-id="bbb06-664">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="bbb06-665">Возвращает заданное комплексное число, возведенное в степень, заданную числом с плавающей запятой двойной точности.</span><span class="sxs-lookup"><span data-stu-id="bbb06-665">Returns a specified complex number raised to a power specified by a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-666">Комплексное число <paramref name="value" />, возведенное в степень <paramref name="power" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-666">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-667">Если значением параметра `value` является <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, метод возвращает <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-667">If `value` is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-668">Для других значений, если `power` равен 0, метод возвращает <xref:System.Numerics.Complex.One?displayProperty=nameWithType>, а если `power` — значение 1, возвращается `value`.</span><span class="sxs-lookup"><span data-stu-id="bbb06-668">For other values, if `power` is 0, the method returns <xref:System.Numerics.Complex.One?displayProperty=nameWithType>, and if `power` is 1, it returns `value`.</span></span>  
  
 <span data-ttu-id="bbb06-669">Этот метод соответствует методу <xref:System.Math.Pow%2A?displayProperty=nameWithType> для числовых типов-примитивов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-669">This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=nameWithType> method for primitive numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-670">В следующем примере показано возведение в степень с использованием комплексного числа и показателя степени, значения которого находятся в диапазоне от-1 до 10.</span><span class="sxs-lookup"><span data-stu-id="bbb06-670">The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.pow/cs/pow1.cs#1)]
 [!code-vb[System.Numerics.Complex.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Pow(valuetype System.Numerics.Complex value, valuetype System.Numerics.Complex power) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (value As Complex, power As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Pow(System::Numerics::Complex value, System::Numerics::Complex power);" />
      <MemberSignature Language="F#" Value="static member Pow : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Pow (value, power)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
        <Parameter Name="power" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-671">Комплексное число для возведения в степень.</span><span class="sxs-lookup"><span data-stu-id="bbb06-671">A complex number to be raised to a power.</span></span></param>
        <param name="power"><span data-ttu-id="bbb06-672">Комплексное число, определяющее степень.</span><span class="sxs-lookup"><span data-stu-id="bbb06-672">A complex number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="bbb06-673">Возвращает заданное комплексное число, возведенное в степень, заданную комплексным числом.</span><span class="sxs-lookup"><span data-stu-id="bbb06-673">Returns a specified complex number raised to a power specified by a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-674">Комплексное число <paramref name="value" />, возведенное в степень <paramref name="power" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-674">The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public double Real { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Real" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Complex.Real" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Real As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Real { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Real : double" Usage="System.Numerics.Complex.Real" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-675">Получает вещественную часть текущего объекта <see cref="T:System.Numerics.Complex" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-675">Gets the real component of the current <see cref="T:System.Numerics.Complex" /> object.</span></span></summary>
        <value><span data-ttu-id="bbb06-676">Действительная часть комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-676">The real component of a complex number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-677">Учитывая комплексное число a + bi, свойство <xref:System.Numerics.Complex.Real%2A> возвращает значение.</span><span class="sxs-lookup"><span data-stu-id="bbb06-677">Given a complex number a + bi, the <xref:System.Numerics.Complex.Real%2A> property returns the value of a.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-678">В следующем примере создается массив объектов <xref:System.Numerics.Complex> и отображаются действительные и мнимые компоненты каждого типа a + BI.</span><span class="sxs-lookup"><span data-stu-id="bbb06-678">The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]
 [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.Complex.Imaginary" />
      </Docs>
    </Member>
    <Member MemberName="Reciprocal">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Reciprocal(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Reciprocal (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Reciprocal(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Reciprocal : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Reciprocal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-679">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-679">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-680">Возвращает обратную величину комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-680">Returns the multiplicative inverse of a complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-681">Обратная величина значения <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-681">The reciprocal of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-682">Обратная или мультипликативные обратная величина числа *x* — это число *y* , где *x* умножается на *y* , возвращает 1.</span><span class="sxs-lookup"><span data-stu-id="bbb06-682">The reciprocal, or multiplicative inverse, of a number *x* is a number *y* where *x* multiplied by *y* yields 1.</span></span> <span data-ttu-id="bbb06-683">Обратная часть комплексного числа представляет собой комплексное число, которое создается <xref:System.Numerics.Complex.One?displayProperty=nameWithType> при умножении двух чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-683">The reciprocal of a complex number is the complex number that produces <xref:System.Numerics.Complex.One?displayProperty=nameWithType> when the two numbers are multiplied.</span></span> <span data-ttu-id="bbb06-684">Если комплексное число представлено + BI, его обратная величина представляется выражением a/(a<sup>2</sup>+ b<sup>2</sup>) +-b/(a<sup>2</sup> + b<sup>2</sup>).</span><span class="sxs-lookup"><span data-stu-id="bbb06-684">If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a<sup>2</sup>+b<sup>2</sup>) + -b/(a<sup>2</sup> + b<sup>2</sup>).</span></span>  
  
 <span data-ttu-id="bbb06-685">Если значение value равно <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, метод возвращает <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-685">If value is <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>, the method returns <xref:System.Numerics.Complex.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbb06-686">В противном случае возвращается результат выражения <xref:System.Numerics.Complex.One?displayProperty=nameWithType>/`value`.</span><span class="sxs-lookup"><span data-stu-id="bbb06-686">Otherwise, it returns the result of the expression <xref:System.Numerics.Complex.One?displayProperty=nameWithType>/`value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-687">В следующем примере метод <xref:System.Numerics.Complex.Reciprocal%2A> используется для вычисления обратных значений нескольких комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-687">The following example uses the <xref:System.Numerics.Complex.Reciprocal%2A> method to calculate the reciprocal values of several complex numbers.</span></span> <span data-ttu-id="bbb06-688">Также показано, что результат умножения комплексного числа на его обратную <xref:System.Numerics.Complex.One?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-688">It also demonstrates that the result of multiplying a complex number by its reciprocal is <xref:System.Numerics.Complex.One?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/cs/reciprocal1.cs#1)]
 [!code-vb[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/vb/reciprocal1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sin (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sin(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sin(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sin : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sin value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-689">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-689">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-690">Возвращает синус указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-690">Returns the sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-691">Синус <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-691">The sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-692">Метод <xref:System.Numerics.Complex.Sin%2A> для комплексных чисел соответствует методу <xref:System.Math.Sin%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-692">The <xref:System.Numerics.Complex.Sin%2A> method for complex numbers corresponds to the <xref:System.Math.Sin%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-693">Метод <xref:System.Numerics.Complex.Sin%2A> использует следующую формулу для вычисления синуса комплексного числа a + bi:</span><span class="sxs-lookup"><span data-stu-id="bbb06-693">The <xref:System.Numerics.Complex.Sin%2A> method uses the following formula to calculate the sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="bbb06-694">(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Cosh%2A>(б), <xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Sinh%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="bbb06-694">(<xref:System.Math.Sin%2A>(a) \* <xref:System.Math.Cosh%2A>(b), <xref:System.Math.Cos%2A>(a) \* <xref:System.Math.Sinh%2A>(b))</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-695">В следующем примере показан метод <xref:System.Numerics.Complex.Sin%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-695">The following example illustrates the <xref:System.Numerics.Complex.Sin%2A> method.</span></span> <span data-ttu-id="bbb06-696">Он показывает, что передача значения, возвращаемого методом <xref:System.Numerics.Complex.Asin%2A>, в метод <xref:System.Numerics.Complex.Sin%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-696">It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]
 [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Asin(System.Double)" />
        <altmember cref="M:System.Numerics.Complex.Sin(System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sinh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sinh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sinh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sinh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sinh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-697">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-697">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-698">Возвращает гиперболический синус указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-698">Returns the hyperbolic sine of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-699">Гиперболический синус <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-699">The hyperbolic sine of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-700">Метод <xref:System.Numerics.Complex.Sinh%2A> для комплексных чисел соответствует методу <xref:System.Math.Sinh%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-700">The <xref:System.Numerics.Complex.Sinh%2A> method for complex numbers corresponds to the <xref:System.Math.Sinh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-701">Для вычисления гиперболического синуса комплексного числа a + BI в методе <xref:System.Numerics.Complex.Sinh%2A> используется следующая формула:</span><span class="sxs-lookup"><span data-stu-id="bbb06-701">The <xref:System.Numerics.Complex.Sinh%2A> method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:</span></span>  
  
 <span data-ttu-id="bbb06-702">(<xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Cos%2A>(б), <xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span><span class="sxs-lookup"><span data-stu-id="bbb06-702">(<xref:System.Math.Sinh%2A>(a) \* <xref:System.Math.Cos%2A>(b), <xref:System.Math.Cosh%2A>(a) \* <xref:System.Math.Sin%2A>(b))</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sinh(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Sqrt(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Sqrt(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Sqrt : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Sqrt value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-703">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-703">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-704">Возвращает квадратный корень из указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-704">Returns the square root of a specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-705">Квадратный корень числа <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-705">The square root of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-706">Квадратный корень комплексного числа `value` вычисляется с помощью следующей формулы:</span><span class="sxs-lookup"><span data-stu-id="bbb06-706">The square root of the complex number `value` is calculated by using the following formula:</span></span>  
  
 <span data-ttu-id="bbb06-707"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2,0)</span><span class="sxs-lookup"><span data-stu-id="bbb06-707"><xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=nameWithType>(<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2.0)</span></span>   
  
 <span data-ttu-id="bbb06-708">Метод <xref:System.Numerics.Complex.Sqrt%2A> для комплексных чисел соответствует методу <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-708">The <xref:System.Numerics.Complex.Sqrt%2A> method for complex numbers corresponds to the <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <Docs>
        <summary><span data-ttu-id="bbb06-709">Вычитает заданное число из другого заданного числа, где по крайней мере одно из них является комплексным числом, а второе должно быть действительным числом двойной точности, и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-709">Subtracts a specified number from another specified number, where at least one of them is a complex number, and the other could be a double-precision real number, and returns the result.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-710">Метод <xref:System.Numerics.Complex.Subtract%2A> позволяет выполнять операции вычитания, затрагивающие комплексные числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-710">The <xref:System.Numerics.Complex.Subtract%2A> method allows subtraction operations that involve complex numbers.</span></span>

<span data-ttu-id="bbb06-711">Если вычитание приводит к переполнению в действительном или мнимом компоненте, то значение этого компонента либо <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, либо <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-711">If the subtraction results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="bbb06-712">Языки, поддерживающие пользовательские операторы, могут также использовать <xref:System.Numerics.Complex.op_Subtraction%2A> эквивалентную группу операторов.</span><span class="sxs-lookup"><span data-stu-id="bbb06-712">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%2A> equivalent group of operators too.</span></span>

<span data-ttu-id="bbb06-713">Методы <xref:System.Numerics.Complex.Subtract%2A>, которые получают одно значение Double, более эффективны, чем метод, принимающий два комплексных числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-713">The <xref:System.Numerics.Complex.Subtract%2A> methods that receive one double are more efficient than the method that receive two Complex numbers.</span></span>

## Examples

<span data-ttu-id="bbb06-714">Следующий пример вычитает каждое комплексное число из массива из комплексного числа:</span><span class="sxs-lookup"><span data-stu-id="bbb06-714">The following example subtracts each complex number in an array from a complex number:</span></span>

[!code-csharp[System.Numerics.Complex.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract1.cs#1)]
[!code-vb[System.Numerics.Complex.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract1.vb#1)]

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (double left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(float64 left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Double, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(double left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Subtract : double * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Numerics.Complex" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-715">Действительное значение двойной точности, из которого следует вычитать (уменьшаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-715">The double-precision real value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-716">Комплексное значение для вычитания (вычитаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-716">The complex value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="bbb06-717">Вычитает комплексное число из действительного числа двойной точности и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-717">Subtracts one complex number from a double-precision real number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-718">Результат вычитания <paramref name="right" /> из <paramref name="left" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-718">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-719">Вычитание комплексного числа (c + di) из вещественного числа (которое можно рассматривать как комплексное число a + 0i) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-719">The subtraction of a complex number (c + di) from a real number (which can be regarded as the complex number a + 0i) takes the following form:</span></span>

<span data-ttu-id="bbb06-720">(a-c) — di</span><span class="sxs-lookup"><span data-stu-id="bbb06-720">(a - c) - di</span></span>

<span data-ttu-id="bbb06-721">Языки, поддерживающие пользовательские операторы, могут также использовать эквивалентный оператор <xref:System.Numerics.Complex.op_Subtraction%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-721">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%28System.Double%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent operator too.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (System.Numerics.Complex left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(valuetype System.Numerics.Complex left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Complex, right As Double) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(System::Numerics::Complex left, double right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Complex * double -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-722">Комплексное значение, из которого следует вычитать (уменьшаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-722">The complex value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-723">Действительное значение двойной точности для вычитания (вычитаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-723">The double-precision real value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="bbb06-724">Вычитает действительное число двойной точности из комплексного числа и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-724">Subtracts one double-precision real number from a complex number and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-725">Результат вычитания <paramref name="right" /> из <paramref name="left" /> в виде комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-725">The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-726">Вычитание вещественного числа (которое можно рассматривать как комплексное число c + 0i) из комплексного числа (a + BI) имеет следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-726">The subtraction of a real number (which can be regarded as the complex number c + 0i) from a complex number (a + bi) takes the following form:</span></span>

<span data-ttu-id="bbb06-727">(a-c) + BI</span><span class="sxs-lookup"><span data-stu-id="bbb06-727">(a - c) + bi</span></span>

<span data-ttu-id="bbb06-728">Языки, поддерживающие пользовательские операторы, могут также использовать эквивалентный оператор <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-728">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Double%29?displayProperty=nameWithType> equivalent operator too.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Subtract(valuetype System.Numerics.Complex left, valuetype System.Numerics.Complex right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Complex, right As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Subtract(System::Numerics::Complex left, System::Numerics::Complex right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Numerics.Complex * System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Complex" />
        <Parameter Name="right" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="bbb06-729">Значение, из которого следует вычитать (уменьшаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-729">The value to subtract from (the minuend).</span></span></param>
        <param name="right"><span data-ttu-id="bbb06-730">Значение для вычитания (вычитаемое).</span><span class="sxs-lookup"><span data-stu-id="bbb06-730">The value to subtract (the subtrahend).</span></span></param>
        <summary><span data-ttu-id="bbb06-731">Вычитает одно комплексное число из другого и возвращает результат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-731">Subtracts one complex number from another and returns the result.</span></span></summary>
        <returns><span data-ttu-id="bbb06-732">Результат вычитания <paramref name="right" /> из <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-732">The result of subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="bbb06-733">Вычитание комплексного числа, c + di, из другого комплексного числа (+ BI) принимает следующий вид:</span><span class="sxs-lookup"><span data-stu-id="bbb06-733">The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:</span></span>

<span data-ttu-id="bbb06-734">(a-c) + (б-d) i</span><span class="sxs-lookup"><span data-stu-id="bbb06-734">(a - c) + (b - d)i</span></span>

<span data-ttu-id="bbb06-735">Языки, поддерживающие пользовательские операторы, могут также использовать эквивалентный оператор <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-735">Languages that support custom operators can use the <xref:System.Numerics.Complex.op_Subtraction%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=nameWithType> equivalent operator too.</span></span>

          ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tan (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tan(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tan(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tan(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tan : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tan value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-736">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-736">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-737">Возвращает тангенс указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-737">Returns the tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-738">Тангенс <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-738">The tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-739">Метод <xref:System.Numerics.Complex.Tan%2A> для комплексных чисел соответствует методу <xref:System.Math.Tan%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-739">The <xref:System.Numerics.Complex.Tan%2A> method for complex numbers corresponds to the <xref:System.Math.Tan%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-740">Метод <xref:System.Numerics.Complex.Tan%2A> использует следующую формулу для вычисления тангенса комплексного числа `value`:</span><span class="sxs-lookup"><span data-stu-id="bbb06-740">The <xref:System.Numerics.Complex.Tan%2A> method uses the following formula to calculate the tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="bbb06-741"><xref:System.Numerics.Complex.Sin%2A>(`value`)/<xref:System.Numerics.Complex.Cos%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="bbb06-741"><xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-742">В следующем примере показан метод <xref:System.Numerics.Complex.Tan%2A>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-742">The following example illustrates the <xref:System.Numerics.Complex.Tan%2A> method.</span></span> <span data-ttu-id="bbb06-743">Он показывает, что передача значения, возвращаемого методом <xref:System.Numerics.Complex.Atan%2A>, в метод <xref:System.Numerics.Complex.Tan%2A> возвращает исходное значение <xref:System.Numerics.Complex>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-743">It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]
 [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.Complex.Atan(System.Numerics.Complex)" />
        <altmember cref="M:System.Math.Tan(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static System.Numerics.Complex Tanh (System.Numerics.Complex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Complex Tanh(valuetype System.Numerics.Complex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Complex) As Complex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Complex Tanh(System::Numerics::Complex value);" />
      <MemberSignature Language="F#" Value="static member Tanh : System.Numerics.Complex -&gt; System.Numerics.Complex" Usage="System.Numerics.Complex.Tanh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Complex" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbb06-744">Комплексное число.</span><span class="sxs-lookup"><span data-stu-id="bbb06-744">A complex number.</span></span></param>
        <summary><span data-ttu-id="bbb06-745">Возвращает гиперболический тангенс указанного комплексного числа.</span><span class="sxs-lookup"><span data-stu-id="bbb06-745">Returns the hyperbolic tangent of the specified complex number.</span></span></summary>
        <returns><span data-ttu-id="bbb06-746">Гиперболический тангенс <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-746">The hyperbolic tangent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-747">Метод <xref:System.Numerics.Complex.Tanh%2A> для комплексных чисел соответствует методу <xref:System.Math.Tanh%2A?displayProperty=nameWithType> для вещественных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-747">The <xref:System.Numerics.Complex.Tanh%2A> method for complex numbers corresponds to the <xref:System.Math.Tanh%2A?displayProperty=nameWithType> method for real numbers.</span></span>  
  
 <span data-ttu-id="bbb06-748">Метод <xref:System.Numerics.Complex.Tanh%2A> использует следующую формулу для вычисления гиперболического тангенса комплексного числа `value`:</span><span class="sxs-lookup"><span data-stu-id="bbb06-748">The <xref:System.Numerics.Complex.Tanh%2A> method uses the following formula to calculate the hyperbolic tangent of the complex number `value`:</span></span>  
  
 <span data-ttu-id="bbb06-749"><xref:System.Numerics.Complex.Sinh%2A>(`value`)/<xref:System.Numerics.Complex.Cosh%2A>(`value`)</span><span class="sxs-lookup"><span data-stu-id="bbb06-749"><xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Tanh(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbb06-750">Преобразует значение комплексного числа в эквивалентное строковое представление.</span><span class="sxs-lookup"><span data-stu-id="bbb06-750">Converts the value of a complex number to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="complex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bbb06-751">Преобразует значение текущего комплексного числа в эквивалентное строковое представление в прямоугольной системе координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-751">Converts the value of the current complex number to its equivalent string representation in Cartesian form.</span></span></summary>
        <returns><span data-ttu-id="bbb06-752">Строковое представление текущего экземпляра в прямоугольной системе координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-752">The string representation of the current instance in Cartesian form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-753">Строковое представление комплексного числа по умолчанию отображает число, используя его декартовы координаты в форме `(`*a*`,` *b*`)`, где *a* — Вещественная часть комплексного числа, а *b* — его мнимая часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-753">The default string representation of a complex number displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="bbb06-754">И *a* , и *b* форматируются с помощью общего описателя формата ("G") и соглашений о текущем языке и региональных параметрах системы.</span><span class="sxs-lookup"><span data-stu-id="bbb06-754">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the current system culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-755">В следующем примере отображается строковое представление нескольких комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-755">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="bbb06-756">В выходных данных используются соглашения о форматировании языка и региональных параметров "Английский-США" (EN-US), в данном случае — текущий язык и региональные параметры системы.</span><span class="sxs-lookup"><span data-stu-id="bbb06-756">The output uses the formatting conventions of the English - United States ("en-US") culture, which, in this case, is the current system culture.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Numerics.Complex.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="complex.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="bbb06-757">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="bbb06-757">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="bbb06-758">Преобразует значение текущего комплексного числа в эквивалентное строковое представление в прямоугольной системе координат, используя указанные сведения об особенностях форматирования, связанных с языком и региональными параметрами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-758">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="bbb06-759">Строковое представление текущего экземпляра в прямоугольной системе координат, заданное <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-759">The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-760">Строковое представление комплексного числа, возвращаемого этим методом, отображает число с помощью координат Декарт *в форме `(``,`* *b*`)`, где *a* — это Вещественная часть комплексного числа, а *b* — его мнимая часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-760">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="bbb06-761">И *a* , и *b* форматируются с помощью общего описателя формата ("G") и соглашений языка и региональных параметров, определенных `provider`.</span><span class="sxs-lookup"><span data-stu-id="bbb06-761">Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the culture defined by `provider`.</span></span>  
  
 <span data-ttu-id="bbb06-762">Параметр `provider` является реализацией <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-762">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="bbb06-763">Его <xref:System.IFormatProvider.GetFormat%2A> метод возвращает объект <xref:System.Globalization.NumberFormatInfo>, предоставляющий сведения о формате вещественных и мнимых чисел в возвращаемой строке.</span><span class="sxs-lookup"><span data-stu-id="bbb06-763">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="bbb06-764">Если `provider` `null`, возвращаемая строка форматируется с использованием <xref:System.Globalization.NumberFormatInfo> объекта текущего языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="bbb06-764">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="bbb06-765">Параметр `provider` может быть одним из следующих:</span><span class="sxs-lookup"><span data-stu-id="bbb06-765">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="bbb06-766">Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, которые предоставляют сведения о форматировании</span><span class="sxs-lookup"><span data-stu-id="bbb06-766">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="bbb06-767">Объект <xref:System.Globalization.NumberFormatInfo>, предоставляющий сведения о форматировании.</span><span class="sxs-lookup"><span data-stu-id="bbb06-767">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="bbb06-768">Пользовательский объект, реализующий интерфейс <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-768">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="bbb06-769">Его <xref:System.IFormatProvider.GetFormat%2A> метод возвращает объект <xref:System.Globalization.NumberFormatInfo>, предоставляющий сведения о форматировании.</span><span class="sxs-lookup"><span data-stu-id="bbb06-769">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-770">В следующем примере отображается строковое представление нескольких комплексных чисел.</span><span class="sxs-lookup"><span data-stu-id="bbb06-770">The following example displays the string representation of several complex numbers.</span></span> <span data-ttu-id="bbb06-771">В результате используются соглашения о форматировании для языков и региональных параметров "Английский — США" ("en-US") и "французский — Франция" ("fr-FR").</span><span class="sxs-lookup"><span data-stu-id="bbb06-771">The result uses the formatting conventions of the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Numerics.Complex.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="complex.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="bbb06-772">Стандартная или пользовательская строка числового формата.</span><span class="sxs-lookup"><span data-stu-id="bbb06-772">A standard or custom numeric format string.</span></span></param>
        <summary><span data-ttu-id="bbb06-773">Преобразует значение текущего комплексного числа в эквивалентное строковое представление в прямоугольной системе координат, используя указанный формат для действительной и мнимой частей.</span><span class="sxs-lookup"><span data-stu-id="bbb06-773">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</span></span></summary>
        <returns><span data-ttu-id="bbb06-774">Строковое представление текущего экземпляра в прямоугольной системе координат.</span><span class="sxs-lookup"><span data-stu-id="bbb06-774">The string representation of the current instance in Cartesian form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-775">Строковое представление комплексного числа, возвращаемого этим методом, отображает число с помощью координат Декарт *в форме `(``,`* *b*`)`, где *a* — это Вещественная часть комплексного числа, а *b* — его мнимая часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-775">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="bbb06-776">И *a* , и *b* форматируются с использованием строки формата, заданной `format`.</span><span class="sxs-lookup"><span data-stu-id="bbb06-776">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="bbb06-777">Параметр `format` может быть любым допустимым описателем стандартного числового формата или любым сочетанием описателей настраиваемого числового формата.</span><span class="sxs-lookup"><span data-stu-id="bbb06-777">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="bbb06-778">Если `format` равно <xref:System.String.Empty?displayProperty=nameWithType> или `null`, то действительные и мнимые части комплексного числа форматируются с помощью общего описателя формата ("G").</span><span class="sxs-lookup"><span data-stu-id="bbb06-778">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="bbb06-779">Если `format` имеет любое другое значение, метод создает исключение <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-779">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="bbb06-780">.NET Framework обеспечивает обширную поддержку форматирования, которая подробно описана в следующих разделах:</span><span class="sxs-lookup"><span data-stu-id="bbb06-780">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="bbb06-781">Дополнительные сведения о строках числового формата см. в разделе [строки стандартных числовых форматов](~/docs/standard/base-types/standard-numeric-format-strings.md) и [строки настраиваемых числовых форматов](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="bbb06-781">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="bbb06-782">Дополнительные сведения о форматировании в .NET Framework см. в разделе [Типы форматирования](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="bbb06-782">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="bbb06-783">Формат возвращаемой строки определяется объектом <xref:System.Globalization.NumberFormatInfo> для текущего языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="bbb06-783">The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span> <span data-ttu-id="bbb06-784">В зависимости от параметра `format` этот объект управляет такими символами, как знак отрицательного числа, разделитель групп и символ десятичной запятой в выходной строке.</span><span class="sxs-lookup"><span data-stu-id="bbb06-784">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="bbb06-785">Чтобы предоставить сведения о форматировании для культур, отличных от текущего языка и региональных параметров, вызовите перегрузку <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-785">To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-786">В следующем примере инициализируется комплексное число, которое отображается в нескольких строках стандартного формата.</span><span class="sxs-lookup"><span data-stu-id="bbb06-786">The following example initializes a complex number and displays it using several standard format strings.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Numerics.Complex.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="bbb06-787"><paramref name="format" /> не является допустимым форматом строки.</span><span class="sxs-lookup"><span data-stu-id="bbb06-787"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="bbb06-788">Строки стандартных числовых форматов</span><span class="sxs-lookup"><span data-stu-id="bbb06-788">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="bbb06-789">Строки настраиваемых числовых форматов</span><span class="sxs-lookup"><span data-stu-id="bbb06-789">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="complex.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="bbb06-790">Стандартная или пользовательская строка числового формата.</span><span class="sxs-lookup"><span data-stu-id="bbb06-790">A standard or custom numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="bbb06-791">Объект, предоставляющий сведения о форматировании для определенного языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="bbb06-791">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="bbb06-792">Преобразует значение текущего комплексного числа в эквивалентное строковое представление в прямоугольной системе координат, используя для действительной и мнимой частей указанный формат и сведения об особенностях форматирования, связанных с языком и региональными параметрами.</span><span class="sxs-lookup"><span data-stu-id="bbb06-792">Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</span></span></summary>
        <returns><span data-ttu-id="bbb06-793">Строковое представление текущего экземпляра в прямоугольной системе координат, заданное <paramref name="format" /> и <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="bbb06-793">The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-794">Строковое представление комплексного числа, возвращаемого этим методом, отображает число с помощью координат Декарт *в форме `(``,`* *b*`)`, где *a* — это Вещественная часть комплексного числа, а *b* — его мнимая часть.</span><span class="sxs-lookup"><span data-stu-id="bbb06-794">The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part.</span></span> <span data-ttu-id="bbb06-795">И *a* , и *b* форматируются с использованием строки формата, заданной `format`.</span><span class="sxs-lookup"><span data-stu-id="bbb06-795">Both *a* and *b* are formatted using the format string specified by `format`.</span></span> <span data-ttu-id="bbb06-796">Параметр `format` может быть любым допустимым описателем стандартного числового формата или любым сочетанием описателей настраиваемого числового формата.</span><span class="sxs-lookup"><span data-stu-id="bbb06-796">The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="bbb06-797">Если `format` равно <xref:System.String.Empty?displayProperty=nameWithType> или `null`, то действительные и мнимые части комплексного числа форматируются с помощью общего описателя формата ("G").</span><span class="sxs-lookup"><span data-stu-id="bbb06-797">If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier ("G").</span></span> <span data-ttu-id="bbb06-798">Если `format` имеет любое другое значение, метод создает исключение <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-798">If `format` is any other value, the method throws a <xref:System.FormatException>.</span></span>  
  
 <span data-ttu-id="bbb06-799">.NET Framework обеспечивает обширную поддержку форматирования, которая подробно описана в следующих разделах:</span><span class="sxs-lookup"><span data-stu-id="bbb06-799">The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:</span></span>  
  
-   <span data-ttu-id="bbb06-800">Дополнительные сведения о строках числового формата см. в разделе [строки стандартных числовых форматов](~/docs/standard/base-types/standard-numeric-format-strings.md) и [строки настраиваемых числовых форматов](~/docs/standard/base-types/custom-numeric-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="bbb06-800">For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="bbb06-801">Дополнительные сведения о форматировании в .NET Framework см. в разделе [Типы форматирования](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="bbb06-801">For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="bbb06-802">Параметр `provider` является реализацией <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-802">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="bbb06-803">Его <xref:System.IFormatProvider.GetFormat%2A> метод возвращает объект <xref:System.Globalization.NumberFormatInfo>, предоставляющий сведения о формате вещественных и мнимых чисел в возвращаемой строке.</span><span class="sxs-lookup"><span data-stu-id="bbb06-803">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string.</span></span> <span data-ttu-id="bbb06-804">В зависимости от параметра `format` этот объект управляет такими символами, как знак отрицательного числа, разделитель групп и символ десятичной запятой в выходной строке.</span><span class="sxs-lookup"><span data-stu-id="bbb06-804">Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.</span></span> <span data-ttu-id="bbb06-805">Если `provider` `null`, возвращаемая строка форматируется с использованием <xref:System.Globalization.NumberFormatInfo> объекта текущего языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="bbb06-805">If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="bbb06-806">Параметр `provider` может быть одним из следующих:</span><span class="sxs-lookup"><span data-stu-id="bbb06-806">The `provider` parameter can be one of the following:</span></span>  
  
-   <span data-ttu-id="bbb06-807">Объект <xref:System.Globalization.CultureInfo>, представляющий язык и региональные параметры, которые предоставляют сведения о форматировании</span><span class="sxs-lookup"><span data-stu-id="bbb06-807">A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information</span></span>  
  
-   <span data-ttu-id="bbb06-808">Объект <xref:System.Globalization.NumberFormatInfo>, предоставляющий сведения о форматировании.</span><span class="sxs-lookup"><span data-stu-id="bbb06-808">The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
-   <span data-ttu-id="bbb06-809">Пользовательский объект, реализующий интерфейс <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-809">A custom object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="bbb06-810">Его <xref:System.IFormatProvider.GetFormat%2A> метод возвращает объект <xref:System.Globalization.NumberFormatInfo>, предоставляющий сведения о форматировании.</span><span class="sxs-lookup"><span data-stu-id="bbb06-810">Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-811">В следующем примере создается массив комплексных чисел и каждый из них отображается с использованием нескольких стандартных строк формата, а также <xref:System.Globalization.CultureInfo> объектов, представляющих языки и региональные параметры «Английский (США») и «французский-Франция» («fr-FR»).</span><span class="sxs-lookup"><span data-stu-id="bbb06-811">The following example creates an array of complex numbers, and displays each using several standard format strings as well as <xref:System.Globalization.CultureInfo> objects that represent the English - United States ("en-US") and French - France ("fr-FR") cultures.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring4.cs#4)]
 [!code-vb[System.Numerics.Complex.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="bbb06-812"><paramref name="format" /> не является допустимым форматом строки.</span><span class="sxs-lookup"><span data-stu-id="bbb06-812"><paramref name="format" /> is not a valid format string.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="bbb06-813">Строки стандартных числовых форматов</span><span class="sxs-lookup"><span data-stu-id="bbb06-813">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="bbb06-814">Строки настраиваемых числовых форматов</span><span class="sxs-lookup"><span data-stu-id="bbb06-814">Custom Numeric Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly System.Numerics.Complex Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Numerics.Complex Zero" />
      <MemberSignature Language="DocId" Value="F:System.Numerics.Complex.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As Complex " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Numerics::Complex Zero;" />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : System.Numerics.Complex" Usage="System.Numerics.Complex.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Complex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbb06-815">Возвращает новый экземпляр объекта <see cref="T:System.Numerics.Complex" /> со значениями действительного и мнимого чисел, равными нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-815">Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbb06-816">Свойство <xref:System.Numerics.Complex.Zero> наиболее часто используется для сравнения значения <xref:System.Numerics.Complex> с нулевым значением.</span><span class="sxs-lookup"><span data-stu-id="bbb06-816">The <xref:System.Numerics.Complex.Zero> property is most frequently used to compare a <xref:System.Numerics.Complex> value to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbb06-817">В следующем примере создается экземпляр <xref:System.Numerics.Complex> значения с помощью свойства <xref:System.Numerics.Complex.Zero>.</span><span class="sxs-lookup"><span data-stu-id="bbb06-817">The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.Zero> property.</span></span> <span data-ttu-id="bbb06-818">Затем это значение сравнивается с другим значением, которое создается путем вызова конструктора <xref:System.Numerics.Complex> с реальной частью, равной нулю, и мнимой частью, равной нулю.</span><span class="sxs-lookup"><span data-stu-id="bbb06-818">It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to zero.</span></span> <span data-ttu-id="bbb06-819">Как видно из выходных данных примера, эти два значения равны.</span><span class="sxs-lookup"><span data-stu-id="bbb06-819">As the output from the example shows, the two values are equal.</span></span>  
  
 [!code-csharp[System.Numerics.Complex.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.zero/cs/zero1.cs#1)]
 [!code-vb[System.Numerics.Complex.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.zero/vb/zero1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Numerics.Complex.ImaginaryOne" />
        <altmember cref="F:System.Numerics.Complex.One" />
      </Docs>
    </Member>
  </Members>
</Type>
