<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="879ee81ab79ac18edbd38326b30e3fc5d47269f5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75134107" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a63fc-101">Предоставляет базовый класс для указания динамического поведения в среде выполнения.</span><span class="sxs-lookup"><span data-stu-id="a63fc-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="a63fc-102">Этот класс должен наследоваться; создать его экземпляр напрямую нельзя.</span><span class="sxs-lookup"><span data-stu-id="a63fc-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-103">Класс `DynamicObject` позволяет определить, какие операции можно выполнять с динамическими объектами и как выполнять эти операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="a63fc-104">Например, можно определить, что происходит при попытке получить или задать свойство объекта, вызвать метод или выполнить стандартные математические операции, такие как сложение и умножение.</span><span class="sxs-lookup"><span data-stu-id="a63fc-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="a63fc-105">Этот класс может быть полезен, если вы хотите создать более удобный протокол для библиотеки.</span><span class="sxs-lookup"><span data-stu-id="a63fc-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="a63fc-106">Например, если пользователи библиотеки должны использовать синтаксис, подобный `Scriptobj.SetProperty("Count", 1)`, можно предоставить возможность использовать гораздо более простой синтаксис, например `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="a63fc-107">Нельзя напрямую создать экземпляр класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="a63fc-108">Чтобы реализовать динамическое поведение, может потребоваться наследование от класса `DynamicObject` и переопределение необходимых методов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="a63fc-109">Например, если требуются только операции для настройки и получения свойств, можно переопределить только методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="a63fc-110">C#Чтобы включить динамическое поведение для экземпляров классов, производных от класса `DynamicObject`, необходимо использовать ключевое слово `dynamic`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="a63fc-111">Дополнительные сведения см. в разделе [Использование типа dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="a63fc-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="a63fc-112">В Visual Basic динамические операции поддерживаются с помощью позднего связывания.</span><span class="sxs-lookup"><span data-stu-id="a63fc-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="a63fc-113">Дополнительные сведения см. в разделе [раннее и позднее связывание](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="a63fc-113">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="a63fc-114">В следующем примере кода показано, как создать экземпляр класса, производного от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="a63fc-115">Можно также добавлять собственные члены в классы, производные от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="a63fc-116">Если ваш класс определяет свойства, а также переопределяет метод <xref:System.Dynamic.DynamicObject.TrySetMember%2A>, то среда выполнения динамического языка (DLR) сначала использует связыватель языка для поиска статического определения свойства в классе.</span><span class="sxs-lookup"><span data-stu-id="a63fc-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="a63fc-117">Если такого свойства нет, среда DLR вызывает метод <xref:System.Dynamic.DynamicObject.TrySetMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="a63fc-118">Класс `DynamicObject` реализует интерфейс DLR <xref:System.Dynamic.IDynamicMetaObjectProvider>, который позволяет совместно использовать экземпляры класса `DynamicObject` между языками, поддерживающими модель взаимодействия DLR.</span><span class="sxs-lookup"><span data-stu-id="a63fc-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="a63fc-119">Например, можно создать экземпляр класса `DynamicObject` в C# и передать его в функцию IronPython.</span><span class="sxs-lookup"><span data-stu-id="a63fc-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="a63fc-120">Дополнительные сведения см. в разделе [Общие сведения о среде динамического языка](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="a63fc-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a63fc-121">Если имеется простой сценарий, в котором необходим объект, который может добавлять и удалять элементы только во время выполнения, но не должен определять конкретные операции и не имеет статических членов, используйте класс <xref:System.Dynamic.ExpandoObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="a63fc-122">Если у вас есть более сложный сценарий, в котором необходимо определить, как динамические объекты участвуют в протоколе взаимодействия, или необходимо управлять быстрым динамическим кэшированием среды DLR, создайте собственную реализацию интерфейса <xref:System.Dynamic.IDynamicMetaObjectProvider>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-123">Предположим, что вы хотите предоставить альтернативный синтаксис для доступа к значениям в словаре, чтобы вместо записи `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` в Visual Basic) можно было написать `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="a63fc-124">Кроме того, этот синтаксис должен быть нечувствительным к регистру, поэтому `sampleDictionary.Text` эквивалентен `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="a63fc-125">В следующем примере кода демонстрируется класс `DynamicDictionary`, производный от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="a63fc-126">Класс `DynamicDictionary` содержит объект типа `Dictionary<string, object>` (`Dictionary(Of String, Object)` в Visual Basic) для хранения пар "ключ-значение" и переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A> для поддержки нового синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="a63fc-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="a63fc-127">Он также предоставляет свойство `Count`, которое показывает, сколько динамических свойств содержит словарь.</span><span class="sxs-lookup"><span data-stu-id="a63fc-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="a63fc-128">Дополнительные примеры см. в разделе [Создание оболочек с DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) в блоге C# с часто задаваемыми вопросами.</span><span class="sxs-lookup"><span data-stu-id="a63fc-128">For more examples, see [Creating Wrappers with DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) on the C# Frequently Asked Questions blog.</span></span>  
 
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a63fc-129">Позволяет производным типам инициализировать новый экземпляр типа <see cref="T:System.Dynamic.DynamicObject" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-130">Нельзя напрямую создать экземпляр класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-131">Чтобы реализовать динамическое поведение, необходимо наследовать от класса <xref:System.Dynamic.DynamicObject> и переопределять необходимые методы.</span><span class="sxs-lookup"><span data-stu-id="a63fc-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="a63fc-132">C#Чтобы включить динамическое поведение для экземпляров классов, производных от класса <xref:System.Dynamic.DynamicObject>, необходимо использовать ключевое слово `dynamic`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="a63fc-133">Дополнительные сведения см. в разделе [Использование типа dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="a63fc-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="a63fc-134">В Visual Basic динамические операции поддерживаются с помощью позднего связывания.</span><span class="sxs-lookup"><span data-stu-id="a63fc-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="a63fc-135">Дополнительные сведения см. в разделе [раннее и позднее связывание](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="a63fc-135">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-136">В следующем примере кода показано, как создать экземпляр класса, производного от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a63fc-137">Возвращает перечисление имен всех динамических членов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="a63fc-138">Последовательность, содержащая имена динамических членов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-139">Этот метод существует только в целях отладки.</span><span class="sxs-lookup"><span data-stu-id="a63fc-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="a63fc-140">Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.</span><span class="sxs-lookup"><span data-stu-id="a63fc-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="a63fc-141">Предоставляет объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.</span><span class="sxs-lookup"><span data-stu-id="a63fc-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="a63fc-142">Объект можно инкапсулировать в другой объект <see cref="T:System.Dynamic.DynamicMetaObject" />, чтобы обеспечить пользовательское поведение для отдельных действий.</span><span class="sxs-lookup"><span data-stu-id="a63fc-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="a63fc-143">Данный метод поддерживает инфраструктуру среды DLR для разработчиков языков и не предназначен для непосредственного использования из кода.</span><span class="sxs-lookup"><span data-stu-id="a63fc-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="a63fc-144">Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj * obj -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj * obj -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-145">Предоставляет сведения о двоичной операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-145">Provides information about the binary operation.</span></span> <span data-ttu-id="a63fc-146">Свойство <c>binder.Operation</c> возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="a63fc-147">Например, для оператора <c>sum = аргумент1 + аргумент2</c>, в котором <c>аргумент1</c> и <c>аргумент2</c> являются производными от класса <see langword="DynamicObject" />, <c>binder.Operation</c> возвращает <c>ExpressionType.Add</c>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="a63fc-148">Правый операнд для двоичной операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-148">The right operand for the binary operation.</span></span> <span data-ttu-id="a63fc-149">Например, для оператора <c>sum = аргумент1 + аргумент2</c>, в котором <c>аргумент1</c> и <c>аргумент2</c> являются производными от класса <see langword="DynamicObject" />, <paramref name="arg" /> равно <c>аргумент2</c>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-150">Результат двоичной операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="a63fc-151">Предоставляет реализацию для двоичных операций.</span><span class="sxs-lookup"><span data-stu-id="a63fc-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="a63fc-152">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как сложение и умножение.</span><span class="sxs-lookup"><span data-stu-id="a63fc-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="a63fc-153">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-154">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-155">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-156">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как бинарные операции должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-157">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-158">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-159">Этот метод вызывается при наличии бинарных операций, таких как сложение или умножение.</span><span class="sxs-lookup"><span data-stu-id="a63fc-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="a63fc-160">Например, если метод <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> переопределен, он вызывается автоматически для таких инструкций, как `sum = first + second` или `multiply = first*second`, где `first` является производным от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="a63fc-161">Сведения о типе бинарной операции можно получить с помощью свойства `Operation` параметра `binder`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="a63fc-162">Если динамический объект используется только в C# и Visual Basic, свойство `binder.Operation` может иметь одно из следующих значений перечисления <xref:System.Linq.Expressions.ExpressionType>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="a63fc-163">Однако на других языках, таких как IronPython или IronRuby, могут быть другие значения.</span><span class="sxs-lookup"><span data-stu-id="a63fc-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="a63fc-164">Значение</span><span class="sxs-lookup"><span data-stu-id="a63fc-164">Value</span></span>|<span data-ttu-id="a63fc-165">Описание</span><span class="sxs-lookup"><span data-stu-id="a63fc-165">Description</span></span>|<span data-ttu-id="a63fc-166">C#</span><span class="sxs-lookup"><span data-stu-id="a63fc-166">C#</span></span>|<span data-ttu-id="a63fc-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="a63fc-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="a63fc-168">Операция сложения без проверки переполнения для числовых операндов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="a63fc-169">Операция составного присваивания сложения без проверки переполнения для числовых операндов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="a63fc-170">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="a63fc-171">Побитовая операция `AND`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="a63fc-172">Операция составного присваивания побитового `AND`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="a63fc-173">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="a63fc-174">Операция арифметического деления.</span><span class="sxs-lookup"><span data-stu-id="a63fc-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="a63fc-175">Операция составного присваивания арифметического деления.</span><span class="sxs-lookup"><span data-stu-id="a63fc-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="a63fc-176">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="a63fc-177">Побитовая операция `XOR`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="a63fc-178">Операция составного присваивания побитового `XOR`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="a63fc-179">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="a63fc-180">Сравнение "больше чем".</span><span class="sxs-lookup"><span data-stu-id="a63fc-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="a63fc-181">Сравнение "больше или равно".</span><span class="sxs-lookup"><span data-stu-id="a63fc-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="a63fc-182">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="a63fc-183">Битовая операция сдвига влево.</span><span class="sxs-lookup"><span data-stu-id="a63fc-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="a63fc-184">Битовая операция составного присваивания сдвига влево.</span><span class="sxs-lookup"><span data-stu-id="a63fc-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="a63fc-185">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="a63fc-186">Сравнение "меньше чем".</span><span class="sxs-lookup"><span data-stu-id="a63fc-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="a63fc-187">Сравнение "меньше или равно".</span><span class="sxs-lookup"><span data-stu-id="a63fc-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="a63fc-188">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="a63fc-189">Операция арифметического остатка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="a63fc-190">Операция составного присваивания арифметического остатка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="a63fc-191">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="a63fc-192">Операция умножения без проверки переполнения для числовых операндов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="a63fc-193">Операция составного присваивания умножения без проверки переполнения для числовых операндов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="a63fc-194">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="a63fc-195">Сравнение неравенства.</span><span class="sxs-lookup"><span data-stu-id="a63fc-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="a63fc-196">Побитовая или логическая операция `OR`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="a63fc-197">Побитовое или логическое `OR` составное присваивание.</span><span class="sxs-lookup"><span data-stu-id="a63fc-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="a63fc-198">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="a63fc-199">Математическая операция возведения числа в степень.</span><span class="sxs-lookup"><span data-stu-id="a63fc-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="a63fc-200">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="a63fc-201">Битовая операция сдвига вправо.</span><span class="sxs-lookup"><span data-stu-id="a63fc-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="a63fc-202">Битовая операция составного присваивания сдвига вправо.</span><span class="sxs-lookup"><span data-stu-id="a63fc-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="a63fc-203">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="a63fc-204">Операция вычитания без проверки переполнения для числовых операндов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="a63fc-205">Операция составного присваивания вычитания без проверки переполнения для числовых операндов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="a63fc-206">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="a63fc-207">Чтобы реализовать операции `OrElse` (`a || b`) и `AndAlso` (`a && b`) для динамических объектов в C#, может потребоваться реализовать как метод <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>, так и метод <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="a63fc-208">Операция `OrElse` состоит из унарной операции `IsTrue` и двоичной `Or` операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="a63fc-209">Операция `Or` выполняется только в том случае, если результат операции `IsTrue` `false`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="a63fc-210">Операция `AndAlso` состоит из унарной операции `IsFalse` и двоичной `And` операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="a63fc-211">Операция `And` выполняется только в том случае, если результат операции `IsFalse` `false`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-212">Предположим, что необходима структура данных для хранения текстовых и числовых представлений чисел, и необходимо определить основные математические операции, такие как сложение и вычитание таких данных.</span><span class="sxs-lookup"><span data-stu-id="a63fc-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="a63fc-213">В следующем примере кода демонстрируется класс `DynamicNumber`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-214">`DynamicNumber` переопределяет метод <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> для включения математических операций.</span><span class="sxs-lookup"><span data-stu-id="a63fc-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="a63fc-215">Он также переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, чтобы обеспечить доступ к элементам.</span><span class="sxs-lookup"><span data-stu-id="a63fc-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="a63fc-216">В этом примере поддерживаются только операции сложения и вычитания.</span><span class="sxs-lookup"><span data-stu-id="a63fc-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="a63fc-217">При попытке написать инструкцию, например `resultNumber = firstNumber*secondNumber`, возникает исключение времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="a63fc-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder * obj -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder * obj -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-218">Предоставляет сведения об операции преобразования.</span><span class="sxs-lookup"><span data-stu-id="a63fc-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="a63fc-219">Свойство <c>binder.Type</c> предоставляет тип, в который должен быть преобразован объект.</span><span class="sxs-lookup"><span data-stu-id="a63fc-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="a63fc-220">Например, для оператора <c>(String)sampleObject</c> в C# (<c>CType(sampleObject, Type)</c> в Visual Basic), в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Type</c> возвращает тип <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="a63fc-221">Свойство <c>binder.Explicit</c> предоставляет сведения о виде преобразования, который имеет место.</span><span class="sxs-lookup"><span data-stu-id="a63fc-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="a63fc-222">Для явного преобразования возвращается значение <see langword="true" />, для неявного — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-223">Результат операции преобразования типа.</span><span class="sxs-lookup"><span data-stu-id="a63fc-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="a63fc-224">Предоставляет реализацию для операций преобразования типа.</span><span class="sxs-lookup"><span data-stu-id="a63fc-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="a63fc-225">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, преобразующих объект из одного типа в другой.</span><span class="sxs-lookup"><span data-stu-id="a63fc-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="a63fc-226">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-227">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-228">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-229">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как следует выполнять преобразование типов для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-230">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-231">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-232">В C#, если этот метод переопределен, он вызывается автоматически при наличии явного или неявного преобразования, как показано в примере кода ниже.</span><span class="sxs-lookup"><span data-stu-id="a63fc-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="a63fc-233">В Visual Basic поддерживается только явное преобразование.</span><span class="sxs-lookup"><span data-stu-id="a63fc-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="a63fc-234">При переопределении этого метода его можно вызвать с помощью функций <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> или <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-235">Предположим, что необходима структура данных для хранения текстовых и числовых представлений чисел, и необходимо определить преобразования этой структуры данных в строки и целые числа.</span><span class="sxs-lookup"><span data-stu-id="a63fc-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="a63fc-236">В следующем примере кода демонстрируется класс `DynamicNumber`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-237">`DynamicNumber` переопределяет метод <xref:System.Dynamic.DynamicObject.TryConvert%2A> для включения преобразования типов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="a63fc-238">Он также переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, чтобы обеспечить доступ к элементам данных.</span><span class="sxs-lookup"><span data-stu-id="a63fc-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="a63fc-239">В этом примере поддерживается только преобразование в строки и целые числа.</span><span class="sxs-lookup"><span data-stu-id="a63fc-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="a63fc-240">При попытке преобразовать объект в любой другой тип возникает исключение времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="a63fc-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] * obj -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-241">Предоставляет сведения об операции инициализации.</span><span class="sxs-lookup"><span data-stu-id="a63fc-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="a63fc-242">Аргументы, переданные объекту во время инициализации.</span><span class="sxs-lookup"><span data-stu-id="a63fc-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="a63fc-243">Например, для операции <c>new SampleType(100)</c>, в которой <c>SampleType</c> является типом, производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> равно 100.</span><span class="sxs-lookup"><span data-stu-id="a63fc-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-244">Результат инициализации.</span><span class="sxs-lookup"><span data-stu-id="a63fc-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="a63fc-245">Предоставляет реализацию для операций, инициализирующих новый экземпляр динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="a63fc-246">Этот метод не предназначен для использования в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a63fc-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="a63fc-247">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-248">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-249">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-250">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как должен быть инициализирован новый экземпляр динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="a63fc-251">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-252">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-253">C#и Visual Basic компиляторы никогда не выдают код для использования этого метода, так как они не поддерживают типы первого класса.</span><span class="sxs-lookup"><span data-stu-id="a63fc-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="a63fc-254">Этот метод предназначен для языков, поддерживающих инициализацию динамических объектов с помощью синтаксиса, такого как `dynamic new`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-255">Предоставляет сведения об удалении.</span><span class="sxs-lookup"><span data-stu-id="a63fc-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="a63fc-256">Удаляемые индексы.</span><span class="sxs-lookup"><span data-stu-id="a63fc-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="a63fc-257">Предоставляет реализацию для операций, удаляющих объект по индексу.</span><span class="sxs-lookup"><span data-stu-id="a63fc-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="a63fc-258">Этот метод не предназначен для использования в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a63fc-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="a63fc-259">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-260">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-261">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-262">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать способ удаления значения с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="a63fc-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="a63fc-263">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-264">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-265">C#и Visual Basic компиляторы никогда не выдают код для использования этого метода, так как они не поддерживают этот тип операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="a63fc-266">Этот метод предназначен для языков, поддерживающих синтаксис удаления объектов по индексу, например `del sampleObject[1,2]` в Python.</span><span class="sxs-lookup"><span data-stu-id="a63fc-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-267">Предоставляет сведения об удалении.</span><span class="sxs-lookup"><span data-stu-id="a63fc-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="a63fc-268">Предоставляет реализацию для операций, удаляющих элемент объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="a63fc-269">Этот метод не предназначен для использования в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a63fc-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="a63fc-270">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-271">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-272">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-273">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать способ удаления члена объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="a63fc-274">Если этот метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-275">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-276">C#и Visual Basic компиляторы никогда не выдают код для использования этого метода, так как они не поддерживают этот тип операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="a63fc-277">Этот метод предназначен для языков, поддерживающих синтаксис для удаления элементов, например `del sampleObject.SampleMember` в Python.</span><span class="sxs-lookup"><span data-stu-id="a63fc-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-278">Предоставляет сведения об операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="a63fc-279">Индексы, которые используются в операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="a63fc-280">Например, для операции <c>sampleObject[3]</c> в C# (<c>sampleObject(3)</c> в Visual Basic), в которой <c>sampleObject</c> является производным от класса <see langword="DynamicObject" />, <c>indexes[0]</c> равно 3.</span><span class="sxs-lookup"><span data-stu-id="a63fc-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-281">Результат операции индексации.</span><span class="sxs-lookup"><span data-stu-id="a63fc-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="a63fc-282">Предоставляет реализацию для операций, получающих значение по индексу.</span><span class="sxs-lookup"><span data-stu-id="a63fc-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="a63fc-283">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций индексации.</span><span class="sxs-lookup"><span data-stu-id="a63fc-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="a63fc-284">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-285">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-286">(В большинстве случаев создается исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-287">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как получение значения по индексу должно выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-288">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-289">(В большинстве случаев создается исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-290">Если этот метод переопределен, он вызывается автоматически при наличии такой операции, как `sampleObject[3]` в C# или `sampleObject(3)` в Visual Basic, где `sampleObject` является производным от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-291">Предположим, что необходимо создать объект, в котором можно получить доступ к свойствам по именам, таким как `Property0`, `Property1`и т. д., или по индексу, чтобы, например, `sampleObject.Property0` эквивалентно `sampleObject[0]` C# в или `sampleObject(0)` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a63fc-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="a63fc-292">В следующем примере кода демонстрируется класс `SampleDynamicObject`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-293">Класс `SampleDynamicObject` содержит объект типа `Dictionary<string, object>` (`Dictionary(Of String, Object)` в Visual Basic) для хранения пар "ключ-значение".</span><span class="sxs-lookup"><span data-stu-id="a63fc-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="a63fc-294">`SampleDynamicObject` переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> и <xref:System.Dynamic.DynamicObject.TryGetIndex%2A>, чтобы обеспечить доступ по индексу.</span><span class="sxs-lookup"><span data-stu-id="a63fc-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="a63fc-295">Он переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, чтобы обеспечить доступ по имени свойства.</span><span class="sxs-lookup"><span data-stu-id="a63fc-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder * obj -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-296">Предоставляет информацию об объекте, который вызывает динамическую операцию.</span><span class="sxs-lookup"><span data-stu-id="a63fc-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="a63fc-297">Свойство <c>binder.Name</c> предоставляет имя члена, с которым выполняется динамическая операция.</span><span class="sxs-lookup"><span data-stu-id="a63fc-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="a63fc-298">Например, для оператора <c>Console.WriteLine(sampleObject.SampleProperty)</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> возвращает "SampleProperty".</span><span class="sxs-lookup"><span data-stu-id="a63fc-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="a63fc-299">Свойство <c>binder.IgnoreCase</c> задает, учитывается ли регистр в имени члена.</span><span class="sxs-lookup"><span data-stu-id="a63fc-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-300">Результат операции get.</span><span class="sxs-lookup"><span data-stu-id="a63fc-300">The result of the get operation.</span></span> <span data-ttu-id="a63fc-301">Например, если для свойства вызывается метод, можно присвоить свойству значение <paramref name="result" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="a63fc-302">Обеспечивает реализацию операций, которые получают значения членов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="a63fc-303">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как получение значения свойства.</span><span class="sxs-lookup"><span data-stu-id="a63fc-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="a63fc-304">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-305">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-306">(В большинстве случаев создается исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-307">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как операции, получающие значения членов, должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-308">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-309">(В большинстве случаев создается исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-310">Этот метод вызывается при наличии таких инструкций, как `Console.WriteLine(sampleObject.SampleProperty)`, где `sampleObject` является экземпляром класса, производного от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="a63fc-311">Можно также добавлять собственные члены в классы, производные от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="a63fc-312">Если ваш класс определяет свойства, а также переопределяет метод <xref:System.Dynamic.DynamicObject.TrySetMember%2A>, то среда выполнения динамического языка (DLR) сначала использует связыватель языка для поиска статического определения свойства в классе.</span><span class="sxs-lookup"><span data-stu-id="a63fc-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="a63fc-313">Если такого свойства нет, среда DLR вызывает метод <xref:System.Dynamic.DynamicObject.TrySetMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-314">Предположим, что вы хотите предоставить альтернативный синтаксис для доступа к значениям в словаре, чтобы вместо записи `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` в Visual Basic) можно было написать `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="a63fc-315">Кроме того, этот синтаксис должен быть нечувствительным к регистру, поэтому `sampleDictionary.Text` эквивалентен `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="a63fc-316">В следующем примере кода демонстрируется класс `DynamicDictionary`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-317">Класс `DynamicDictionary` содержит объект типа `Dictionary<string, object>` (`Dictionary(Of String, Object)` в Visual Basic) для хранения пар "ключ-значение" и переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A> для поддержки нового синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="a63fc-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="a63fc-318">Он также предоставляет свойство `Count`, которое показывает, сколько динамических свойств содержит словарь.</span><span class="sxs-lookup"><span data-stu-id="a63fc-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] * obj -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-319">Предоставляет сведения об операции вызова.</span><span class="sxs-lookup"><span data-stu-id="a63fc-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="a63fc-320">Аргументы, переданные объекту во время операции вызова.</span><span class="sxs-lookup"><span data-stu-id="a63fc-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="a63fc-321">Например, для операции <c>sampleObject(100)</c>, в которой <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> равно 100.</span><span class="sxs-lookup"><span data-stu-id="a63fc-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-322">Результат вызова объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="a63fc-323">Предоставляет реализацию для операций, вызывающих объект.</span><span class="sxs-lookup"><span data-stu-id="a63fc-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="a63fc-324">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов объекта или делегата.</span><span class="sxs-lookup"><span data-stu-id="a63fc-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="a63fc-325">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-326">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-327">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-328">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как операции, вызывающие объект, должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-329">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-330">(В большинстве случаев создается исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-331">Если этот метод переопределен, он вызывается автоматически при наличии такой операции, как `sampleObject(100)`, где `sampleObject` является производным от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="a63fc-332">Операция для вызова объекта поддерживается в C# , но не в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a63fc-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="a63fc-333">Компилятор Visual Basic никогда не создает код для использования этого метода, а язык Visual Basic не поддерживает синтаксис, подобный `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-334">Предположим, что необходима структура данных для хранения текстовых и числовых представлений чисел.</span><span class="sxs-lookup"><span data-stu-id="a63fc-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="a63fc-335">Необходимо иметь возможность указать значение для каждого свойства отдельно, а также инициализировать все свойства в одной инструкции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="a63fc-336">В следующем примере кода демонстрируется класс `DynamicNumber`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-337">`DynamicNumber` переопределяет метод <xref:System.Dynamic.DynamicObject.TryInvoke%2A>, чтобы включить инициализацию всех свойств за один раз.</span><span class="sxs-lookup"><span data-stu-id="a63fc-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="a63fc-338">Он также переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, чтобы обеспечить доступ к свойствам отдельных объектов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] * obj -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-339">Предоставляет сведения о динамической операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="a63fc-340">Свойство <c>binder.Name</c> предоставляет имя члена, с которым выполняется динамическая операция.</span><span class="sxs-lookup"><span data-stu-id="a63fc-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="a63fc-341">Например, для оператора <c>sampleObject.SampleMethod(100)</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> возвращает "SampleMethod".</span><span class="sxs-lookup"><span data-stu-id="a63fc-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="a63fc-342">Свойство <c>binder.IgnoreCase</c> задает, учитывается ли регистр в имени члена.</span><span class="sxs-lookup"><span data-stu-id="a63fc-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="a63fc-343">Аргументы, передаваемые в член объекта во время операции вызова.</span><span class="sxs-lookup"><span data-stu-id="a63fc-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="a63fc-344">Например, для оператора <c>sampleObject.SampleMethod(100)</c>, в котором <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> равно 100.</span><span class="sxs-lookup"><span data-stu-id="a63fc-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-345">Результат вызова члена.</span><span class="sxs-lookup"><span data-stu-id="a63fc-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="a63fc-346">Обеспечивает реализацию операций, которые вызывают член.</span><span class="sxs-lookup"><span data-stu-id="a63fc-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="a63fc-347">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов метода.</span><span class="sxs-lookup"><span data-stu-id="a63fc-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="a63fc-348">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-349">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-350">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-351">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как операции, вызывающие член объекта, должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-352">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-353">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-354">Если этот метод переопределен, он вызывается автоматически при выполнении такой операции, как `sampleObject.SampleMethod(100)`, где `sampleObject` является производным от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="a63fc-355">Можно также добавить собственные методы в классы, которые являются производными от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-356">Например, при переопределении <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> метода динамическая система диспетчеризации сначала пытается определить, существует ли указанный метод в классе.</span><span class="sxs-lookup"><span data-stu-id="a63fc-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="a63fc-357">Если метод не найден, используется реализация <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="a63fc-358">Этот метод не поддерживает параметры `ref` и `out`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="a63fc-359">Все параметры в массиве `args` передаются по значению.</span><span class="sxs-lookup"><span data-stu-id="a63fc-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-360">Предположим, что вы хотите предоставить альтернативный синтаксис для доступа к значениям в словаре, чтобы вместо записи `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` в Visual Basic) можно было написать `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="a63fc-361">Кроме того, требуется возможность вызова всех методов стандартного словаря в этом словаре.</span><span class="sxs-lookup"><span data-stu-id="a63fc-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="a63fc-362">В следующем примере кода демонстрируется класс `DynamicDictionary`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-363">Класс `DynamicDictionary` содержит объект типа `Dictionary<string, object>` (`Dictionary(Of String, Object)` в Visual Basic) для хранения пар "ключ-значение".</span><span class="sxs-lookup"><span data-stu-id="a63fc-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="a63fc-364">Он переопределяет метод <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> для поддержки методов класса <xref:System.Collections.Generic.Dictionary%602> и переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A> для поддержки нового синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="a63fc-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="a63fc-365">Он также предоставляет `Print` метод, который выводит все ключи и значения словаря.</span><span class="sxs-lookup"><span data-stu-id="a63fc-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-366">Предоставляет сведения об операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="a63fc-367">Индексы, которые используются в операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="a63fc-368">Например, для операции <c>sampleObject[3] = 10</c> в C# (<c>sampleObject(3) = 10</c> в Visual Basic), в которой <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>indexes[0]</c> равно 3.</span><span class="sxs-lookup"><span data-stu-id="a63fc-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="a63fc-369">Значение, которое необходимо задать для объекта с заданным индексом.</span><span class="sxs-lookup"><span data-stu-id="a63fc-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="a63fc-370">Например, для операции <c>sampleObject[3] = 10</c> в C# (<c>sampleObject(3) = 10</c> в Visual Basic), в которой <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> равно 10.</span><span class="sxs-lookup"><span data-stu-id="a63fc-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="a63fc-371">Предоставляет реализацию для операций, задающих значение по индексу.</span><span class="sxs-lookup"><span data-stu-id="a63fc-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="a63fc-372">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, осуществляющих доступ к объектам по заданному индексу.</span><span class="sxs-lookup"><span data-stu-id="a63fc-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="a63fc-373">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-374">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-375">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-376">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как операции, обращающиеся к объекту по индексу, должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-377">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-378">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-379">Если этот метод переопределен, он вызывается автоматически при наличии такой операции, как `sampleObject[3] = 10` в C# или `sampleObject(3) = 10` в Visual Basic, где `sampleObject` является производным от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-380">Предположим, что необходимо создать объект, в котором можно получить доступ к свойствам по именам, таким как `Property0`, `Property1`и т. д., или по индексу, чтобы, например, `sampleObject.Property0` эквивалентно `sampleObject[0]` C# в или `sampleObject(0)` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a63fc-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="a63fc-381">В следующем примере кода демонстрируется класс `SampleDynamicObject`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-382">Класс `SampleDynamicObject` содержит объект типа `Dictionary<string, object>` (`Dictionary(Of String, Object)` в Visual Basic) для хранения пар "ключ-значение".</span><span class="sxs-lookup"><span data-stu-id="a63fc-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="a63fc-383">`SampleDynamicObject` переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> и <xref:System.Dynamic.DynamicObject.TryGetIndex%2A>, чтобы обеспечить доступ по индексу.</span><span class="sxs-lookup"><span data-stu-id="a63fc-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="a63fc-384">Он переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, чтобы обеспечить доступ по имени свойства.</span><span class="sxs-lookup"><span data-stu-id="a63fc-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-385">Предоставляет информацию об объекте, который вызывает динамическую операцию.</span><span class="sxs-lookup"><span data-stu-id="a63fc-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="a63fc-386">Свойство <c>binder.Name</c> предоставляет имя члена, которому присваивается значение.</span><span class="sxs-lookup"><span data-stu-id="a63fc-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="a63fc-387">Например, для оператора <c>sampleObject.SampleProperty = "Test"</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> возвращает "SampleProperty".</span><span class="sxs-lookup"><span data-stu-id="a63fc-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="a63fc-388">Свойство <c>binder.IgnoreCase</c> задает, учитывается ли регистр в имени члена.</span><span class="sxs-lookup"><span data-stu-id="a63fc-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="a63fc-389">Значение, которое требуется задать для члена.</span><span class="sxs-lookup"><span data-stu-id="a63fc-389">The value to set to the member.</span></span> <span data-ttu-id="a63fc-390">Например, для оператора <c>sampleObject.SampleProperty = "Test"</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> равно "Test".</span><span class="sxs-lookup"><span data-stu-id="a63fc-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="a63fc-391">Обеспечивает реализацию операций, которые задают значения членов.</span><span class="sxs-lookup"><span data-stu-id="a63fc-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="a63fc-392">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как задание значения свойства.</span><span class="sxs-lookup"><span data-stu-id="a63fc-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="a63fc-393">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-394">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-395">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-396">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как операции, устанавливающие значение для элемента, должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-397">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-398">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-399">Этот метод вызывается при наличии таких инструкций, как `sampleObject.SampleProperty = "Test"`, где `sampleObject` является экземпляром класса, производного от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="a63fc-400">Можно также добавлять собственные члены в классы, производные от класса `DynamicObject`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="a63fc-401">Если ваш класс определяет свойства, а также переопределяет метод <xref:System.Dynamic.DynamicObject.TrySetMember%2A>, то среда выполнения динамического языка (DLR) сначала использует связыватель языка для поиска статического определения свойства в классе.</span><span class="sxs-lookup"><span data-stu-id="a63fc-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="a63fc-402">Если такого свойства нет, среда DLR вызывает метод <xref:System.Dynamic.DynamicObject.TrySetMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-403">Предположим, что вы хотите предоставить альтернативный синтаксис для доступа к значениям в словаре, чтобы вместо записи `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` в Visual Basic) можно было написать `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="a63fc-404">Кроме того, этот синтаксис должен быть нечувствительным к регистру, поэтому `sampleDictionary.Text` эквивалентен `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="a63fc-405">В следующем примере кода демонстрируется класс `DynamicDictionary`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-406">Класс `DynamicDictionary` содержит объект типа `Dictionary<string, object>` (`Dictionary(Of String, Object)` в Visual Basic) для хранения пар "ключ-значение" и переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A> для поддержки нового синтаксиса.</span><span class="sxs-lookup"><span data-stu-id="a63fc-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="a63fc-407">Он также предоставляет свойство `Count`, которое показывает, сколько динамических свойств содержит словарь.</span><span class="sxs-lookup"><span data-stu-id="a63fc-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder * obj -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder * obj -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="a63fc-408">Предоставляет сведения об унарной операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-408">Provides information about the unary operation.</span></span> <span data-ttu-id="a63fc-409">Свойство <c>binder.Operation</c> возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="a63fc-410">Например, для оператора <c>negativeNumber = -number</c>, в котором <c>number</c> является производным от класса <see langword="DynamicObject" />, <c>binder.Operation</c> возвращает "Negate".</span><span class="sxs-lookup"><span data-stu-id="a63fc-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="a63fc-411">Результат унарной операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="a63fc-412">Предоставляет реализацию для унарных операций.</span><span class="sxs-lookup"><span data-stu-id="a63fc-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="a63fc-413">Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вычитание, увеличение или уменьшение.</span><span class="sxs-lookup"><span data-stu-id="a63fc-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="a63fc-414">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a63fc-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a63fc-415">Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-416">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a63fc-417">Классы, производные от класса <xref:System.Dynamic.DynamicObject>, могут переопределять этот метод, чтобы указать, как унарные операции должны выполняться для динамического объекта.</span><span class="sxs-lookup"><span data-stu-id="a63fc-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="a63fc-418">Если метод не переопределен, поведение определяется связывателем времени выполнения языка.</span><span class="sxs-lookup"><span data-stu-id="a63fc-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="a63fc-419">(В большинстве случаев создается языковое исключение во время выполнения).</span><span class="sxs-lookup"><span data-stu-id="a63fc-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="a63fc-420">Этот метод вызывается при наличии унарных операций, таких как отрицание, увеличение или уменьшение.</span><span class="sxs-lookup"><span data-stu-id="a63fc-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="a63fc-421">Например, если переопределяется метод <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>, этот метод вызывается автоматически для таких операторов, как `negativeNumber = -number`, где `number` является производным от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="a63fc-422">Сведения о типе унарной операции можно получить с помощью свойства `Operation` параметра `binder`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="a63fc-423">Если динамический объект используется только в C# и Visual Basic, свойство `binder.Operation` может иметь одно из следующих значений перечисления <xref:System.Linq.Expressions.ExpressionType>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="a63fc-424">Однако на других языках, таких как IronPython или IronRuby, могут быть другие значения.</span><span class="sxs-lookup"><span data-stu-id="a63fc-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="a63fc-425">Значение</span><span class="sxs-lookup"><span data-stu-id="a63fc-425">Value</span></span>|<span data-ttu-id="a63fc-426">Описание</span><span class="sxs-lookup"><span data-stu-id="a63fc-426">Description</span></span>|<span data-ttu-id="a63fc-427">C#</span><span class="sxs-lookup"><span data-stu-id="a63fc-427">C#</span></span>|<span data-ttu-id="a63fc-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="a63fc-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="a63fc-429">Унарная операция декремента.</span><span class="sxs-lookup"><span data-stu-id="a63fc-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="a63fc-430">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="a63fc-431">Унарная операция инкремента.</span><span class="sxs-lookup"><span data-stu-id="a63fc-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="a63fc-432">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="a63fc-433">Арифметическое отрицание.</span><span class="sxs-lookup"><span data-stu-id="a63fc-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="a63fc-434">Логическое отрицание.</span><span class="sxs-lookup"><span data-stu-id="a63fc-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="a63fc-435">Дополнение к единицам.</span><span class="sxs-lookup"><span data-stu-id="a63fc-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="a63fc-436">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="a63fc-437">Значение false для условия.</span><span class="sxs-lookup"><span data-stu-id="a63fc-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="a63fc-438">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="a63fc-439">Истинное значение условия.</span><span class="sxs-lookup"><span data-stu-id="a63fc-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="a63fc-440">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="a63fc-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="a63fc-441">Унарный плюс.</span><span class="sxs-lookup"><span data-stu-id="a63fc-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="a63fc-442">Чтобы реализовать операции `OrElse` (`a || b`) и `AndAlso` (`a && b`) для динамических объектов в C#, может потребоваться реализовать как метод <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>, так и метод <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="a63fc-443">Операция `OrElse` состоит из унарной операции `IsTrue` и двоичной `Or` операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="a63fc-444">Операция `Or` выполняется только в том случае, если результат операции `IsTrue` `false`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="a63fc-445">Операция `AndAlso` состоит из унарной операции `IsFalse` и двоичной `And` операции.</span><span class="sxs-lookup"><span data-stu-id="a63fc-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="a63fc-446">Операция `And` выполняется только в том случае, если результат операции `IsFalse` `false`.</span><span class="sxs-lookup"><span data-stu-id="a63fc-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a63fc-447">Предположим, что необходима структура данных для хранения текстовых и числовых представлений чисел, и необходимо определить операцию математического отрицания для таких данных.</span><span class="sxs-lookup"><span data-stu-id="a63fc-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="a63fc-448">В следующем примере кода демонстрируется класс `DynamicNumber`, производный от класса <xref:System.Dynamic.DynamicObject>.</span><span class="sxs-lookup"><span data-stu-id="a63fc-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="a63fc-449">`DynamicNumber` переопределяет метод <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A>, чтобы включить операцию математического отрицания.</span><span class="sxs-lookup"><span data-stu-id="a63fc-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="a63fc-450">Также переопределяет методы <xref:System.Dynamic.DynamicObject.TrySetMember%2A> и <xref:System.Dynamic.DynamicObject.TryGetMember%2A>, чтобы обеспечить доступ к элементам.</span><span class="sxs-lookup"><span data-stu-id="a63fc-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="a63fc-451">В этом примере поддерживается только операция математического отрицания.</span><span class="sxs-lookup"><span data-stu-id="a63fc-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="a63fc-452">При попытке написать инструкцию, например `negativeNumber = +number`, возникает исключение времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="a63fc-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
