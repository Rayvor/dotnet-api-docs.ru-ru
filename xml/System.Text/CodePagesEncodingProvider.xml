<Type Name="CodePagesEncodingProvider" FullName="System.Text.CodePagesEncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a064ef433590ebb02482e6034fc9635841c851b5" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75030841" /></Metadata><TypeSignature Language="C#" Value="public sealed class CodePagesEncodingProvider : System.Text.EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CodePagesEncodingProvider extends System.Text.EncodingProvider" />
  <TypeSignature Language="DocId" Value="T:System.Text.CodePagesEncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CodePagesEncodingProvider&#xA;Inherits EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodePagesEncodingProvider sealed : System::Text::EncodingProvider" />
  <TypeSignature Language="F#" Value="type CodePagesEncodingProvider = class&#xA;    inherit EncodingProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="dotnet-plat-ext-2.1">System.Text.EncodingProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет доступ к поставщику кодировки для кодовых страниц, которые в противном случае доступны только в .NET Framework для настольных систем.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 .NET Framework для Windows Desktop поддерживает большой набор кодировок Юникода и кодовых страниц. .NET Core, с другой стороны, поддерживает только следующие кодировки:

-   ASCII (кодовая страница 20127), возвращаемая свойством <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>.

-   ISO-8859-1 (кодовая страница 28591).

-   UTF-7 (кодовая страница 65000), возвращаемая свойством <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>.

-   UTF-8 (кодовая страница 65001), возвращаемая свойством <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>.

-   UTF-16 и UTF-16LE (кодовая страница 1200), возвращаемая свойством <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>.

-   UTF-16BE (кодовая страница 1201), которая создается путем вызова конструктора <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> или <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> с `bigEndian` значением `true`.

-   UTF-32 и UTF-32LE (кодовая страница 12000), возвращаемая свойством <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>.

-   UTF-32BE (кодовая страница 12001), которая создается путем вызова конструктора <xref:System.Text.UTF32Encoding> с параметром `bigEndian` и предоставления значения `true` в вызове метода.

 В отличие от кодовой страницы 20127, кодировки кодовых страниц не поддерживаются.

 Класс <xref:System.Text.CodePagesEncodingProvider> расширяет <xref:System.Text.EncodingProvider>, чтобы сделать эти кодовые страницы доступными для .NET Core. Чтобы использовать эти дополнительные кодовые страницы, выполните следующие действия.

-   Добавьте в проект ссылку на сборку System.Text.Encoding.CodePages.dll.

-   Получите объект <xref:System.Text.CodePagesEncodingProvider> из статического свойства <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>.

-   Передайте объект <xref:System.Text.CodePagesEncodingProvider> методу <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>.

 После регистрации объекта <xref:System.Text.EncodingProvider> поддерживаемые им кодировки можно получить, вызвав перегрузки <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>; не следует вызывать перегрузки <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

.NET Framework поддерживает большое количество кодировок символов и кодовых страниц. Полный список кодировок можно получить, вызвав метод <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>, доступный в .NET Framework. С другой стороны, .NET Core поддерживает только следующие кодировки по умолчанию:

-   ASCII (кодовая страница 20127), возвращаемая свойством <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>.

-   ISO-8859-1 (кодовая страница 28591).

-   UTF-7 (кодовая страница 65000), возвращаемая свойством <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>.

-   UTF-8 (кодовая страница 65001), возвращаемая свойством <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>.

-   UTF-16 и UTF-16LE (кодовая страница 1200), возвращаемая свойством <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>.

-   UTF-16BE (кодовая страница 1201), которая создается путем вызова конструктора <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> или <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> с `bigEndian` значением `true`.

-   UTF-32 и UTF-32LE (кодовая страница 12000), возвращаемая свойством <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>.

-   UTF-32BE (кодовая страница 12001), которая создается путем вызова конструктора <xref:System.Text.UTF32Encoding> с параметром `bigEndian` и предоставления значения `true` в вызове метода.

 Чтобы получить кодировку, имеющуюся в .NET Framework, но не в .NET Core, выполните следующие действия.

-   Добавьте в проект ссылку на сборку *System. Text. Encoding. codepage. dll* .

-   Получите объект <xref:System.Text.EncodingProvider> из статического свойства <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>.

-   Передайте объект <xref:System.Text.EncodingProvider> в метод <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>, чтобы кодировки, предоставляемые объектом <xref:System.Text.EncodingProvider>, были доступны среде CLR.

-   Вызовите перегрузку <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>, чтобы получить кодировку. Метод <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> вызовет соответствующий метод <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>, чтобы определить, может ли он предоставить запрошенную кодировку.

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.CodePagesEncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="override this.GetEncoding : int -&gt; System.Text.Encoding" Usage="codePagesEncodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="codepage">Идентификатор кодовой страницы предпочтительной кодировки, которую может поддерживать поставщик кодировок.</param>
        <summary>Возвращает кодировку, связанную с указанным идентификатором кодовой страницы.</summary>
        <returns>Кодировка, связанная с указанным идентификатором кодовой страницы, или <see langword="null" />, если поставщик не поддерживает запрошенную кодировку кодовых страниц.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.CodePagesEncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetEncoding : string -&gt; System.Text.Encoding" Usage="codePagesEncodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="name">Имя кодовой страницы предпочтительной кодировки, которую может поддерживать поставщик кодировок.</param>
        <summary>Возвращает кодировку, связанную с указанным именем кодовой страницы.</summary>
        <returns>Кодировка, связанная с указанной кодовой страницей, или <see langword="null" />, если поставщик не поддерживает запрошенную кодировку.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static System.Text.EncodingProvider Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.EncodingProvider Instance" />
      <MemberSignature Language="DocId" Value="P:System.Text.CodePagesEncodingProvider.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Instance As EncodingProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::EncodingProvider ^ Instance { System::Text::EncodingProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : System.Text.EncodingProvider" Usage="System.Text.CodePagesEncodingProvider.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.EncodingProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает поставщик кодировки для кодовых страниц, поддерживаемых платформой .NET Framework для настольных систем, но не текущей платформой .NET Framework.</summary>
        <value>Поставщик кодирования, который разрешает доступ к кодировкам, не поддерживаемым на текущей .NET Frameworkной платформе.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 .NET Framework поддерживает большое количество кодировок символов и кодовых страниц. Полный список кодировок можно получить, вызвав метод <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>, доступный в .NET Framework. С другой стороны, .NET Core поддерживает только следующие кодировки по умолчанию:

-   ASCII (кодовая страница 20127), возвращаемая свойством <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>.

-   ISO-8859-1 (кодовая страница 28591).

-   UTF-7 (кодовая страница 65000), возвращаемая свойством <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>.

-   UTF-8 (кодовая страница 65001), возвращаемая свойством <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>.

-   UTF-16 и UTF-16LE (кодовая страница 1200), возвращаемая свойством <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>.

-   UTF-16BE (кодовая страница 1201), которая создается путем вызова конструктора <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> или <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> с `bigEndian` значением `true`.

-   UTF-32 и UTF-32LE (кодовая страница 12000), возвращаемая свойством <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>.

-   UTF-32BE (кодовая страница 12001), которая создается путем вызова конструктора <xref:System.Text.UTF32Encoding> с параметром `bigEndian` и предоставления значения `true` в вызове метода.

 Чтобы получить кодировку, имеющуюся в .NET Framework на рабочем столе Windows, но не в .NET Core, выполните следующие действия.

-   Добавьте в проект ссылку на сборку System.Text.Encoding.CodePages.dll.

-   Получите объект <xref:System.Text.EncodingProvider> из статического свойства <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>.

-   Передайте объект <xref:System.Text.EncodingProvider> в метод <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>, чтобы кодировки, предоставляемые объектом <xref:System.Text.EncodingProvider>, были доступны среде CLR.

-   Вызовите перегрузку <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>, чтобы получить кодировку. Метод <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> вызовет соответствующий метод <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>, чтобы определить, может ли он предоставить запрошенную кодировку.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
