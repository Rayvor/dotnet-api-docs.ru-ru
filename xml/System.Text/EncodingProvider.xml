<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9095cc2041817c59bf18eceff1fa6a9a1d7eef88" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75118767" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет базовый класс для поставщика кодировки, обеспечивающего кодировки, недоступные в определенной платформе.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поставщик кодировок предоставляет кодировки, которые не доступны другим образом на конкретной целевой платформе.  
  
 .NET Framework на рабочем столе Windows поддерживает большое количество кодировок символов и кодовых страниц. Полный список кодировок, доступных в .NET Framework на рабочем столе Windows, можно получить, вызвав метод <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>. .NET Core, с другой стороны, по умолчанию поддерживает только следующие кодировки:  
  
-   ASCII (кодовая страница 20127), возвращаемая свойством <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>.  
  
-   ISO-8859-1 (кодовая страница 28591).  
  
-   UTF-7 (кодовая страница 65000), возвращаемая свойством <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>.  
  
-   UTF-8 (кодовая страница 65001), возвращаемая свойством <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>.  
  
-   UTF-16 и UTF-16LE (кодовая страница 1200), возвращаемая свойством <xref:System.Text.Encoding.Unicode%2A>.  
  
-   UTF-16BE (кодовая страница 1201), которая создается путем вызова конструктора <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> или <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> с `bigEndian` значением `true`.  
  
-   UTF-32 и UTF-32LE (кодовая страница 12000), возвращаемая свойством <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>.  
  
-   UTF-32BE (кодовая страница 12001), которая создается путем вызова конструктора <xref:System.Text.UTF32Encoding> с параметром `bigEndian` и предоставления значения `true` в вызове метода.  
  
 Начиная с .NET Framework 4,6, <xref:System.Text.EncodingProvider> является базовым классом, который делает недоступные для .NET Framework кодировки в противном случае недоступны. Это включает следующие шаги.  
  
1.  Определите подкласс <xref:System.Text.EncodingProvider>, переопределяющий два абстрактных <xref:System.Text.EncodingProvider.GetEncoding%2A> перегрузки, <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> и <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>. Эти перегрузки возвращают неподдерживаемую кодировку кода кодовой страницы и по имени. Обратите внимание, что можно также выбрать возврат кодировки по умолчанию, если метод <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> вызывается с аргументом, равным 0.  
  
2.  При необходимости можно переопределить виртуальные <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> и методы <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>. В большинстве случаев это необязательно, поскольку базовый класс предоставляет реализацию по умолчанию.  
  
3.  Передайте <xref:System.Text.EncodingProvider> экземпляр в метод <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>, чтобы кодировки, предоставляемые объектом <xref:System.Text.EncodingProvider>, были доступны среде CLR.  
  
4.  Вызовите перегрузку <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>, чтобы получить кодировку. Метод <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> вызовет соответствующий <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>, чтобы определить, может ли он предоставить запрошенную кодировку.  
  
 Библиотека классов .NET Framework предоставляет одно статическое свойство, <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>, которое возвращает объект <xref:System.Text.EncodingProvider>, который предоставляет полный набор кодировок, доступных в библиотеке классов настольных .NET Framework, доступной для [!INCLUDE[net_core](~/includes/net-core-md.md)] приложений. Кроме того, можно выполнить наследование от класса <xref:System.Text.EncodingProvider>, чтобы сделать доступными собственные кодировки.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">CodePagesEncodingProvider. instance, свойство</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализация нового экземпляра класса <see cref="T:System.Text.EncodingProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает кодировку.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Идентификатор кодовой страницы запрошенной кодировки.</param>
        <summary>Возвращает кодировку, связанную с указанным идентификатором кодовой страницы.</summary>
        <returns>Кодировка, связанная с указанной кодовой страницей, или <see langword="null" />, если этот поставщик <see cref="T:System.Text.EncodingProvider" /> не может вернуть допустимую кодировку, соответствующую <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Примечания к наследникам

Переопределите метод Encoding [(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) , чтобы он возвращал кодировку или кодировки, поддерживаемые подклассом <xref:System.Text.EncodingProvider>. Когда пользовательский код пытается получить кодировку путем вызова метода Encoding [(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) , метод передает идентификатор `codepage` каждому зарегистрированному поставщику кодирования, пока один из них не вернет допустимую кодировку. Если None возвращает допустимую кодировку, метод [Encoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) пытается получить кэшированную кодировку, идентификатор кодовой страницы которой `codepage`. Поэтому, если `codepage` не является идентификатором кодовой страницы для поддерживаемой кодировки, метод должен возвращать `null`. Он никогда не должен вызывать исключение.
        
Обратите внимание, что можно также выбрать возврат кодовой страницы по умолчанию, если значение аргумента `codepage` равно 0.

## <a name="notes-to-callers"></a>Примечания для вызывающих объектов
        
Этот метод вызывается методом [Encoding. Encoding (Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) . Не следует вызывать его непосредственно из пользовательского кода.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Переопределите метод <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />, чтобы он возвращал кодировку или кодировки, поддерживаемые подклассом <see cref="T:System.Text.EncodingProvider" />. Когда пользовательский код пытается получить кодировку путем вызова метода <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />, метод передает идентификатор <paramref name="codepage" /> каждому зарегистрированному поставщику кодирования, пока один из них не вернет допустимую кодировку. Если None возвращает допустимую кодировку, метод <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> пытается получить кэшированную кодировку, идентификатор кодовой страницы которой <paramref name="codepage" />. Поэтому, если <paramref name="codepage" /> не является идентификатором кодовой страницы для поддерживаемой кодировки, метод должен возвращать <see langword="null" />. Он никогда не должен вызывать исключение.</para></block>
        <block subset="none" type="usage"><para>Этот метод вызывается методом <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />. Не следует вызывать его непосредственно из пользовательского кода.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя запрошенной кодировки.</param>
        <summary>Возвращает кодировку с указанным именем.</summary>
        <returns>Кодировка, связанная с указанным именем, или <see langword="null" />, если этот поставщик <see cref="T:System.Text.EncodingProvider" /> не может вернуть допустимую кодировку, соответствующую <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Примечания к наследникам 
                  
Переопределите метод [GetString (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) для возврата кодировки или кодировок, поддерживаемых подклассом <xref:System.Text.EncodingProvider>. Когда пользовательский код пытается получить кодировку путем вызова метода [GetString (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) , метод передает `name` аргумент каждому зарегистрированному поставщику кодирования, пока один из них не вернет допустимую кодировку. Если None возвращает допустимую кодировку, метод [GetString (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) пытается получить кэшированную кодировку, имя которой `name`. Поэтому, если `name` не является именем поддерживаемой кодировки, метод должен возвращать `null`. Единственный случай, когда метод должен вызывать исключение, — только в том случае, если `name` `null`.

## <a name="notes-to-callers"></a>Примечания для вызывающих объектов

Этот метод вызывается методом [Encoding. GetString (String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) . Не следует вызывать его непосредственно из пользовательского кода.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Переопределите метод <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />, чтобы он возвращал кодировку или кодировки, поддерживаемые подклассом <see cref="T:System.Text.EncodingProvider" />. Когда пользовательский код пытается получить кодировку путем вызова метода <see cref="M:System.Text.Encoding.GetEncoding(System.String)" />, метод передает аргумент <paramref name="name" /> каждому зарегистрированному поставщику кодирования, пока один из них не вернет допустимую кодировку. Если None возвращает допустимую кодировку, метод <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> пытается получить кэшированную кодировку, имя которой <paramref name="name" />. Поэтому, если <paramref name="name" /> не является именем поддерживаемой кодировки, метод должен возвращать <see langword="null" />. Единственный случай, когда метод должен вызывать исключение, — только в том случае, если <paramref name="name" /> <see langword="null" />.</para></block>
        <block subset="none" type="usage"><para>Этот метод вызывается методом <see cref="M:System.Text.Encoding.GetEncoding(System.String)" />. Не следует вызывать его непосредственно из пользовательского кода.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Идентификатор кодовой страницы запрошенной кодировки.</param>
        <param name="encoderFallback">Объект, предоставляющий процедуру обработки ошибок, когда символ не может быть закодирован с использованием этой кодировки.</param>
        <param name="decoderFallback">Объект, предоставляющий процедуру обработки ошибок, когда последовательность байтов не может быть декодирована с использованием этой кодировки.</param>
        <summary>Возвращает кодировку, связанную с указанным идентификатором кодовой страницы. С помощью параметров задается обработчик ошибок для символов, которые не удается закодировать, и последовательностей байтов, которые не удается декодировать.</summary>
        <returns>Кодировка, связанная с указанной кодовой страницей, или <see langword="null" />, если этот поставщик <see cref="T:System.Text.EncodingProvider" /> не может вернуть допустимую кодировку, соответствующую <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры `encoderFallback` и `decoderFallback` являются объектами, определяющими резервную стратегию, используемую в случае, когда кодировщику не удается преобразовать символ в последовательность байтов или декодер не может преобразовать последовательность байтов в символ. .NET Framework предоставляет следующие резервные механизмы.  
  
-   Откат исключения. Если аргумент `encoderFallback` является экземпляром <xref:System.Text.EncoderExceptionFallback>или аргументом `decoderExceptionFallback` является экземпляр <xref:System.Text.DecoderExceptionFallback>, метод Encoding создает исключение, если символы не могут быть закодированы, а метод декодирования создает исключение, если последовательность байтов не может быть декодирована.  
  
-   Замена резервной. Если аргумент `encoderFallback` является экземпляром <xref:System.Text.EncoderReplacementFallback>или аргументом `decoderExceptionFallback` является экземпляр <xref:System.Text.DecoderReplacementFallback>, методы кодирования и декодирования заменяют замещающую строку символами, которые не могут быть закодированы, а последовательности байтов не могут быть декодированы. Если экземпляр резервного объекта замены был создан путем вызова конструктора без параметров, то символом замены будет "?". При вызове конструктора <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> или <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> можно указать строку замены.  
  
-   Стратегия наилучшего соответствия. Можно наследовать от класса <xref:System.Text.EncoderFallback> или <xref:System.Text.DecoderFallback>, чтобы реализовать механизм замены наилучшего соответствия.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Поскольку вызовы этого метода используют реализацию метода <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />, его не нужно переопределять. Когда пользовательский код пытается получить кодировку путем вызова метода <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />, метод передает идентификатор <paramref name="codepage" /> каждому зарегистрированному поставщику кодирования, пока один из них не вернет допустимую кодировку. Если None возвращает допустимую кодировку, метод <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> пытается получить кэшированную кодировку, идентификатор кодовой страницы которой <paramref name="codepage" />. Поэтому, если вы решите переопределить метод <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />, переопределение должно возвращать значение <see langword="null" />, если <paramref name="codepage" /> не является идентификатором кодовой страницы поддерживаемой кодировки. Он никогда не должен вызывать исключение.</para></block>
        <block subset="none" type="usage"><para>Этот метод вызывается методом <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />. Не следует вызывать его непосредственно из пользовательского кода.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Имя предпочтительной кодировки.</param>
        <param name="encoderFallback">Объект, предоставляющий процедуру обработки ошибок, когда символ не может быть закодирован с использованием этой кодировки.</param>
        <param name="decoderFallback">Объект, предоставляющий процедуру обработки ошибок, когда последовательность байтов не может быть декодирована с использованием текущей кодировки.</param>
        <summary>Возвращает кодировку, связанную с заданным именем. С помощью параметров задается обработчик ошибок для символов, которые не удается закодировать, и последовательностей байтов, которые не удается декодировать.</summary>
        <returns>Кодировка, связанная с указанным именем, или <see langword="null" />, если этот поставщик <see cref="T:System.Text.EncodingProvider" /> не может вернуть допустимую кодировку, соответствующую <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры `encoderFallback` и `decoderFallback` являются объектами, определяющими резервную стратегию, используемую в случае, когда кодировщику не удается преобразовать символ в последовательность байтов или декодер не может преобразовать последовательность байтов в символ. .NET Framework предоставляет следующие резервные механизмы.  
  
-   Откат исключения. Если аргумент `encoderFallback` является экземпляром <xref:System.Text.EncoderExceptionFallback>или аргументом `decoderExceptionFallback` является экземпляр <xref:System.Text.DecoderExceptionFallback>, метод Encoding создает исключение, если символы не могут быть закодированы, а метод декодирования создает исключение, если последовательность байтов не может быть декодирована.  
  
-   Замена резервной. Если аргумент `encoderFallback` является экземпляром <xref:System.Text.EncoderReplacementFallback>или аргументом `decoderExceptionFallback` является экземпляр <xref:System.Text.DecoderReplacementFallback>, методы кодирования и декодирования заменяют замещающую строку символами, которые не могут быть закодированы, а последовательности байтов не могут быть декодированы. Если экземпляр резервного объекта замены был создан путем вызова конструктора без параметров, то символом замены будет "?". При вызове конструктора <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> или <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> можно указать строку замены.  
  
-   Стратегия наилучшего соответствия. Можно наследовать от класса <xref:System.Text.EncoderFallback> или <xref:System.Text.DecoderFallback>, чтобы реализовать механизм замены наилучшего соответствия.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Поскольку вызовы этого метода используют реализацию метода <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />, его не нужно переопределять. Когда пользовательский код пытается получить кодировку путем вызова метода <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />, метод передает идентификатор <paramref name="codepage" /> каждому зарегистрированному поставщику кодирования, пока один из них не вернет допустимую кодировку. Если None возвращает допустимую кодировку, метод <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> пытается получить кэшированную кодировку, идентификатор кодовой страницы которой <paramref name="codepage" />. Поэтому, если вы решите переопределить метод <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />, переопределение должно возвращать значение <see langword="null" />, если <paramref name="codepage" /> не является идентификатором кодовой страницы поддерживаемой кодировки. Он никогда не должен вызывать исключение.</para></block>
        <block subset="none" type="usage"><para>Этот метод вызывается методом <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />. Не следует вызывать его непосредственно из пользовательского кода.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>
