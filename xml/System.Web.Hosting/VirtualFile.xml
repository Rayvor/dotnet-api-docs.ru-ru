<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1dc1490a7df51d445efca113976396a3d0fc7cb5" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70628236" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <TypeSignature Language="F#" Value="type VirtualFile = class&#xA;    inherit VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представление объекта файла в виртуальном файле или пространстве ресурса.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile> Класс является базовым классом для объектов, представляющих файлы в виртуальной файловой системе. Как правило, для каждого <xref:System.Web.Hosting.VirtualFile> <xref:System.Web.Hosting.VirtualPathProvider> потомка объекта в веб-приложении реализуется потомок класса.  
  
   
  
## Examples  
 Следующий пример кода представляет собой <xref:System.Web.Hosting.VirtualFile> реализацию класса, объединяющую сведения, хранящиеся <xref:System.Data.DataSet> в объекте, с файлом шаблона для возврата данных HTML. Этот пример кода работает с примерами кода для <xref:System.Web.Hosting.VirtualPathProvider> классов и <xref:System.Web.Hosting.VirtualDirectory> , чтобы предоставить виртуальные ресурсы из хранилища данных <xref:System.Data.DataSet> , которое загружается в объект. Полные инструкции по компиляции и запуску примера см. в разделе "пример" <xref:System.Web.Hosting.VirtualPathProvider> раздела Обзор класса.  
  
 Этот пример состоит из <xref:System.Web.Hosting.VirtualFile> трех частей: реализации класса, XML-файла данных, используемого для заполнения <xref:System.Data.DataSet> объекта, и файла шаблона страницы.  
  
 Первый пример кода является реализацией <xref:System.Web.Hosting.VirtualFile> класса. Его конструктор использует для пользовательского <xref:System.Web.Hosting.VirtualPathProvider> объекта метод, <xref:System.Data.DataSet> возвращающий объект. Затем он выполняет поиск <xref:System.Data.DataSet> объекта, чтобы получить сведения, связанные с указанным путем к виртуальному файлу. В методе он объединяет информацию <xref:System.Data.DataSet> из объекта с файлом шаблона и <xref:System.IO.Stream> Возвращает сочетание в виде объекта. <xref:System.Web.Hosting.VirtualFile.Open%2A>  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 Вторым примером является XML-файл данных, используемый для заполнения <xref:System.Data.DataSet> объекта, возвращаемого пользовательским <xref:System.Web.Hosting.VirtualPathProvider> объектом. Эти XML-данные используются для демонстрации использования <xref:System.Web.Hosting.VirtualPathProvider>классов, <xref:System.Web.Hosting.VirtualFile>и <xref:System.Web.Hosting.VirtualDirectory> для получения данных из внешних данных и не предназначены для представления рабочего хранилища данных.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 Третий пример — текстовый файл, используемый в качестве шаблона для виртуального файла. Заполнители в файле представлены текстом в диапазоне от% (%) Метки, такие как `%file%` и `%content%`. Метки времени используются для отслеживания изменений в кэшированных данных виртуального файла.  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При наследовании от <see cref="T:System.Web.Hosting.VirtualFile" /> класса необходимо <see cref="M:System.Web.Hosting.VirtualFile.Open" /> переопределить метод, чтобы он возвращал поток только для чтения в содержимое виртуального ресурса.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Hosting.VirtualFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="new System.Web.Hosting.VirtualFile virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Виртуальный путь к ресурсу, представленному данным экземпляром.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Hosting.VirtualFile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода является реализацией <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> конструктора, который получает сведения о виртуальном файле <xref:System.Data.DataSet> из объекта, предоставленного пользовательским <xref:System.Web.Hosting.VirtualPathProvider> объектом. Полный код, необходимый для выполнения примера, см. в разделе "пример" <xref:System.Web.Hosting.VirtualFile> раздела Обзор класса.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее на виртуальный ресурс, который необходимо рассматривать как файл.</summary>
        <value>Всегда <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberSignature Language="F#" Value="abstract member Open : unit -&gt; System.IO.Stream" Usage="virtualFile.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>При переопределении в производном классе возвращает в виртуальный ресурс поток, доступный только для чтения.</summary>
        <returns>Поток, доступный только для чтения, для виртуального файла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод возвращает поток, содержащий данные, обрабатываемые <xref:System.Web.Hosting.VirtualPathProvider> классом в качестве файла. <xref:System.Web.Hosting.VirtualFile.Open%2A> Поток доступен только для чтения и доступен для <xref:System.IO.Stream.CanSeek%2A> поиска (свойство имеет значение true).  
  
   
  
## Examples  
 Следующий пример кода является реализацией <xref:System.Web.Hosting.VirtualFile.Open%2A> метода, который объединяет сведения, относящиеся к виртуальному файлу, с файлом шаблона, а затем возвращает сочетание. Файл шаблона кэшируется, чтобы уменьшить издержки на чтение файловой системы несколько раз, чтобы получить файл шаблона. Полный код, необходимый для выполнения примера, см. в разделе "пример" <xref:System.Web.Hosting.VirtualFile> раздела Обзор класса.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>В производных классах <see cref="M:System.Web.Hosting.VirtualFile.Open" /> метод должен возвращать поток с возможностью поиска. Если метод возвращает поток, который не поддерживает поиск, возникает исключение, <see cref="T:System.NotSupportedException" /> когда поток передается <see cref="T:System.Web.HttpResponse" /> объекту для записи данных. Исключение возникает из-за того, что ответ пытается <see cref="P:System.IO.Stream.Length" /> прочитать свойство, а в потоке, который не поддерживает поиск, попытка доступа к свойству вызывает исключение. Дополнительные сведения см. в описании свойства <see cref="P:System.IO.Stream.CanSeek" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
