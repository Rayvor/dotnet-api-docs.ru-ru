<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2245419dca31dcc8fa93f103a021ddcfb28d779" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63890721" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Позволяет эффективно выполнить массовую загрузку таблицы SQL Server с данными из другого источника.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server включает популярную программу командной строки **bcp** для перемещения данных из одной таблицы в другую, либо на одном сервере или между серверами. <xref:System.Data.SqlClient.SqlBulkCopy> Класс позволяет создавать управляемые решения, которые предоставляют аналогичные функциональные возможности. Существуют другие способы загрузки данных в таблицу SQL Server (инструкции INSERT, например), но <xref:System.Data.SqlClient.SqlBulkCopy> предлагает это значительно быстрее на них.  
  
 Класс <xref:System.Data.SqlClient.SqlBulkCopy> может использоваться для записи данных только в таблицы SQL Server. Тем не менее источник данных не только SQL Server; можно использовать любой источник данных, до тех пор, пока данные можно будет загрузить <xref:System.Data.DataTable> экземпляра или считать <xref:System.Data.IDataReader> экземпляра.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> завершится ошибкой, когда Массовая загрузка <xref:System.Data.DataTable> столбец типа <xref:System.Data.SqlTypes.SqlDateTime> в SQL Server добавлен столбец, тип которого является одним из типов даты и времени в SQL Server 2008.  
  
   
  
## Examples  
 Следующее приложение командной строки демонстрирует, как загружать данные при помощи класса <xref:System.Data.SqlClient.SqlBulkCopy>. В этом примере <xref:System.Data.SqlClient.SqlDataReader> используется для копирования данных из **Production.Product** таблицы в SQL Server **AdventureWorks** базы данных, аналогичную таблицу в той же базе данных.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Уже открытый экземпляр <see cref="T:System.Data.SqlClient.SqlConnection" />, который будет использоваться для выполнения массового копирования. Если в строке подключения не используется <see langword="Integrated Security = true" />, можно использовать <see cref="T:System.Data.SqlClient.SqlCredential" /> для передачи идентификатора пользователя и пароля с большей безопасностью, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlBulkCopy" />, используя открытый экземпляр <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как подключение уже открыто при <xref:System.Data.SqlClient.SqlBulkCopy> инициализации экземпляра, соединение остается открытым после <xref:System.Data.SqlClient.SqlBulkCopy> экземпляр закрыт.  
  
 Если `connection` аргумент имеет значение null, <xref:System.ArgumentNullException> возникает исключение.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных с помощью подключения, который уже открыт. В этом примере <xref:System.Data.SqlClient.SqlDataReader> используется для копирования данных из **Production.Product** таблицы в SQL Server **AdventureWorks** базы данных, аналогичную таблицу в той же базе данных. Этот пример приведен только в качестве демонстрации. Нет смысла использовать `SqlBulkCopy` для перемещения данных из одной таблицы в другую в той же базе данных, в рабочем приложении. Обратите внимание, что исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Строка, определяющая подключение, которое будет открыто для использования экземпляром <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Если в строке подключения не используется <see langword="Integrated Security = true" />, можно использовать <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> или <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> и <see cref="T:System.Data.SqlClient.SqlCredential" /> для передачи идентификатора пользователя и пароля с большей безопасностью, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения.</param>
        <summary>Инициализирует и открывает новый экземпляр класса<see cref="T:System.Data.SqlClient.SqlConnection" /> с использованием заданной <paramref name="connectionString" />. Этот конструктор использует <see cref="T:System.Data.SqlClient.SqlConnection" /> для инициализации нового экземпляра класса <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Соединение закрывается автоматически в конце операции массового копирования.  
  
 Если `connectionString` имеет значение null, <xref:System.ArgumentNullException> возникает исключение. Если `connectionString` является пустой строкой, <xref:System.ArgumentException> возникает исключение.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных с помощью подключения, указанное в виде строки. Соединение закрывается автоматически при <xref:System.Data.SqlClient.SqlBulkCopy> экземпляр закрыт.  
  
 В этом примере исходные данные сначала считывается из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Операции массового копирования в SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Строка, определяющая подключение, которое будет открыто для использования экземпляром <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Если в строке подключения не используется <see langword="Integrated Security = true" />, можно использовать <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> или <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> и <see cref="T:System.Data.SqlClient.SqlCredential" /> для передачи идентификатора пользователя и пароля с большей безопасностью, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения.</param>
        <param name="copyOptions">Комбинация значений из перечисления <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />, определяющая, какие строки из источника данных будут скопированы в конечную таблицу.</param>
        <summary>Инициализирует и открывает новый экземпляр класса<see cref="T:System.Data.SqlClient.SqlConnection" /> с использованием заданной <paramref name="connectionString" />. Этот конструктор использует <see cref="T:System.Data.SqlClient.SqlConnection" /> для инициализации нового экземпляра класса <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Экземпляр <see cref="T:System.Data.SqlClient.SqlConnection" /> ведет себя соответственно установкам, заданным в параметре <paramref name="copyOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно получить подробные сведения обо всех параметрах массового копирования в <xref:System.Data.SqlClient.SqlBulkCopyOptions> разделе.  
  
   
  
## Examples  
 В следующем консольном приложении показано, как выполнить массовую загрузку с помощью заданной строки подключения. Включен режим используемое значение в столбце идентификаторов исходной таблицы, при загрузке в целевую таблицу. В этом примере исходные данные сначала считывается из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Исходная таблица и целевая таблица содержат столбец идентификаторов. По умолчанию, новое значение для **удостоверений** столбец создается в целевой таблице для каждой добавляемой строки. В этом примере параметр имеет значение при открытии соединения, которое заставляет процесс массовой загрузки использовать **удостоверений** вместо значения из исходной таблицы. Чтобы увидеть, как параметр меняет способ массовой загрузки, выполните этот пример с **dbo. BulkCopyDemoMatchingColumns** пустой таблицы. Все строки, загруженные из источника. Затем запустите пример снова, не очищая таблицу. Возникает исключение и код выводит сообщение на консоль, о том, что строки не были добавлены из-за нарушения ограничения первичного ключа.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Уже открытый экземпляр <see cref="T:System.Data.SqlClient.SqlConnection" />, который будет использоваться для выполнения массового копирования. Если в строке подключения не используется <see langword="Integrated Security = true" />, можно использовать <see cref="T:System.Data.SqlClient.SqlCredential" /> для передачи идентификатора пользователя и пароля с большей безопасностью, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения.</param>
        <param name="copyOptions">Комбинация значений из перечисления <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />, определяющая, какие строки из источника данных будут скопированы в конечную таблицу.</param>
        <param name="externalTransaction">Существующий экземпляр <see cref="T:System.Data.SqlClient.SqlTransaction" />, для которого будет выполняться массовое копирование.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlBulkCopy" />, используя заданный открытый экземпляр класса <see cref="T:System.Data.SqlClient.SqlConnection" />. Экземпляр <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> ведет себя соответственно установкам, заданным в параметре <paramref name="copyOptions" />. Если задан объект <see cref="T:System.Data.SqlClient.SqlTransaction" />, не равный null, операция копирования выполняется в рамках транзакции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если варианты `UseInternalTransaction` и `externalTransaction` аргумент не равен null, **InvalidArgumentException** возникает исключение.  
  
 Примеры, демонстрирующие использование `SqlBulkCopy` в транзакции, см. в разделе [транзакции и операции массового копирования](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Количество строк в каждом пакете. В конце каждого пакета серверу отправляется количество содержащихся в нем строк.</summary>
        <value>Целочисленное значение свойства <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> или нуль, если его значение не задано.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пакет завершен, если <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> обработки строк, или существует больше нет строк для отправки в целевой источник данных.  
  
 Ноль (по умолчанию) указывает, что каждый <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> операции представляет один пакет.  
  
 Если <xref:System.Data.SqlClient.SqlBulkCopy> экземпляра была объявлена без <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> параметр фактически строки отправляются на сервер <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> берется строк за раз, но никакие действия, связанные с транзакциями. Если <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> является по сути, каждый пакет строк вставляется как отдельная транзакция.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> Свойство можно задать в любое время. Если уже выполняется массовое копирование, текущий пакет имеет размер в соответствии с предыдущей размер пакета. Последующие пакеты используют новый размер. Если <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> изначально равно нулю и измененные при <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> операция уже выполняется, что операция загружает данные в виде единого пакета. Любые последующие <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> операций на том же <xref:System.Data.SqlClient.SqlBulkCopy> использовать новый экземпляр <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных в пакетах из 50 строк. Для пример, демонстрирующий как <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> работает с транзакцией, см. в разделе [транзакции и операции массового копирования](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 В этом примере исходные данные сначала считывается из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Операции массового копирования в SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Таймаут завершения операции в миллисекундах.</summary>
        <value>Целочисленное значение свойства <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />. По умолчанию используется значение 30 секунд. Значение 0 означает что нет ограничения; массовое копирование ждет бесконечно.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция включает время ожидания, транзакция не фиксируется, и все скопированные строки будут удалены из целевой таблицы.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует, как изменить время ожидания 60 секунд при массовой загрузке данных.  
  
 В этом примере исходные данные сначала считывается из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее использовать [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает экземпляр <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После вызова метода <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> на <xref:System.Data.SqlClient.SqlBulkCopy> объекта, никакая другая операция не будет успешным. Вызовы <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> метод вызывает исключение <xref:System.InvalidOperationException>.  
  
 Вызов <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> метода из <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> событие вызывает <xref:System.InvalidOperationException> исключение.  
  
 Обратите внимание, которые открываются <xref:System.Data.SqlClient.SqlBulkCopy> экземпляры закрыты неявно в конце `using` блока.  
  
   
  
## Examples  
 Следующий пример использует тот же <xref:System.Data.SqlClient.SqlBulkCopy> добавляемый экземпляр заказов на продажу и связанных с ними сведений в две таблицы назначения. Так как **AdventureWorks** велики таблиц заказов на продажу, пример считывает только заказы, размещенные определенное число учетной записи и выполняет массовое копирование этих заказов и сведений о таблицах назначения. <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Метод используется только после завершения обеих операций массового копирования.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию элементов <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />. Сопоставления столбцов определяют связи между столбцами в источнике данных и столбцами в месте назначения.</summary>
        <value>Коллекция сопоставлений столбцов. По умолчанию является пустой коллекцией.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если источник данных и целевой таблицы имеют одинаковое количество столбцов, а также порядковый номер каждого исходного столбца в источнике данных соответствует порядковый номер соответствующего столбца назначения <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> коллекции не требуется. Тем не менее, если количество столбцов отличаются или порядковые не согласованы, необходимо использовать <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> чтобы убедиться в том, что данные скопированы в нужные столбцы.  
  
 Во время выполнения операции массового копирования можно получить доступ к этой коллекции, но его нельзя изменить. Любая попытка его изменить вызывает исключение <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Имя целевой таблицы на сервере.</summary>
        <value>Строковое значение свойства<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> или null, если оно не задано.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> не было задано при <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> вызове <xref:System.ArgumentNullException> возникает исключение.  
  
 Если <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> изменяется во время <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> операция выполняется, это изменение не повлияет на текущую операцию. Новый <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> значение будет использоваться при следующем <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> вызывается метод.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> — Это имя трех частей (`<database>.<owningschema>.<name>`). При выборе можно уточнить имя таблицы базы данных и схемы-владельца. Тем не менее, если имя таблицы содержит символ подчеркивания («_») или другие специальные символы, необходимо экранировать квадратные скобки, как показано на имя (`[<database>.<owningschema>.<name_01>]`). Дополнительные сведения см. в разделе [идентификаторы баз данных](/sql/relational-databases/databases/database-identifiers).  
  
 Вы можете массового копирования данных во временную таблицу с помощью значения, такие как `tempdb..#table` или `tempdb.<owner>.#table` для <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> свойство.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных с помощью подключения, который уже открыт. Целевая таблица является таблицей в **AdventureWorks** базы данных.  
  
 В этом примере сначала используется соединение для чтения данных из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Включение или отключение объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> для потоковой передачи данных из объекта <see cref="T:System.Data.IDataReader" /></summary>
        <value>Значение <see langword="true" />, если объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> может выполнить потоковую передачу данных из объекта <see cref="T:System.Data.IDataReader" />; в противном случае — значение false. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> — `true`, <xref:System.Data.SqlClient.SqlBulkCopy> считывает из <xref:System.Data.IDataReader> с помощью <xref:System.Data.CommandBehavior.SequentialAccess>, оптимизация использования памяти с помощью <xref:System.Data.IDataReader> потоковой передачи. Если он имеет значение false, <xref:System.Data.SqlClient.SqlBulkCopy> класс загружает все данные, возвращенные <xref:System.Data.IDataReader> объект в памяти перед отправкой в SQL Server или SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет количество строк, обрабатываемых перед генерированием уведомляющего события.</summary>
        <value>Целочисленное значение свойства <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> или нуль, если его значение не задано.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство предназначено для компонентов пользовательского интерфейса, которые иллюстрируют, ход выполнения операции массового копирования. Указывает число строк, обрабатываемых перед созданием события уведомления. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Свойство можно задать в любое время, даже во время операции массового копирования. Изменения, внесенные во время операции массового копирования вступят в силу после следующего уведомления. Новый параметр применяется ко всем последующим операциям в одном экземпляре.  
  
 Если <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> будет присвоено значение меньше нуля, <xref:System.ArgumentOutOfRangeException> возникает исключение.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных с помощью подключения, который уже открыт. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Свойство имеет значение, чтобы обработчик событий вызывается после копирования каждые 50 строк в таблицу.  
  
 В этом примере сначала используется соединение для чтения данных из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Затем открывается второе соединение для массового копирования данных. Обратите внимание, что исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Генерируется всякий раз после обработки количества строк, заданного в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что параметры <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> и <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> независимы. Поступления из <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> событий не означает, что любые строки были отправлены на сервер или фиксации.  
  
 Невозможно вызвать SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) или SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) из этого события. Это приведет <xref:System.InvalidOperationException> вызываемом и <xref:System.Data.SqlClient.SqlBulkCopy> состояние объекта не изменится. Если пользователь хочет отменить операцию от события, <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> свойство <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> можно использовать. (См. в разделе [транзакции и операции массового копирования](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) примеры использования <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> свойство.)  
  
 Никаких действий, например действие транзакции, поддерживается в подключении во время выполнения операции массового копирования, и рекомендуется не использовать то же подключение, используемый во время <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> событий. Тем не менее можно открыть другое подключение.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных с помощью подключения, который уже открыт. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Свойство имеет значение, чтобы обработчик событий вызывается после копирования каждые 50 строк в таблицу.  
  
 В этом примере сначала используется соединение для чтения данных из таблицы SQL Server, чтобы <xref:System.Data.SqlClient.SqlDataReader> экземпляра. Обратите внимание, что исходные данные не обязательно должно находиться на сервере SQL Server; можно использовать любой источник данных, который могут прочитать, чтобы <xref:System.Data.IDataReader> или загружаются <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите метод `Dispose` по окончании использования класса <xref:System.Data.SqlClient.SqlBulkCopy>. Метод `Dispose` оставляет класс <xref:System.Data.SqlClient.SqlBulkCopy> в непригодном для использования состоянии. После вызова метода `Dispose`, необходимо освободить все ссылки на <xref:System.Data.SqlClient.SqlBulkCopy> , сборщик мусора мог освободить память, <xref:System.Data.SqlClient.SqlBulkCopy> занимаемую.  
  
 Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Всегда вызывайте метод `Dispose` перед освобождением последней ссылки на класс <xref:System.Data.SqlClient.SqlBulkCopy>. В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Data.SqlClient.SqlBulkCopy> метод `Finalize`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Копирует все строки из источника данных в таблицу назначения, заданную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если несколько активных результирующих наборов (MARS) отключено, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> устанавливает подключение занято. Если включен режим MARS, можно чередовать вызовы <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> с другими командами, в то же соединение.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, строки которого будут скопированы в таблицу назначения.</param>
        <summary>Копирует все строки из заданного массива <see cref="T:System.Data.Common.DbDataReader" /> в целевую таблицу, указанную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">Массив объектов<see cref="T:System.Data.DataRow" />, подлежащих копированию в целевую таблицу.</param>
        <summary>Копирует все строки из заданного массива <see cref="T:System.Data.DataRow" /> в целевую таблицу, указанную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection> является его занят обслуживанием, а не другие операции могут выполняться в соединении.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Сопоставления коллекции <xref:System.Data.DataRow> столбцы базы данных в целевую таблицу.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных из <xref:System.Data.DataRow> массива. Целевая таблица является таблицей в **AdventureWorks** базы данных.  
  
 В этом примере <xref:System.Data.DataTable> создается во время выполнения. Одну строку выбирается из <xref:System.Data.DataTable> Копировать в целевую таблицу.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Объект <see cref="T:System.Data.DataTable" />, строки которого будут скопированы в таблицу назначения.</param>
        <summary>Копирует все строки из заданного объекта <see cref="T:System.Data.DataTable" /> в целевую таблицу, указанную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все строки в <xref:System.Data.DataTable> копируются в целевую таблицу, за исключением тех, которые были удалены.  
  
 Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection> является его занят обслуживанием, а не другие операции могут выполняться в соединении.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Сопоставления коллекции <xref:System.Data.DataTable> столбцы базы данных в целевую таблицу.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных из <xref:System.Data.DataTable>. Целевая таблица является таблицей в **AdventureWorks** базы данных.  
  
 В этом примере <xref:System.Data.DataTable> создается во время выполнения и является источником `SqlBulkCopy` операции.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Data.IDataReader" />, строки которого будут скопированы в таблицу назначения.</param>
        <summary>Копирует все строки из заданного объекта <see cref="T:System.Data.IDataReader" /> в целевую таблицу, указанную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующую доступную строку в модуле чтения начинается операция копирования. В большинстве случаев, средство чтения просто возвращает <xref:System.Data.IDbCommand.ExecuteReader%2A> или аналогичные вызове, поэтому следующую доступную строку является первой строкой. Для обработки нескольких результатов вызовите <xref:System.Data.IDataReader.NextResult%2A> в модуль чтения данных и вызов <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> еще раз.  
  
 Обратите внимание, что использование <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> изменяет состояние средства чтения. Вызывает метод <xref:System.Data.IDataReader.Read%2A> до возвращается значение false, операция прерывается или возникает ошибка. Это означает, что модуль чтения данных в другом состоянии, возможно, в конце результирующего набора, когда <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> операция завершена.  
  
 Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection> является его занят обслуживанием, а не другие операции могут выполняться в соединении.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Коллекции сопоставляет из данных чтения столбцы базы данных в целевую таблицу.  
  
   
  
## Examples  
 Следующее консольное приложение демонстрирует массовой загрузки данных из <xref:System.Data.SqlClient.SqlDataReader>. Целевая таблица является таблицей в **AdventureWorks** базы данных.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Объект <see cref="T:System.Data.DataTable" />, строки которого будут скопированы в таблицу назначения.</param>
        <param name="rowState">Значение из перечисления <see cref="T:System.Data.DataRowState" />. В целевую таблицу копируются только строки, состояние которых соответствует заданному.</param>
        <summary>Копирует только строки, соответствующие заданному состоянию строки, из заданного объекта <see cref="T:System.Data.DataTable" /> в целевую таблицу, указанную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только строки в <xref:System.Data.DataTable> , находятся в состоянии, указанном в `rowState` аргумент и не были удалены, копируются в целевую таблицу.  
  
> [!NOTE]
>  Если <xref:System.Data.DataRowState.Deleted> задан, любой <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, и <xref:System.Data.DataRowState.Modified> строк также необходимо скопировать на сервер. Исключение не возникает.  
  
 Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection> является его занят обслуживанием, а не другие операции могут выполняться в соединении.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> Сопоставления коллекции <xref:System.Data.DataTable> столбцы базы данных в целевую таблицу.  
  
   
  
## Examples  
 Консоль следующие приложения показано, как выполнить массовое загружаются только строки в <xref:System.Data.DataTable> , соответствующих заданным состоянием. В этом случае добавляются только не измененные строки. Целевая таблица является таблицей в **AdventureWorks** базы данных.  
  
 В этом примере <xref:System.Data.DataTable> создается во время выполнения и три строки добавляются к нему. Прежде чем <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> выполняется метод, одной из строк изменяется. <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Метод вызывается с `DataRowState.Unchanged` `rowState` аргумент, поэтому только две строки без изменений выполняются операции массового копирования в место назначения.  
  
> [!IMPORTANT]
>  Этот пример не будет работать, пока вы не создадите рабочие таблицы, как описано в разделе [Установка примера массового копирования](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Этот код предоставляется для демонстрации синтаксиса использования **SqlBulkCopy** только. Если исходная и целевая таблицы находятся в одном экземпляре SQL Server, это проще и быстрее с помощью Transact-SQL `INSERT … SELECT` инструкцию, чтобы скопировать данные.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Выполнение операций массового копирования</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Общие сведения о ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Асинхронная версия метода <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, который копирует все строки из источника данных в таблицу назначения, заданную в свойстве <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если несколько активных результирующих наборов (MARS) отключено, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> устанавливает подключение занято. Если включен режим MARS, можно чередовать вызовы <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> с другими командами, в то же соединение.  
  
 Число строк, которые будут откачены при сбое одного зависит от нескольких факторов:  
  
-   Если <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> указан.  
  
-   Если у вас есть собственные транзакции.  
  
-   Значение <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Если возникает ошибка при попытке отправки данных на сервер, текущий пакет (как указано <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) будет выполнен откат. Если <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> не указан и у вас есть собственную транзакцию, откат всей транзакции будет быть (которая включает всех предыдущих пакетов).  
  
 Используйте <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> знать, сколько строк было скопировано на сервер.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, строки которого будут скопированы в таблицу назначения.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, который копирует все строки из предоставленного массива <see cref="T:System.Data.Common.DbDataReader" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Массив объектов<see cref="T:System.Data.DataRow" />, подлежащих копированию в целевую таблицу.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, который копирует все строки из предоставленного массива <see cref="T:System.Data.DataRow" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Объект <see cref="T:System.Data.DataTable" />, строки которого будут скопированы в таблицу назначения.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, который копирует все строки из предоставленного <see cref="T:System.Data.DataTable" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Data.IDataReader" />, строки которого будут скопированы в таблицу назначения.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, который копирует все строки из предоставленного <see cref="T:System.Data.IDataReader" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
Объект <see cref="T:System.Data.IDataReader" /> был закрыт до возврата завершенного объекта <see cref="T:System.Threading.Tasks.Task" />.  
  
Связанное соединение объекта <see cref="T:System.Data.IDataReader" /> было закрыто до возврата завершенного объекта <see cref="T:System.Threading.Tasks.Task" />.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, строки которого будут скопированы в таблицу назначения.</param>
        <param name="cancellationToken">Инструкция отмены. Если значение этого параметра равно <see cref="P:System.Threading.CancellationToken.None" />, то этот метод эквивалентен методу <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, который копирует все строки из предоставленного массива <see cref="T:System.Data.Common.DbDataReader" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">Массив объектов<see cref="T:System.Data.DataRow" />, подлежащих копированию в целевую таблицу.</param>
        <param name="cancellationToken">Инструкция отмены. Если значение этого параметра равно <see cref="P:System.Threading.CancellationToken.None" />, то этот метод эквивалентен методу <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, который копирует все строки из предоставленного массива <see cref="T:System.Data.DataRow" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Токен отмены можно использовать для запроса отказа от операции до истечения времени ожидания команды.  Сведения об исключениях передаются в возвращенном объекте Task.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Объект <see cref="T:System.Data.DataTable" />, строки которого будут скопированы в таблицу назначения.</param>
        <param name="rowState">Значение из перечисления <see cref="T:System.Data.DataRowState" />. В целевую таблицу копируются только строки, состояние которых соответствует заданному.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, который копирует только строки, соответствующие заданному состоянию строки в предоставленном <see cref="T:System.Data.DataTable" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Объект <see cref="T:System.Data.DataTable" />, строки которого будут скопированы в таблицу назначения.</param>
        <param name="cancellationToken">Инструкция отмены. Если значение этого параметра равно <see cref="P:System.Threading.CancellationToken.None" />, то этот метод эквивалентен методу <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, который копирует все строки из предоставленного <see cref="T:System.Data.DataTable" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Токен отмены можно использовать для запроса отказа от операции до истечения времени ожидания команды.  Сведения об исключениях передаются в возвращенном объекте Task.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Data.IDataReader" />, строки которого будут скопированы в таблицу назначения.</param>
        <param name="cancellationToken">Инструкция отмены. Если значение этого параметра равно <see cref="P:System.Threading.CancellationToken.None" />, то этот метод эквивалентен методу <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, который копирует все строки из предоставленного <see cref="T:System.Data.IDataReader" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Токен отмены можно использовать для запроса отказа от операции до истечения времени ожидания команды.  Сведения об исключениях передаются в возвращенном объекте Task.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
Объект <see cref="T:System.Data.IDataReader" /> был закрыт до возврата завершенного объекта <see cref="T:System.Threading.Tasks.Task" />.  
  
Связанное соединение объекта <see cref="T:System.Data.IDataReader" /> было закрыто до возврата завершенного объекта <see cref="T:System.Threading.Tasks.Task" />.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">Объект <see cref="T:System.Data.DataTable" />, строки которого будут скопированы в таблицу назначения.</param>
        <param name="rowState">Значение из перечисления <see cref="T:System.Data.DataRowState" />. В целевую таблицу копируются только строки, состояние которых соответствует заданному.</param>
        <param name="cancellationToken">Инструкция отмены. Если значение этого параметра равно <see cref="P:System.Threading.CancellationToken.None" />, то этот метод эквивалентен методу <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Асинхронная версия метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, который копирует только строки, соответствующие заданному состоянию строки в предоставленном <see cref="T:System.Data.DataTable" /> в целевую таблицу, заданную свойством <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> объекта <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Токен отмены можно использовать для запроса отказа от операции до истечения времени ожидания команды.  Сведения об исключениях передаются в возвращенном объекте Task.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> несколько раз для одного экземпляра до завершения задачи.  
  
Вызов методов <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> и <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> для одного экземпляра до завершения задачи.  
  
Соединение разъединяется или закрывается во время выполнения метода <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> был закрыт во время выполнения метода.  
  
Возвращается в объекте задачи, истекло время ожидания пула подключений.  
  
Возвращается в объекте задачи, объект <see cref="T:System.Data.SqlClient.SqlConnection" /> закрыт до выполнения метода.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Возвращается в объекте задачи, любая ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
  </Members>
</Type>