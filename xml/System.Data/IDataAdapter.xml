<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b705c31c52d62066a66b9b37ebd59319776245be" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75140321" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Позволяет объекту реализовать DataAdapter и представляет набор методов и соответствующие свойства, связанные с операциями, для заполнения и обновления объекта <see cref="T:System.Data.DataSet" /> и обновления источника данных.  
  
 Экземпляры <see cref="T:System.Data.IDbDataAdapter" /> — для источников данных, которые являются или напоминают реляционные базы данных с текстуальными командами (например, Transact-SQL), а экземпляры <see cref="T:System.Data.IDataAdapter" /> могут использовать любой тип источника данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интерфейс <xref:System.Data.IDataAdapter> позволяет наследующему классу реализовать класс DataAdapter, который представляет мост между источником данных и <xref:System.Data.DataSet>. Дополнительные сведения о классах DataAdapter см. в разделе [Заполнение набора данных из DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Приложение не создает экземпляр интерфейса <xref:System.Data.IDataAdapter> напрямую, но реализует экземпляр класса, наследующего <xref:System.Data.IDataAdapter>.  
  
 Классы, наследующие <xref:System.Data.IDataAdapter>, должны реализовывать наследуемые члены, и они обычно определяют дополнительные члены для добавления функций, зависящих от поставщика. Например, интерфейс <xref:System.Data.IDataAdapter> определяет метод <xref:System.Data.IDataAdapter.Fill%2A>, который принимает в качестве параметра <xref:System.Data.DataSet>. В свою очередь, класс <xref:System.Data.OleDb.OleDbDataAdapter> наследует метод <xref:System.Data.Common.DbDataAdapter.Fill%2A>, а также определяет две дополнительные перегрузки метода <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>, которые принимают объект набора записей ADO в качестве параметра.  
  
   
  
## Examples  
 В следующем примере для выбора записей из базы данных используются производные классы, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>и <xref:System.Data.SqlClient.SqlConnection>. Затем возвращается заполненный <xref:System.Data.DataSet>. Для этого методу передается инициализированное <xref:System.Data.DataSet>, строка подключения и строка запроса, которая является инструкцией Transact-SQL SELECT.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Чтобы обеспечить согласованность между .NET Framework поставщиками данных, назовите класс-наследник в форме <paramref name="Prv" /> DataAdapter, где <paramref name="Prv" /> является универсальным префиксом, присвоенным всем классам в определенном пространстве имен .NET Framework поставщика данных. Например, <paramref name="Sql" /> является префиксом класса <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> в пространстве имен <see langword="System.Data.SqlClient" />.  
  
При наследовании от интерфейса <see cref="T:System.Data.IDataAdapter" /> необходимо реализовать следующие конструкторы: 
 <list type="table"><listheader><term> Элемент 
 </term><description> Описание 
 </description></listheader><item><term> Првдатаадаптер () 
 </term><description> Инициализирует новый экземпляр класса Првдатаадаптер.  
  
 </description></item><item><term> Првдатаадаптер (Првкомманд selectCommand) 
 </term><description> Инициализирует новый экземпляр класса Првдатаадаптер, используя указанную инструкцию SQL SELECT.  
  
 </description></item><item><term> Првдатаадаптер (строка Селекткоммандтекст, строка Селектконнектионстринг) 
 </term><description> Инициализирует новый экземпляр класса Првдатаадаптер, используя инструкцию SQL SELECT и строку подключения.  
  
 </description></item><item><term> Првдатаадаптер (строка Селекткоммандтекст, Првконнектион Селектконнектион) 
 </term><description> Инициализирует новый экземпляр класса Првдатаадаптер, используя инструкцию SQL SELECT и объект Првконнектион.  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <summary>Добавляет или обновляет строки в объект <see cref="T:System.Data.DataSet" /> для получения соответствия со строками в источнике данных, используя имя объекта <see cref="T:System.Data.DataSet" /> и создает объект <see cref="T:System.Data.DataTable" /> с именем "Table".</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> извлекает строки из источника данных с помощью инструкции SELECT, заданной связанным свойством <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Объект соединения, связанный с инструкцией SELECT, должен быть допустимым, но не должен быть открытым. Если соединение закрывается до вызова <xref:System.Data.IDataAdapter.Fill%2A>, оно открывается для получения данных, а затем закрывается. Если соединение открыто до вызова <xref:System.Data.IDataAdapter.Fill%2A>, оно остается открытым.  
  
 Затем операция <xref:System.Data.IDataAdapter.Fill%2A> добавляет строки в целевые <xref:System.Data.DataTable> объекты в <xref:System.Data.DataSet>, создавая объекты <xref:System.Data.DataTable>, если они еще не существуют. При создании <xref:System.Data.DataTable> объектов <xref:System.Data.IDataAdapter.Fill%2A> операция обычно создает только метаданные имени столбца. Однако если свойство <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> имеет значение `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы гарантировать правильное разрешение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Если <xref:System.Data.IDataAdapter> обнаруживает дублирующиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последовательных столбцов, используя шаблон "columnName1", "columnName2", "columnname3" и т. д. Если входящие данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении нескольких результирующих наборов в <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения должны соблюдать осторожность при использовании имен столбцов и таблиц, чтобы избежать возникновения конфликтов с этими шаблонами именования.  
  
 Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet>, возвращает несколько результатов, например инструкцию SQL Batch, если один из результатов содержит ошибку, то все последующие результаты пропускаются и не добавляются в <xref:System.Data.DataSet>.  
  
 Можно использовать метод <xref:System.Data.IDataAdapter.Fill%2A> несколько раз для одного и того же <xref:System.Data.DataTable>. Если первичный ключ существует, входящие строки объединяются с совпадающими строками, которые уже существуют. Если первичный ключ не существует, входящие строки добавляются к <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке инструкций SQL пакетной службы, возвращающих несколько результатов, реализация <xref:System.Data.IDataAdapter.Fill%2A> и <xref:System.Data.IDataAdapter.FillSchema%2A> для .NET Framework поставщика данных получает сведения о схеме только для первого результата.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения схемой из источника данных.</param>
        <param name="schemaType">Одно из значений <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> с именем Table в указанный объект <see cref="T:System.Data.DataSet" /> и настраивает схему для соответствия этому объекту в источнике данных на основе указанного значения типа <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Массив объектов <see cref="T:System.Data.DataTable" />, который содержит сведения схемы, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Data.IDataAdapter.FillSchema%2A> извлекает схему из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Объект соединения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, должен быть допустимым, но его не нужно открывать. Если соединение закрывается до вызова <xref:System.Data.IDataAdapter.FillSchema%2A>, оно открывается для получения данных, а затем закрывается. Если соединение открыто до вызова <xref:System.Data.IDataAdapter.FillSchema%2A>, оно остается открытым.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> операция добавляет <xref:System.Data.DataTable> в <xref:System.Data.DataSet>назначения. Затем он добавляет столбцы в <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> и настраивает следующие свойства <xref:System.Data.DataColumn>, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> также настраивает свойства <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> в соответствии со следующими правилами.  
  
-   Если <xref:System.Data.IDbDataAdapter.SelectCommand%2A>возвращает один или несколько первичных ключевых столбцов, они используются в качестве первичных ключевых столбцов для <xref:System.Data.DataTable>.  
  
-   Если столбцы первичного ключа не возвращаются, но существуют уникальные столбцы, уникальные столбцы используются в качестве первичного ключа, если все уникальные столбцы не допускают значения NULL. Если какие-либо из столбцов допускают значение null, в <xref:System.Data.ConstraintCollection>добавляется <xref:System.Data.UniqueConstraint>, но свойство <xref:System.Data.DataTable.PrimaryKey%2A> не задано.  
  
-   Если возвращаются столбцы первичного ключа и уникальные столбцы, первичные ключевые столбцы используются в качестве первичных ключевых столбцов для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные ключи и ограничения UNIQUE добавляются в <xref:System.Data.ConstraintCollection> в соответствии с предыдущими правилами, но другие типы ограничений не добавляются.  
  
 Если для столбца или столбцов в SQL Server таблице определен уникальный кластеризованный индекс, а для отдельного набора столбцов определено ограничение PRIMARY KEY, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы получить имена и имена первичных ключевых столбцов, используйте указание запроса с инструкцией SELECT, указывающей имя индекса первичного ключа. Дополнительные сведения об указании указания запроса см. в разделе [Указание запроса (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Если <xref:System.Data.IDataAdapter> обнаруживает дублирующиеся столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последовательных столбцов, используя шаблон "columnName1", "columnName2", "columnname3" и т. д. Если входящие данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> в соответствии с шаблоном «Столбец1», «Столбец2» и т. д. При добавлении нескольких результирующих наборов в <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы именуются путем добавления целочисленных значений к заданному имени таблицы (например, "Table", "table1", "Table2" и т. д.). Приложения должны соблюдать осторожность при использовании имен столбцов и таблиц, чтобы избежать возникновения конфликтов с этими шаблонами именования.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> не возвращает строк. Для добавления строк в <xref:System.Data.DataTable>используйте метод <xref:System.Data.IDataAdapter.Fill%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает параметры, заданные пользователем при выполнении оператора SQL SELECT.</summary>
        <returns>Массив объектов <see cref="T:System.Data.IDataParameter" /> содержит параметры, заданные пользователем.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectionString) {  
           using (SqlConnection conn = new SqlConnection(connectionString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, будут ли несопоставленные столбцы-источники или таблицы-источники передаваться со своими исходными именами, чтобы пройти через фильтр или вызвать ошибку.</summary>
        <value>Одно из значений <see cref="T:System.Data.MissingMappingAction" />. Значение по умолчанию: <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Data.IDataAdapter.TableMappings%2A> предоставляет основное сопоставление между возвращаемыми записями и <xref:System.Data.DataSet>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Заданное значение не является одним из значений <see cref="T:System.Data.MissingMappingAction" />.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает или задает значение, определяющее, будут ли отсутствующие исходные таблицы, столбцы и их отношения добавляться в схему набора данных, игнорироваться или вызывать ошибку.</summary>
        <value>Одно из значений <see cref="T:System.Data.MissingSchemaAction" />. Значение по умолчанию: <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Заданное значение не является одним из значений <see cref="T:System.Data.MissingSchemaAction" />.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, как исходная таблица сопоставлена с таблицей набора данных.</summary>
        <value>Коллекция, обеспечивающая основное сопоставление между возвращенными записями и объектом <see cref="T:System.Data.DataSet" />. Значение по умолчанию — пустая коллекция.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> использует только сопоставления для исходной таблицы с именем Table. Все инструкции SELECT, INSERT, DELETE и UPDATE, возвращающие данные, должны сделать это с помощью единообразного именования столбцов. Имена столбцов, возвращаемые в записях, должны быть уникальными, иначе столбцы с повторяющимися именами перезапишут предыдущие данные. В <xref:System.Data.IDataAdapter.Update%2A>только таблица, сопоставленная с исходной таблицей с именем Table, будет иметь согласованные изменения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, использованный для обновления источника данных.</param>
        <summary>Вызывает соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в указанном объекте <see cref="T:System.Data.DataSet" /> из объекта <see cref="T:System.Data.DataTable" /> с именем "Table".</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда приложение вызывает метод <xref:System.Data.IDataAdapter.Update%2A>, <xref:System.Data.IDataAdapter> проверяет свойство <xref:System.Data.DataRow.RowState%2A> и последовательно выполняет необходимые инструкции INSERT, UPDATE или DELETE для каждой строки в зависимости от порядка индексов, настроенных в <xref:System.Data.DataSet>. Например, <xref:System.Data.IDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которой следует инструкция INSERT, а затем другую инструкцию DELETE из-за упорядочения строк в <xref:System.Data.DataTable>.  
  
 Имейте в виду, что эти инструкции не выполняются как пакетный процесс; Каждая строка обновляется по отдельности. Приложение может вызвать метод <xref:System.Data.DataSet.GetChanges%2A>, если необходимо управлять последовательностью типов инструкций (например, вставок перед обновлениями). Дополнительные сведения см. в разделе [Обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не указаны, метод <xref:System.Data.Common.DataAdapter.Update%2A> создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> объект, чтобы автоматически формировать инструкции SQL для однотабличных обновлений, если задано свойство `SelectCommand` поставщика данных .NET Framework. Затем любые дополнительные инструкции SQL, которые вы не задаете, создаются CommandBuilder. Эта логика создания требует, чтобы сведения о ключевом столбце присутствовали в <xref:System.Data.DataSet>. Дополнительные сведения см. [в разделе Создание команд с помощью коммандбуилдерс](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Метод <xref:System.Data.Common.DataAdapter.Update%2A> извлекает строки из таблицы, указанной в первом сопоставлении, перед выполнением обновления. Затем <xref:System.Data.Common.DataAdapter.Update%2A> обновляет строку, используя значение свойства <xref:System.Data.IDbCommand.UpdatedRowSource%2A>. Все возвращаемые дополнительные строки игнорируются.  
  
 После того как любые данные загружаются обратно в <xref:System.Data.DataSet>, возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>, позволяющее пользователю проверить выверенную <xref:System.Data.DataSet>ную строку и все выходные параметры, возвращаемые командой. После успешного обновления строки принимаются изменения в этой строке.  
  
 При использовании <xref:System.Data.IDataAdapter.Update%2A>порядок выполнения выглядит следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Команда выполняется.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.IDataAdapter>, обычно имеет связанную с ней коллекцию параметров. Параметры сопоставлены с текущей строкой с помощью свойств `SourceColumn` и `SourceVersion` класса .NET Framework `Parameter` поставщика данных. `SourceColumn` ссылается на столбец <xref:System.Data.DataTable>, на который <xref:System.Data.IDataAdapter> ссылается на получение значений параметров для текущей строки.  
  
 `SourceColumn` ссылается на имя несопоставленного столбца перед применением сопоставлений таблиц. Если `SourceColumn` ссылается на несуществующий столбец, то выполняемое действие зависит от одного из следующих <xref:System.Data.MissingMappingAction> значений.  
  
|Значение перечисления|Предпринятое действие|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и имена таблиц в <xref:System.Data.DataSet>, если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Создается <xref:System.SystemException>. Если сопоставления заданы явно, отсутствующее сопоставление для входного параметра обычно вызывается ошибкой.|  
|`MissingMappingAction.Error`|Создается <xref:System.SystemException>.|  
  
 Свойство `SourceColumn` также используется для отображения значения выходных или входных и выходных параметров обратно в `DataSet`. Исключение создается, если оно ссылается на несуществующий столбец.  
  
 Свойство `SourceVersion` класса `Parameter` поставщика данных .NET Framework определяет, следует ли использовать версию значения столбца `Original`, `Current`или `Proposed`. Эта возможность часто используется для включения исходных значений в предложение WHERE инструкции UPDATE для проверки нарушений оптимистической блокировки.  
  
> [!NOTE]
>  Если при обновлении строки возникает ошибка, возникает исключение и выполнение обновления прекращается. Чтобы продолжить операцию обновления без создания исключений при возникновении ошибки, задайте для свойства <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> значение `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Вы также можете реагировать на ошибки на уровне отдельных строк в рамках события `RowUpdated` объекта DataAdapter. Чтобы продолжить операцию обновления без создания исключения в событии `RowUpdated`, установите для свойства <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> значение <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 В следующем примере для <xref:System.Data.Common.DataAdapter.Update%2A> источника данных используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>. В этом примере предполагается, что вы создали <xref:System.Data.OleDb.OleDbDataAdapter> и <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
