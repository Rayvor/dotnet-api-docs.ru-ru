<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eb2acee0ac49f203ce99088dd7b97e323a75cb0" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70483830" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет методы расширения для класса <see cref="T:System.Data.DataTable" />. <see cref="T:System.Data.DataTableExtensions" /> является статическим классом.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Исходный объект <see cref="T:System.Data.DataTable" />, на основе которого создается объект <see cref="T:System.Data.DataView" /> с поддержкой LINQ.</param>
        <summary>Создает и возвращает объект <see cref="T:System.Data.DataView" /> с поддержкой LINQ.</summary>
        <returns>Объект <see cref="T:System.Data.DataView" /> с поддержкой LINQ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView>включает сценарии привязки данных для [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] и могут быть созданы из типизированного или <xref:System.Data.DataTable>нетипизированного, предоставляя представление этой таблицы по умолчанию. Фильтрацию и сортировку для объекта <xref:System.Data.DataView> можно задать после его создания на основе таблицы <xref:System.Data.DataTable>. Затем <xref:System.Data.DataView> объект привязывается к элементу управления пользовательского интерфейса, <xref:System.Windows.Forms.DataGrid> такому <xref:System.Windows.Forms.DataGridView>как или, предоставляя простую модель привязки данных.  
  
 Дополнительные сведения и примеры см. [в разделе Создание объекта DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.DataView> из таблицы SalesOrderDetail и задается как источник <xref:System.Windows.Forms.BindingSource> данных объекта, который выступает в <xref:System.Windows.Forms.DataGridView> качестве прокси для элемента управления:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип объектов в исходной последовательности, обычно <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Исходный запрос [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)], на основе которого создается объект <see cref="T:System.Data.DataView" /> с поддержкой LINQ.</param>
        <summary>Создает и возвращает объект <see cref="T:System.Data.DataView" /> с поддержкой LINQ, представляющий запрос [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)].</summary>
        <returns>Объект <see cref="T:System.Data.DataView" /> с поддержкой LINQ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView>включает сценарии привязки данных для [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] и могут быть созданы [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] из запроса. Объект <xref:System.Data.DataView> представляет сам запрос и не является представлением над запросом. Созданный <xref:System.Data.DataView> объект выводит сведения о фильтрации и сортировке из запроса, из которого он создается. Затем <xref:System.Data.DataView> объект привязывается к элементу управления пользовательского интерфейса, <xref:System.Windows.Forms.DataGrid> такому <xref:System.Windows.Forms.DataGridView>как или, предоставляя простую модель привязки данных.  
  
 Параметр `T` входного параметра `source` может иметь только тип <xref:System.Data.DataRow> или тип, производный от <xref:System.Data.DataRow>.  
  
 В запросе, используемом для создания <xref:System.Data.DataView>, поддерживаются только следующие операторы запроса:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 Дополнительные сведения и примеры см. [в разделе Создание объекта DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.DataView> веб-заказы, упорядоченные по итогам:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Исходный объект <see cref="T:System.Data.DataTable" />, который требуется сделать перечисляемым.</param>
        <summary>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, где универсальный параметр <paramref name="T" /> имеет значение <see cref="T:System.Data.DataRow" />. Этот объект может использоваться в выражении [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] или запросе метода.</summary>
        <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, где универсальный параметр <paramref name="T" /> имеет значение <see cref="T:System.Data.DataRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]запросы работают с источниками данных, которые <xref:System.Collections.Generic.IEnumerable%601> реализуют интерфейс <xref:System.Linq.IQueryable> или интерфейс.  <xref:System.Data.DataTable> <xref:System.Data.DataTableExtensions.AsEnumerable%2A> [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] `From` Класс не реализует ни один из интерфейсов, поэтому необходимо вызвать метод, чтобы использовать в качестве источника в предложении запроса. <xref:System.Data.DataTable> Можно также получить пользовательские операторы для конкретных доменов, например <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, путем <xref:System.Collections.Generic.IEnumerable%601> возвращения объекта.  
  
 Перечислимый объект, возвращаемый <xref:System.Data.DataTableExtensions.AsEnumerable%2A> методом, постоянно привязан <xref:System.Data.DataTable> к объекту, который его создал. Несколько вызовов <xref:System.Data.DataTableExtensions.AsEnumerable%2A> метода будут возвращать несколько независимых объектов, доступных для запроса, которые привязаны к источнику <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 В следующем примере `DisplayProducts` метод получает объект DataTable, содержащий столбец данных с именем `ProductName`, извлекает `ProductName` значения и затем выводит значения.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Исходный объект <see cref="T:System.Data.DataTable" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Data.DataTable" />, содержащий копии объектов <see cref="T:System.Data.DataRow" /> при заданном входном объекте <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип объектов в исходной последовательности, обычно <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Исходная последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
        <summary>Возвращает объект <see cref="T:System.Data.DataTable" />, содержащий копии объектов <see cref="T:System.Data.DataRow" /> при заданном входном объекте <see cref="T:System.Collections.Generic.IEnumerable`1" /> и универсальном параметре <paramref name="T" />, равном <see cref="T:System.Data.DataRow" />.</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" />, содержащий входную последовательность как тип объектов <see cref="T:System.Data.DataRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `T` входного параметра `source` может иметь только тип <xref:System.Data.DataRow> или тип, производный от <xref:System.Data.DataRow>.  
  
 Входная последовательность может быть любым <xref:System.Collections.Generic.IEnumerable%601> источником, а не только запросом или запросом к <xref:System.Data.DataTable>. Обратите внимание, что если исходная последовательность является запросом, вызов этого оператора приведет к немедленному выполнению. Перечисление исходных последовательностей может также привести к возникновению исключений.  
  
 Схема целевой таблицы основана на схеме первой <xref:System.Data.DataRow> строки исходной последовательности. Метаданные таблицы извлекаются из <xref:System.Data.DataRow> метаданных и значений таблицы из значений <xref:System.Data.DataRow>столбцов. Для типизированных <xref:System.Data.DataTable>типов не сохраняются. Данные и схема передаются, но результирующие строки выходной таблицы не будут иметь типизированный <xref:System.Data.DataRow> тип. <xref:System.Data.DataRow> <xref:System.Data.DataTable>Свойства <xref:System.Data.DataRow.RowState%2A> и <xref:System.Data.DataRow.RowError%2A> не сохраняются во время копирования из источника в возвращаемый объект.  
  
 Если в источнике <xref:System.Data.DataRow>обнаружена **пустая** ссылка или тип Nullable со значением **null** , этот метод заменяет значение в назначении <xref:System.Data.DataTable> значением <xref:System.DBNull.Value>.  
  
 Созданная таблица, возвращаемая методом, имеет имя таблицы по умолчанию. Если вы хотите присвоить <xref:System.Data.DataTable>имя, присоединить его <xref:System.Data.DataSet>к или выполнить любую другую <xref:System.Data.DataTable> операцию, необходимо сделать это после того, как таблица будет создана и возвращена.  
  
 Дополнительные сведения см. в разделе [Создание таблицы данных из запроса](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
   
  
## Examples  
 Следующий пример запрашивает таблицу SalesOrderHeader для заказов после 8 августа 2001 и использует <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> метод для <xref:System.Data.DataTable> создания из этого запроса. Затем объект <xref:System.Data.DataTable> привязывается к источнику <xref:System.Windows.Forms.BindingSource>, который является посредником для объекта <xref:System.Windows.Forms.DataGridView>.  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Исходная последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" /> имеет значение <see langword="null" /> и создание новой таблицы невозможно.</exception>
        <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Data.DataRow" /> в исходной последовательности находится в состоянии <see cref="F:System.Data.DataRowState.Deleted" />.  
  
Исходная последовательность не содержит объектов <see cref="T:System.Data.DataRow" />.  
  
Объект <see cref="T:System.Data.DataRow" /> в исходной последовательности имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип объектов в исходной последовательности, обычно <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Исходная последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
        <param name="table"><see cref="T:System.Data.DataTable" /> — объект назначения.</param>
        <param name="options">Перечисление <see cref="T:System.Data.LoadOption" />, указывающее параметры загрузки <see cref="T:System.Data.DataTable" />.</param>
        <summary>Копирует объекты <see cref="T:System.Data.DataRow" /> в указанный объект <see cref="T:System.Data.DataTable" /> с заданным входным объектом <see cref="T:System.Collections.Generic.IEnumerable`1" />, где универсальный параметр <paramref name="T" /> имеет значение <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `T` входного параметра `source` может иметь только тип <xref:System.Data.DataRow>или тип, производный от <xref:System.Data.DataRow>.  
  
 Входной последовательностью может быть <xref:System.Collections.Generic.IEnumerable%601> любой источник, а не только запрос к <xref:System.Data.DataTable>. Обратите внимание, что если исходная последовательность является запросом, вызов этого оператора приведет к немедленному выполнению. Перечисление исходных последовательностей может также привести к возникновению исключений.  
  
 Схема целевой таблицы основана на схеме первой <xref:System.Data.DataRow> строки исходной последовательности. Метаданные таблицы извлекаются из <xref:System.Data.DataRow> метаданных и значений таблицы из значений <xref:System.Data.DataRow>столбцов. Для типизированных <xref:System.Data.DataTable>типов не сохраняются. Данные и схема передаются, но результирующие строки выходной таблицы не будут иметь типизированный <xref:System.Data.DataRow> тип. <xref:System.Data.DataRow> <xref:System.Data.DataTable>Свойства <xref:System.Data.DataRow.RowState%2A> и <xref:System.Data.DataRow.RowError%2A> не сохраняются во время копирования из источника в возвращаемый объект.  
  
 Если в источнике <xref:System.Data.DataRow>обнаружена **пустая** ссылка или тип Nullable со значением **null** , этот метод заменяет значение в назначении <xref:System.Data.DataTable> значением <xref:System.DBNull.Value>.  
  
 Созданная таблица, возвращаемая методом, имеет имя таблицы по умолчанию. Если вы хотите присвоить <xref:System.Data.DataTable>имя, присоединить его <xref:System.Data.DataSet>к или выполнить любую другую <xref:System.Data.DataTable> операцию, необходимо сделать это после того, как таблица будет создана и возвращена.  
  
 Дополнительные сведения см. в разделе [Создание таблицы данных из запроса](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Копируемые объекты <see cref="T:System.Data.DataRow" /> не соответствуют схеме объекта назначения <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">Исходная последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" /> имеет значение <see langword="null" /> либо конечный объект <see cref="T:System.Data.DataTable" /> равен <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Data.DataRow" /> в исходной последовательности находится в состоянии <see cref="F:System.Data.DataRowState.Deleted" />.  
  
Исходная последовательность не содержит объектов <see cref="T:System.Data.DataRow" />.  
  
Объект <see cref="T:System.Data.DataRow" /> в исходной последовательности имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">Тип объектов в исходной последовательности, обычно <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Исходная последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
        <param name="table"><see cref="T:System.Data.DataTable" /> — объект назначения.</param>
        <param name="options">Перечисление <see cref="T:System.Data.LoadOption" />, указывающее параметры загрузки <see cref="T:System.Data.DataTable" />.</param>
        <param name="errorHandler">Делегат <see cref="T:System.Data.FillErrorEventHandler" />, представляющий метод, который будет обрабатывать ошибки.</param>
        <summary>Копирует объекты <see cref="T:System.Data.DataRow" /> в указанный объект <see cref="T:System.Data.DataTable" /> с заданным входным объектом <see cref="T:System.Collections.Generic.IEnumerable`1" />, где универсальный параметр <paramref name="T" /> имеет значение <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `T` входного параметра `source` может иметь только тип <xref:System.Data.DataRow>или тип, производный от <xref:System.Data.DataRow>.  
  
 Входной последовательностью может быть <xref:System.Collections.Generic.IEnumerable%601> любой источник, а не только запрос к <xref:System.Data.DataTable>. Обратите внимание, что если исходная последовательность является запросом, вызов этого оператора приведет к немедленному выполнению. Перечисление исходных последовательностей может также привести к возникновению исключений.  
  
 Схема целевой таблицы основана на схеме первой <xref:System.Data.DataRow> строки исходной последовательности. Метаданные таблицы извлекаются из <xref:System.Data.DataRow> метаданных и значений таблицы из значений <xref:System.Data.DataRow>столбцов. Для типизированных <xref:System.Data.DataTable>типов не сохраняются. Данные и схема передаются, но результирующие строки выходной таблицы не будут иметь типизированный <xref:System.Data.DataRow> тип. <xref:System.Data.DataRow> <xref:System.Data.DataTable>Свойства <xref:System.Data.DataRow.RowState%2A> и <xref:System.Data.DataRow.RowError%2A> не сохраняются во время копирования из источника в возвращаемый объект.  
  
 Если в источнике <xref:System.Data.DataRow>обнаружена **пустая** ссылка или тип Nullable со значением **null** , этот метод заменяет значение в назначении <xref:System.Data.DataTable> значением <xref:System.DBNull.Value>.  
  
 Созданная таблица, возвращаемая методом, имеет имя таблицы по умолчанию. Если вы хотите присвоить <xref:System.Data.DataTable>имя, присоединить его <xref:System.Data.DataSet>к или выполнить любую другую <xref:System.Data.DataTable> операцию, необходимо сделать это после того, как таблица будет создана и возвращена.  
  
 Если исключение возникает во время копирования строки данных в целевую таблицу, например исключение ограничения, `errorHandler` вызывается делегат. Передается `errorHandler` в делегат со следующими значениями: <xref:System.Data.FillErrorEventArgs>  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A> Свойству присваивается копия исходных данных.  
  
-   Для свойства задан целевой объект  <xref:System.Data.DataTable> .  <xref:System.Data.FillErrorEventArgs.DataTable%2A>  
  
-   Для <xref:System.Data.FillErrorEventArgs.Errors%2A> свойства задается Перехваченное исключение.  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A> Свойство считывается после возврата вызова делегата. Если свойство имеет значение `true`, исходная последовательность по-своему будет перечисляться и загружаться в таблицу данных. <xref:System.Data.FillErrorEventArgs.Continue%2A> Если свойство имеет `false`значение, исходное <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> исключение создается из метода. <xref:System.Data.FillErrorEventArgs.Continue%2A>  
  
 Дополнительные сведения см. в разделе [Создание таблицы данных из запроса](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Копируемые объекты <see cref="T:System.Data.DataRow" /> не соответствуют схеме объекта назначения <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">Исходная последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" /> имеет значение <see langword="null" /> либо конечный объект <see cref="T:System.Data.DataTable" /> равен <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Объект <see cref="T:System.Data.DataRow" /> в исходной последовательности находится в состоянии <see cref="F:System.Data.DataRowState.Deleted" />.  
  
-или- 
Исходная последовательность не содержит объектов <see cref="T:System.Data.DataRow" />.  
  
- или - 
Объект <see cref="T:System.Data.DataRow" /> в исходной последовательности имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
