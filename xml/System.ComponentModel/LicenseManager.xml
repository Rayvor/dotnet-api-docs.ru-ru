<Type Name="LicenseManager" FullName="System.ComponentModel.LicenseManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba5950a09b8213b9c187d236bad011668d1e47d0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69327351" /></Metadata><TypeSignature Language="C#" Value="public sealed class LicenseManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LicenseManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicenseManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LicenseManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicenseManager sealed" />
  <TypeSignature Language="F#" Value="type LicenseManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет свойства и методы для добавления лицензии в компонент и для управления поставщиком <see cref="T:System.ComponentModel.LicenseProvider" />. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс предоставляет следующие `static` свойства: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> и. <xref:System.ComponentModel.LicenseManager.UsageMode%2A> <xref:System.ComponentModel.LicenseManager> Класс `static` также предоставляет следующие методы: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>и <xref:System.ComponentModel.LicenseManager.Validate%2A>.  
  
 При создании компонента, для которого необходимо создать лицензию, необходимо выполнить следующие действия.  
  
1.  Укажите, пометив компонент <xref:System.ComponentModel.LicenseProviderAttribute>с помощью. <xref:System.ComponentModel.LicenseProvider>  
  
2.  <xref:System.ComponentModel.LicenseManager.Validate%2A> Вызовите <xref:System.ComponentModel.LicenseManager.IsValid%2A> или в конструкторе компонента. <xref:System.ComponentModel.LicenseManager.Validate%2A>создает исключение <xref:System.ComponentModel.LicenseException> при попытке создать экземпляр без действительной лицензии. <xref:System.ComponentModel.LicenseManager.IsValid%2A>не создает исключение.  
  
3.  Вызовите <xref:System.ComponentModel.License.Dispose%2A> для любой лицензии, которая предоставляется при удалении или завершении компонента.  
  
 Дополнительные сведения о лицензировании см. [в разделе как Компоненты и элементы управления](https://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)лицензиями.  
  
   
  
## Examples  
 В следующем примере кода создается лицензированный элемент управления с <xref:System.ComponentModel.LicenseManager.Validate%2A> помощью метода. В нем используется <xref:System.ComponentModel.LicenseProvider> объект, реализованный <xref:System.ComponentModel.LicFileLicenseProvider> классом.  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateWithContext">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает экземпляр типа объекта с контекстом лицензии.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
        <param name="creationContext">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный экземпляр.</param>
        <summary>Создает экземпляр указанного типа, задавая контекст, в котором можно использовать лицензированный экземпляр.</summary>
        <returns>Экземпляр указанного типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.ComponentModel.LicenseContext> , заданное в `creationContext` качестве <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> параметра, используется в качестве для времени жизни <xref:System.ComponentModel.License>. Метод блокирует все остальные потоки <xref:System.AppDomain> в FROM <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, изменяя, что <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> позволяет вести себя как атомарная операция. <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">для доступа к закрытым членам класса и метаданным. Связанное перечисление:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext * obj[] -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />, представляющий создаваемый тип.</param>
        <param name="creationContext">Объект <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный экземпляр.</param>
        <param name="args">Массив типа <see cref="T:System.Object" />, представляющий аргументы для типа.</param>
        <summary>Создает экземпляр указанного типа с заданными аргументами, задавая контекст, в котором можно использовать лицензированный экземпляр.</summary>
        <returns>Экземпляр указанного типа с заданным массивом аргументов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.ComponentModel.LicenseContext> , заданное в `creationContext` качестве <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> параметра, используется в качестве для времени жизни <xref:System.ComponentModel.License>. Этот метод блокирует все остальные потоки в <xref:System.AppDomain> FROM <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, изменяя, <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> что позволяет вести себя как атомарная операция.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseContext CurrentContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ComponentModel.LicenseContext CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentContext As LicenseContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseContext ^ CurrentContext { System::ComponentModel::LicenseContext ^ get(); void set(System::ComponentModel::LicenseContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.ComponentModel.LicenseContext with get, set" Usage="System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает текущий контекст <see cref="T:System.ComponentModel.LicenseContext" />, определяющий, когда можно использовать лицензированный объект.</summary>
        <value>Объект <see cref="T:System.ComponentModel.LicenseContext" />, который указывает, когда можно использовать лицензированный объект.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда пользователь запрашивает допустимое <xref:System.ComponentModel.License>значение, пользователь должен предоставить контекст, в <xref:System.ComponentModel.License> котором он является допустимым для <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> метода. Значение <xref:System.ComponentModel.LicenseContext> , возвращаемое этим свойством, должно передаваться всем <xref:System.ComponentModel.LicenseProvider> классам.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> в данный момент блокировано и не может быть изменено.</exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsLicensed">
      <MemberSignature Language="C#" Value="public static bool IsLicensed (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLicensed(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLicensed(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsLicensed : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsLicensed type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" /> для поиска действительной лицензии.</param>
        <summary>Возвращает значение, показывающее, обладает ли данный тип действительной лицензией.</summary>
        <returns>Значение <see langword="true" />, если данный тип является лицензированным; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsValid">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, может ли быть предоставлена действительная лицензия.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего <see cref="T:System.ComponentModel.License" />.</param>
        <summary>Определяет, может ли быть предоставлена действительная лицензия для указанного типа.</summary>
        <returns>Значение <see langword="true" />, если действительная лицензия может быть предоставлена; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.LicenseManager.IsValid%2A> Метод возвращает`true` , если тип либо не является лицензированным, либо является лицензированным и лицензия действительна.  
  
 Этот метод не создает исключение, <xref:System.ComponentModel.LicenseException> когда не может предоставить допустимое <xref:System.ComponentModel.License>значение. <xref:System.ComponentModel.LicenseManager.Validate%2A> Метод создает исключения.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type, object instance, [out] class System.ComponentModel.License&amp; license) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type, System::Object ^ instance, [Runtime::InteropServices::Out] System::ComponentModel::License ^ % license);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type * obj *  -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid (type, instance, license)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="license" Type="System.ComponentModel.License" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
        <param name="instance">Объект указанного типа или типа, производного от указанного типа.</param>
        <param name="license">Объект <see cref="T:System.ComponentModel.License" />, являющийся действительной лицензией или значением <see langword="null" />, если действительная лицензия не может быть предоставлена.</param>
        <summary>Определяет, может ли быть предоставлена действительная лицензия для указанного экземпляра типа. Этот метод создает действительный объект <see cref="T:System.ComponentModel.License" />.</summary>
        <returns>Значение <see langword="true" />, если может быть предоставлена действительная лицензия <see cref="T:System.ComponentModel.License" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод возвращает `true` ,если`type` параметр не лицензирован или если он имеет лицензию, а параметрявляетсядопустимым.`license` <xref:System.ComponentModel.LicenseManager.IsValid%2A>  
  
 Этот метод не создает исключение, <xref:System.ComponentModel.LicenseException> когда не может предоставить допустимое <xref:System.ComponentModel.License>значение. <xref:System.ComponentModel.LicenseManager.Validate%2A> Метод создает исключения.  
  
 Если параметр не `null` после этого вызова, объект, запрашивающий запрос <xref:System.ComponentModel.License> , должен удалить лицензию, вызвав <xref:System.ComponentModel.License.Dispose%2A> метод, когда объект удаляется или завершается. `license`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="LockContext">
      <MemberSignature Language="C#" Value="public static void LockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member LockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.LockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser">Объект, текущий контекст которого нужно заблокировать.</param>
        <summary>Не допускает внесения изменений в текущий контекст <see cref="T:System.ComponentModel.LicenseContext" /> данного объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.LicenseContext> Используйте для<xref:System.ComponentModel.License> получения объекта. Этот метод блокирует <xref:System.ComponentModel.LicenseContext>, <xref:System.ComponentModel.License> предотвращая извлечение из.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Контекст уже заблокирован.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnlockContext">
      <MemberSignature Language="C#" Value="public static void UnlockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnlockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnlockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnlockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member UnlockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.UnlockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser">Объект, текущий контекст которого нужно разблокировать.</param>
        <summary>Позволяет вносить изменения в текущий контекст <see cref="T:System.ComponentModel.LicenseContext" /> данного объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.LicenseContext> Используйте для<xref:System.ComponentModel.License> получения объекта. Этот метод разблокирует <xref:System.ComponentModel.LicenseContext>, позволяя извлечь объект <xref:System.ComponentModel.License> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contextUser" /> представляет пользователя, отличающегося от заданного в предыдущем вызове метода <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UsageMode">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseUsageMode UsageMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ComponentModel.LicenseUsageMode UsageMode" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.UsageMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UsageMode As LicenseUsageMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseUsageMode UsageMode { System::ComponentModel::LicenseUsageMode get(); };" />
      <MemberSignature Language="F#" Value="member this.UsageMode : System.ComponentModel.LicenseUsageMode" Usage="System.ComponentModel.LicenseManager.UsageMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseUsageMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.ComponentModel.LicenseUsageMode" />, определяющий, когда можно использовать лицензированный объект для контекста <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
        <value>Одно из значений <see cref="T:System.ComponentModel.LicenseUsageMode" />, как указано в свойстве <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если это свойство не может найти <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> значение, оно возвращает <xref:System.ComponentModel.LicenseUsageMode.Runtime>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.LicenseManager.CurrentContext" />
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, может ли быть предоставлена лицензия.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Validate(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Validate : Type -&gt; unit" Usage="System.ComponentModel.LicenseManager.Validate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
        <summary>Определяет, может ли быть предоставлена лицензия для указанного типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает исключение <xref:System.ComponentModel.LicenseException> , если невозможно <xref:System.ComponentModel.License> предоставить допустимое значение. <xref:System.ComponentModel.LicenseManager.IsValid%2A> Метод не создает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException">Лицензия <see cref="T:System.ComponentModel.License" /> не может быть предоставлена.</exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.License Validate (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.License Validate(class System.Type type, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::License ^ Validate(Type ^ type, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Validate : Type * obj -&gt; System.ComponentModel.License" Usage="System.ComponentModel.LicenseManager.Validate (type, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />, который представляет тип объекта, запрашивающего лицензию.</param>
        <param name="instance">Объект <see cref="T:System.Object" /> указанного типа или типа, производного от указанного типа.</param>
        <summary>Определяет, может ли быть предоставлена лицензия для экземпляра указанного типа.</summary>
        <returns>Допустимый класс <see cref="T:System.ComponentModel.License" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает исключение <xref:System.ComponentModel.LicenseException> , если невозможно <xref:System.ComponentModel.License> предоставить допустимое значение. <xref:System.ComponentModel.LicenseManager.IsValid%2A> Метод не создает исключение.  
  
 Все объекты, запрашивающие <xref:System.ComponentModel.License> запрос, должны удалить лицензию, <xref:System.ComponentModel.License.Dispose%2A> вызвав метод, когда объект удален или завершен.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException">Тип лицензирован, но лицензия <see cref="T:System.ComponentModel.License" /> не может быть предоставлена.</exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>
