<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5de7d29b4f5fa27299fc7f0b6d5a3a21b581d735" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898392" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Отслеживает время выполнения асинхронной операции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При реализации класса согласно [Обзор асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), может потребоваться отслеживать время существования каждого асинхронную операцию, вызванную в экземпляре класса. <xref:System.ComponentModel.AsyncOperation> Класс обеспечивает возможности отслеживания и сообщают о ходе выполнения асинхронной задачи.  
  
 В следующем списке приведены способы использования <xref:System.ComponentModel.AsyncOperation> объекта:  
  
-   Чтобы сообщить о ходе выполнения и промежуточные результаты клиенту, вызовите <xref:System.ComponentModel.AsyncOperation.Post%2A> из асинхронной рабочему коду.  
  
-   Чтобы указать, что асинхронная задача завершена или отменить ожидающие асинхронная задача, вызовите <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 Ваш класс должен получить <xref:System.ComponentModel.AsyncOperation> объект для каждой асинхронной задачи, вызвав <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> при запуске каждой задачи. Чтобы разрешить клиенту провести различие отдельных асинхронных задач, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> с параметром для уникальный предоставленных клиентом маркер, который становится <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> свойство. Его можно затем использовать в клиентском коде для идентификации конкретной асинхронной задачи, который порождает события выполнения или завершения.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation> объектов для отслеживания времени существования асинхронных операций. Данный пример кода является частью большего примера для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.  
  
 Полный листинг кода, см. в разделе [как: Реализация компонента, поддерживающего асинхронную модель на основе событий](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Полный листинг кода для клиентской формы, см. в разделе [как: Реализация клиента асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Разработчики должны обеспечить <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> и <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> вызовы являются асинхронными, переполнения, чтобы поставщики библиотеки классов не обязательно вынужденными обращаться с потенциальных стека, если они предполагают асинхронного поведения в определенное приложение модель, которая происходит синхронно.  
  
Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Практическое руководство. Реализация компонента, поддерживающего асинхронную модель на основе событий</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает асинхронную операцию.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает выполнение асинхронной операции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> для завершения времени существования асинхронной операции. После вызова этого метода для выполнения определенных задач вызывает соответствующим <xref:System.ComponentModel.AsyncOperation> приведет к появлению исключения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Объект <see cref="T:System.Threading.SendOrPostCallback" />, инкапсулирующий делегат, вызываемый при завершении операции.</param>
        <param name="arg">Аргумент для делегата, содержащегося в параметре <paramref name="d" />.</param>
        <summary>Вызывает делегат для потока или контекста, соответствующего модели приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperation.Post%2A> Метод вызывает делегат, заданный параметром `arg` параметр без прекращения выполнения асинхронной операции.  
  
 Можно вызвать <xref:System.ComponentModel.AsyncOperation.Post%2A> так часто, как во время существования асинхронной операции не был завершен путем вызова метода <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. Можно использовать метод, чтобы сообщать о ходе выполнения или промежуточные результаты для клиентов.  
  
 `d` Параметр, создающий оболочку делегата требуется вызываемый, когда вы хотите опубликовать обновление о ходе выполнения асинхронной задачи. <xref:System.ComponentModel.AsyncOperation> Объекта убедитесь, что делегат может быть вызван в потоке или контексте, соответствующего модели приложения. При необходимости, ваш метод можно вызывать событие, которое уведомляет клиентов об изменении состояния, обновления хода выполнения или новые добавочные результаты.  
  
 `arg` Параметр должен использоваться для передачи состояния в делегат, который инкапсулируется `d` параметра. Он может ссылаться на <xref:System.ComponentModel.AsyncOperation>, или может быть <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> объекта. Он может быть желательным собственный производный класс от <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> для предоставления дополнительного состояния хранилища.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.Post%2A> метод для отображения хода выполнения и добавочных результатов асинхронной операции. Данный пример кода является частью большего примера для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> уже был вызван ранее для этой задачи.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> — <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Необходимо убедиться в наследники <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> асинхронным, таким образом, чтобы поставщики библиотеки классов не обязательно вынужденными потенциальных стека вызова вызывает переполнение, если они предполагают асинхронность, но конкретную модель приложения происходит синхронно.  
  
 <block subset="none" type="note"><para>  
 Консольные приложения не синхронизируют выполнение вызовов <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />. Это может вызвать беспорядочное возникновение событий <see langword="ProgressChanged" />. Если вы хотите получить сериализованное выполнение вызовов <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, реализуйте и установите класс <see cref="T:System.Threading.SynchronizationContext" />.  
  
</para></block>  
  
 Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Практическое руководство. Реализация компонента, поддерживающего асинхронную модель на основе событий</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Объект <see cref="T:System.Threading.SendOrPostCallback" />, инкапсулирующий делегат, вызываемый при завершении операции.</param>
        <param name="arg">Аргумент для делегата, содержащегося в параметре <paramref name="d" />.</param>
        <summary>Завершает выполнение асинхронной операции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> для завершения времени существования асинхронной операции. После вызова этого метода для выполнения определенных задач вызывает соответствующим <xref:System.ComponentModel.AsyncOperation> объекта приведет к появлению исключения.  
  
 `d` Параметр, создающий оболочку делегата, класс для вызова при завершении задачи из-за завершения, отмены или сбоя задачи. <xref:System.ComponentModel.AsyncOperation> Объекта убедитесь, что делегат может быть вызван в потоке или контексте, соответствующего модели приложения. Делегат, при необходимости можно вызывать событие, которое уведомляет клиентов, которые завершения асинхронной задачи.  
  
 `arg` Параметр используется для передачи сведений о состоянии в делегат завершения `d`. Можно использовать <xref:System.ComponentModel.AsyncOperation> объекта, или <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> объект в качестве значения параметра. Кроме того, если вы хотите предоставить дополнительное состояние хранилища, можно использовать экземпляр класса, производного от <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> класса.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> для завершения времени существования асинхронной операции. Данный пример кода является частью большего примера для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> — <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Необходимо убедиться в наследники <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> асинхронным, таким образом, чтобы поставщики библиотеки классов не обязательно вынужденными потенциальных стека вызова вызывает переполнение, если они предполагают асинхронность, но конкретную модель приложения происходит синхронно. Метод должен интерпретироваться как вызов «прекращения выполнения», это означает, что реализация должна выполнить действия, соответствующего модели приложения. Например ASP.NET уменьшит счетчик незавершенных асинхронных операций. Это также следует помещать операции в состоянии таким образом, что все последующие вызовы завершатся сбоем, если она уже завершена.  
  
Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Практическое руководство. Реализация компонента, поддерживающего асинхронную модель на основе событий</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Threading.SynchronizationContext" />, передаваемый в конструктор.</summary>
        <value>Объект <see cref="T:System.Threading.SynchronizationContext" />, передаваемый в конструктор.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект, используемый для уникальной идентификации асинхронной операции.</summary>
        <value>Объект состояния, переданный вызову асинхронного метода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если ваш класс поддерживает несколько асинхронных методов или несколько вызовов одного асинхронного метода, клиентам потребуется способ определить, какая асинхронная задача вызывает события. Ваш `MethodNameAsync` метод должен принимать параметр типа <xref:System.Object> , будет выступать в качестве идентификатора задачи. Идентификатор этой задачи будет использоваться при вызове <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, метода и это будет связать идентификатор задачи клиента с конкретного вызова асинхронной операции. Эта задача, идентификатор будет предоставляться доступ для вашей реализации через <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> свойство.  
  
> [!CAUTION]
>  Код клиента необходимо следить за тем предоставить уникальное значение для <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> свойство. Неуникальные идентификаторы задач может привести к реализации неправильно сообщать о ходе выполнения и другие события. Код должен проверить-уникального идентификатора задачи и вызывать <xref:System.ArgumentException> если она будет обнаружена.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> для отслеживания времени существования асинхронных операций. Данный пример кода является частью большего примера для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">Обзор асинхронной модели, основанной на событиях</related>
      </Docs>
    </Member>
  </Members>
</Type>