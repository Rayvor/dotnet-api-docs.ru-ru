<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c703222b353fbe8ff5c63fed1cd19f543de8517" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75148095" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Отслеживает время существования асинхронной операции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При реализации класса в соответствии с [обзором асинхронной модели, основанной на событиях](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), может потребоваться отслеживание времени существования каждой асинхронной операции, вызванной в экземпляре класса. Класс <xref:System.ComponentModel.AsyncOperation> предоставляет способы отслеживания и передачи сведений о ходе выполнения асинхронной задачи.  
  
 В следующем списке приведены способы использования объекта <xref:System.ComponentModel.AsyncOperation>.  
  
-   Чтобы сообщить о ходе выполнения и промежуточных результатах клиенту, вызовите <xref:System.ComponentModel.AsyncOperation.Post%2A> из кода асинхронной рабочей роли.  
  
-   Чтобы указать, что асинхронная задача завершена, или для отмены ожидающей асинхронной задачи, вызовите <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 Класс должен получить объект <xref:System.ComponentModel.AsyncOperation> для каждой асинхронной задачи, вызвав <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> при запуске каждой задачи. Чтобы разрешить клиенту отличать отдельные асинхронные задачи, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> принимает параметр для уникального предоставленного клиентом маркера, который становится свойством <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>. Затем он может использоваться клиентским кодом для обнаружения конкретной асинхронной задачи, которая вызывает события хода выполнения или завершения.  
  
   
  
## Examples  
 В следующем примере кода показано использование объекта <xref:System.ComponentModel.AsyncOperation> для наблюдения за временем существования асинхронных операций. Этот пример кода является частью большого примера, приведенного для класса <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>.  
  
 Полный листинг кода см. в разделе [руководство. Реализация компонента, поддерживающего асинхронную модель на основе событий](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Полный листинг кода клиентской формы см. [в разделе как реализовать клиент асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Разработчики должны гарантировать, что вызовы <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> и <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> являются асинхронными, поэтому поставщикам библиотек классов не нужно беспокоиться о возможных возможностях стека, если они предполагают асинхронное поведение в конкретной модели приложения, которая выполняется в синхронном режиме.  
  
Дополнительные сведения о реализации асинхронных классов см. [в разделе Реализация асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Как реализовать компонент, поддерживающий асинхронную модель на основе событий</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает асинхронную операцию.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает время существования асинхронной операции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите метод <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A>, чтобы завершить время существования асинхронной операции. После вызова этого метода для конкретной задачи вызовы соответствующего <xref:System.ComponentModel.AsyncOperation> будут вызывать исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Объект <see cref="T:System.Threading.SendOrPostCallback" />, создающий оболочку делегата, который должен вызываться при завершении операции.</param>
        <param name="arg">Аргумент для делегата, содержащегося в параметре <paramref name="d" />.</param>
        <summary>Вызывает делегата для потока или контекста, соответствующего модели приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ComponentModel.AsyncOperation.Post%2A> вызывает делегат, указанный параметром `arg`, не завершая время существования асинхронной операции.  
  
 Метод <xref:System.ComponentModel.AsyncOperation.Post%2A> можно вызвать так часто, как если бы время существования асинхронной операции не было завершено вызовом <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. Можно использовать метод, чтобы сообщать о ходе выполнения или промежуточных результатах обратно клиентам.  
  
 Параметр `d` упаковывает делегат, который должен вызываться, когда необходимо отправить обновление о состоянии асинхронной задачи. Объект <xref:System.ComponentModel.AsyncOperation> гарантирует, что ваш делегат будет вызываться в потоке или контексте, подходящем для модели приложения. При необходимости метод может вызвать событие, уведомляющее клиентов об изменении состояния, обновлении хода выполнения или новых доступных добавочных результатах.  
  
 Параметр `arg` должен использоваться для передачи состояния делегату, упакованному параметром `d`. Это может быть ссылка на <xref:System.ComponentModel.AsyncOperation>или объект <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType>. Может быть желательно получить собственный класс от <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> для предоставления дополнительного хранилища состояний.  
  
   
  
## Examples  
 В следующем примере кода показано использование метода <xref:System.ComponentModel.AsyncOperation.Post%2A> для создания отчетов о ходе выполнения и добавочных результатов асинхронной операции. Этот пример кода является частью большого примера, приведенного для класса <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> уже был вызван ранее для этой задачи.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Наследники должны сделать <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> асинхронным вызовом, чтобы поставщики библиотек классов не могли самостоятельно обращаться к потенциальным переделам стека, если они предполагают асинхронность, а конкретная модель приложения является синхронной.  
  
 <block subset="none" type="note"><para>  
 Консольные приложения не синхронизируют выполнение вызовов <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />. Это может вызвать беспорядочное возникновение событий <see langword="ProgressChanged" />. Если вы хотите получить сериализованное выполнение вызовов <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, реализуйте и установите класс <see cref="T:System.Threading.SynchronizationContext" />.  
  
</para></block>  
  
 Дополнительные сведения о реализации асинхронных классов см. [в разделе Реализация асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Как реализовать компонент, поддерживающий асинхронную модель на основе событий</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Объект <see cref="T:System.Threading.SendOrPostCallback" />, создающий оболочку делегата, который должен вызываться при завершении операции.</param>
        <param name="arg">Аргумент для делегата, содержащегося в параметре <paramref name="d" />.</param>
        <summary>Завершает время существования асинхронной операции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите метод <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>, чтобы завершить время существования асинхронной операции. После вызова этого метода для конкретной задачи вызовы соответствующего объекта <xref:System.ComponentModel.AsyncOperation> будут вызывать исключение.  
  
 Параметр `d` создает оболочку для делегата, который должен вызываться классом, когда время существования задачи завершается из-за завершения, отмены или сбоя задачи. Объект <xref:System.ComponentModel.AsyncOperation> гарантирует, что ваш делегат будет вызываться в потоке или контексте, подходящем для модели приложения. При необходимости делегат может создать событие, уведомляющее клиентов о завершении времени существования асинхронной задачи.  
  
 Параметр `arg` используется для передачи сведений о состоянии делегату завершения `d`. Можно использовать объект <xref:System.ComponentModel.AsyncOperation> или объект <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> в качестве значения параметра. Кроме того, если требуется предоставить дополнительное хранилище состояний, можно использовать экземпляр класса, производного от класса <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере кода показано использование метода <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> для завершения жизненного цикла асинхронной операции. Этот пример кода является частью большого примера, приведенного для класса <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Наследники должны сделать <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> асинхронным вызовом, чтобы поставщики библиотек классов не могли самостоятельно обращаться к потенциальным переделам стека, если они предполагают асинхронность, а конкретная модель приложения является синхронной. Метод должен интерпретироваться как "завершающее время существования", что означает, что реализация должна сделать то, что подходит для модели приложения. Например, ASP.NET уменьшит количество невыполненных асинхронных операций. Это также должно привести к сбою операции, так что все последующие вызовы будут завершаться ошибкой, так как теперь она завершена.  
  
Дополнительные сведения о реализации асинхронных классов см. [в разделе Реализация асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Как реализовать компонент, поддерживающий асинхронную модель на основе событий</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Threading.SynchronizationContext" />, переданный в конструктор.</summary>
        <value>Объект <see cref="T:System.Threading.SynchronizationContext" />, передаваемый в конструктор.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект, используемый для уникальной идентификации асинхронной операции.</summary>
        <value>Объект состояния, переданный в вызов асинхронного метода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если ваш класс поддерживает несколько асинхронных методов или несколько вызовов одного асинхронного метода, клиентам потребуется способ определить, какая асинхронная задача вызывает события. Метод `MethodNameAsync` должен принимать параметр типа <xref:System.Object>, который будет действовать как идентификатор задачи. Этот идентификатор задачи будет использоваться при вызове метода <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, и это приведет к связыванию идентификатора задачи клиента с определенным вызовом асинхронной операции. Этот идентификатор задачи предоставляется вашей реализации через свойство <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>.  
  
> [!CAUTION]
>  Клиентский код должен быть аккуратным, чтобы предоставить уникальное значение для свойства <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>. Идентификаторы неуникальных задач могут привести к тому, что ваша реализация сообщит о ходе выполнения и других событиях неверно. Код должен проверить наличие неуникального идентификатора задачи и вызвать <xref:System.ArgumentException>, если он обнаружен.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> для контроля времени существования асинхронных операций. Этот пример кода является частью большого примера, приведенного для класса <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">Обзор асинхронной модели, основанной на событиях</related>
      </Docs>
    </Member>
  </Members>
</Type>
