<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="617835633ef2da71f26533be93c754c337cca5c5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75148082" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Обеспечивает управление параллелизмом для классов, поддерживающих вызовы асинхронных методов. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если класс должен обеспечить асинхронное поведение в соответствии с [общими сведениями об асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), будет возникать ряд проблем с управлением параллелизмом. Помимо этого, необходимо обеспечить вызов обработчиков событий для потока или контекста, подходящего для модели приложения (например, Windows Forms приложений, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] приложений, консольных приложений и т. д.). <xref:System.ComponentModel.AsyncOperationManager> предоставляет удобный способ создания класса, который работает должным образом во всех моделях приложений, поддерживаемых [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 Класс <xref:System.ComponentModel.AsyncOperationManager> содержит один метод, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, который возвращает <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>, который можно использовать для контроля длительности конкретной асинхронной задачи. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> задачи можно использовать для оповещения клиентов о завершении задачи. Он также может использоваться для отправки обновлений хода выполнения и добавочных результатов без завершения операции.  
  
 Дополнительные сведения о реализации асинхронных классов см. [в разделе Реализация асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование класса <xref:System.ComponentModel.AsyncOperationManager> для создания класса, поддерживающего асинхронные операции для любой модели приложения. В нем показано, как реализовать класс, который проверяет число, чтобы определить, является ли он простым. Это вычисление может занять много времени, поэтому оно выполняется в отдельном потоке. Отчеты о ходе выполнения, добавочные результаты и уведомления о завершении обрабатываются классом <xref:System.ComponentModel.AsyncOperation>, который гарантирует, что обработчики событий клиента вызываются в правильном потоке или контексте.  
  
 Полный листинг кода см. в разделе [руководство. Реализация компонента, поддерживающего асинхронную модель на основе событий](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Полный листинг кода клиентской формы см. [в разделе как реализовать клиент асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Реализация асинхронной модели, основанной на событиях</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Объект, используемый для связи элемента состояния клиента, например идентификатора задачи, с конкретной асинхронной операцией.</param>
        <summary>Возвращает объект <see cref="T:System.ComponentModel.AsyncOperation" /> для контроля длительности конкретной асинхронной операции.</summary>
        <returns>Объект <see cref="T:System.ComponentModel.AsyncOperation" />, который можно использовать для контроля длительности вызова асинхронного метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> возвращает <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>, который можно использовать для контроля длительности определенной асинхронной операции и для предупреждения модели приложения по завершении операции. Его также можно использовать для отправки обновлений хода выполнения и добавочных результатов без завершения операции. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> будет правильно маршалировать эти вызовы в соответствующий поток или контекст для модели приложения.  
  
 При реализации класса, поддерживающего асинхронную модель на основе событий, класс должен вызывать <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> каждый раз при вызове метода *имя_метода*`Async`. Клиентское приложение, выполняющее вызовы метода, может использовать параметр `userSuppliedState` для уникальной идентификации каждого вызова, чтобы различать события, возникающие во время выполнения асинхронной операции.  
  
> [!CAUTION]
>  Клиентский код должен предоставить уникальное значение для параметра `userSuppliedState`. Идентификаторы неуникальных задач могут привести к тому, что ваша реализация сообщит о ходе выполнения и других событиях неверно. Код должен проверять наличие неуникального идентификатора задачи и выдавать <xref:System.ArgumentException?displayProperty=nameWithType>, если он обнаружен.  
  
 Код должен относить все <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>, возвращаемые <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, и использовать объект в соответствующей базовой асинхронной операции для публикации обновлений и завершения операции. Это отслеживание может быть простым, так как передача <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> в качестве параметра между делегатами. В более сложных проектах класс может поддерживать коллекцию объектов <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>, добавлять объекты при запуске задач и удалять их при завершении или отмене задач. Такой подход позволяет проверить наличие уникальных значений параметров `userSuppliedState` и является методом, который следует использовать при работе с классами, поддерживающими несколько одновременных вызовов.  
  
 Дополнительные сведения о реализации асинхронных классов см. [в разделе Реализация асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование метода <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> для создания <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> для отслеживания длительности асинхронных операций. Этот пример кода является частью большого примера, приведенного для класса <xref:System.ComponentModel.AsyncOperationManager>.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Реализация асинхронной модели, основанной на событиях</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает контекст синхронизации для асинхронной операции.</summary>
        <value>Контекст синхронизации для асинхронной операции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию является реализацией в свободной потоковой реализации.  
  
 Поток должен задать свойству <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> значение `null`, чтобы освободить фабрику по мере ее завершения, или же ее фабрика никогда не будет удалена.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">для настройки контекста синхронизации. Значение требования: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Связанное состояние:</permission>
      </Docs>
    </Member>
  </Members>
</Type>
