<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0758038abe314d7edf4ae6dd21fb9aae6a993bd" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898417" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Обеспечивает управление параллельным выполнением для классов, поддерживающих асинхронные вызовы метода. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если ваш класс должен обеспечивать асинхронное поведение в соответствии с [Обзор асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), возникнет ряд проблем управления параллелизмом. Среди них — требование, чтобы убедиться, что обработчики событий вызываются из потока или контекста, соответствующего модели приложения (например, приложения Windows Forms, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] приложений, консольные приложения и т. д.). <xref:System.ComponentModel.AsyncOperationManager> Предоставляет удобный способ создать класс, который будет правильно работать в группе все модели приложений, поддерживаемых [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 <xref:System.ComponentModel.AsyncOperationManager> Класса содержит один метод <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, который возвращает <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , можно использовать для контроля длительности конкретной асинхронной задачи. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Для задачи может использоваться для оповещения клиентов, когда задача завершается. Он может также использоваться для передачи обновлений хода выполнения и добавочных результатов без завершения операции.  
  
 Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperationManager> класс, чтобы создать класс, который поддерживает асинхронные операции для любой модели приложения. Показано, как реализовать класс, который проверяет номер, чтобы определить, является ли оно простым. Это вычисление может занять много времени, поэтому оно выполняется в отдельном потоке. Отчеты о ходе выполнения, добавочных результатов и уведомлений о завершении обрабатываются <xref:System.ComponentModel.AsyncOperation> класс, который гарантирует, что обработчики событий клиента вызываются в правильном потоке или контексте.  
  
 Полный листинг кода, см. в разделе [как: Реализация компонента, поддерживающего асинхронную модель на основе событий](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Полный листинг кода для клиентской формы, см. в разделе [как: Реализация клиента асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Реализация асинхронной модели, основанной на событиях</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Объект, используемый для связи элемента состояния клиента, например идентификатора задачи, с конкретной асинхронной операцией.</param>
        <summary>Возвращает объект <see cref="T:System.ComponentModel.AsyncOperation" /> для контроля длительности конкретной асинхронной операции.</summary>
        <returns>Объект <see cref="T:System.ComponentModel.AsyncOperation" />, который можно использовать для контроля длительности вызова асинхронного метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Возвращает метод <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , можно использовать для контроля длительности конкретной асинхронной операции и оповещать модели приложения, после завершения операции. Его также можно использовать для передачи обновлений хода выполнения и добавочных результатов без завершения операции. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Правильно упаковывает и передает эти вызовы в правильном потоке или контексте для модели приложения.  
  
 Если при реализации класса, поддерживающего асинхронную модель на основе событий, ваш класс должен вызывать <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> каждый раз вашей *имя_метода* `Async` вызывается метод. Можно использовать клиентское приложение, которое вызывает метод `userSuppliedState` параметр для уникальной идентификации каждого вызова, чтобы различать события, формируемые при выполнении асинхронной операции.  
  
> [!CAUTION]
>  Код клиента необходимо предоставить уникальное значение для `userSuppliedState` параметра. Неуникальные идентификаторы задач может привести к реализации неправильно сообщать о ходе выполнения и другие события. Код должен проверить-уникального идентификатора задачи и вызывать <xref:System.ArgumentException?displayProperty=nameWithType> если она будет обнаружена.  
  
 Ваш код должен отслеживать каждый <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> возвращаемые <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> и использовать объект в соответствующей базовой асинхронной операции для публикации обновлений и завершить операцию. Такое отслеживание может быть сложнее, чем передача <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> как параметр вместе с делегатами. В более сложных схемах, ваш класс может поддерживать коллекцию <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> объекты, добавление объектов, при запуске задач и их удаления, когда задача завершена или отменена. Такой подход позволяет на наличие уникальные `userSuppliedState` параметра значения, и является методом, следует использовать при работе с классами, которые поддерживают несколько одновременных вызовов.  
  
 Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> метод для создания <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> для контроля длительности асинхронных операций. Данный пример кода является частью большего примера для <xref:System.ComponentModel.AsyncOperationManager> класса.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Реализация асинхронной модели, основанной на событиях</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Рекомендации по работе с потоками</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает контекст синхронизации для асинхронной операции.</summary>
        <value>Контекст синхронизации для асинхронной операции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию является реализацией свободных потоков.  
  
 Следует задать поток <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> свойства `null` освобождать фабрики свободнопоточный в том случае, если это делается, в противном случае никогда не удаляется его фабрики.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">для настройки контекста синхронизации. Значение запроса: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Связанное состояние:</permission>
      </Docs>
    </Member>
  </Members>
</Type>