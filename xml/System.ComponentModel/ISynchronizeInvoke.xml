<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="02941803711a167a3426bc295a9316c5c2301bc6" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75146847" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6c7b1-101">Обеспечивает возможность синхронного или асинхронного выполнения делегата.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-101">Provides a way to synchronously or asynchronously execute a delegate.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c7b1-102">Интерфейс <xref:System.ComponentModel.ISynchronizeInvoke> обеспечивает синхронное и асинхронное взаимодействие между объектами при возникновении события.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="6c7b1-103">Объекты, реализующие этот интерфейс, могут получить уведомление о произошедшем событии, а также ответы на запросы о событии.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="6c7b1-104">Таким образом клиенты могут убедиться, что один запрос был обработан, прежде чем отправить последующий запрос, который зависит от завершения первого запроса.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="6c7b1-105">Класс <xref:System.ComponentModel.ISynchronizeInvoke> предоставляет два способа вызова процесса:</span><span class="sxs-lookup"><span data-stu-id="6c7b1-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="6c7b1-106">Асинхронно с помощью метода <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="6c7b1-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> запускает процесс, а затем сразу же возвращает.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="6c7b1-108">Используйте <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>, чтобы подождать, пока процесс, запущенный <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, завершится.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="6c7b1-109">Синхронно с помощью метода <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="6c7b1-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> запускает процесс, ожидает его завершения, а затем возвращает.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="6c7b1-111">Используйте <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>, если основной поток элемента управления отличается от вызывающего потока для маршалирования вызова в нужный поток.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6c7b1-112">Атрибут <xref:System.Security.Permissions.HostProtectionAttribute>, применяемый к этому классу, имеет следующее <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> значение свойства &#124; : <xref:System.Security.Permissions.HostProtectionResource.Synchronization> <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="6c7b1-113">Атрибут <xref:System.Security.Permissions.HostProtectionAttribute> не оказывает влияния на настольные приложения (обычно запускаемые двойным щелчком значка, вводом команды или URL-адреса в браузере).</span><span class="sxs-lookup"><span data-stu-id="6c7b1-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="6c7b1-114">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.HostProtectionAttribute> класс или [SQL Server атрибуты защиты узла](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span><span class="sxs-lookup"><span data-stu-id="6c7b1-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="6c7b1-115">Делегат <see cref="T:System.Delegate" /> для метода, принимающего параметры в том же количестве и того же типа, что и содержащиеся в <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <paramref name="args" />.</span></span></param>
        <param name="args"><span data-ttu-id="6c7b1-116">Массив типа <see cref="T:System.Object" /> для передачи аргументов в заданный метод.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span></span> <span data-ttu-id="6c7b1-117">Это может быть значение <see langword="null" />, если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-117">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="6c7b1-118">Асинхронно выполняет делегата для потока, создавшего этот объект.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-118">Asynchronously executes the delegate on the thread that created this object.</span></span></summary>
        <returns><span data-ttu-id="6c7b1-119">Интерфейс <see cref="T:System.IAsyncResult" />, который представляет асинхронную операцию, запущенную вызовом этого метода.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c7b1-120">Делегат `method` выполняется в потоке, создавшем объект, а не в потоке, в котором был вызван <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="6c7b1-121">Делегат вызывается асинхронно, и этот метод немедленно возвращает значение.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="6c7b1-122">Этот метод можно вызвать из любого потока.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-122">You can call this method from any thread.</span></span> <span data-ttu-id="6c7b1-123">Если требуется возвращаемое значение из процесса, запущенного с помощью этого метода, вызовите <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>, чтобы получить значение.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="6c7b1-124">Если необходимо вызвать делегат синхронно, используйте вместо этого метод <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="6c7b1-125">Интерфейс <see cref="T:System.IAsyncResult" />, представляющий асинхронную операцию, запущенную вызовом метода <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span></span></param>
        <summary><span data-ttu-id="6c7b1-126">Ожидает завершения процесса, запущенного вызовом метода <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />, а затем возвращает значение, созданное процессом.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span></span></summary>
        <returns><span data-ttu-id="6c7b1-127">Объект <see cref="T:System.Object" />, представляющий возвращаемое значение, сформированное асинхронной операцией.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c7b1-128">Этот метод возвращает возвращаемое значение асинхронной операции, представленной <xref:System.IAsyncResult>, переданной этим интерфейсом.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="6c7b1-129">Если асинхронная операция не завершена, этот метод будет ожидать, пока результат не станет доступен.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="6c7b1-130">Объект <see cref="T:System.Delegate" />, который содержит вызываемый метод, используемый в контексте потока для управления.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span></span></param>
        <param name="args"><span data-ttu-id="6c7b1-131">Массив типа <see cref="T:System.Object" />, представляющий аргументы для передачи в заданный метод.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span></span> <span data-ttu-id="6c7b1-132">Это может быть значение <see langword="null" />, если аргументы не требуются.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-132">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="6c7b1-133">Синхронно выполняет делегат в потоке, создавшем этот объект, а затем выполняет маршалинг вызова в текущий поток.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span></span></summary>
        <returns><span data-ttu-id="6c7b1-134">Объект <see cref="T:System.Object" />, представляющий возвращаемое из вызванного делегата значение, или значение <see langword="null" />, если делегат не возвращает значение.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c7b1-135">В отличие от <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, этот метод работает синхронно, то есть ожидает завершения процесса до возврата.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="6c7b1-136">Исключения, возникающие во время вызова, передаются обратно вызывающему объекту.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="6c7b1-137">Используйте этот метод при вызове метода из другого потока для маршалирования вызова в нужный поток.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6c7b1-138">Возвращает значение, показывающее, должен ли вызывающий объект вызвать метод <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> при вызове объекта, реализующего этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span></span></summary>
        <value><span data-ttu-id="6c7b1-139">Значение <see langword="true" />, если вызывающий объект должен вызвать метод <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-139"><see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c7b1-140">Это свойство определяет, должен ли вызывающий объект вызывать <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> при вызове метода объекту, реализующему этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="6c7b1-141">Такие объекты привязаны к определенному потоку и не являются потокобезопасными.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="6c7b1-142">При вызове метода из другого потока необходимо использовать метод <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> для маршалирования вызова в нужный поток.</span><span class="sxs-lookup"><span data-stu-id="6c7b1-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
