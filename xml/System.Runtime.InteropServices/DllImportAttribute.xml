<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bddc7213fba3d261507ce7a3e8139a0d7b952b10" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69270295" /></Metadata><TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="61ebf-101">Показывает, что в качестве статической точки входа неуправляемая динамическая библиотека (DLL) предоставляет метод с атрибутами.</span><span class="sxs-lookup"><span data-stu-id="61ebf-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-102">Этот атрибут можно применить к методам.</span><span class="sxs-lookup"><span data-stu-id="61ebf-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="61ebf-103"><xref:System.Runtime.InteropServices.DllImportAttribute> Атрибут предоставляет сведения, необходимые для вызова функции, экспортированной из неуправляемой библиотеки DLL.</span><span class="sxs-lookup"><span data-stu-id="61ebf-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="61ebf-104">В качестве минимального требования необходимо указать имя библиотеки DLL, содержащей точку входа.</span><span class="sxs-lookup"><span data-stu-id="61ebf-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="61ebf-105">Этот атрибут применяется непосредственно к C# определениям C++ методов и; Однако компилятор Visual Basic выдает этот атрибут при использовании `Declare` инструкции.</span><span class="sxs-lookup"><span data-stu-id="61ebf-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="61ebf-106">Для определений сложных методов <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, включающих <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>поля <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>,,, <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> или, этот атрибут применяется непосредственно к определениям методов Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="61ebf-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="61ebf-107">**Примечание** . JScript не поддерживает этот атрибут.</span><span class="sxs-lookup"><span data-stu-id="61ebf-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="61ebf-108">Для доступа к C# неуправляемым методам API из программ JScript можно использовать или Visual Basic классы-оболочки.</span><span class="sxs-lookup"><span data-stu-id="61ebf-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="61ebf-109">Дополнительные сведения об использовании службы вызова неуправляемого кода для доступа к функциям в неуправляемых библиотеках DLL см. в разделе [Использование неуправляемых функций DLL](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span><span class="sxs-lookup"><span data-stu-id="61ebf-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61ebf-110"><xref:System.Runtime.InteropServices.DllImportAttribute> Не поддерживает упаковку универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-111">В следующем примере кода показано, как использовать <xref:System.Runtime.InteropServices.DllImportAttribute> атрибут для импорта функции Win32. `MessageBox`</span><span class="sxs-lookup"><span data-stu-id="61ebf-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="61ebf-112">Затем в примере кода вызывается импортированный метод.</span><span class="sxs-lookup"><span data-stu-id="61ebf-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName"><span data-ttu-id="61ebf-113">Имя динамической библиотеки (DLL), содержащей неуправляемый метод.</span><span class="sxs-lookup"><span data-stu-id="61ebf-113">The name of the DLL that contains the unmanaged method.</span></span> <span data-ttu-id="61ebf-114">Если DLL включена в сборку, это имя может включать отображаемое имя сборки.</span><span class="sxs-lookup"><span data-stu-id="61ebf-114">This can include an assembly display name, if the DLL is included in an assembly.</span></span></param>
        <summary><span data-ttu-id="61ebf-115">Инициализирует новый экземпляр класса <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> с именем динамической библиотеки (DLL), содержащей импортируемый метод.</span><span class="sxs-lookup"><span data-stu-id="61ebf-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-116">Если в сборку включен неуправляемый DLL-файл, например с помощью компоновщика или `/linkresource` параметра компилятора, можно указать отображаемое имя сборки как `dllName`часть.</span><span class="sxs-lookup"><span data-stu-id="61ebf-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="61ebf-117">Например, если неуправляемая библиотека DLL `unmanaged.dll` включена в управляемую сборку с именем `MyAssembly`, атрибут можно указать, как показано в следующем коде.</span><span class="sxs-lookup"><span data-stu-id="61ebf-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-118">В следующем примере кода показано, как использовать <xref:System.Runtime.InteropServices.DllImportAttribute> атрибут для импорта функции Win32. `MessageBox`</span><span class="sxs-lookup"><span data-stu-id="61ebf-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="61ebf-119">Затем в примере кода вызывается импортированный метод.</span><span class="sxs-lookup"><span data-stu-id="61ebf-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-120">Включает или отключает поведение наилучшего сопоставления при преобразовании знаков Юникода в знаки ANSI.</span><span class="sxs-lookup"><span data-stu-id="61ebf-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-121">Значение `true`, если сопоставление наилучшего соответствия включено; в противном случае сопоставление наилучшего соответствия отключено.</span><span class="sxs-lookup"><span data-stu-id="61ebf-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="61ebf-122">По умолчанию `true` это поле.<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping></span><span class="sxs-lookup"><span data-stu-id="61ebf-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="61ebf-123">Параметры этого поля переопределяют параметры любого уровня для <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> атрибута.</span><span class="sxs-lookup"><span data-stu-id="61ebf-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="61ebf-124">Среда CLR преобразует в символы ANSI все управляемые символы Юникода, передаваемые в неуправляемый метод, выполняемый в Windows 98 или Windows Me.</span><span class="sxs-lookup"><span data-stu-id="61ebf-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="61ebf-125">Наилучшее сопоставление позволяет маршалеру взаимодействия предоставлять символ закрытия, если точное совпадение не существует.</span><span class="sxs-lookup"><span data-stu-id="61ebf-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="61ebf-126">Например, модуль упаковки преобразует символ авторского права Юникода в "c" для неуправляемых методов, которые принимают символы ANSI.</span><span class="sxs-lookup"><span data-stu-id="61ebf-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="61ebf-127">Некоторые символы не соответствуют наилучшему представлению. Эти символы называются несопоставимыми.</span><span class="sxs-lookup"><span data-stu-id="61ebf-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="61ebf-128">Несопоставимые символы обычно преобразуются в значения по умолчанию "?" Символ ANSI.</span><span class="sxs-lookup"><span data-stu-id="61ebf-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="61ebf-129">Некоторые символы Юникода преобразуются в небезопасные символы, например символ обратной косой черты\\"", который может случайно изменить путь.</span><span class="sxs-lookup"><span data-stu-id="61ebf-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="61ebf-130">Установив <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> для`true`поля значение, можно передать вызывающему объекту сигнал о присутствии несопоставимого символа, вызывая исключение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="61ebf-131">Нельзя изменить значения по умолчанию, предоставляемые <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> полями <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> и при передаче управляемого массива, элементы которого являются символами ANSI или лпстрс, в неуправляемый безэлементный массив.</span><span class="sxs-lookup"><span data-stu-id="61ebf-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="61ebf-132">Наилучшее сопоставление всегда включено, и исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="61ebf-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="61ebf-133">Имейте в виду, что это сочетание может нарушить вашу модель безопасности.</span><span class="sxs-lookup"><span data-stu-id="61ebf-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-134">В некоторых случаях Visual Basic разработчики используют <xref:System.Runtime.InteropServices.DllImportAttribute>вместо `Declare` инструкции, чтобы определить функцию DLL в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="61ebf-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="61ebf-135"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> Установка поля является одним из этих вариантов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="61ebf-136">В следующем примере показано, как применить стандартную защиту сопоставления символов к определениям метода вызова неуправляемого кода, указав кодировку ANSI, отключив наилучшее поведение сопоставления и вызывая исключение для несопоставленных символов Юникода.</span><span class="sxs-lookup"><span data-stu-id="61ebf-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="61ebf-137">Маршалинг взаимодействия</span><span class="sxs-lookup"><span data-stu-id="61ebf-137">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-138">Показывает соглашение о вызове для точки входа.</span><span class="sxs-lookup"><span data-stu-id="61ebf-138">Indicates the calling convention of an entry point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-139">Это поле устанавливается равным одному из <xref:System.Runtime.InteropServices.CallingConvention> членов перечисления.</span><span class="sxs-lookup"><span data-stu-id="61ebf-139">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="61ebf-140">По умолчанию для <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> поля используется значение <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, которое <xref:System.Runtime.InteropServices.CallingConvention.StdCall> в свою очередь по умолчанию имеет соглашение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-140">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-141">В некоторых случаях Visual Basic разработчики используют <xref:System.Runtime.InteropServices.DllImportAttribute>вместо `Declare` инструкции, чтобы определить функцию DLL в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="61ebf-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="61ebf-142"><xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> Установка поля является одним из этих вариантов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-143">Показывает способ маршалинга параметров строки для метода, а также управляет искажением имени.</span><span class="sxs-lookup"><span data-stu-id="61ebf-143">Indicates how to marshal string parameters to the method and controls name mangling.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-144">Используйте это поле с членом <xref:System.Runtime.InteropServices.CharSet> перечисления, чтобы указать поведение маршалинга строковых параметров и указать, какое имя точки входа следует вызывать (точное имя с заданным именем или имя, которое заканчивается на "a" или "W").</span><span class="sxs-lookup"><span data-stu-id="61ebf-144">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="61ebf-145">Элемент перечисления по умолчанию C# для и Visual Basic `CharSet.Ansi` имеет значение, а элемент перечисления C++ по `CharSet.None`умолчанию для `CharSet.Ansi`имеет значение, что эквивалентно значению.</span><span class="sxs-lookup"><span data-stu-id="61ebf-145">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="61ebf-146">В Visual Basic для `CharSet` указания поля используется `Declare` инструкция.</span><span class="sxs-lookup"><span data-stu-id="61ebf-146">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="61ebf-147">Поле влияет на поведение `CharSet` поля при определении того, какое имя точки входа следует вызывать. <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling></span><span class="sxs-lookup"><span data-stu-id="61ebf-147">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="61ebf-148">Подробное описание и примеры маршалинга строк и поведения сопоставления имен, связанных с `CharSet` полем, см. в разделе [Указание](~/docs/framework/interop/specifying-a-character-set.md)кодировки.</span><span class="sxs-lookup"><span data-stu-id="61ebf-148">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-149">В следующем примере кода показано, как использовать <xref:System.Runtime.InteropServices.DllImportAttribute> атрибут для импорта функции Win32. `MessageBox`</span><span class="sxs-lookup"><span data-stu-id="61ebf-149">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="61ebf-150">Затем в примере кода вызывается импортированный метод.</span><span class="sxs-lookup"><span data-stu-id="61ebf-150">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-151">Показывает имя или порядковый номер точки входа вызываемой динамической библиотеки (DLL).</span><span class="sxs-lookup"><span data-stu-id="61ebf-151">Indicates the name or ordinal of the DLL entry point to be called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-152">Имя точки входа можно указать, указав строку, указывающую имя библиотеки DLL, содержащей точку входа, или можно определить точку входа по порядковому номеру.</span><span class="sxs-lookup"><span data-stu-id="61ebf-152">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="61ebf-153">Порядковые номера начинаются с символа #, например #1.</span><span class="sxs-lookup"><span data-stu-id="61ebf-153">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="61ebf-154">Если опустить это поле, среда CLR будет использовать имя метода the.NET, помеченного <xref:System.Runtime.InteropServices.DllImportAttribute>атрибутом.</span><span class="sxs-lookup"><span data-stu-id="61ebf-154">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="61ebf-155">Дополнительные сведения см. [в разделе Определение функций в библиотеках DLL](~/docs/framework/interop/identifying-functions-in-dlls.md).</span><span class="sxs-lookup"><span data-stu-id="61ebf-155">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="61ebf-156">Примеры, демонстрирующие использование <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> поля, см. в разделе [Указание точки входа](~/docs/framework/interop/specifying-an-entry-point.md).</span><span class="sxs-lookup"><span data-stu-id="61ebf-156">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-157">В следующем примере кода показано, как использовать <xref:System.Runtime.InteropServices.DllImportAttribute> атрибут для импорта функции Win32. `MessageBox`</span><span class="sxs-lookup"><span data-stu-id="61ebf-157">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="61ebf-158">В примере кода <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> свойство используется для задания импортируемой функции, после чего имя изменяется на `MyNewMessageBoxMethod`.</span><span class="sxs-lookup"><span data-stu-id="61ebf-158">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-159">Контролирует запуск поиска имен точек входа помимо заданной точки в неуправляемой динамической библиотеке (DLL), выполняемого средой CLR, полем <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />.</span><span class="sxs-lookup"><span data-stu-id="61ebf-159">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-160">Если `false`значение равно, то имя точки входа, к которой добавляется буква A, <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> вызывается, когда `CharSet.Ansi`поле установлено в, а имя точки входа, добавленное с буквой W, вызывается <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> , если для `CharSet.Unicode`поля задано значение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-160">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="61ebf-161">Как правило, управляемые компиляторы устанавливают это поле.</span><span class="sxs-lookup"><span data-stu-id="61ebf-161">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="61ebf-162">В следующей таблице показана связь между <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> полями и <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> на основе значений по умолчанию, установленных языком программирования.</span><span class="sxs-lookup"><span data-stu-id="61ebf-162">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="61ebf-163">Вы можете переопределить значение по умолчанию, но это можно сделать с осторожностью.</span><span class="sxs-lookup"><span data-stu-id="61ebf-163">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="61ebf-164">Язык</span><span class="sxs-lookup"><span data-stu-id="61ebf-164">Language</span></span>|<span data-ttu-id="61ebf-165">ANSI</span><span class="sxs-lookup"><span data-stu-id="61ebf-165">ANSI</span></span>|<span data-ttu-id="61ebf-166">Юникод</span><span class="sxs-lookup"><span data-stu-id="61ebf-166">Unicode</span></span>|<span data-ttu-id="61ebf-167">Авто</span><span class="sxs-lookup"><span data-stu-id="61ebf-167">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="61ebf-168">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="61ebf-168">Visual Basic</span></span>|<span data-ttu-id="61ebf-169">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="61ebf-169">ExactSpelling:=True</span></span>|<span data-ttu-id="61ebf-170">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="61ebf-170">ExactSpelling:=True</span></span>|<span data-ttu-id="61ebf-171">ExactSpelling: = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-171">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="61ebf-172">C#</span><span class="sxs-lookup"><span data-stu-id="61ebf-172">C#</span></span>|<span data-ttu-id="61ebf-173">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-173">ExactSpelling=false</span></span>|<span data-ttu-id="61ebf-174">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-174">ExactSpelling=false</span></span>|<span data-ttu-id="61ebf-175">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-175">ExactSpelling=false</span></span>|  
|<span data-ttu-id="61ebf-176">C++</span><span class="sxs-lookup"><span data-stu-id="61ebf-176">C++</span></span>|<span data-ttu-id="61ebf-177">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-177">ExactSpelling=false</span></span>|<span data-ttu-id="61ebf-178">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-178">ExactSpelling=false</span></span>|<span data-ttu-id="61ebf-179">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="61ebf-179">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-180">В некоторых случаях Visual Basic разработчики используют <xref:System.Runtime.InteropServices.DllImportAttribute>вместо `Declare` инструкции, чтобы определить функцию DLL в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="61ebf-180">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="61ebf-181"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> Установка поля является одним из этих вариантов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-181">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-182">Показывают, выполняется ли для методов с возвращаемыми значениями <see langword="HRESULT" /> или <see langword="retval" /> непосредственное преобразование, либо возвращаемые значения <see langword="HRESULT" /> или <see langword="retval" /> автоматически преобразуются в исключения.</span><span class="sxs-lookup"><span data-stu-id="61ebf-182">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-183">`false` `retval` `HRESULT` `HRESULT` `retval` Задайте для <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> `true` поля значение, чтобы непосредственно преобразовать неуправляемые подписи в значения или, задайте для параметра значение, чтобы автоматически преобразовывать значения или в исключения.</span><span class="sxs-lookup"><span data-stu-id="61ebf-183">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="61ebf-184">По умолчанию <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> поле имеет `true`значение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-184">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="61ebf-185">При `true` `HRESULT` значении результирующая сигнатура метода возвращает целочисленное значение, содержащее значение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-185">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="61ebf-186">В этом случае необходимо вручную проверить возвращаемое значение и ответить соответствующим образом в приложении.</span><span class="sxs-lookup"><span data-stu-id="61ebf-186">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="61ebf-187">Если задать <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> для `false`поля значение, то в результирующей сигнатуре метода будет возвращен тип void, а не целочисленный тип возвращаемого значения (`HRESULT`).</span><span class="sxs-lookup"><span data-stu-id="61ebf-187">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="61ebf-188">Когда неуправляемый метод создает `HRESULT`, среда выполнения автоматически игнорирует возвращаемое `S_OK` значение (или 0) и не создает исключение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-188">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="61ebf-189">Для `HRESULT`s `HRESULT`, кроме, среда выполнения автоматически создает исключение, соответствующее. `S_OK`</span><span class="sxs-lookup"><span data-stu-id="61ebf-189">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="61ebf-190">Обратите внимание <xref:System.Runtime.InteropServices.DllImportAttribute> , что атрибут выполняет это преобразование только в методы, `HRESULT`возвращающие.</span><span class="sxs-lookup"><span data-stu-id="61ebf-190">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="61ebf-191">Вы можете изменить поведение отчетов об ошибках по умолчанию `HRESULT`с s на исключения в случаях, когда исключения лучше соответствуют структуре отчетов об ошибках приложения.</span><span class="sxs-lookup"><span data-stu-id="61ebf-191">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="61ebf-192">Это поле аналогично <xref:System.Runtime.InteropServices.PreserveSigAttribute>значению, однако в отличие <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> от поля значение атрибута по умолчанию — `false`.</span><span class="sxs-lookup"><span data-stu-id="61ebf-192">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="61ebf-193">В некоторых случаях Visual Basic разработчики используют <xref:System.Runtime.InteropServices.DllImportAttribute>вместо `Declare` инструкции, чтобы определить функцию DLL в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="61ebf-193">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="61ebf-194"><xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> Установка поля является одним из этих вариантов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-194">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-195">В следующем примере кода метод используется <xref:System.Runtime.InteropServices.DllImportAttribute> для импорта `SHAutoComplete` неуправляемой функции один раз с <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> полем, для `true` которого задано значение, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> и снова с `false`полем, для которого задано значение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-195">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="61ebf-196">Этот пример кода приводит к `SHAutoComplete` тому, что функция создает ошибки с исключением один раз `HRESULT` и далее.</span><span class="sxs-lookup"><span data-stu-id="61ebf-196">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-197">Показывает, вызывает ли вызываемый объект функцию <see langword="SetLastError" /> интерфейса Windows API перед возвращением из метода, использующего атрибуты.</span><span class="sxs-lookup"><span data-stu-id="61ebf-197">Indicates whether the callee calls the <see langword="SetLastError" /> Windows API function before returning from the attributed method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-198">`true`значение, `SetLastError` `false`чтобы указать, что вызываемый объект будет вызывать; в противном случае —.</span><span class="sxs-lookup"><span data-stu-id="61ebf-198">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="61ebf-199">Значение по умолчанию — `false`.</span><span class="sxs-lookup"><span data-stu-id="61ebf-199">The default is `false`.</span></span>  
  
 <span data-ttu-id="61ebf-200">Модуль упаковки среды выполнения вызывает `GetLastError` и кэширует возвращаемое значение, чтобы предотвратить его перезапись другими вызовами API.</span><span class="sxs-lookup"><span data-stu-id="61ebf-200">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="61ebf-201">Код ошибки можно получить, вызвав <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span><span class="sxs-lookup"><span data-stu-id="61ebf-201">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-202">В некоторых случаях Visual Basic разработчики используют <xref:System.Runtime.InteropServices.DllImportAttribute>вместо `Declare` инструкции, чтобы определить функцию DLL в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="61ebf-202">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="61ebf-203"><xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> Установка поля является одним из этих вариантов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-203">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-204">Включает и отключает возникновение исключений для неотображаемых символов Юникода, преобразующихся в знаки вопроса ("?") ANSI.</span><span class="sxs-lookup"><span data-stu-id="61ebf-204">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-205">`true`Указывает, что исключение создается каждый раз, когда модуль маршалинга взаимодействия преобразует несопоставимый символ; ,чтобыуказать,чтополеотключено.`false` <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar></span><span class="sxs-lookup"><span data-stu-id="61ebf-205">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="61ebf-206">По умолчанию `false` это поле имеет значение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-206">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="61ebf-207">Среда CLR преобразует в символы ANSI все управляемые символы Юникода, передаваемые в неуправляемый метод, выполняемый в Windows 98 или Windows Me.</span><span class="sxs-lookup"><span data-stu-id="61ebf-207">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="61ebf-208">Наилучшее сопоставление позволяет маршалеру взаимодействия предоставлять символ закрытия, если точное совпадение не существует.</span><span class="sxs-lookup"><span data-stu-id="61ebf-208">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="61ebf-209">Например, модуль упаковки преобразует символ авторского права Юникода в "c" для неуправляемых методов, которые принимают символы ANSI.</span><span class="sxs-lookup"><span data-stu-id="61ebf-209">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="61ebf-210">Некоторые символы не соответствуют наилучшему представлению. Эти символы называются несопоставимыми.</span><span class="sxs-lookup"><span data-stu-id="61ebf-210">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="61ebf-211">Несопоставимые символы обычно преобразуются в значения по умолчанию "?" Символ ANSI.</span><span class="sxs-lookup"><span data-stu-id="61ebf-211">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="61ebf-212">Некоторые символы Юникода преобразуются в небезопасные символы, например символ обратной косой черты\\"", который может случайно изменить путь.</span><span class="sxs-lookup"><span data-stu-id="61ebf-212">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="61ebf-213">Установив <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> для`true`поля значение, можно передать вызывающему объекту сигнал о присутствии несопоставимого символа, вызывая исключение.</span><span class="sxs-lookup"><span data-stu-id="61ebf-213">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="61ebf-214">Нельзя изменить значения по умолчанию, предоставляемые <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> полями <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> и при передаче управляемого массива, элементы которого являются символами ANSI или лпстрс, в неуправляемый безэлементный массив.</span><span class="sxs-lookup"><span data-stu-id="61ebf-214">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="61ebf-215">Наилучшее сопоставление всегда включено, и исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="61ebf-215">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="61ebf-216">Имейте в виду, что это сочетание может нарушить вашу модель безопасности.</span><span class="sxs-lookup"><span data-stu-id="61ebf-216">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61ebf-217">В некоторых случаях Visual Basic разработчики используют <xref:System.Runtime.InteropServices.DllImportAttribute> для определения функции DLL в управляемом коде вместо `Declare` использования инструкции.</span><span class="sxs-lookup"><span data-stu-id="61ebf-217">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="61ebf-218"><xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Установка поля является одним из этих вариантов.</span><span class="sxs-lookup"><span data-stu-id="61ebf-218">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="61ebf-219">В следующем примере показано, как применить стандартную защиту сопоставления символов к определениям метода вызова неуправляемого кода, указав кодировку ANSI, отключив наилучшее поведение сопоставления и вызывая исключение для несопоставленных символов Юникода.</span><span class="sxs-lookup"><span data-stu-id="61ebf-219">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="61ebf-220">Маршалинг взаимодействия</span><span class="sxs-lookup"><span data-stu-id="61ebf-220">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61ebf-221">Возвращает имя динамической библиотеки (DLL), содержащей точку входа.</span><span class="sxs-lookup"><span data-stu-id="61ebf-221">Gets the name of the DLL file that contains the entry point.</span></span></summary>
        <value><span data-ttu-id="61ebf-222">Имя файла динамической библиотеки (DLL), содержащей точку входа.</span><span class="sxs-lookup"><span data-stu-id="61ebf-222">The name of the DLL file that contains the entry point.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61ebf-223">Можно указать полный или относительный путь.</span><span class="sxs-lookup"><span data-stu-id="61ebf-223">You can provide a full or relative path.</span></span> <span data-ttu-id="61ebf-224">Если не указать путь, Библиотека DLL должна находиться в текущем пути во время выполнения, если только библиотека DLL не загружена другими способами.</span><span class="sxs-lookup"><span data-stu-id="61ebf-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="61ebf-225">Однако следует иметь в виду, что использование полного пути может вызвать неточность при перемещении библиотеки DLL.</span><span class="sxs-lookup"><span data-stu-id="61ebf-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
