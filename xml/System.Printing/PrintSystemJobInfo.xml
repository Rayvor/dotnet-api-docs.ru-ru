<Type Name="PrintSystemJobInfo" FullName="System.Printing.PrintSystemJobInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71fe161b782f8e7cb3d0219fe2ba265428cd1367" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70613186" /></Metadata><TypeSignature Language="C#" Value="public class PrintSystemJobInfo : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintSystemJobInfo extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintSystemJobInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintSystemJobInfo&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintSystemJobInfo : System::Printing::PrintSystemObject" />
  <TypeSignature Language="F#" Value="type PrintSystemJobInfo = class&#xA;    inherit PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Подробно определяет задание печати.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс не имеет открытого конструктора. Чтобы получить ссылку на <xref:System.Printing.PrintSystemJobInfo> объект, используйте статический <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> метод или один из следующих <xref:System.Printing.PrintQueue> методов экземпляра: <xref:System.Printing.PrintQueue.GetJob%2A>, <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A>или <xref:System.Printing.PrintQueue.AddJob%2A>.  
  
 Многие свойства задания печати, например, о завершении задания, должны передаваться из принтера в <xref:System.Printing.PrintSystemJobInfo> объект, прежде чем приложение считывает соответствующее свойство (<xref:System.Printing.PrintSystemJobInfo.IsCompleted%2A>). <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> Метод предоставляет эту функцию.  
  
 Аналогично, когда приложение изменяет значение <xref:System.Printing.PrintSystemJobInfo.JobName%2A> свойства, изменение должно быть записано в служебную программу очереди печати на компьютере. <xref:System.Printing.PrintSystemJobInfo.Commit%2A> Метод предоставляет эту функцию.  
  
 Если класс является производным от <xref:System.Printing.PrintSystemJobInfo> класса, имеющего дополнительные доступные для записи свойства, необходимо реализовать переопределение <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> методов и <xref:System.Printing.PrintSystemJobInfo.Commit%2A> .  
  
> [!CAUTION]
>  Классы в <xref:System.Printing> пространстве имен не поддерживаются для использования в службе Windows или ASP.NET приложении или службе. Попытка использования этих классов в одном из этих типов приложений может привести к непредвиденным проблемам, например к снижению производительности службы и исключений времени выполнения.  
  
 Если требуется выполнить печать из Windows Forms приложения, см. раздел <xref:System.Drawing.Printing> пространство имен.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; unit" Usage="printSystemJobInfo.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отменяет задание печати.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать этот метод для отмены задания печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberSignature Language="F#" Value="override this.Commit : unit -&gt; unit" Usage="printSystemJobInfo.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает любые изменения свойств объекта <see cref="T:System.Printing.PrintSystemJobInfo" /> в действующее задание печати, представляемое объектом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> Только свойство доступно для записи. Если класс является производным от <xref:System.Printing.PrintSystemJobInfo> класса с дополнительными свойствами для записи, необходимо <xref:System.Printing.PrintSystemJobInfo.Commit%2A> переопределить методы и <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> с помощью собственных реализаций.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Printing.PrintSystemJobInfo Get (System.Printing.PrintQueue printQueue, int jobIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Printing.PrintSystemJobInfo Get(class System.Printing.PrintQueue printQueue, int32 jobIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Printing::PrintSystemJobInfo ^ Get(System::Printing::PrintQueue ^ printQueue, int jobIdentifier);" />
      <MemberSignature Language="F#" Value="static member Get : System.Printing.PrintQueue * int -&gt; System.Printing.PrintSystemJobInfo" Usage="System.Printing.PrintSystemJobInfo.Get (printQueue, jobIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
        <Parameter Name="jobIdentifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printQueue">Очередь печати, в которой размещается задание.</param>
        <param name="jobIdentifier">Идентификатор задания печати.</param>
        <summary>Возвращает объект <see cref="T:System.Printing.PrintSystemJobInfo" /> для указанного задания в заданной очереди <see cref="T:System.Printing.PrintQueue" />.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, соответствующий параметру <paramref name="jobIdentifier" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также использовать <xref:System.Printing.PrintQueue.GetJob%2A?displayProperty=nameWithType> метод для той же цели.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HostingPrintQueue">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueue HostingPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintQueue HostingPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingPrintQueue As PrintQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueue ^ HostingPrintQueue { System::Printing::PrintQueue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostingPrintQueue : System.Printing.PrintQueue" Usage="System.Printing.PrintSystemJobInfo.HostingPrintQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает очередь печати, в которой размещается задание печати.</summary>
        <value>Значение <see cref="T:System.Printing.PrintQueue" />, представляющее очередь печати, в которой размещается задание.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public System.Printing.PrintServer HostingPrintServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintServer ^ HostingPrintServer { System::Printing::PrintServer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostingPrintServer : System.Printing.PrintServer" Usage="System.Printing.PrintSystemJobInfo.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает сервер печати, на котором размещается очередь печати с заданием.</summary>
        <value>Значение <see cref="T:System.Printing.PrintServer" />, представляющее сервер печати (обычно компьютер), на котором размещается очередь <see cref="T:System.Printing.PrintQueue" /> с заданием печати.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.InternalDispose : bool -&gt; unit" Usage="printSystemJobInfo.InternalDispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Printing.PrintSystemJobInfo" />, а также при необходимости освобождает управляемые ресурсы.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBlocked">
      <MemberSignature Language="C#" Value="public bool IsBlocked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBlocked" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsBlocked" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBlocked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBlocked { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBlocked : bool" Usage="System.Printing.PrintSystemJobInfo.IsBlocked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, является ли блокировка задания причиной того, что оно не печатается.</summary>
        <value>Значение <see langword="true" />, если задание печати заблокировано, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Printing.PrintSystemJobInfo.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, завершено ли задание печати.</summary>
        <value>Значение <see langword="true" />, если задание печати завершено, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleted">
      <MemberSignature Language="C#" Value="public bool IsDeleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDeleted : bool" Usage="System.Printing.PrintSystemJobInfo.IsDeleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, удалено ли из очереди задание печати, представленное объектом <see cref="T:System.Printing.PrintSystemJobInfo" />.</summary>
        <value>Значение <see langword="true" />, если задание печати удалено, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Он может показаться парадоксикал, что объект может сообщить свое состояние как удаленный, но помните, что <xref:System.Printing.PrintSystemJobInfo> объект *представляет* только фактическое задание печати. Удаление последнего из очереди печати не приводит к <xref:System.Printing.PrintSystemJobInfo> автоматическому удалению объекта в приложении. Аналогичным образом объект не удаляется из любого <xref:System.Printing.PrintJobInfoCollection> , который был создан до удаления задания печати, которое оно представляет. Например, если <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> метод выполняется до удаления задания печати, возвращаемая коллекция будет <xref:System.Printing.PrintSystemJobInfo> включать объект, представляющий задание печати. Этот объект не удаляется из коллекции при удалении задания печати. Но если <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> затем снова запустить, возвращаемая коллекция не будет иметь членов, представляющих удаленные задания печати.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleting">
      <MemberSignature Language="C#" Value="public bool IsDeleting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDeleting : bool" Usage="System.Printing.PrintSystemJobInfo.IsDeleting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, удаляется ли задание из очереди печати.</summary>
        <value>Значение <see langword="true" />, если задание печати удаляется, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInError : bool" Usage="System.Printing.PrintSystemJobInfo.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, связана ли ошибка с заданием печати.</summary>
        <value>Значение <see langword="true" />, если ошибка связана с заданием печати, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOffline : bool" Usage="System.Printing.PrintSystemJobInfo.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, отключен ли принтер.</summary>
        <value>Значение <see langword="true" />, если принтер отключен, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение распространяется на все <xref:System.Printing.PrintSystemJobInfo> объекты <xref:System.Printing.PrintQueue.IsOffline%2A> из свойства размещения <xref:System.Printing.PrintQueue>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperOut">
      <MemberSignature Language="C#" Value="public bool IsPaperOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperOut" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaperOut" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperOut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperOut { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaperOut : bool" Usage="System.Printing.PrintSystemJobInfo.IsPaperOut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, закончилась ли в принтере бумага необходимого для задания размера и типа.</summary>
        <value>Значение <see langword="true" />, если в принтере закончилась требуемая бумага, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaused : bool" Usage="System.Printing.PrintSystemJobInfo.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, приостановлено ли задание печати.</summary>
        <value>Значение <see langword="true" />, если задание печати приостановлено, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Также можно приостановить всю очередь печати. Например, значение <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A?displayProperty=nameWithType> может быть `false` даже в том <xref:System.Printing.PrintQueue.IsPaused%2A?displayProperty=nameWithType> случае, если свойство имеет `true`значение.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="IsPrinted">
      <MemberSignature Language="C#" Value="public bool IsPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrinted : bool" Usage="System.Printing.PrintSystemJobInfo.IsPrinted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, напечатано ли задание печати.</summary>
        <value>Значение <see langword="true" />, если задание печати напечатано, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrinting : bool" Usage="System.Printing.PrintSystemJobInfo.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, печатается ли задание печати.</summary>
        <value>Значение <see langword="true" />, если идет печать, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRestarted">
      <MemberSignature Language="C#" Value="public bool IsRestarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRestarted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRestarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRestarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRestarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRestarted : bool" Usage="System.Printing.PrintSystemJobInfo.IsRestarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, было ли перезапущено задание печати.</summary>
        <value>Значение <see langword="true" />, если идет печать, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При перезапуске задания оно выводится целиком. Сравните перезапуск с помощью <xref:System.Printing.PrintSystemJobInfo.Resume%2A> метода, который возобновляет задание в момент его приостановки.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="IsRetained">
      <MemberSignature Language="C#" Value="public bool IsRetained { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRetained" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRetained" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRetained As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRetained { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRetained : bool" Usage="System.Printing.PrintSystemJobInfo.IsRetained" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, было ли задание печати сохранено в очереди после того, как оно было напечатано.</summary>
        <value>Значение <see langword="true" />, если задание печати сохранено, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Очередь печати оставляет напечатанные задания, если <xref:System.Printing.PrintQueue.KeepPrintedJobs%2A> свойство <xref:System.Printing.PrintQueue> объекта имеет значение `true` и если свойства очереди зафиксированы с <xref:System.Printing.PrintQueue.Commit%2A> помощью метода <xref:System.Printing.PrintQueue>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpooling">
      <MemberSignature Language="C#" Value="public bool IsSpooling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpooling" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsSpooling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpooling As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpooling { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpooling : bool" Usage="System.Printing.PrintSystemJobInfo.IsSpooling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, выполняется ли буферизация задания печати.</summary>
        <value>Значение <see langword="true" />, если выполняется буферизация задания печати, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserInterventionRequired">
      <MemberSignature Language="C#" Value="public bool IsUserInterventionRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserInterventionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsUserInterventionRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUserInterventionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserInterventionRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUserInterventionRequired : bool" Usage="System.Printing.PrintSystemJobInfo.IsUserInterventionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, необходимо ли принтеру вмешательство пользователя.</summary>
        <value>Значение <see langword="true" />, если необходимо вмешательство пользователя, в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение распространяется на все <xref:System.Printing.PrintSystemJobInfo> объекты <xref:System.Printing.PrintQueue.NeedUserIntervention%2A> из свойства размещения <xref:System.Printing.PrintQueue>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobIdentifier">
      <MemberSignature Language="C#" Value="public int JobIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobIdentifier As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int JobIdentifier { int get(); };" />
      <MemberSignature Language="F#" Value="member this.JobIdentifier : int" Usage="System.Printing.PrintSystemJobInfo.JobIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификационный номер задания печати.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, идентифицирующее задание печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используемая система нумерации определяется операционной системой сервера печати и тем, является ли сервер печати компьютером или устройством сервера печати. Например, операционная система Microsoft Windows XP определяет нумерацию таким образом: Если сервер печати включен, если все очереди печати пусты, то первому заданию печати, отправленному на сервер любым пользователем и в любую очередь, присваивается идентификатор 2. Каждому последующему заданию на сервере присваивается число, которое больше, чем предыдущее задание печати на этом сервере.  
  
 Очередь печати для задания печати не влияет на его число: Если задания отправляются в очередь a, Куеуеб и очередь a в этом порядке, то очередь a имеет задания 2 и 4, а Куеуеб имеет задание 3.  
  
 После того как заданию назначено число, оно никогда не изменяется, даже если другие задания завершают печать или отменяются или если сервер перезапускается. Если при перезапуске сервера в одной или нескольких очередях уже есть задания, то первому новому заданию назначается число, которое больше, чем максимальное число заданий, находящихся в очереди при запуске сервера. Однако до перезапуска сервер печати не может повторно использовать число. Даже если задание с наибольшим числом отменяется до его вывода на печать, следующее задание получает число, которое находится на единицу выше.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobName">
      <MemberSignature Language="C#" Value="public string JobName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string JobName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobName" />
      <MemberSignature Language="VB.NET" Value="Public Property JobName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ JobName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.JobName : string with get, set" Usage="System.Printing.PrintSystemJobInfo.JobName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя задания печати.</summary>
        <value>Строка <see cref="T:System.String" />, которая содержит имя задания печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobSize">
      <MemberSignature Language="C#" Value="public int JobSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobSize" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int JobSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.JobSize : int" Usage="System.Printing.PrintSystemJobInfo.JobSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает размер задания печати в байтах.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее размер задания печати в байтах.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobStatus JobStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobStatus JobStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobStatus As PrintJobStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobStatus JobStatus { System::Printing::PrintJobStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.JobStatus : System.Printing.PrintJobStatus" Usage="System.Printing.PrintSystemJobInfo.JobStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущее состояние задания печати.</summary>
        <value>Значение <see cref="T:System.Printing.PrintJobStatus" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод позволяет избежать индивидуальной проверки каждого свойства состояния, например <xref:System.Printing.PrintSystemJobInfo.IsPrinting%2A> и. <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A>  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobattributes)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobattributes)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream JobStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream JobStream" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ JobStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.JobStream : System.IO.Stream" Usage="System.Printing.PrintSystemJobInfo.JobStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ссылку на поток задания печати <see cref="T:System.IO.Stream" />.</summary>
        <value>Поток <see cref="T:System.IO.Stream" />, который содержит задание печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Начиная с .NET Framework 4,5 в Windows 8 и более поздних версиях операционной системы, данные, записанные в этот поток, должны быть в формате XPS в виде потока пакета.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfPages">
      <MemberSignature Language="C#" Value="public int NumberOfPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPages" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfPages As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfPages { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfPages : int" Usage="System.Printing.PrintSystemJobInfo.NumberOfPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество страниц в задании печати.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее количество страниц в задании печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Страница — это одна из сторон листа бумаги или другого печатного носителя.  
  
 В следующей таблице показано, как значение этого свойства и число используемых листов зависит от того, вызывает ли задание печати двустороннюю печать (двустороннее), вызывает ли он несколько страниц на листе или вызывает ли он оба.  
  
### <a name="how-duplexing-and-multipage-printing-affect-printing"></a>Влияние двусторонней и многостраничной печати на печать  
  
|Двусторонняя печать|Страниц на лист|Значение Нумберофпажес|Число физических листов бумаги|  
|---------------|---------------------|----------------------------|----------------------------------------|  
|Нет|1|Идентично числу страниц в документе.|Идентично числу страниц в документе.|  
|Да|1|Идентично числу страниц в документе.|Страницы документа 2 (с округлением вверх).|  
|Нет|Несколько|Страниц документа на листе (с округлением вверх).|Страниц документа на листе (с округлением вверх).|  
|Да|Несколько|Страниц документа на листе (с округлением вверх).|[Страниц документа на листе] 2 (округлено вверх).|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintTicket.Duplexing" />
        <altmember cref="P:System.Printing.PrintTicket.PagesPerSheet" />
      </Docs>
    </Member>
    <Member MemberName="NumberOfPagesPrinted">
      <MemberSignature Language="C#" Value="public int NumberOfPagesPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPagesPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPagesPrinted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfPagesPrinted As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfPagesPrinted { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfPagesPrinted : int" Usage="System.Printing.PrintSystemJobInfo.NumberOfPagesPrinted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество уже напечатанных страниц.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее количество уже напечатанных страниц.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="printSystemJobInfo.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Приостанавливает печать задания до тех пор, пока не будет вызван метод <see cref="M:System.Printing.PrintSystemJobInfo.Resume" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если другое задание находится в очереди, оно начинает печать при приостановке текущего задания.  
  
 Размещение <xref:System.Printing.PrintQueue> также имеет <xref:System.Printing.PrintQueue.Pause%2A> методы и <xref:System.Printing.PrintQueue.Resume%2A> . Если очередь печати приостановлена, возобновление отдельного задания не приводит к возобновлению печати этого задания.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PositionInPrintQueue">
      <MemberSignature Language="C#" Value="public int PositionInPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionInPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.PositionInPrintQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PositionInPrintQueue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PositionInPrintQueue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PositionInPrintQueue : int" Usage="System.Printing.PrintSystemJobInfo.PositionInPrintQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает место задания в очереди печати.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее место задания в очереди печати.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobPriority Priority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Priority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Priority As PrintJobPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobPriority Priority { System::Printing::PrintJobPriority get(); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Printing.PrintJobPriority" Usage="System.Printing.PrintSystemJobInfo.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает нечисловое выражение, которое представляет приоритет задания печати по отношению к другим заданиям печати в очереди печати.</summary>
        <value>Значение типа <see cref="T:System.Printing.PrintJobPriority" />, представляющее приоритет задания печати как <see cref="F:System.Printing.PrintJobPriority.Maximum" />, <see cref="F:System.Printing.PrintJobPriority.Minimum" />, <see cref="F:System.Printing.PrintJobPriority.Default" /> или <see cref="F:System.Printing.PrintJobPriority.None" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="printSystemJobInfo.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обновляет свойства объекта <see cref="T:System.Printing.PrintSystemJobInfo" />, чтобы их значения соответствовали значениям действующего задания печати, представленного объектом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Любые изменения, вносимые в свойства <xref:System.Printing.PrintSystemJobInfo> объекта, должны быть записаны в фактическое задание печати с <xref:System.Printing.PrintSystemJobInfo.Commit%2A> помощью метода. При <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> выполнении метода все изменения, которые не были зафиксированы, теряются.  
  
 Если класс является производным от <xref:System.Printing.PrintSystemJobInfo> класса с дополнительными свойствами, необходимо <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> переопределить метод с помощью собственной реализации.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="printSystemJobInfo.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перезапускает задание печати с самого начала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При необходимости можно использовать <xref:System.Printing.PrintSystemJobInfo.Resume%2A> метод, который перезапускает приостановленное задание печати, начиная с того момента, когда он был приостановлен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="printSystemJobInfo.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возобновляет печать приостановленного задания печати.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Размещение <xref:System.Printing.PrintQueue> также имеет <xref:System.Printing.PrintQueue.Pause%2A> методы и <xref:System.Printing.PrintQueue.Resume%2A> . Если очередь печати приостановлена, возобновление отдельного задания не возобновляет печать задания печати.  
  
   
  
## Examples  
 В следующем примере показано, как использовать этот метод для возобновления приостановленного задания печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public int StartTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StartTimeOfDay { int get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTimeOfDay : int" Usage="System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает самое раннее время дня, выраженное как количество минут после полуночи в формате UTC (время по Гринвичу [GMT]), когда принтер может начать печать.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее самое раннее возможное время запуска задания печати, выраженное как количество минут после полуночи в формате UTC. Максимальное значение равно 1439.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение распространяется на каждый <xref:System.Printing.PrintSystemJobInfo> объект <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> из свойства размещения <xref:System.Printing.PrintQueue> на момент, когда задание попадает в очередь. Если <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> изменяется, любое <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A?displayProperty=nameWithType> <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>значение, предшествующее, изменяется на значение. <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>  
  
 После добавления задания в очередь ему можно предоставить <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> новое значение [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]с помощью <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>, если оно не предшествует.  
  
 Если вы не используете часовой пояс UTC, необходимо добавить или вычесть кратные 60, чтобы получить правильное время для часового пояса. Например, если в тихоокеанском часовом поясе Северная Америка и летнее время не действует, местное время составляет 8 часов раньше времени в формате UTC. Если <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> возвращает 960, то есть 16:00 (4:00 PM) в формате UTC (из-за 960/60 = 16). Чтобы преобразовать это значение в Тихоокеанское время, необходимо вычесть 480 (= 8 * 60) минут.  
  
 Также необходимо помнить, что время переводится в ноль через 24 часа (то есть после 1439th минуты). Если <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> возвращает 120, то есть 2:00 AM в формате UTC. Чтобы преобразовать это значение в Тихоокеанское время, необходимо вычесть 480 минут, что приведет к-360. Чтобы получить положительное значение, которое имеет значение, добавьте отрицательное число в общее число минут в день, 1440, в результате чего будет получено окончательное значение 1080 (6:00 PM) по тихоокеанскому времени.  
  
 См <xref:System.TimeZone>. <xref:System.TimeSpan>методы, <xref:System.DateTime> и для методов, помогающих вносить изменения в часовой пояс.  
  
 Если принтер всегда доступен, это свойство возвращает значение 0 во всех часовых поясах.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство как часть процесса диагностики проблемного задания печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="Submitter">
      <MemberSignature Language="C#" Value="public string Submitter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Submitter" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Submitter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Submitter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Submitter { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Submitter : string" Usage="System.Printing.PrintSystemJobInfo.Submitter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя пользователя, отправившего задание печати.</summary>
        <value>Строка <see cref="T:System.String" />, указывающая пользователя, который отправил задание печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство при диагностике проблемы с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeJobSubmitted">
      <MemberSignature Language="C#" Value="public DateTime TimeJobSubmitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeJobSubmitted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeJobSubmitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeJobSubmitted As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeJobSubmitted { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeJobSubmitted : DateTime" Usage="System.Printing.PrintSystemJobInfo.TimeJobSubmitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает дату и время отправки задания печати.</summary>
        <value>Объект <see cref="T:System.DateTime" />, который содержит дату и время отправки задания печати.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSinceStartedPrinting">
      <MemberSignature Language="C#" Value="public int TimeSinceStartedPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TimeSinceStartedPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeSinceStartedPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeSinceStartedPrinting As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TimeSinceStartedPrinting { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeSinceStartedPrinting : int" Usage="System.Printing.PrintSystemJobInfo.TimeSinceStartedPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает время, прошедшее с начала печати задания, в миллисекундах.</summary>
        <value>Значение <see cref="T:System.Int32" />, которое представляет время, прошедшее с начала печати задания, в миллисекундах.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public int UntilTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int UntilTimeOfDay { int get(); };" />
      <MemberSignature Language="F#" Value="member this.UntilTimeOfDay : int" Usage="System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает самое позднее время дня, выраженное как количество минут после полуночи в формате UTC (время по Гринвичу [GMT]), когда принтер может начать печать.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее самое позднее время, когда принтер может начать печать, выраженное как количество минут после полуночи в формате UTC. Максимальное значение равно 1439.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение распространяется на каждый <xref:System.Printing.PrintSystemJobInfo> объект <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> из свойства размещения <xref:System.Printing.PrintQueue> на момент, когда задание попадает в очередь. Если <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> параметр изменен, любое <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A?displayProperty=nameWithType> <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> значение, которое позже, будет изменено на значение <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>.  
  
 После добавления задания в очередь ему может <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> быть предоставлено новое значение [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]с помощью <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>, при условии, что оно не позже.  
  
 Если вы не используете часовой пояс UTC, необходимо добавить или вычесть кратные 60, чтобы получить правильное время для часового пояса. Например, если в тихоокеанском часовом поясе Северная Америка и летнее время не действует, местное время составляет 8 часов раньше времени в формате UTC. Если <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> возвращает 960, то есть 16:00 (4:00 PM) в формате UTC (из-за 960/60 = 16). Чтобы преобразовать это значение в Тихоокеанское время, необходимо вычесть 480 (= 8 * 60) минут.  
  
 Также необходимо помнить, что время переводится в ноль через 24 часа (то есть после 1439th минуты). Если <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> возвращает 120, то есть 2:00 AM в формате UTC. Чтобы преобразовать это значение в Тихоокеанское время, необходимо вычесть 480 минут, что приведет к-360. Чтобы получить положительное значение, которое имеет значение, добавьте отрицательное число в общее число минут в день, 1440, в результате чего будет получено окончательное значение 1080 (6:00 PM) по тихоокеанскому времени.  
  
 См <xref:System.TimeZone>. <xref:System.TimeSpan>методы, <xref:System.DateTime> и для методов, помогающих вносить изменения в часовой пояс.  
  
 Если принтер всегда доступен, это свойство возвращает значение 0 во всех часовых поясах.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство как часть процесса диагностики проблемного задания печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      </Docs>
    </Member>
  </Members>
</Type>
