<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf24908c52ca8209beb8a518cbb2ee3f1d52ccb" /><Meta Name="ms.sourcegitcommit" Value="f6fc130f7b9399b2b130a137d6b0b2b73c1d17b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/18/2019" /><Meta Name="ms.locfileid" Value="74154374" /></Metadata><TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Получает сведения о символе Юникода. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Стандарт Unicode](https://go.microsoft.com/fwlink/?linkid=37123) определяет несколько категорий символов Юникода. Например, символ может быть классифицирован как прописная буква, строчная буква, десятичное число, буква, разделитель абзаца, математический символ или символ валюты. Приложение может использовать категорию символов для управления операциями на основе строк, таких как синтаксический анализ или извлечение подстроки с регулярными выражениями. Перечисление <xref:System.Globalization.UnicodeCategory> определяет возможные категории символов.  
  
 Используйте класс <xref:System.Globalization.CharUnicodeInfo>, чтобы получить значение <xref:System.Globalization.UnicodeCategory> для определенного символа. Класс <xref:System.Globalization.CharUnicodeInfo> определяет методы, которые возвращают следующие значения символов Юникода:  
  
-   Конкретная категория, к которой принадлежит символ или суррогатная пара. Возвращаемое значение является членом перечисления <xref:System.Globalization.UnicodeCategory>.  
  
-   Числовое значение. Применяется только к числовым символам, включая дроби, подстрочные и надстрочные знаки, римские цифры, числители валют, енЦирклед числа и цифры для конкретного сценария.  
  
-   Цифровое значение. Применяется к числовым символам, которые могут быть объединены с другими числовыми символами для представления целого числа в системе нумерации.  
  
-   Десятичное цифровое значение. Применяется только к символам, представляющим десятичные цифры в системе счисления (с основанием 10). Десятичная цифра может быть одной из десяти цифр, от нуля до девяти. Эти символы являются членами категории <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>.  
  
 Кроме того, класс <xref:System.Globalization.CharUnicodeInfo> внутренне используется несколькими другими .NET Framework типами и методами, которые используют классификацию символов. Сюда входит следующее.  
  
-   Класс <xref:System.Globalization.StringInfo>, который работает с текстовыми элементами, а не с одиночными символами в строке.  
  
-   Перегрузки метода <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>, которые определяют категорию, к которой принадлежит символ или суррогатная пара.  
  
-   [Классы символов](~/docs/standard/base-types/character-classes-in-regular-expressions.md) , распознаваемые <xref:System.Text.RegularExpressions.Regex>, обработчик регулярных выражений .NET Framework.  
  
 При использовании этого класса в приложениях учитывайте следующие аспекты программирования при использовании типа <xref:System.Char>. Тип может быть трудно использовать, а строки, как правило, являются предпочтительными для представления лингвистического содержимого.  
  
-   Объект <xref:System.Char> не всегда соответствует одному символу. Хотя тип <xref:System.Char> представляет одно 16-разрядное значение, некоторые символы (например, графеменые и суррогатные пары) состоят из двух или более единиц кода UTF-16. Дополнительные сведения см. в разделе "объекты char и символы Юникода" в классе <xref:System.String>.  
  
-   Понятие "символ" также является гибким. Символ часто рассматривается как глиф, но для многих глифов требуется несколько кодовых позиций. Например, ä может быть представлен двумя кодовыми точками ("a" плюс U + 0308, который является объединяющей трем) или одной кодовой точкой ("ä" или U + 00A4). Некоторые языки имеют много букв, символов и глифов, для которых требуется несколько кодовых точек, что может привести к путанице в лингвистическом представлении содержимого. Например, существует ΰ (U + 03B0, греческая строчная буква ипсилон с диалитика и Тонос), но эквивалентная прописная буква отсутствует. В верхнем регистре такое значение просто извлекает исходное значение.  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage"><para>Распознанные символы и конкретные категории, к которым они относятся, определяются стандартом Юникода и могут изменяться от одной версии стандарта Юникода к другой. Классификация символов в определенной версии .NET Framework основана на единственной версии стандарта Юникода независимо от базовой операционной системы, в которой выполняется .NET Framework. В следующей таблице перечислены версии .NET Framework, начиная с [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] и версий стандарта Юникода, используемых для классификации символов.  
  
 <list type="table"><listheader><term> Версия платформы .NET Framework 
 </term><description> Версия стандарта Юникод 
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Стандарт Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Стандарт Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Стандарт Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Стандарт Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Стандарт Юникода версии 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Стандарт Юникода версии 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Стандарт Юникода версии 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  

 Каждая версия стандарта Unicode содержит сведения об изменениях в базе данных символов Юникода с момента предыдущей версии. База данных символов Юникода используется классом <see cref="T:System.Globalization.CharUnicodeInfo" /> для категоризации символов.</para></block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает десятичное цифровое значение числового символа Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить десятичное цифровое значение.</param>
        <summary>Получает десятичное цифровое значение указанного числового символа.</summary>
        <returns>Десятичное цифровое значение указанного числового символа.  
  
 - или -  
  
 -1, если указанный символ не является десятичной цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует символы, представляющие десятичные цифры, в эквивалентные целочисленные значения. Десятичные цифры — это символы в категории <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>, которые могут представлять одну из десяти цифр в системе нумерованных десятичных чисел (с основанием 10), от нуля до девяти. В него входят такие символы, как U + 0030 (ЦИФРа 0), до U + 0039 (ЦИФРа девять), U + 0660 (АРАБСКая, ИНДИЙСКая ЦИФРа ноль) до U + 0669 (Арабский — ИНДИЙСКая ЦИФРа девять), U + 07C0 (блок цифра) до u + 07C9 (блок цифра 9) и U + 1040 ( МЬЯНМА ЦИФРЫ ДЕВЯТИ).  
  
 Дополнительные сведения о символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить десятичное цифровое значение.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить десятичное цифровое значение.</param>
        <summary>Получает десятичное цифровое значение числового символа на месте указанного индекса указанной строки.</summary>
        <returns>Десятичное цифровое значение числового символа на месте указанного индекса указанной строки.  
  
 - или -  
  
 -1, если символ на месте указанного индекса указанной строки не является десятичной цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует символы, представляющие десятичные цифры, в эквивалентные целочисленные значения. Десятичные цифры — это символы в категории <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>, которые могут представлять одну из десяти цифр в системе нумерованных десятичных чисел (с основанием 10), от нуля до девяти. В него входят такие символы, как U + 0030 (ЦИФРа 0), до U + 0039 (ЦИФРа девять), U + 0660 (АРАБСКая, ИНДИЙСКая ЦИФРа ноль) до U + 0669 (Арабский — ИНДИЙСКая ЦИФРа девять), U + 07C0 (блок цифра) до u + 07C9 (блок цифра 9) и U + 1040 ( МЬЯНМА ЦИФРЫ ДЕВЯТИ).  
  
 Дополнительные сведения о символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает цифровое значение числового символа Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить цифровое значение.</param>
        <summary>Получает цифровое значение указанного числового символа.</summary>
        <returns>Цифровое значение указанного числового символа.  
  
 - или -  
  
 -1, если указанный символ не является цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цифровое значение — это свойство, которое применяется только к числовым символам, которые могут использоваться в качестве цифр. Цифра — это числовой символ, который можно комбинировать с другими цифрами для представления целого числа в системе нумерации.  
  
 Дополнительные сведения об символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить цифровое значение.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить цифровое значение.</param>
        <summary>Получает цифровое значение числового символа на месте указанного индекса указанной строки.</summary>
        <returns>Цифровое значение числового символа на месте указанного индекса указанной строки.  
  
 - или -  
  
 -1, если символ на месте указанного индекса указанной строки не является цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цифровое значение — это свойство, которое применяется только к числовым символам, которые могут использоваться в качестве цифр. Цифра — это числовой символ, который можно комбинировать с другими цифрами для представления целого числа в системе нумерации.  
  
 Дополнительные сведения об символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает числовое значение, связанное с символом Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить числовое значение.</param>
        <summary>Получает числовое значение, связанное с указанным символом.</summary>
        <returns>Числовое значение, связанное с указанным символом.  
  
 - или -  
  
 -1, если указанный символ не является числовым символом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Числовое значение — это свойство символа Юникода, которое применяется только к числовым символам, включая дробные части, индексы, надстрочные знаки, римские цифры, числители валют, енЦирклед числа и цифры для конкретного сценария. Дополнительные сведения об символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Метод <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> предполагает, что `ch` соответствует одному лингвистическому символу и проверяет, можно ли преобразовать этот символ в десятичную цифру. Однако некоторые числа в стандарте Юникода представлены двумя <xref:System.Char>ными объектами, которые формируют суррогатную пару. Например, система нумерации Эгейский Университет состоит из кодовых точек U + 10107 через U + 10133. В следующем примере метод <xref:System.Char.ConvertFromUtf32%2A> используется для создания экземпляра строки, представляющей ЭГЕЙСКИЙ университет номер 1. Как видно из выходных данных в примере, метод <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> возвращает значение-1, если ему передается старший суррогат или нижний суррогат этого символа.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить числовое значение.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить числовое значение.</param>
        <summary>Получает числовое значение, связанное с символом, расположенным по указанному индексу в указанной строке.</summary>
        <returns>Числовое значение, связанное с символом, расположенным по указанному индексу в указанной строке.  
  
 - или -  
  
 -1, если символ на месте указанного индекса указанной строки не является числовым символом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Числовое значение — это свойство символа Юникода, которое применяется только к числовым символам, включая дробные части, индексы, надстрочные знаки, римские цифры, числители валют, енЦирклед числа и цифры для конкретного сценария. Дополнительные сведения об символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Если объект <xref:System.Char> в позиции `index` является первым символом допустимой суррогатной пары, метод <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> определяет, образует ли суррогатная пара цифровую цифру, и, если она есть, возвращает его числовое значение. Например, система нумерации Эгейский Университет состоит из кодовых точек U + 10107 через U + 10133. В следующем примере используется метод <xref:System.Char.ConvertFromUtf32%2A> для создания экземпляра строки, представляющей каждое Эгейский университет число. Как видно из выходных данных в примере, метод <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> возвращает правильное числовое значение, если оно передается старшим суррогатом числа Эгейский университет. Однако если он передается младшим суррогатом, он считает только младший суррогат в изоляции и возвращает значение-1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает категорию Юникода, относящуюся к символу Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить категорию Юникода.</param>
        <summary>Получает категорию Юникода, относящуюся к указанному символу.</summary>
        <returns>Значение <see cref="T:System.Globalization.UnicodeCategory" />, указывающее категорию указанного символа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символы Юникода делятся на категории. Категория символа является одним из его свойств. Например, символом может быть буква в верхнем регистре, строчная буква, десятичное число, буква, знак пунктуации, математический символ или символ валюты. Класс <xref:System.Globalization.UnicodeCategory> Возвращает категорию символа Юникода. Дополнительные сведения об символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Метод <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> предполагает, что `ch` соответствует одному лингвистическому символу и возвращает его категорию. Это означает, что для суррогатных пар он возвращает <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> вместо категории, которой принадлежит суррогат. Например, Угаритик алфавит занимает кодовые точки U + 10380 в U + 1039F. В следующем примере используется метод <xref:System.Char.ConvertFromUtf32%2A> для создания экземпляра строки, представляющей УГАРИТИК БУКВу АЛПА (U + 10380), которая является первой буквой Угаритик алфавита. Как видно из выходных данных в примере, метод <xref:System.Char.IsNumber%28System.Char%29> возвращает `false`, если он передается либо старший суррогат, либо нижний суррогат этого символа.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Обратите внимание, что <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> не всегда возвращает то же значение <xref:System.Globalization.UnicodeCategory>, что и метод <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> при передаче определенного символа в качестве параметра. Метод <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> предназначен для отражения текущей версии стандарта Юникода. В отличие от этого, несмотря на то, что метод <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> обычно отражает текущую версию стандарта Юникода, он может возвращать категорию символа на основе предыдущей версии стандарта или может возвращать категорию, отличающуюся от текущего стандарта для сохранения обратной совместимости.  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="codePoint">Число, представляющее 32-разрядное значение кодовой точки символа Юникода.</param>
        <summary>Получает категорию Юникода, относящуюся к указанному символу.</summary>
        <returns>Значение <see cref="T:System.Globalization.UnicodeCategory" />, указывающее категорию указанного символа.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить категорию Юникода.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить категорию Юникода.</param>
        <summary>Получает категорию Юникода, относящуюся к символу, расположенному по заданному индексу в заданной строке.</summary>
        <returns>Значение <see cref="T:System.Globalization.UnicodeCategory" />, указывающее категорию Юникода, относящуюся к символу, расположенному по заданному индексу в заданной строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символы Юникода делятся на категории. Категория символа является одним из его свойств. Например, символом может быть буква в верхнем регистре, строчная буква, десятичное число, буква, знак пунктуации, математический символ или символ валюты. Класс <xref:System.Globalization.UnicodeCategory> Возвращает категорию символа Юникода. Дополнительные сведения об символах Юникода см. в статье [Стандарт Юникода](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Если <xref:System.Char> объект в позиции `index` является первым символом допустимой суррогатной пары, то метод <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> Возвращает категорию Юникода суррогатной пары вместо возврата <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Например, Угаритик алфавит занимает кодовые точки U + 10380 в U + 1039F. В следующем примере используется метод <xref:System.Char.ConvertFromUtf32%2A> для создания экземпляра строки, представляющей УГАРИТИК БУКВу АЛПА (U + 10380), которая является первой буквой Угаритик алфавита. Как видно из выходных данных в примере, метод <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> возвращает <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>, если он передается старшим суррогатом этого символа, что указывает на то, что учитывается суррогатная пара. Однако если он передается младшим суррогатом, он считает только младший суррогат в изоляции и возвращает <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Обратите внимание, что <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> метод не всегда возвращает то же значение <xref:System.Globalization.UnicodeCategory>, что и метод <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> при передаче определенного символа в качестве параметра. Метод <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> предназначен для отражения текущей версии стандарта Юникода. В отличие от этого, несмотря на то, что метод <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> обычно отражает текущую версию стандарта Юникода, он может возвращать категорию символа на основе предыдущей версии стандарта или может возвращать категорию, отличающуюся от текущего стандарта для сохранения обратной совместимости.  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращаемые каждым методом для различных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>
