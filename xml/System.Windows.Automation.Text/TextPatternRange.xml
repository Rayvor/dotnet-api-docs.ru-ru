<Type Name="TextPatternRange" FullName="System.Windows.Automation.Text.TextPatternRange">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7bcd9a4828f7d9edd1295a3f32e75c3df0428db" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69224781" /></Metadata><TypeSignature Language="C#" Value="public class TextPatternRange" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPatternRange extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Text.TextPatternRange" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPatternRange" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPatternRange" />
  <TypeSignature Language="F#" Value="type TextPatternRange = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c3e42-101">Представляет диапазон непрерывного текста в контейнере <see cref="T:System.Windows.Automation.TextPattern" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-101">Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-102">Может представлять точку вставки, подмножество или весь текст <xref:System.Windows.Automation.TextPattern> в контейнере. <xref:System.Windows.Automation.Text.TextPatternRange></span><span class="sxs-lookup"><span data-stu-id="c3e42-102">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 <span data-ttu-id="c3e42-103">Значение <xref:System.Windows.Automation.Text.TextPatternRange> станет недопустимым, если происходит одно из следующих событий: текст <xref:System.Windows.Automation.TextPattern> в контейнере изменяется из-за действий <xref:System.Windows.Automation.ValuePattern.SetValue%2A> пользователя или метод <xref:System.Windows.Automation.ValuePattern> используется для программного изменения значения текста в элементе <xref:System.Windows.Automation.TextPattern> контейнер.</span><span class="sxs-lookup"><span data-stu-id="c3e42-103">A <xref:System.Windows.Automation.Text.TextPatternRange> will become invalid if one of the following occurs: the text in the <xref:System.Windows.Automation.TextPattern> container changes because of some user activity, or the <xref:System.Windows.Automation.ValuePattern.SetValue%2A> method of <xref:System.Windows.Automation.ValuePattern> is used to programmatically change the value of the text in the <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md"><span data-ttu-id="c3e42-104">Общие сведения о шаблонах элементов управления модели автоматизации пользовательского интерфейса</span><span class="sxs-lookup"><span data-stu-id="c3e42-104">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-for-clients.md"><span data-ttu-id="c3e42-105">Шаблоны элементов управления модели автоматизации пользовательского интерфейса для клиентов</span><span class="sxs-lookup"><span data-stu-id="c3e42-105">UI Automation Control Patterns for Clients</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="member this.AddToSelection : unit -&gt; unit" Usage="textPatternRange.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-106">Добавляет в коллекцию выделенного текста в текстовом контейнере, поддерживающем раздельное множественное выделение.</span><span class="sxs-lookup"><span data-stu-id="c3e42-106">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-107">Точка вставки текста переместится в область нового выделения.</span><span class="sxs-lookup"><span data-stu-id="c3e42-107">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="c3e42-108">При предоставлении вырожденного текста точка вставки перемещается.</span><span class="sxs-lookup"><span data-stu-id="c3e42-108">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c3e42-109">Если поставщик текста не поддерживает раздельное множественное выделение (например, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> должно иметь значение <see langword="Multiple" />).</span><span class="sxs-lookup"><span data-stu-id="c3e42-109">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-110">Возвращает новый <see cref="T:System.Windows.Automation.Text.TextPatternRange" />, идентичный исходному <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> и наследующий все его свойства.</span><span class="sxs-lookup"><span data-stu-id="c3e42-110">Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original.</span></span></summary>
        <returns><span data-ttu-id="c3e42-111">Новый текстовый диапазон.</span><span class="sxs-lookup"><span data-stu-id="c3e42-111">The new text range.</span></span> <span data-ttu-id="c3e42-112">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) никогда не возвращается.</span><span class="sxs-lookup"><span data-stu-id="c3e42-112">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-113">Кроме того, можно создать <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> новый объект <xref:System.Windows.Automation.TextPattern> из и переместить две конечные точки, чтобы они соответствовали конечным точкам исходного текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-113">Alternatively, create a new <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> from the <xref:System.Windows.Automation.TextPattern> and move the two endpoints to correspond with the endpoints of the original text range.</span></span>  
  
 <span data-ttu-id="c3e42-114">Новый диапазон можно манипулировать независимо от исходного.</span><span class="sxs-lookup"><span data-stu-id="c3e42-114">The new range can be manipulated independently from the original.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1060](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1060)]  
  
 [!code-vb[UIATextPattern_snip#2060](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2060)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)" />
        <altmember cref="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Text.TextPatternRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Compare(class System.Windows.Automation.Text.TextPatternRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As TextPatternRange) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Text::TextPatternRange ^ range);" />
      <MemberSignature Language="F#" Value="member this.Compare : System.Windows.Automation.Text.TextPatternRange -&gt; bool" Usage="textPatternRange.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Text.TextPatternRange" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="c3e42-115">Текстовый диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="c3e42-115">A text range to compare.</span></span></param>
        <summary><span data-ttu-id="c3e42-116">Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, является ли расположение (от конечной точки <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> до конечной точки <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />) текстового диапазона таким же, как расположение другого текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-116">Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-117">Значение <see langword="true" />, если расположение текстовых диапазонов идентично; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-117"><see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1061](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1061)]  
  
 [!code-vb[UIATextPattern_snip#2061](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2061)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3e42-118">Если сравниваемый диапазон не принадлежит тому же поставщику текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-118">If the range being compared does not come from the same text provider.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="textPatternRange.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="c3e42-119">Конечная точка <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> или <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="c3e42-119">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span></span></param>
        <param name="targetRange"><span data-ttu-id="c3e42-120">Целевой диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="c3e42-120">The target range for comparison.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="c3e42-121">Конечная точка <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> или <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="c3e42-121">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span></span></param>
        <summary><span data-ttu-id="c3e42-122">Возвращает значение типа <see cref="T:System.Int32" />, указывающее, имеют ли два текстовых диапазона одинаковые конечные точки.</span><span class="sxs-lookup"><span data-stu-id="c3e42-122">Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.</span></span></summary>
        <returns><span data-ttu-id="c3e42-123">Возвращает отрицательное значение, если конечная точка вызывающего объекта размещена ближе к началу, чем конечная точка целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="c3e42-123">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span></span>  
  
 <span data-ttu-id="c3e42-124">Возвращает значение нуль, если конечные точки вызывающего и целевого объектов имеют одинаковое расположение.</span><span class="sxs-lookup"><span data-stu-id="c3e42-124">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span></span>  
  
 <span data-ttu-id="c3e42-125">Возвращает положительное значение, если конечная точка вызывающего объекта размещена дальше конечной точки целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="c3e42-125">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-126">Сравнивая начальную и конечную конечные точки одного и того же текстового диапазона, можно выяснить, является ли текстовый диапазон вырожденным, или если конечные точки находятся в порядке логического потока текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-126">By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1062](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1062)]  
  
 [!code-vb[UIATextPattern_snip#2062](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2062)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3e42-127">Если диапазон является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c3e42-127">If range is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3e42-128">Если диапазон из другого контейнера.</span><span class="sxs-lookup"><span data-stu-id="c3e42-128">If range is from another container.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="member this.ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="textPatternRange.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="c3e42-129">Единица текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-129">The textual unit.</span></span></param>
        <summary><span data-ttu-id="c3e42-130">Расширяет текстовый диапазон до заданной единицы текста <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-130">Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-131">Если диапазон уже является точным количеством указанных единиц, он остается неизменным.</span><span class="sxs-lookup"><span data-stu-id="c3e42-131">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="c3e42-132"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> Чтобы метод выполнялся успешно, последовательность действий выполняется в фоновом режиме.</span><span class="sxs-lookup"><span data-stu-id="c3e42-132">In order for the <xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> method to execute successfully, a sequence of actions is performed behind the scenes.</span></span>  
  
1.  <span data-ttu-id="c3e42-133">Диапазон текста нормализован; Это значит, что текстовый диапазон свернут в вырожденный диапазон в <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> конечной точке, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> что делает конечную точку ненужной.</span><span class="sxs-lookup"><span data-stu-id="c3e42-133">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, making the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="c3e42-134">Этот шаг необходим для устранения неоднозначности в ситуациях, когда текстовый диапазон охватывает `unit` границы, например "{The U} RL [https://www.microsoft.com/](https://www.microsoft.com/) внедряется в текст", где "{" и "}" — конечные точки текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-134">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="c3e42-135">Результирующий диапазон перемещается в <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> в начало запрошенной границы `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-135">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="c3e42-136">Диапазон перемещается вперед или назад в <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> на запрошенное число границ `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-136">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="c3e42-137">Затем диапазон расширяется из вырожденного состояния путем перемещения конечной точки <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> на одну запрошенную границу `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-137">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="c3e42-138">![Корректировки диапазона путем перемещения & експандтоенклосингунит] (~/add/media/uia-textpattern-moveandexpand-examples.png "Корректировки диапазона путем перемещения & експандтоенклосингунит")</span><span class="sxs-lookup"><span data-stu-id="c3e42-138">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="c3e42-139">Примеры корректировки текстового диапазона для Move() и ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="c3e42-139">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3e42-140">Эти действия необходимы, поскольку средство чтения с экрана часто считывает полное слово, предложение или весь абзац в точке вставки или в любой позиции виртуального курсора.</span><span class="sxs-lookup"><span data-stu-id="c3e42-140">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="c3e42-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A>учитывает как скрытый, так и видимый текст.</span><span class="sxs-lookup"><span data-stu-id="c3e42-141"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="c3e42-142">Клиент автоматизации пользовательского интерфейса может проверить <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> видимость текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-142">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="c3e42-143"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A>откладывает на следующий самый крупный <xref:System.Windows.Automation.Text.TextUnit> поддерживаемый, если <xref:System.Windows.Automation.Text.TextUnit> данный элемент не поддерживается элементом управления.</span><span class="sxs-lookup"><span data-stu-id="c3e42-143"><xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="c3e42-144">Ниже перечислены заказы, от наименьших единиц до самых крупных.</span><span class="sxs-lookup"><span data-stu-id="c3e42-144">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1063](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1063)]  
  
 [!code-vb[UIATextPattern_snip#2063](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2063)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindAttribute(class System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As AutomationTextAttribute, value As Object, backward As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindAttribute(System::Windows::Automation::AutomationTextAttribute ^ attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="member this.FindAttribute : System.Windows.Automation.AutomationTextAttribute * obj * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="c3e42-145">Искомый атрибут.</span><span class="sxs-lookup"><span data-stu-id="c3e42-145">The attribute to search for.</span></span></param>
        <param name="value"><span data-ttu-id="c3e42-146">Искомое значение атрибута.</span><span class="sxs-lookup"><span data-stu-id="c3e42-146">The attribute value to search for.</span></span> <span data-ttu-id="c3e42-147">Это значение должно соответствовать заданному для атрибута типу.</span><span class="sxs-lookup"><span data-stu-id="c3e42-147">This value must match the type specified for the attribute.</span></span></param>
        <param name="backward"><span data-ttu-id="c3e42-148"><see langword="true" />, если вместо первого должно быть возвращено последнее вхождение текстового диапазона; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-148"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c3e42-149">Возвращает подмножество текстового диапазона, имеющее заданное значение атрибута.</span><span class="sxs-lookup"><span data-stu-id="c3e42-149">Returns a text range subset that has the specified attribute value.</span></span></summary>
        <returns><span data-ttu-id="c3e42-150">Текстовый диапазон, имеющий соответствующий атрибут с заданным значением; в противном случае — NULL (<see langword="Nothing" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c3e42-150">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-151">Различия между скрытым и видимым текстом не различаются.</span><span class="sxs-lookup"><span data-stu-id="c3e42-151">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="c3e42-152">Клиенты автоматизации пользовательского интерфейса могут <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> использовать для проверки видимости текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-152">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3e42-153">Используйте <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> для поиска по всему документу.</span><span class="sxs-lookup"><span data-stu-id="c3e42-153">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1064](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1064)]  
  
 [!code-vb[UIATextPattern_snip#2064](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2064)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.Text.TextPatternRange FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As TextPatternRange" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Text::TextPatternRange ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="member this.FindText : string * bool * bool -&gt; System.Windows.Automation.Text.TextPatternRange" Usage="textPatternRange.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Text.TextPatternRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="c3e42-154">Искомая текстовая строка.</span><span class="sxs-lookup"><span data-stu-id="c3e42-154">The text string to search for.</span></span></param>
        <param name="backward"><span data-ttu-id="c3e42-155">Значение <see langword="true" />, если вместо первого должно быть возвращено последнее вхождение текстового диапазона; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-155"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="c3e42-156"><see langword="true" />, если регистр следует игнорировать; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-156"><see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c3e42-157">Возвращает подмножество текстового диапазона, содержащее заданный текст.</span><span class="sxs-lookup"><span data-stu-id="c3e42-157">Returns a text range subset that contains the specified text.</span></span></summary>
        <returns><span data-ttu-id="c3e42-158">Текстовый диапазон, соответствующий заданному тексту; в противном случае — NULL (<see langword="Nothing" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c3e42-158">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-159">Различия между скрытым и видимым текстом не различаются.</span><span class="sxs-lookup"><span data-stu-id="c3e42-159">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="c3e42-160">Клиенты автоматизации пользовательского интерфейса могут <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> использовать для проверки видимости текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-160">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3e42-161">Используйте <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> для поиска по всему документу.</span><span class="sxs-lookup"><span data-stu-id="c3e42-161">Use <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to search the entire document.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1065](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1065)]  
  
 [!code-vb[UIATextPattern_snip#2065](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2065)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.TextPattern" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetAttributeValue(class System.Windows.Automation.AutomationTextAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As AutomationTextAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(System::Windows::Automation::AutomationTextAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeValue : System.Windows.Automation.AutomationTextAttribute -&gt; obj" Usage="textPatternRange.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Windows.Automation.AutomationTextAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="c3e42-162">Атрибут текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-162">The text attribute.</span></span></param>
        <summary><span data-ttu-id="c3e42-163">Возвращает значение заданного атрибута для всего текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-163">Returns the value of the specified attribute across the entire text range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-164">Возвращает значение заданного атрибута.</span><span class="sxs-lookup"><span data-stu-id="c3e42-164">Returns the value of the specified attribute.</span></span> <span data-ttu-id="c3e42-165">Например, GetAttributeValue(TextPattern.FontNameAttribute) вернет строку, представляющую имя шрифта, если он един для всего текстового диапазона, а GetAttributeValue(TextPattern.IsItalicAttribute) вернет значение логического типа.</span><span class="sxs-lookup"><span data-stu-id="c3e42-165">For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</span></span>  
  
<span data-ttu-id="c3e42-166">Возвращает <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> , если значение заданного атрибута различается в пределах текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-166">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span></span>  
  
<span data-ttu-id="c3e42-167">Возвращает <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" />, если заданный атрибут не поддерживается поставщиком или элементом управления.</span><span class="sxs-lookup"><span data-stu-id="c3e42-167">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-168">Различия между скрытым и видимым текстом не различаются.</span><span class="sxs-lookup"><span data-stu-id="c3e42-168">There is no differentiation between hidden and visible text.</span></span> <span data-ttu-id="c3e42-169">Клиенты автоматизации пользовательского интерфейса могут <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> использовать для проверки видимости текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-169">UI Automation clients can use <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> to check text visibility.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1066](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1066)]  
  
 [!code-vb[UIATextPattern_snip#2066](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2066)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3e42-170">Если указанный атрибут недопустим.</span><span class="sxs-lookup"><span data-stu-id="c3e42-170">If the specified attribute is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public System.Windows.Rect[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Rect()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Rect&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="member this.GetBoundingRectangles : unit -&gt; System.Windows.Rect[]" Usage="textPatternRange.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-171">Извлекает коллекцию ограничивающих прямоугольников для каждой полностью или частично видимой строки текста в текстовом диапазоне.</span><span class="sxs-lookup"><span data-stu-id="c3e42-171">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-172">Массив ограничивающих прямоугольников для каждой полной или частичной строки текста в текстовом диапазоне.</span><span class="sxs-lookup"><span data-stu-id="c3e42-172">An array of bounding rectangles for each full or partial line of text in a text range.</span></span>  
  
 <span data-ttu-id="c3e42-173">Для вырожденного диапазона — пустой массив.</span><span class="sxs-lookup"><span data-stu-id="c3e42-173">An empty array for a degenerate text range.</span></span>  
  
 <span data-ttu-id="c3e42-174">Пустой массив, если экранные координаты текстового диапазона которого полностью находятся вне экрана, он перемещен за пределы экрана в результате прокрутки или заслонен другим окном.</span><span class="sxs-lookup"><span data-stu-id="c3e42-174">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1067](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1067)]  
  
 [!code-vb[UIATextPattern_snip#2067](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2067)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="member this.GetChildren : unit -&gt; System.Windows.Automation.AutomationElement[]" Usage="textPatternRange.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-175">Возвращает коллекцию всех внедренных объектов, попадающих в текстовый диапазон.</span><span class="sxs-lookup"><span data-stu-id="c3e42-175">Retrieves a collection of all embedded objects that fall within the text range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-176">Коллекция всех дочерних объектов, попадающих в текстовый диапазон.</span><span class="sxs-lookup"><span data-stu-id="c3e42-176">A collection of all child objects that fall within the range.</span></span> <span data-ttu-id="c3e42-177">Дочерние объекты, пересекающиеся с диапазоном, но не полностью в нем находящиеся, также будут включены в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c3e42-177">Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</span></span>  
  
 <span data-ttu-id="c3e42-178">Возвращает пустую коллекцию, если нет ни одного дочернего объекта.</span><span class="sxs-lookup"><span data-stu-id="c3e42-178">Returns an empty collection if there are no child objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#getembeddedobjects)]
[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#getembeddedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::AutomationElement ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="member this.GetEnclosingElement : unit -&gt; System.Windows.Automation.AutomationElement" Usage="textPatternRange.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-179">Возвращает самый внутренний элемент <see cref="T:System.Windows.Automation.AutomationElement" />, который содержит текстовый диапазон.</span><span class="sxs-lookup"><span data-stu-id="c3e42-179">Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-180">Самый внутренний элемент, содержащий вызывающий объект.</span><span class="sxs-lookup"><span data-stu-id="c3e42-180">The innermost element enclosing the caller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-181">Включающий <xref:System.Windows.Automation.AutomationElement>, как правило, поставщик текста, предоставляющий текстовый диапазон.</span><span class="sxs-lookup"><span data-stu-id="c3e42-181">The enclosing <xref:System.Windows.Automation.AutomationElement>, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="c3e42-182">Однако если поставщик текста содержит дочерние элементы управления, такие как таблицы или гиперссылки, охватывающий элемент должен быть наследником поставщика текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-182">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1069](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1069)]  
  
 [!code-vb[UIATextPattern_snip#2069](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="member this.GetText : int -&gt; string" Usage="textPatternRange.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength"><span data-ttu-id="c3e42-183">Максимальная длина возвращаемой строки.</span><span class="sxs-lookup"><span data-stu-id="c3e42-183">The maximum length of the string to return.</span></span> <span data-ttu-id="c3e42-184">Если длина не ограничена, задайте значение <c>–1</c>.</span><span class="sxs-lookup"><span data-stu-id="c3e42-184">Use <c>-1</c> if no limit is required.</span></span></param>
        <summary><span data-ttu-id="c3e42-185">Возвращает содержимое текстового диапазона в виде обычного текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-185">Returns the plain text of the text range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-186">Содержимое текстового диапазона в виде обычного текста, возможно, обрезанное до заданной в параметре <paramref name="maxLength" /> длины.</span><span class="sxs-lookup"><span data-stu-id="c3e42-186">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-187"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A>учитывает как скрытый, так и видимый текст.</span><span class="sxs-lookup"><span data-stu-id="c3e42-187"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="c3e42-188">Клиент автоматизации пользовательского интерфейса может проверить <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> видимость текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-188">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="c3e42-189">Если `maxLength` значение превышает длину текстового диапазона вызывающего объекта, возвращаемая строка будет являться обычным текстом в текстовом диапазоне.</span><span class="sxs-lookup"><span data-stu-id="c3e42-189">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="c3e42-190"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A>не зависит от порядка конечных точек в потоке текста; Он всегда будет возвращать текст между начальной и конечной конечными точками текстового диапазона в логическом порядке потока текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-190"><xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1070](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1070)]  
  
 [!code-vb[UIATextPattern_snip#2070](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2070)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3e42-191">Если <paramref name="maxLength" /> меньше –1.</span><span class="sxs-lookup"><span data-stu-id="c3e42-191">If <paramref name="maxLength" /> is less than -1.</span></span></exception>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="c3e42-192">Граница единицы текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-192">The text unit boundary.</span></span></param>
        <param name="count"><span data-ttu-id="c3e42-193">Количество единиц текста, на которое следует выполнить перемещение.</span><span class="sxs-lookup"><span data-stu-id="c3e42-193">The number of text units to move.</span></span> <span data-ttu-id="c3e42-194">Положительное значение соответствует перемещению текстового диапазона вперед, отрицательное — назад, а при значении 0 перемещение не выполняется.</span><span class="sxs-lookup"><span data-stu-id="c3e42-194">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="c3e42-195">Перемещает текстовый диапазон на заданное количество единиц текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-195">Moves the text range the specified number of text units.</span></span></summary>
        <returns><span data-ttu-id="c3e42-196">Количество единиц текста, на которое выполнено перемещение.</span><span class="sxs-lookup"><span data-stu-id="c3e42-196">The number of units actually moved.</span></span> <span data-ttu-id="c3e42-197">Оно может быть меньше запрошенного количества, если одна из новых конечных точек текстового диапазона больше или меньше конечных точек <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" />.</span><span class="sxs-lookup"><span data-stu-id="c3e42-197">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-198">Для обхода содержимого текстового диапазона в фоновом режиме применяется ряд шагов для успешного выполнения метода <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> .</span><span class="sxs-lookup"><span data-stu-id="c3e42-198">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="c3e42-199">Текстовый диапазон нормализован, т. е. он свернут до вырожденного диапазона в конечной точке <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> , что делает конечную точку <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> избыточной.</span><span class="sxs-lookup"><span data-stu-id="c3e42-199">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="c3e42-200">Этот шаг необходим для устранения неоднозначности в ситуациях, когда текстовый диапазон охватывает `unit` границы, например "{The U} RL [https://www.microsoft.com/](https://www.microsoft.com/) внедряется в текст", где "{" и "}" — конечные точки текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-200">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="c3e42-201">Результирующий диапазон перемещается в <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> в начало запрошенной границы `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-201">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="c3e42-202">Диапазон перемещается вперед или назад в <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> на запрошенное число границ `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-202">The range is moved forward or backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="c3e42-203">Затем диапазон расширяется из вырожденного состояния путем перемещения конечной точки <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> на одну запрошенную границу `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-203">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="c3e42-204">![Корректировки диапазона путем перемещения & експандтоенклосингунит] (~/add/media/uia-textpattern-moveandexpand-examples.png "Корректировки диапазона путем перемещения & експандтоенклосингунит")</span><span class="sxs-lookup"><span data-stu-id="c3e42-204">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="c3e42-205">Примеры корректировки текстового диапазона для Move() и ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="c3e42-205">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="c3e42-206">Текстовое содержимое (или внутренний текст) контейнера текста и внедренного объекта, например гиперссылки или ячейки таблицы, представляется как один непрерывный текстовый поток и в представлении элемента управления и в представлении содержимого дерева [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. Границы объекта игнорируются.</span><span class="sxs-lookup"><span data-stu-id="c3e42-206">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="c3e42-207">Если клиент автоматизации пользовательского интерфейса извлекает текст с целью вывода, интерпретации или анализа, текстовый диапазон следует проверить на соответствие особым случаям, например таблице с текстовым содержимым или другим внедренным объектам.</span><span class="sxs-lookup"><span data-stu-id="c3e42-207">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="c3e42-208">Это можно сделать, вызвав <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> метод, чтобы <xref:System.Windows.Automation.AutomationElement> получить для каждого внедренного объекта, <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> а затем вызвать метод для получения текстового диапазона для каждого элемента. Это выполняется рекурсивно до тех пор, пока не будет получено все текстовое содержимое.</span><span class="sxs-lookup"><span data-stu-id="c3e42-208">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="c3e42-209">![Текстовые диапазоны, охваченные внедренными объектами.] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Текстовые диапазоны, охваченные внедренными объектами.")</span><span class="sxs-lookup"><span data-stu-id="c3e42-209">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="c3e42-210">Пример текстового потока с внедренными объектами и их диапазонами</span><span class="sxs-lookup"><span data-stu-id="c3e42-210">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="c3e42-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A>учитывает как скрытый, так и видимый текст.</span><span class="sxs-lookup"><span data-stu-id="c3e42-211"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="c3e42-212">Клиент автоматизации пользовательского интерфейса может проверить <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> видимость текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-212">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span>  
  
 <span data-ttu-id="c3e42-213"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A>откладывает на следующий самый крупный <xref:System.Windows.Automation.Text.TextUnit> поддерживаемый, если <xref:System.Windows.Automation.Text.TextUnit> данный элемент не поддерживается элементом управления.</span><span class="sxs-lookup"><span data-stu-id="c3e42-213"><xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="c3e42-214">Ниже перечислены заказы, от наименьших единиц до самых крупных.</span><span class="sxs-lookup"><span data-stu-id="c3e42-214">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
> [!NOTE]
>  <span data-ttu-id="c3e42-215">Текст не изменяется каким-либо образом, так как текстовый диапазон просто охватывает другую часть текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-215">The text is not altered in any way as the text range just spans a different part of the text.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#StartTarget](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#starttarget)]
 [!code-vb[UIATextPattern_snip#StartTarget](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#starttarget)]  
[!code-csharp[UIATextPattern_snip#GetTextElement](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#gettextelement)]
[!code-vb[UIATextPattern_snip#GetTextElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#gettextelement)]  
[!code-csharp[UIATextPattern_snip#MoveSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#moveselection)]
[!code-vb[UIATextPattern_snip#MoveSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#moveselection)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Text.TextPatternRange targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As TextPatternRange, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextPatternRange ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextPatternRange * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="textPatternRange.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Text.TextPatternRange" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="c3e42-216">Перемещаемая конечная точка.</span><span class="sxs-lookup"><span data-stu-id="c3e42-216">The endpoint to move.</span></span></param>
        <param name="targetRange"><span data-ttu-id="c3e42-217">Второй диапазон от того же поставщика текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-217">Another range from the same text provider.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="c3e42-218">Конечная точка второго диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-218">An endpoint on the other range.</span></span></param>
        <summary><span data-ttu-id="c3e42-219">Перемещает конечную точку текстового диапазона в заданную конечную точку второго текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-219">Moves one endpoint of a text range to the specified endpoint of a second text range.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-220">Если перемещаемая конечная точка пересекает другую конечную точку того же текстового диапазона, то также перемещается другая конечная точка, что приводит к вырождению диапазона и обеспечению правильного порядка конечных <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> точек (то есть всегда меньше или равно <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="c3e42-220">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1072](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1072)]  
  
 [!code-vb[UIATextPattern_snip#2072](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2072)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="member this.MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="textPatternRange.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="c3e42-221">Перемещаемая конечная точка.</span><span class="sxs-lookup"><span data-stu-id="c3e42-221">The endpoint to move.</span></span></param>
        <param name="unit"><span data-ttu-id="c3e42-222">Единица текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-222">The textual unit for moving.</span></span></param>
        <param name="count"><span data-ttu-id="c3e42-223">Число перемещаемых единиц.</span><span class="sxs-lookup"><span data-stu-id="c3e42-223">The number of units to move.</span></span> <span data-ttu-id="c3e42-224">При положительном значении выполняется перемещение вперед.</span><span class="sxs-lookup"><span data-stu-id="c3e42-224">A positive count moves the endpoint forward.</span></span> <span data-ttu-id="c3e42-225">При отрицательном значении выполняется перемещение назад.</span><span class="sxs-lookup"><span data-stu-id="c3e42-225">A negative count moves backward.</span></span> <span data-ttu-id="c3e42-226">При значении 0 перемещение не выполняется.</span><span class="sxs-lookup"><span data-stu-id="c3e42-226">A count of 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="c3e42-227">Перемещает конечную точку текстового диапазона на заданное количество единиц текста <see cref="T:System.Windows.Automation.Text.TextUnit" /> в диапазоне всего документа.</span><span class="sxs-lookup"><span data-stu-id="c3e42-227">Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range.</span></span></summary>
        <returns><span data-ttu-id="c3e42-228">Количество единиц, на которое выполнено перемещение; оно может быть меньше запрошенного количества единиц, если при перемещении конечная точка достигает начала или конца документа.</span><span class="sxs-lookup"><span data-stu-id="c3e42-228">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-229">Для обхода содержимого текстового диапазона в фоновом режиме применяется ряд шагов для успешного выполнения метода <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> .</span><span class="sxs-lookup"><span data-stu-id="c3e42-229">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Text.TextPatternRange.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="c3e42-230">Текстовый диапазон нормализован, т. е. он свернут до вырожденного диапазона в конечной точке <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> , что делает конечную точку <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> избыточной.</span><span class="sxs-lookup"><span data-stu-id="c3e42-230">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="c3e42-231">Этот шаг необходим для устранения неоднозначности в ситуациях, когда текстовый диапазон охватывает `unit` границы, например "{The U} RL [https://www.microsoft.com/](https://www.microsoft.com/) внедряется в текст", где "{" и "}" — конечные точки текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-231">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="c3e42-232">Результирующий диапазон перемещается в <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> в начало запрошенной границы `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-232">The resulting range is moved backward in the <xref:System.Windows.Automation.TextPattern.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="c3e42-233">Затем диапазон расширяется из вырожденного состояния путем перемещения конечной точки <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> на одну запрошенную границу `unit` .</span><span class="sxs-lookup"><span data-stu-id="c3e42-233">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="c3e42-234">![Корректировки диапазона путем перемещения & експандтоенклосингунит] (~/add/media/uia-textpattern-moveandexpand-examples.png "Корректировки диапазона путем перемещения & експандтоенклосингунит")</span><span class="sxs-lookup"><span data-stu-id="c3e42-234">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="c3e42-235">Примеры корректировки текстового диапазона для Move() и ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="c3e42-235">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="c3e42-236">Текстовое содержимое (или внутренний текст) контейнера текста и внедренного объекта, например гиперссылки или ячейки таблицы, представляется как один непрерывный текстовый поток и в представлении элемента управления и в представлении содержимого дерева [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. Границы объекта игнорируются.</span><span class="sxs-lookup"><span data-stu-id="c3e42-236">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span> <span data-ttu-id="c3e42-237">Если клиент автоматизации пользовательского интерфейса извлекает текст с целью вывода, интерпретации или анализа, текстовый диапазон следует проверить на соответствие особым случаям, например таблице с текстовым содержимым или другим внедренным объектам.</span><span class="sxs-lookup"><span data-stu-id="c3e42-237">If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</span></span> <span data-ttu-id="c3e42-238">Это можно сделать, вызвав <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> метод, чтобы <xref:System.Windows.Automation.AutomationElement> получить для каждого внедренного объекта, <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> а затем вызвать метод для получения текстового диапазона для каждого элемента. Это выполняется рекурсивно до тех пор, пока не будет получено все текстовое содержимое.</span><span class="sxs-lookup"><span data-stu-id="c3e42-238">This can be accomplished by calling <xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> to obtain an <xref:System.Windows.Automation.AutomationElement> for each embedded object and then calling <xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</span></span>  
  
 <span data-ttu-id="c3e42-239">![Текстовые диапазоны, охваченные внедренными объектами.] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Текстовые диапазоны, охваченные внедренными объектами.")</span><span class="sxs-lookup"><span data-stu-id="c3e42-239">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="c3e42-240">Пример текстового потока с внедренными объектами и их диапазонами</span><span class="sxs-lookup"><span data-stu-id="c3e42-240">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="c3e42-241"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A>откладывает на следующий самый крупный <xref:System.Windows.Automation.Text.TextUnit> поддерживаемый, если <xref:System.Windows.Automation.Text.TextUnit> данный элемент не поддерживается элементом управления.</span><span class="sxs-lookup"><span data-stu-id="c3e42-241"><xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="c3e42-242">Ниже перечислены заказы, от наименьших единиц до самых крупных.</span><span class="sxs-lookup"><span data-stu-id="c3e42-242">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1073](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1073)]  
  
 [!code-vb[UIATextPattern_snip#2073](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2073)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="member this.RemoveFromSelection : unit -&gt; unit" Usage="textPatternRange.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-243">Удаляет выделенный текст, соответствующий конечным точкам <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> и <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> вызывающего текстового диапазона, из существующей коллекции выделенного текста в текстовом контейнере, поддерживающем раздельное множественное выделение.</span><span class="sxs-lookup"><span data-stu-id="c3e42-243">Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-244">Точка вставки текста будет перемещена в область удаленного выделения.</span><span class="sxs-lookup"><span data-stu-id="c3e42-244">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="c3e42-245">При предоставлении вырожденного диапазона точка вставки будет перемещена.</span><span class="sxs-lookup"><span data-stu-id="c3e42-245">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c3e42-246">Если поставщик текста не поддерживает раздельное множественное выделение (например, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> должно иметь значение <see langword="Multiple" />).</span><span class="sxs-lookup"><span data-stu-id="c3e42-246">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.Select" />
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="textPatternRange.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop"><span data-ttu-id="c3e42-247">Значение <see langword="true" />, если текстовый элемент управления должен выполнить прокрутку так, чтобы текстовый диапазон отобразился у верхней границы окна просмотра; <see langword="false" />, если текстовый диапазон должен отобразиться у верхней границы окна просмотра.</span><span class="sxs-lookup"><span data-stu-id="c3e42-247"><see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span></span></param>
        <summary><span data-ttu-id="c3e42-248">Заставляет текстовый элемент управления выполнять вертикальную прокрутку, пока текстовый диапазон не появится в окне просмотра.</span><span class="sxs-lookup"><span data-stu-id="c3e42-248">Causes the text control to scroll vertically until the text range is visible in the viewport.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-249"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A>учитывает как скрытый, так и видимый текст.</span><span class="sxs-lookup"><span data-stu-id="c3e42-249"><xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A> respects both hidden and visible text.</span></span> <span data-ttu-id="c3e42-250">Клиент автоматизации пользовательского интерфейса может проверить <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> видимость текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-250">The UI Automation client can check the <xref:System.Windows.Automation.TextPattern.IsHiddenAttribute> for text visibility.</span></span> <span data-ttu-id="c3e42-251">Если текстовый диапазон скрыт, элемент управления "текст" прокручивается только в том случае, если скрытый текст имеет привязку в окне просмотра.</span><span class="sxs-lookup"><span data-stu-id="c3e42-251">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1074](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1074)]  
  
 [!code-vb[UIATextPattern_snip#2074](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2074)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c3e42-252">Если прокрутка не поддерживается элементом управления.</span><span class="sxs-lookup"><span data-stu-id="c3e42-252">If scrolling is not supported by the control.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Text.TextPatternRange.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="textPatternRange.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3e42-253">Выделяет в текстовом элементе управления текст, соответствующий конечным точкам <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> и <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-253">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3e42-254">Если выводится вырожденный диапазон текста, точка вставки текста будет перемещена в <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> конечную точку текстового диапазона.</span><span class="sxs-lookup"><span data-stu-id="c3e42-254">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
   
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1075](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1075)]  
  
 [!code-vb[UIATextPattern_snip#2075](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2075)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c3e42-255">Возникает, когда выделение текста не поддерживается в элементе управления текстом.</span><span class="sxs-lookup"><span data-stu-id="c3e42-255">Occurs when text selection is not supported by the text control.</span></span></exception>
        <altmember cref="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection" />
        <altmember cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" />
        <altmember cref="T:System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Docs>
    </Member>
    <Member MemberName="TextPattern">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TextPattern TextPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.TextPattern TextPattern" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TextPattern As TextPattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TextPattern ^ TextPattern { System::Windows::Automation::TextPattern ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextPattern : System.Windows.Automation.TextPattern" Usage="System.Windows.Automation.Text.TextPatternRange.TextPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TextPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3e42-256">Возвращает шаблон <see cref="T:System.Windows.Automation.TextPattern" />, связанный с текстовым диапазоном.</span><span class="sxs-lookup"><span data-stu-id="c3e42-256">Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range.</span></span></summary>
        <value><span data-ttu-id="c3e42-257">Поставщик текста.</span><span class="sxs-lookup"><span data-stu-id="c3e42-257">The text provider.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIATextPattern_snip#1076](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATextPattern_snip/CSharp/SearchWindow.cs#1076)]  
  
 [!code-vb[UIATextPattern_snip#2076](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATextPattern_snip/VisualBasic/SearchWindow.vb#2076)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
