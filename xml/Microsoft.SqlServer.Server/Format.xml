<Type Name="Format" FullName="Microsoft.SqlServer.Server.Format">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4349d39b5042e0a2da26407506d6bc6c169d47a9" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75156649" /></Metadata><TypeSignature Language="C#" Value="public enum Format" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Format extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.Format" />
  <TypeSignature Language="VB.NET" Value="Public Enum Format" />
  <TypeSignature Language="C++ CLI" Value="public enum class Format" />
  <TypeSignature Language="F#" Value="type Format = " />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Используется классами <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> и <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" /> для указания формата сериализации пользовательского типа или агрегатной функции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

Это перечисление используется <xref:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute> и <xref:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute> для указания формата сериализации определяемого пользователем типа (UDT) или статистического выражения. Использование членов перечисления `Native` и `UserDefined` имеет особые требования.   

- `Format.Native`

   Требования к формату `Format.Native`:  
  
   - <xref:System.Runtime.InteropServices.StructLayoutAttribute> со значением свойства <xref:System.Runtime.InteropServices.StructLayoutAttribute.Value> <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> необходимо применить к агрегату или определяемому пользователем типу, если он определен в классе, а не в структуре. Это управляет физическим размещением полей данных и используется для принудительного размещения элементов в порядке их появления. SQL Server использует этот атрибут, чтобы определить порядок полей для определяемых пользователем типов с несколькими полями.
  
   - Тип должен содержать по крайней мере один элемент (сериализованные значения не могут иметь нулевой размер).  
  
   - Все поля агрегата должны быть *непреобразуемыми*; то есть они должны иметь общее представление как в управляемой, так и в неуправляемой памяти и не требовать специальной обработки маршалером взаимодействия.  
  
   - Все поля определяемого пользователем типа должны иметь один из следующих типов, которые могут быть сериализованы: `bool`, `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`, `float`, `double`или другие типы значений, определяемые пользователем, которые содержат поля одного из этих типов.<xref:System.Data.SqlTypes.SqlByte><xref:System.Data.SqlTypes.SqlInt16><xref:System.Data.SqlTypes.SqlInt32><xref:System.Data.SqlTypes.SqlInt64><xref:System.Data.SqlTypes.SqlDateTime><xref:System.Data.SqlTypes.SqlSingle><xref:System.Data.SqlTypes.SqlDouble><xref:System.Data.SqlTypes.SqlMoney>  

   - Агрегат не должен указывать значение для `MaxByteSize`.  
  
   - Агрегатная функция не должна иметь никаких полей [NonSerialized].  
  
   - Поля не должны быть помечены как явные макеты (с <xref:System.Runtime.InteropServices.StructLayoutAttribute.Value?displayProperty=nameWithType> <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>).  

- `Format.UserDefined`

   Требования к формату `Format.UserDefined`:

   - Агрегатная функция должна задавать значение для `MaxByteSize`.  
  
   - Укажите свойство атрибута <xref:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered%2A?displayProperty=nameWithType>. Значение по умолчанию — `false`.  
  
   - Если не указать какое-либо поле в методах <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A?displayProperty=nameWithType> или <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A?displayProperty=nameWithType>, то состояние этого поля не сериализуется.  

## Examples  

В следующем примере показан атрибут `UserDefinedType` определяемого пользователем типа Point.  Определяемый пользователем тип с именем "точка" имеет метод проверки с именем "ValidatePoint" и использует собственный формат сериализации.  
  
[!code-csharp[DataWorks SqlUserDefinedTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlUserDefinedTypeAttribute Example/CS/source.cs#1)]
[!code-vb[DataWorks SqlUserDefinedTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlUserDefinedTypeAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Native">
      <MemberSignature Language="C#" Value="Native" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Server.Format Native = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Server.Format.Native" />
      <MemberSignature Language="VB.NET" Value="Native" />
      <MemberSignature Language="C++ CLI" Value="Native" />
      <MemberSignature Language="F#" Value="Native = 1" Usage="Microsoft.SqlServer.Server.Format.Native" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.Format</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Формат сериализации использует простейший алгоритм, позволяющий SQL Server сохранять на диске эффективное представление пользовательского типа. Типами, отмеченными для сериализации <see langword="Native" />, могут быть только типы значений (структуры в Microsoft Visual C# и в Microsoft Visual Basic .NET) в качестве элементов. Члены в виде ссылочных типов (таких как классы Visual C# или Visual Basic), определенных пользователем или существующих в библиотеках класса .NET (например, <see cref="T:System.String" />), не поддерживаются.</summary>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Server.Format Unknown = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Server.Format.Unknown" />
      <MemberSignature Language="VB.NET" Value="Unknown" />
      <MemberSignature Language="C++ CLI" Value="Unknown" />
      <MemberSignature Language="F#" Value="Unknown = 0" Usage="Microsoft.SqlServer.Server.Format.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.Format</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Формат сериализации неизвестен.</summary>
      </Docs>
    </Member>
    <Member MemberName="UserDefined">
      <MemberSignature Language="C#" Value="UserDefined" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Server.Format UserDefined = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Server.Format.UserDefined" />
      <MemberSignature Language="VB.NET" Value="UserDefined" />
      <MemberSignature Language="C++ CLI" Value="UserDefined" />
      <MemberSignature Language="F#" Value="UserDefined = 2" Usage="Microsoft.SqlServer.Server.Format.UserDefined" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.Format</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Формат сериализации обеспечивает разработчику полный контроль над форматом двоичных данных, осуществляемый с помощью методов <see cref="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" /> и <see cref="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
