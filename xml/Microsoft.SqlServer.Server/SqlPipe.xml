<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="131acc8d6211ac9b84fd44506f00355caf4ba928" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="63949600" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9811a-101">Разрешает управляемым хранимым процедурам, выполняемым внутри процесса в базе данных SQL Server, возвращать результаты в вызывающую программу.</span><span class="sxs-lookup"><span data-stu-id="9811a-101">Allows managed stored procedures running in-process on a SQL Server database to return results back to the caller.</span></span> <span data-ttu-id="9811a-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="9811a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-103">Экземпляр этого класса будет предоставляться доступ для управляемых хранимых процедур через <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> свойство <xref:Microsoft.SqlServer.Server.SqlContext> класса.</span><span class="sxs-lookup"><span data-stu-id="9811a-103">An instance of this class is made available to managed stored procedures through the <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> property of the <xref:Microsoft.SqlServer.Server.SqlContext> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9811a-104">В следующем примере используется <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlCommand> для выборки строк из источника данных в хранимой процедуре.</span><span class="sxs-lookup"><span data-stu-id="9811a-104">The following example uses <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to select rows from a data source in a stored procedure.</span></span> <span data-ttu-id="9811a-105">Затем в примере используется <xref:Microsoft.SqlServer.Server.SqlPipe> выполнить команду и отправлять результаты обратно клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-105">The example then uses a <xref:Microsoft.SqlServer.Server.SqlPipe> to execute the command and send the results back to the client.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="9811a-106">Объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется выполнить.</span><span class="sxs-lookup"><span data-stu-id="9811a-106">The <see cref="T:System.Data.SqlClient.SqlCommand" /> object to be executed.</span></span></param>
        <summary><span data-ttu-id="9811a-107">Выполняет команду, переданную в качестве параметра, и отправляет результаты клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-107">Executes the command passed as a parameter and sends the results to the client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-108">Помимо самих результатов другие сообщения и ошибки также передаются непосредственно клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-108">In addition to any actual results, other messages and errors are also sent directly to the client.</span></span>  
  
 <span data-ttu-id="9811a-109">Выходные параметры и возвращаемые значения не отправляются клиенту; они доступны к вызывающему объекту, с помощью коллекции параметров объект команды.</span><span class="sxs-lookup"><span data-stu-id="9811a-109">Output parameters and return values are not sent to the client; these are available to the caller, through the parameters collection of the command object.</span></span>  
  
 <span data-ttu-id="9811a-110">Если команда не привязан к подключению в процессе, <xref:System.InvalidOperationException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="9811a-110">If the command is not bound to an in-process connection, an <xref:System.InvalidOperationException> is thrown.</span></span> <span data-ttu-id="9811a-111">Данный метод не поддерживается для команд, привязанных к подключениям вне процессов.</span><span class="sxs-lookup"><span data-stu-id="9811a-111">This method is not supported on commands bound to out-of-process connections.</span></span>  
  
 <span data-ttu-id="9811a-112">При наличии ошибок в <xref:System.Data.SqlClient.SqlCommand> объект, который был отправлен, исключения передаются в канал, но копия пересылается также вызывающему управляемому коду.</span><span class="sxs-lookup"><span data-stu-id="9811a-112">If there are errors in the <xref:System.Data.SqlClient.SqlCommand> object that was submitted, exceptions are sent to the pipe, but a copy is also sent to calling managed code.</span></span> <span data-ttu-id="9811a-113">Если вызывающий код не перехватывает исключение, он будет вверх по стеку в код Transact-SQL и отображается в выходных данных дважды.</span><span class="sxs-lookup"><span data-stu-id="9811a-113">If the calling code doesn't catch the exception, it will propagate up the stack to the Transact-SQL code and appear in the output twice.</span></span> <span data-ttu-id="9811a-114">Если вызывающий код перехватывает исключение, потребитель канала по-прежнему будут видеть ошибки, но не будет ошибки с повторяющимися значениями.</span><span class="sxs-lookup"><span data-stu-id="9811a-114">If the calling code does catch the exception, the pipe consumer will still see the error, but there will not be a duplicate error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9811a-115">В следующем примере используется <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlCommand> для выборки строк из источника данных в хранимой процедуре.</span><span class="sxs-lookup"><span data-stu-id="9811a-115">The following example uses <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to select rows from a data source in a stored procedure.</span></span> <span data-ttu-id="9811a-116">Затем в примере используется <xref:Microsoft.SqlServer.Server.SqlPipe> выполнить команду и отправлять результаты обратно клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-116">The example then uses a <xref:Microsoft.SqlServer.Server.SqlPipe> to execute the command and send the results back to the client.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9811a-117">Значение параметра <paramref name="command" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-117">The <paramref name="command" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9811a-118">Данный метод не поддерживается для команд, привязанных к подключениям вне процессов.</span><span class="sxs-lookup"><span data-stu-id="9811a-118">This method is not supported on commands bound to out-of-process connections.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9811a-119">Получает значение, показывающее, находится ли объект <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> в режиме отправки одиночных результирующих наборов клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-119">Gets a value that indicates whether the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> is in the mode of sending single result sets back to the client.</span></span> <span data-ttu-id="9811a-120">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="9811a-120">This property is read-only.</span></span></summary>
        <value><span data-ttu-id="9811a-121"><see langword="true" />, если вызван метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> и объект <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> находится в режиме отправки одиночных результирующих наборов клиенту; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-121"><see langword="true" /> if the <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method has been called and the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> is in the mode of sending single result sets back to the client; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9811a-122">Отправляет результаты непосредственно клиенту или текущему получателю выходных данных.</span><span class="sxs-lookup"><span data-stu-id="9811a-122">Sends results directly to the client or current output consumer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-123">**Отправки** метод пересылает данные напрямую клиенту или вызывающему.</span><span class="sxs-lookup"><span data-stu-id="9811a-123">The **Send** method sends data straight to the client or caller.</span></span> <span data-ttu-id="9811a-124">Это обычно клиент использует выход из **канала** метод, но в случае вложенных CLR хранимые процедуры, потребителем выхода также может быть хранимая процедура.</span><span class="sxs-lookup"><span data-stu-id="9811a-124">It is usually the client that consumes the output from the **Pipe** method, but in the case of nested CLR stored procedures the output consumer can also be a stored procedure.</span></span> <span data-ttu-id="9811a-125">Например, Procedure1 вызывает <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> с текстом команды «EXEC Procedure2».</span><span class="sxs-lookup"><span data-stu-id="9811a-125">For example, Procedure1 calls <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> with the command text "EXEC Procedure2".</span></span> <span data-ttu-id="9811a-126">Procedure2 — это также управляемая хранимая процедура.</span><span class="sxs-lookup"><span data-stu-id="9811a-126">Procedure2 is also a managed stored procedure.</span></span> <span data-ttu-id="9811a-127">Если Procedure2 вызывает <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, модулю чтения Procedure1 элемента, не клиенту отправляется строка.</span><span class="sxs-lookup"><span data-stu-id="9811a-127">If Procedure2 now calls <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, the row is sent to Procedure1's reader, not to the client.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><span data-ttu-id="9811a-128">Однострочный результирующий набор, отправляемый клиенту: объект <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-128">The single-row result set sent to the client: a <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> object.</span></span></param>
        <summary><span data-ttu-id="9811a-129">Отправляет однострочный результирующий набор непосредственно клиенту или текущему получателю выходных данных.</span><span class="sxs-lookup"><span data-stu-id="9811a-129">Sends a single-row result set directly to the client or current output consumer.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9811a-130">Значение параметра <paramref name="record" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-130">The <paramref name="record" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9811a-131">Многострочный результирующий набор, отправляемый клиенту: объект <see cref="T:System.Data.SqlClient.SqlDataReader" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-131">The multirow result set to be sent to the client: a <see cref="T:System.Data.SqlClient.SqlDataReader" /> object.</span></span></param>
        <summary><span data-ttu-id="9811a-132">Отправляет многострочный результирующий набор непосредственно клиенту или текущему получателю выходных данных.</span><span class="sxs-lookup"><span data-stu-id="9811a-132">Sends a multirow result set directly to the client or current output consumer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-133">Если <xref:System.Data.SqlClient.SqlDataReader> переданный объект как параметр скрытые столбцы, эти столбцы не распространяются на результирующий набор, отправляемый клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-133">If the <xref:System.Data.SqlClient.SqlDataReader> object passed in as a parameter has hidden columns, those columns are not propagated to the result set sent to the client.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9811a-134">Значение параметра <paramref name="reader" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-134">The <paramref name="reader" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="9811a-135">Строка сообщения, отправляемая клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-135">The message string to be sent to the client.</span></span></param>
        <summary><span data-ttu-id="9811a-136">Отправляет строковое сообщение непосредственно клиенту или текущему получателю выходных данных.</span><span class="sxs-lookup"><span data-stu-id="9811a-136">Sends a string message directly to the client or current output consumer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-137">Строка сообщения отправляется в виде информационного сообщения клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-137">The message string is sent as an informational message to the client.</span></span> <span data-ttu-id="9811a-138">Клиентские приложения могут отслеживать сообщения различными средствами, в зависимости от данных доступа интерфейс программирования (API), они используют.</span><span class="sxs-lookup"><span data-stu-id="9811a-138">Client applications can listen to messages through different mechanisms, depending on the data access application programming interface (API) that they use.</span></span> <span data-ttu-id="9811a-139">Например, если клиент использует ADO.NET, сообщения передачи звука через <xref:System.Data.SqlClient.SqlConnection.InfoMessage> событий.</span><span class="sxs-lookup"><span data-stu-id="9811a-139">For example, if the client is using ADO.NET, the messages transmit through the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9811a-140">В следующем примере используется <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> метод для отправки строки сообщения непосредственно клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-140">The following example uses the <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> method to send a message string directly to the client.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9811a-141">Длина сообщения <paramref name="message" /> превышает 4000 символов.</span><span class="sxs-lookup"><span data-stu-id="9811a-141">The <paramref name="message" /> is greater than 4,000 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9811a-142">Значение параметра <paramref name="message" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-142">The <paramref name="message" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9811a-143">Помечает окончание результирующего набора и возвращает экземпляр <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> в начальное состояние.</span><span class="sxs-lookup"><span data-stu-id="9811a-143">Marks the end of a result set, and returns the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> instance back to the initial state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-144">Управляемые хранимые процедуры могут отправлять результирующие наборы для клиентов, которые не реализуется <xref:System.Data.SqlClient.SqlDataReader>.</span><span class="sxs-lookup"><span data-stu-id="9811a-144">Managed stored procedures can send result sets to clients that are not implementing a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="9811a-145">Этот метод вместе с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, разрешить хранимым процедурам отправлять пользовательские результирующие наборы клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-145">This method, along with <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, allow stored procedures to send custom result sets to the client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9811a-146">В следующем примере создается новый <xref:Microsoft.SqlServer.Server.SqlDataRecord> и его <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span><span class="sxs-lookup"><span data-stu-id="9811a-146">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="9811a-147">Пример затем отмечает начало результирующего набора с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> метод, отправляет записи, в которых данные в этом примере клиент, с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метод и метки в конце результирующего набора с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="9811a-147">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9811a-148">Перед этим не был вызван метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-148">The <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method was not previously called.</span></span></exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><span data-ttu-id="9811a-149">Объект <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />, содержащий значения столбцов для строки, отправляемой клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-149">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> object with the column values for the row to be sent to the client.</span></span> <span data-ttu-id="9811a-150">Схема для записи должна соответствовать схеме, описанной метаданными объекта <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />, переданного в метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-150">The schema for the record must match the schema described by the metadata of the <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> passed to the <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method.</span></span></param>
        <summary><span data-ttu-id="9811a-151">Отправляет клиенту одну строку данных.</span><span class="sxs-lookup"><span data-stu-id="9811a-151">Sends a single row of data back to the client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-152">Управляемые хранимые процедуры могут отправлять результирующие наборы для клиентов, которые не реализуется <xref:System.Data.SqlClient.SqlDataReader>.</span><span class="sxs-lookup"><span data-stu-id="9811a-152">Managed stored procedures can send result sets to clients that are not implementing a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="9811a-153">Этот метод вместе с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, позволяет хранимым процедурам отправлять пользовательские результирующие наборы клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-153">This method, along with <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, allows stored procedures to send custom result sets to the client.</span></span>  
  
 <span data-ttu-id="9811a-154"><xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Метод отправляет строку данных обратно клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-154">The <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method sends a single row of data back to the client.</span></span> <span data-ttu-id="9811a-155">Строками впоследствии могут быть возвращены вызывающему, вызвав <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, один раз для каждой строки, отправляемые.</span><span class="sxs-lookup"><span data-stu-id="9811a-155">Rows can subsequently be returned to the caller by calling <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, one time for each row being sent.</span></span> <span data-ttu-id="9811a-156">После все строки уже переданы, вызов <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод является обязательным для обозначения конца результирующего набора.</span><span class="sxs-lookup"><span data-stu-id="9811a-156">After all the rows have been sent, a call to the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method is required to mark the end of the result set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9811a-157">В следующем примере создается новый <xref:Microsoft.SqlServer.Server.SqlDataRecord> и его <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span><span class="sxs-lookup"><span data-stu-id="9811a-157">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="9811a-158">Пример затем отмечает начало результирующего набора с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> метод, отправляет записи, в которых данные в этом примере клиент, с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метод и метки в конце результирующего набора с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="9811a-158">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9811a-159">Значение параметра <paramref name="record" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-159">The <paramref name="record" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9811a-160">Перед этим не был вызван метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-160">The <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method was not previously called.</span></span></exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><span data-ttu-id="9811a-161">Объект <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />, из которого извлекаются метаданные, используемые для описания результирующего набора.</span><span class="sxs-lookup"><span data-stu-id="9811a-161">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> object from which metadata is extracted and used to describe the result set.</span></span></param>
        <summary><span data-ttu-id="9811a-162">Помечает начало результирующего набора, отправляемого клиенту, и использует указанную запись для конструирования метаданных, описывающих результирующий набор.</span><span class="sxs-lookup"><span data-stu-id="9811a-162">Marks the beginning of a result set to be sent back to the client, and uses the record parameter to construct the metadata that describes the result set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9811a-163">Управляемые хранимые процедуры могут отправлять результирующие наборы для клиентов, которые не реализуется <xref:System.Data.SqlClient.SqlDataReader>.</span><span class="sxs-lookup"><span data-stu-id="9811a-163">Managed stored procedures can send result sets to clients that are not implementing a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="9811a-164">Этот метод вместе с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, разрешить хранимым процедурам отправлять пользовательские результирующие наборы клиенту.</span><span class="sxs-lookup"><span data-stu-id="9811a-164">This method, along with <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, allow stored procedures to send custom result sets to the client.</span></span>  
  
 <span data-ttu-id="9811a-165"><xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> Метод помечает начало результирующего набора и использует указанную запись для конструирования метаданных, описывающих результирующий набор.</span><span class="sxs-lookup"><span data-stu-id="9811a-165">The <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method marks the beginning of a result set, and uses the record parameter to construct the metadata that describes the result set.</span></span> <span data-ttu-id="9811a-166">Все последующие строки, отправленные с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метода, должны соответствовать этому определению метаданных.</span><span class="sxs-lookup"><span data-stu-id="9811a-166">All the subsequent rows, sent using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, must match that metadata definition.</span></span>  
  
 <span data-ttu-id="9811a-167">Обратите внимание, что после вызов <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, только <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> может вызываться.</span><span class="sxs-lookup"><span data-stu-id="9811a-167">Note that after calling <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, only <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> and <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> can be called.</span></span> <span data-ttu-id="9811a-168">Любой другой метод в том же экземпляре <xref:Microsoft.SqlServer.Server.SqlPipe> вызывает <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="9811a-168">Any other method in the same instance of <xref:Microsoft.SqlServer.Server.SqlPipe> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="9811a-169"><xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> Задает <xref:Microsoft.SqlServer.Server.SqlPipe> исходное состояние, где можно вызывать другие методы.</span><span class="sxs-lookup"><span data-stu-id="9811a-169"><xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> sets <xref:Microsoft.SqlServer.Server.SqlPipe> back to the initial state where other methods can be called.</span></span>  
  
 <span data-ttu-id="9811a-170">После возврата управления в Transact-SQL из выполнение среды CLR, не пытайтесь использовать статические или локальные переменные, инициализированные в памяти CLR.</span><span class="sxs-lookup"><span data-stu-id="9811a-170">After control returns to Transact-SQL from CLR execution, do not attempt to use a static or local variable initialized to CLR memory.</span></span> <span data-ttu-id="9811a-171">Например, не следует хранить в экземпляре процесса класса, например `SQLDataRecord`, который будет использоваться после возврата управления средой CLR.</span><span class="sxs-lookup"><span data-stu-id="9811a-171">For example, do not store an instance of an in process class, for example `SQLDataRecord`, which will be used after control returns from CLR.</span></span> <span data-ttu-id="9811a-172">Единственным исключением является `SQLMetaData` в класс process.</span><span class="sxs-lookup"><span data-stu-id="9811a-172">One exception is the `SQLMetaData` in process class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9811a-173">В следующем примере создается новый <xref:Microsoft.SqlServer.Server.SqlDataRecord> и его <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span><span class="sxs-lookup"><span data-stu-id="9811a-173">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="9811a-174">Пример затем отмечает начало результирующего набора с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> метод, отправляет записи, в которых данные в этом примере клиент, с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метод и метки в конце результирующего набора с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="9811a-174">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9811a-175">Значение параметра <paramref name="record" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-175">The <paramref name="record" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9811a-176">Объект <paramref name="record" /> не содержит столбцов или не был инициализирован.</span><span class="sxs-lookup"><span data-stu-id="9811a-176">The <paramref name="record" /> has no columns or has not been initialized.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9811a-177">После вызова метода <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> был вызван метод, отличный от <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> и <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</span><span class="sxs-lookup"><span data-stu-id="9811a-177">A method other than <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> or <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> was called after the <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> method.</span></span></exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>