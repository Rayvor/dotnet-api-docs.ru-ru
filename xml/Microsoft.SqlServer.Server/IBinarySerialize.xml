<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef8c011695a45cf43197dda699d3ad988ba9a430" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69303757" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет настраиваемую реализацию для сериализации и десериализации пользовательских типов (UDT) и пользовательских агрегатных функций.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Определяемые пользователем типы (UDT) и определяемые пользователем статистические функции необходимы для определения формата хранения, который может быть либо <xref:Microsoft.SqlServer.Server.Format>.`Native` или <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` позволяет SQL Server автоматически выполнять сериализацию и десериализацию, но формат имеет ограничения на тип типов, которые он может выполнять. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` позволяет определяемым пользователем типам и статистическим выражениям обрабатывать собственную сериализацию. Определяемые пользователем типы и агрегаты должны быть помечены <xref:Microsoft.SqlServer.Server.Format>атрибутом.`UserDefined` в атрибуте `SqlUserDefinedAggregate` <xref:Microsoft.SqlServer.Server.IBinarySerialize> или должен реализовывать интерфейс. `SqlUserDefinedType`  
  
 Обратите внимание, что даже при пользовательской сериализации общий размер каждого экземпляра должен быть меньше максимального допустимого предела (в настоящее время 8000 байт).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">Поток <see cref="T:System.IO.BinaryReader" />, из которого выполняется десериализация объекта.</param>
        <summary>Генерирует пользовательский тип (UDT) или пользовательскую агрегатную функцию из соответствующей двоичной формы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод должен воспроизводить объект, используя сведения, записанные <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> методом. <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>  
  
   
  
## Examples  
 В следующем примере показана реализация <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> метода определяемого пользователем типа, который <xref:System.IO.BinaryReader> использует для отмены сериализации ранее сохраненного определяемого пользователем типа. В этом примере предполагается, что определяемый пользователем тип `StringValue` имеет `DoubleValue`два свойства данных: и.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">Поток <see cref="T:System.IO.BinaryWriter" />, в который выполняется сериализация пользовательского типа или пользовательской агрегатной функции.</param>
        <summary>Преобразует пользовательский тип или пользовательскую агрегатную функцию в двоичный формат для возможности сохранения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Напишите достаточно информации в двоичный поток, чтобы <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> метод воссоздать определяемый пользователем тип или статистическую функцию.  
  
   
  
## Examples  
 В приведенном ниже примере показана реализация <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> метода определяемого пользователем типа, который <xref:System.IO.BinaryWriter> использует для сериализации UDT в пользовательском двоичном формате. Заполнение символами NULL заключается в том, чтобы гарантировать, что строковое значение полностью отделяется от значения Double, чтобы один определяемый пользователем тип был по сравнению с другим в коде Transact-SQL, строковые байты сравнивались с байтами строк и Double в сравнении с Double. байт.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
