<Type Name="JsonConverterFactory" FullName="System.Text.Json.Serialization.JsonConverterFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abe8cec38d914eda5f3eaba08ae130c69cca4091" /><Meta Name="ms.sourcegitcommit" Value="0959d8d88abd48debd487e54e54df29d51634f7f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/02/2019" /><Meta Name="ms.locfileid" Value="68732051" /></Metadata><TypeSignature Language="C#" Value="public abstract class JsonConverterFactory : System.Text.Json.Serialization.JsonConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JsonConverterFactory extends System.Text.Json.Serialization.JsonConverter" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JsonConverterFactory&#xA;Inherits JsonConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonConverterFactory abstract : System::Text::Json::Serialization::JsonConverter" />
  <TypeSignature Language="F#" Value="type JsonConverterFactory = class&#xA;    inherit JsonConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="609b6-101">Поддерживает преобразование нескольких типов с помощью шаблона фабрики.</span><span class="sxs-lookup"><span data-stu-id="609b6-101">Supports converting several types by using a factory pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="609b6-102">Это полезно для преобразователей, поддерживающих универсальные шаблоны, такие как <xref:System.Collections.Generic.List`1>конвертер для.</span><span class="sxs-lookup"><span data-stu-id="609b6-102">This is useful for converters supporting generics, such as a converter for <xref:System.Collections.Generic.List`1>.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal JsonConverterFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; JsonConverterFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="609b6-103">Если переопределен в производном классе, инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</span><span class="sxs-lookup"><span data-stu-id="609b6-103">When overidden in a derived class, initializes a new instance of the <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConverter">
      <MemberSignature Language="C#" Value="protected abstract System.Text.Json.Serialization.JsonConverter CreateConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Text.Json.Serialization.JsonConverter CreateConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Text::Json::Serialization::JsonConverter ^ CreateConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="abstract member CreateConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonConverterFactory.CreateConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="609b6-104">Преобразуемый тип.</span><span class="sxs-lookup"><span data-stu-id="609b6-104">The type to convert.</span></span></param>
        <summary><span data-ttu-id="609b6-105">Создает преобразователь для указанного типа.</span><span class="sxs-lookup"><span data-stu-id="609b6-105">Creates a converter for a specified type.</span></span></summary>
        <returns><span data-ttu-id="609b6-106">Экземпляр <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />, где <typeparamref name="T" /> совместим с <paramref name="typeToConvert" />.</span><span class="sxs-lookup"><span data-stu-id="609b6-106">An instance of a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> where <typeparamref name="T" /> is compatible with <paramref name="typeToConvert" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
