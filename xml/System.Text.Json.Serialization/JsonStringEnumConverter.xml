<Type Name="JsonStringEnumConverter" FullName="System.Text.Json.Serialization.JsonStringEnumConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed5c6f219b18f3e9c1cb1ab71e045329939c1a22" /><Meta Name="ms.sourcegitcommit" Value="0959d8d88abd48debd487e54e54df29d51634f7f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/02/2019" /><Meta Name="ms.locfileid" Value="68732021" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonStringEnumConverter : System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonStringEnumConverter extends System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonStringEnumConverter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonStringEnumConverter&#xA;Inherits JsonConverterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonStringEnumConverter sealed : System::Text::Json::Serialization::JsonConverterFactory" />
  <TypeSignature Language="F#" Value="type JsonStringEnumConverter = class&#xA;    inherit JsonConverterFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverterFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5b607-101">Производит преобразования между значениями перечисления и строками.</span><span class="sxs-lookup"><span data-stu-id="5b607-101">Converts enumeration values to and from strings.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="5b607-102">При чтении регистр не учитывается.</span><span class="sxs-lookup"><span data-stu-id="5b607-102">Reading is case insensitive.</span></span> <span data-ttu-id="5b607-103">Запись может быть настроена с помощью <xref:System.Text.Json.JsonNamingPolicy>.</span><span class="sxs-lookup"><span data-stu-id="5b607-103">Writing can be customized by using a <xref:System.Text.Json.JsonNamingPolicy>.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonStringEnumConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b607-104">Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> политикой именования по умолчанию, допускающей целые числа.</span><span class="sxs-lookup"><span data-stu-id="5b607-104">Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with the default naming policy that allows integer values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter (System.Text.Json.JsonNamingPolicy namingPolicy = null, bool allowIntegerValues = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Json.JsonNamingPolicy namingPolicy, bool allowIntegerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional namingPolicy As JsonNamingPolicy = null, Optional allowIntegerValues As Boolean = true)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Serialization.JsonStringEnumConverter : System.Text.Json.JsonNamingPolicy * bool -&gt; System.Text.Json.Serialization.JsonStringEnumConverter" Usage="new System.Text.Json.Serialization.JsonStringEnumConverter (namingPolicy, allowIntegerValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="namingPolicy" Type="System.Text.Json.JsonNamingPolicy" />
        <Parameter Name="allowIntegerValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="namingPolicy"><span data-ttu-id="5b607-105">Необязательная политика именования для записи значений перечисления.</span><span class="sxs-lookup"><span data-stu-id="5b607-105">The optional naming policy for writing enum values.</span></span></param>
        <param name="allowIntegerValues"><span data-ttu-id="5b607-106">Значение <see langword="true" />, чтобы разрешить неопределенные значения перечисления; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5b607-106"><see langword="true" /> to allow undefined enum values; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5b607-107">Если задано <see langword="true" /> и значение перечисления не определено, оно выводится как число, а не как строка.</span><span class="sxs-lookup"><span data-stu-id="5b607-107">When <see langword="true" />, if an enum value isn't defined, it will output as a number rather than a string.</span></span></param>
        <summary><span data-ttu-id="5b607-108">Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> с указанной политикой именования и значением, указывающим, разрешены ли неопределенные значения перечисления.</span><span class="sxs-lookup"><span data-stu-id="5b607-108">Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonStringEnumConverter.CanConvert typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="5b607-109">Проверяемый тип.</span><span class="sxs-lookup"><span data-stu-id="5b607-109">The type to be checked.</span></span></param>
        <summary><span data-ttu-id="5b607-110">Определяет, можно ли преобразовать указанный тип в перечисление.</span><span class="sxs-lookup"><span data-stu-id="5b607-110">Determines whether the specified type can be converted to an enum.</span></span></summary>
        <returns><span data-ttu-id="5b607-111">Значение <see langword="true" />, если тип может быть преобразован; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5b607-111"><see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConverter">
      <MemberSignature Language="C#" Value="protected override System.Text.Json.Serialization.JsonConverter CreateConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Text.Json.Serialization.JsonConverter CreateConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Text::Json::Serialization::JsonConverter ^ CreateConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CreateConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonStringEnumConverter.CreateConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="5b607-112">Преобразуемый тип.</span><span class="sxs-lookup"><span data-stu-id="5b607-112">The type to convert.</span></span></param>
        <summary><span data-ttu-id="5b607-113">Создает преобразователь для указанного типа.</span><span class="sxs-lookup"><span data-stu-id="5b607-113">Create a converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="5b607-114">Экземпляр <see cref="T:System.Text.Json.Serialization.JsonConverter" /> типа T, где T совместим с <paramref name="typeToConvert" />.</span><span class="sxs-lookup"><span data-stu-id="5b607-114">An instance of <see cref="T:System.Text.Json.Serialization.JsonConverter" /> of type T, where T is compatible with <paramref name="typeToConvert" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
