<Type Name="JsonStringEnumConverter" FullName="System.Text.Json.Serialization.JsonStringEnumConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc12b7c6518568fb31979baeee9bde8bcda9b0ed" /><Meta Name="ms.sourcegitcommit" Value="394eb46af92ad32373cd2c7855b688846886ed40" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/23/2019" /><Meta Name="ms.locfileid" Value="74425742" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonStringEnumConverter : System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonStringEnumConverter extends System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonStringEnumConverter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonStringEnumConverter&#xA;Inherits JsonConverterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonStringEnumConverter sealed : System::Text::Json::Serialization::JsonConverterFactory" />
  <TypeSignature Language="F#" Value="type JsonStringEnumConverter = class&#xA;    inherit JsonConverterFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverterFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Производит преобразования между значениями перечисления и строками.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

При чтении регистр не учитывается. Запись можно настроить с помощью <xref:System.Text.Json.JsonNamingPolicy>.

Дополнительные сведения см. [в разделе Сериализация и десериализация JSON](~/docs/standard/serialization/system-text-json-how-to.md#enums-as-strings).

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonStringEnumConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> политикой именования по умолчанию, допускающей целые числа.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter (System.Text.Json.JsonNamingPolicy namingPolicy = null, bool allowIntegerValues = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Json.JsonNamingPolicy namingPolicy, bool allowIntegerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional namingPolicy As JsonNamingPolicy = null, Optional allowIntegerValues As Boolean = true)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Serialization.JsonStringEnumConverter : System.Text.Json.JsonNamingPolicy * bool -&gt; System.Text.Json.Serialization.JsonStringEnumConverter" Usage="new System.Text.Json.Serialization.JsonStringEnumConverter (namingPolicy, allowIntegerValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="namingPolicy" Type="System.Text.Json.JsonNamingPolicy" />
        <Parameter Name="allowIntegerValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="namingPolicy">Необязательная политика именования для записи значений перечисления.</param>
        <param name="allowIntegerValues">Значение <see langword="true" />, чтобы разрешить неопределенные значения перечисления; в противном случае — <see langword="false" />. Если задано <see langword="true" /> и значение перечисления не определено, оно выводится как число, а не как строка.</param>
        <summary>Инициализирует экземпляр класса <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> с указанной политикой именования и значением, указывающим, разрешены ли неопределенные значения перечисления.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonStringEnumConverter.CanConvert typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert">Проверяемый тип.</param>
        <summary>Определяет, можно ли преобразовать указанный тип в перечисление.</summary>
        <returns>Значение <see langword="true" />, если тип может быть преобразован; в противном случае — <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConverter">
      <MemberSignature Language="C#" Value="public override System.Text.Json.Serialization.JsonConverter CreateConverter (Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Json.Serialization.JsonConverter CreateConverter(class System.Type typeToConvert, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateConverter (typeToConvert As Type, options As JsonSerializerOptions) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Json::Serialization::JsonConverter ^ CreateConverter(Type ^ typeToConvert, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="override this.CreateConverter : Type * System.Text.Json.JsonSerializerOptions -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonStringEnumConverter.CreateConverter (typeToConvert, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="typeToConvert">Тип, обрабатываемый преобразователем.</param>
        <param name="options">Используемые параметры сериализации.</param>
        <summary>Создает преобразователь для указанного типа.</summary>
        <returns>Преобразователь, для которого <typeparamref name="T" /> совместим с <paramref name="typeToConvert" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
