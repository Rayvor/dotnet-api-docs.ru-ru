<Type Name="Pen" FullName="System.Drawing.Pen">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf79804a07f06ec061565db081d05d0f22bc83ae" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70613476" /></Metadata><TypeSignature Language="C#" Value="public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pen extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Pen" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pen&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pen sealed : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type Pen = class&#xA;    inherit MarshalByRefObject&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Определяет объект, используемый для рисования прямых линий и кривых. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Pen> Рисует линию указанной ширины и стиля. <xref:System.Drawing.Drawing2D.DashStyle> Используйте свойство, чтобы нарисовать несколько штрихов пунктирных линий. Линия, нарисованная <xref:System.Drawing.Pen> , может быть заполнена различными стилями заливки, включая сплошные цвета и текстуры. Стиль заливки зависит от кисти или текстуры, используемой в качестве объекта заливки.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание объекта <xref:System.Drawing.Pen> <xref:System.Drawing.Pen.Brush%2A> с помощью и влияние <xref:System.Drawing.Pen>задания <xref:System.Drawing.Pen.LineJoin%2A> свойства на.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowLineJoin` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.Pen" /> указанным цветом.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Brush -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen brush" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий свойства заполнения объекта <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.Pen" /> указанным значением <see cref="T:System.Drawing.Brush" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство определяет, <xref:System.Drawing.Pen> как рисуются линии. <xref:System.Drawing.Pen.Brush%2A> Линии рисуются так, как если бы они были заполнены прямоугольниками, с характеристиками указанного <xref:System.Drawing.Brush>объекта.  
  
 Свойству нового <xref:System.Drawing.Pen> присваивается значение 1 (по умолчанию). <xref:System.Drawing.Pen.Width%2A>  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание объекта <xref:System.Drawing.Pen> <xref:System.Drawing.Pen.Brush%2A> с помощью и влияние <xref:System.Drawing.Pen>задания <xref:System.Drawing.Pen.LineJoin%2A> свойства на.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowLineJoin` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Color -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen color" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Структура <see cref="T:System.Drawing.Color" />, показывающая цвет объекта <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.Pen" /> указанным цветом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для свойства задается цвет, заданный `color` параметром. <xref:System.Drawing.Color> <xref:System.Drawing.Pen.Width%2A> Свойство имеет значение 1 (по умолчанию).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush, float width);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Brush * single -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen (brush, width)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий характеристики данного объекта <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">Ширина нового пера <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.Pen" /> с заданными свойствами <see cref="T:System.Drawing.Brush" /> и <see cref="P:System.Drawing.Pen.Width" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Pen.Width%2A> `brush` <xref:System.Drawing.GraphicsUnit.World> `width` Задается цвет, указанный в параметре, для свойства задается значение, указанное в параметре, а для единиц устанавливаются значения. <xref:System.Drawing.Brush>  
  
 Обратите внимание `brush` , что параметр также <xref:System.Drawing.Color> задает свойство этого <xref:System.Drawing.Pen>объекта.  
  
 Значение `width` 0 приведет к тому <xref:System.Drawing.Pen> , что рисунок будет иметь значение, равное 1.  
  
   
  
## Examples  
 В <xref:System.Drawing.Pen> следующем примере кода создается и демонстрируется влияние <xref:System.Drawing.Pen.StartCap%2A> задания свойств и <xref:System.Drawing.Pen.EndCap%2A> на <xref:System.Drawing.Pen>.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowStartAndEndCaps` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.ImageExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ImageExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ImageExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color, float width);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Color * single -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen (color, width)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="color">Структура <see cref="T:System.Drawing.Color" />, показывающая цвет объекта <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">Значение, показывающее ширину объекта <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Drawing.Pen" /> указанными свойствами <see cref="T:System.Drawing.Color" /> и <see cref="P:System.Drawing.Pen.Width" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для свойства задается цвет, заданный `color` параметром. <xref:System.Drawing.Color> Для свойства задается значение, указанное `width` в параметре. <xref:System.Drawing.Pen.Width%2A> Значение `width` 0 приведет к тому <xref:System.Drawing.Pen> , что рисунок будет иметь значение, равное 1.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание <xref:System.Drawing.Pen> и влияние <xref:System.Drawing.Pen.DashCap%2A>задания свойств, <xref:System.Drawing.Pen.DashPattern%2A>и <xref:System.Drawing.Graphics.SmoothingMode%2A> .  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowPensAndSmoothingMode` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав e как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As PenAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenAlignment Alignment { System::Drawing::Drawing2D::PenAlignment get(); void set(System::Drawing::Drawing2D::PenAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.Alignment : System.Drawing.Drawing2D.PenAlignment with get, set" Usage="System.Drawing.Pen.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает выравнивание для объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Структура <see cref="T:System.Drawing.Drawing2D.PenAlignment" />, представляющая выравнивание для объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство определяет, <xref:System.Drawing.Pen> как рисует замкнутые кривые и многоугольники. Перечисление определяет пять значений, но только два значения — <xref:System.Drawing.Drawing2D.PenAlignment.Center> и <xref:System.Drawing.Drawing2D.PenAlignment.Inset> — изменит внешний вид рисуемой линии. <xref:System.Drawing.Drawing2D.PenAlignment> <xref:System.Drawing.Drawing2D.PenAlignment.Center>значение по умолчанию для этого свойства и указывает, что ширина пера выравнивается по контуру кривой или многоугольника. Значение <xref:System.Drawing.Drawing2D.PenAlignment.Inset> для этого свойства указывает, что ширина пера находится внутри контура кривой или многоугольника. Другие три значения, <xref:System.Drawing.Drawing2D.PenAlignment.Right> <xref:System.Drawing.Drawing2D.PenAlignment.Left>, и <xref:System.Drawing.Drawing2D.PenAlignment.Outset>, приведут к тому, что перо будет центрировано.  
  
 Объект <xref:System.Drawing.Pen> , для <xref:System.Drawing.Drawing2D.PenAlignment.Inset> которого задано выравнивание, будет давать ненадежные результаты, иногда нарисованный в положении вставки и иногда в центре. Кроме того, это дополнительное перо нельзя использовать для рисования составных линий и не может рисовать пунктирные <xref:System.Drawing.Drawing2D.DashCap.Triangle> линии с пунктирными наконечниками.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Заданное значение отсутствует в перечислении <see cref="T:System.Drawing.Drawing2D.PenAlignment" />.</exception>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.Alignment" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Brush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush Brush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Brush Brush" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Brush" />
      <MemberSignature Language="VB.NET" Value="Public Property Brush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Brush ^ Brush { System::Drawing::Brush ^ get(); void set(System::Drawing::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Brush : System.Drawing.Brush with get, set" Usage="System.Drawing.Pen.Brush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект <see cref="T:System.Drawing.Brush" />, определяющий атрибуты объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Объект <see cref="T:System.Drawing.Brush" />, определяющий атрибуты объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Назначение этого свойства заставляет перо рисовать заполненные линии и кривые. Он переопределяет <xref:System.Drawing.Color> свойство <xref:System.Drawing.Pen>объекта.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.Brush" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="pen.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает точную копию данного объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <returns>Объект <see cref="T:System.Object" />, который может быть приведен к объекту <see cref="T:System.Drawing.Pen" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Создает копию этого пера.  
  
-   Рисует линию на экране с помощью копии пера.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicPenExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Drawing.Pen.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает цвет объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Структура <see cref="T:System.Drawing.Color" />, представляющая цвет объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.Color" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompoundArray">
      <MemberSignature Language="C#" Value="public float[] CompoundArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] CompoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CompoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Property CompoundArray As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ CompoundArray { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompoundArray : single[] with get, set" Usage="System.Drawing.Pen.CompoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает массив значений, определяющий составное перо. Составное перо рисует составную линию, состоящую из параллельных линий и разделяющих их промежутков.</summary>
        <value>Массив действительных чисел, задающий составной массив. Элементы массива должны быть числами от 0 до 1, расположенными в порядке возрастания.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Составная линия состоит из чередующихся параллельных линий и пробелов с различной шириной. Значения в массиве задают начальные точки каждого компонента составной линии относительно ширины пера. Первое значение в массиве указывает, где первый компонент (линия) начинается в виде доли расстояния по ширине пера. Второе значение в массиве указывает начало следующего компонента (пробела) в виде доли расстояния от ширины пера. Конечное значение в массиве указывает, где заканчивается последний компонент.  
  
 Предположим, вы хотите, чтобы перо нарисовано две параллельные линии, ширина первой строки которой составляет 20 процентов от ширины пера, ширина пространства, разделяющего две строки, составляет 50 процентов от ширины пера, а ширина второй строки — 30% от пера Ширина. Начните с создания <xref:System.Drawing.Pen> и массива вещественных чисел. Задайте составной массив, передав этому свойству массив со значениями 0,0, 0,2, 0,7 и 1,0.  
  
 Не устанавливайте это свойство, <xref:System.Drawing.Pen> если <xref:System.Drawing.Pen.Alignment%2A> свойство имеет значение <xref:System.Drawing.Drawing2D.PenAlignment.Inset>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.CompoundArray" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomEndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomEndCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomEndCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomEndCap : System.Drawing.Drawing2D.CustomLineCap with get, set" Usage="System.Drawing.Pen.CustomEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает настраиваемое окончание линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Объект <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />, представляющий окончание линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.CustomEndCap" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomStartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomStartCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomStartCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomStartCap : System.Drawing.Drawing2D.CustomLineCap with get, set" Usage="System.Drawing.Pen.CustomStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает настраиваемое начало линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Объект <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />, представляющий начало линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.CustomStartCap" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashCap DashCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashCap DashCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashCap" />
      <MemberSignature Language="VB.NET" Value="Public Property DashCap As DashCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashCap DashCap { System::Drawing::Drawing2D::DashCap get(); void set(System::Drawing::Drawing2D::DashCap value); };" />
      <MemberSignature Language="F#" Value="member this.DashCap : System.Drawing.Drawing2D.DashCap with get, set" Usage="System.Drawing.Pen.DashCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает стиль окончания пунктиров, ограничивающих пунктирные линии, нарисованные при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Одно из значений <see cref="T:System.Drawing.Drawing2D.DashCap" />, представляющих стиль завершения, используемого в начале и конце штрихов, которые составляют пунктирные линии, рисуемые с помощью пера <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не устанавливайте для <xref:System.Drawing.Drawing2D.DashCap.Triangle> этого свойства значение, <xref:System.Drawing.Pen> если <xref:System.Drawing.Pen.Alignment%2A> свойство <xref:System.Drawing.Drawing2D.PenAlignment.Inset>имеет значение.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание <xref:System.Drawing.Pen> и влияние <xref:System.Drawing.Pen.DashCap%2A>задания свойств, <xref:System.Drawing.Pen.DashPattern%2A>и <xref:System.Drawing.Graphics.SmoothingMode%2A> .  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowPensAndSmoothingMode` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Заданное значение отсутствует в перечислении <see cref="T:System.Drawing.Drawing2D.DashCap" />.</exception>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.DashCap" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashOffset">
      <MemberSignature Language="C#" Value="public float DashOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DashOffset" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property DashOffset As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DashOffset { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.DashOffset : single with get, set" Usage="System.Drawing.Pen.DashOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает расстояние от начала линии до начала штрихового шаблона.</summary>
        <value>Расстояние от начала линии до начала штрихового шаблона.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.DashOffset" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashPattern">
      <MemberSignature Language="C#" Value="public float[] DashPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] DashPattern" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property DashPattern As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ DashPattern { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DashPattern : single[] with get, set" Usage="System.Drawing.Pen.DashPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает массив настраиваемых штрихов и промежутков.</summary>
        <value>Массив действительных чисел, задающий длины сменяющих друг друга штрихов и промежутков в пунктирных линиях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Присвоение значения `null` , отличного от, <xref:System.Drawing.Drawing2D.DashStyle> задает для свойства <xref:System.Drawing.Pen> <xref:System.Drawing.Drawing2D.DashStyle.Custom>значение.  
  
 Элементы `dashArray` массива задают длину каждого тире и пробела в шаблоне штриха. Первый элемент задает длину тире, второй элемент задает длину пробела, третий элемент задает длину тире и т. д. Следовательно, каждый элемент должен быть положительным числом, отличным от нуля.  
  
 Длина каждого тире и пробела в шаблоне штриха — это произведение значения элемента в массиве и ширины объекта <xref:System.Drawing.Pen>.  
  
   
  
## Examples  
 В следующем примере кода показаны последствия установки <xref:System.Drawing.Pen.DashCap%2A>свойств, <xref:System.Drawing.Pen.DashPattern%2A>и <xref:System.Drawing.Graphics.SmoothingMode%2A> .  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowPensAndSmoothingMode` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.DashPattern" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashStyle">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashStyle DashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashStyle DashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property DashStyle As DashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashStyle DashStyle { System::Drawing::Drawing2D::DashStyle get(); void set(System::Drawing::Drawing2D::DashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.DashStyle : System.Drawing.Drawing2D.DashStyle with get, set" Usage="System.Drawing.Pen.DashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает стиль, используемый для пунктирных линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Перечисление <see cref="T:System.Drawing.Drawing2D.DashStyle" />, представляющее стиль, используемый для пунктирных линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.Drawing.Drawing2D.DashStyle.Custom> для этого свойства указывает, что пользовательский шаблон дефисов и пробелов, определяемый <xref:System.Drawing.Pen.DashPattern%2A> свойством, делает строки, нарисованные с <xref:System.Drawing.Pen>помощью этого свойства. Если значение этого свойства равно <xref:System.Drawing.Drawing2D.DashStyle.Custom> , а значение <xref:System.Drawing.Pen.DashPattern%2A> свойства равно `null`, то перо рисует сплошные линии.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.DashStyle" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pen.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые этим объектом <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Drawing.Pen.Dispose%2A> позволяет перераспределить ресурсы, используемые <xref:System.Drawing.Brush> этим объектом, для других целей.  
  
 Вызовите метод <xref:System.Drawing.Pen.Dispose%2A> по окончании использования класса <xref:System.Drawing.Pen>. Метод <xref:System.Drawing.Pen.Dispose%2A> оставляет класс <xref:System.Drawing.Pen> в непригодном для использования состоянии. После вызова <xref:System.Drawing.Pen.Dispose%2A>необходимо освободить все ссылки <xref:System.Drawing.Pen> на, чтобы сборщик мусора мог освободить память, которую <xref:System.Drawing.Pen> занимают. Дополнительные сведения см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Всегда вызывайте метод <xref:System.Drawing.Pen.Dispose%2A> перед освобождением последней ссылки на класс <xref:System.Drawing.Pen>. В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Drawing.Pen> метод `Finalize`.  
  
   
  
## Examples  
 В следующем примере кода <xref:System.Drawing.Pen.Width%2A> показаны последствия установки свойств и <xref:System.Drawing.Pen.LineJoin%2A> , а также <xref:System.Drawing.Pen.Dispose%2A> показано, как <xref:System.Drawing.Pen>вызвать метод для.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowLineJoin` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap EndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap EndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.EndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property EndCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap EndCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberSignature Language="F#" Value="member this.EndCap : System.Drawing.Drawing2D.LineCap with get, set" Usage="System.Drawing.Pen.EndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает стиль завершения линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Одно из значений <see cref="T:System.Drawing.Drawing2D.LineCap" />, представляющих стиль завершения, который используется на концах линий, рисуемых с помощью пера <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется влияние задания <xref:System.Drawing.Pen.StartCap%2A> свойств и <xref:System.Drawing.Pen.EndCap%2A> на <xref:System.Drawing.Pen>.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowStartAndEndCaps` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Заданное значение отсутствует в перечислении <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.EndCap" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Pen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Pen ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="pen.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineJoin">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineJoin LineJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineJoin LineJoin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.LineJoin" />
      <MemberSignature Language="VB.NET" Value="Public Property LineJoin As LineJoin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineJoin LineJoin { System::Drawing::Drawing2D::LineJoin get(); void set(System::Drawing::Drawing2D::LineJoin value); };" />
      <MemberSignature Language="F#" Value="member this.LineJoin : System.Drawing.Drawing2D.LineJoin with get, set" Usage="System.Drawing.Pen.LineJoin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает общий стиль окончаний для двух последовательных линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Перечисление <see cref="T:System.Drawing.Drawing2D.LineJoin" />, представляющее объединенный стиль завершений для двух последовательных линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Соединение строк — это общая область, сформированная двумя строками, конец которых соответствует или перекрывается. Существует три стиля соединения линий: срез, скос и круглый.  При указании стиля соединения линий для <xref:System.Drawing.Pen> объекта этот стиль соединения будет применен ко всем подключенным линиям в любом <xref:System.Drawing.Drawing2D.GraphicsPath> объекте, рисуемом с помощью этого пера. На следующем рисунке показаны результаты примера объединения с багетной линией.  
  
 ![Перья] (~/add/media/pens5.gif "Перья")  
  
   
  
## Examples  
 В следующем примере кода демонстрируется влияние задания <xref:System.Drawing.Pen.Width%2A> свойств и <xref:System.Drawing.Pen.LineJoin%2A> на <xref:System.Drawing.Pen>.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowLineJoin` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs> .  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.LineJoin" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MiterLimit">
      <MemberSignature Language="C#" Value="public float MiterLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MiterLimit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.MiterLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property MiterLimit As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float MiterLimit { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.MiterLimit : single with get, set" Usage="System.Drawing.Pen.MiterLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает ограничение толщины соединения скошенных углов.</summary>
        <value>Ограничение толщины соединения скошенных углов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Длина среза — это расстояние от пересечения линий стен внутри соединения с пересечением линий, расположенных за пределами соединения. Длина среза может быть большой, если угол между двумя линиями мал. Предел среза — это максимально допустимое соотношение длины среза к ширине штриха. Значение по умолчанию — 10.0 f.  
  
 Если длина среза соединения пересечения превышает предельное значение соединения, то соединение будет заключено в пределы соединения пересечения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.MiterLimit" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Умножает матрицу преобразования объекта <see cref="T:System.Drawing.Pen" /> на заданный объект <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="pen.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">Объект <see cref="T:System.Drawing.Drawing2D.Matrix" />, на который умножается матрица преобразования.</param>
        <summary>Умножает матрицу преобразования объекта <see cref="T:System.Drawing.Pen" /> на заданный объект <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод добавляет матрицу умножения, указанную в `matrix` параметре, к матрице преобразования для операции умножения.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Рисует линию на экране.  
  
-   Умножает матрицу преобразования пера на указанную матрицу.  
  
-   Рисует линию с преобразованным пером.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicPenExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">Объект <see cref="T:System.Drawing.Drawing2D.Matrix" />, на который умножается матрица преобразования.</param>
        <param name="order">Порядок, в котором производится операция умножения.</param>
        <summary>Умножает матрицу преобразования объекта <see cref="T:System.Drawing.Pen" /> на заданный объект <see cref="T:System.Drawing.Drawing2D.Matrix" /> в заданном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод использует <xref:System.Drawing.Drawing2D.MatrixOrder> элемент перечисления (в начале или в конце), заданный `order` параметром для выполнения операции умножения.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Рисует линию на экране.  
  
-   Умножает матрицу преобразования пера на указанную матрицу.  
  
-   Рисует линию с преобразованным пером.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicPenExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PenType">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenType PenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenType PenType" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.PenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PenType As PenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenType PenType { System::Drawing::Drawing2D::PenType get(); };" />
      <MemberSignature Language="F#" Value="member this.PenType : System.Drawing.Drawing2D.PenType" Usage="System.Drawing.Pen.PenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает стиль линий, нарисованных с помощью объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Перечисление <see cref="T:System.Drawing.Drawing2D.PenType" />, задающее стиль линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Может нарисовать сплошные линии, закрашенные линии или текстурные линии в зависимости от стиля, заданного элементом <xref:System.Drawing.Drawing2D.PenType> перечисления. <xref:System.Drawing.Pen>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="pen.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает матрице геометрического преобразования объекта <see cref="T:System.Drawing.Pen" /> единичное значение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Задает матрицу преобразования пера для масштабирования в два раза в направлении оси x.  
  
-   Рисует линию на экране.  
  
-   Сбрасывает матрицу преобразования в значение Identity.  
  
-   Рисует на экране вторую строку.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicPenExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Поворачивает локальное геометрическое преобразование на заданный угол. Этот метод добавляет поворот перед преобразованием.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="pen.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Угол поворота.</param>
        <summary>Поворачивает локальное геометрическое преобразование на заданный угол. Этот метод добавляет поворот перед преобразованием.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как форма пера является циклической, поворот не имеет видимого воздействия, если перо не масштабируется в направлении оси x или y.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Рисование прямоугольника с помощью пера.  
  
-   Масштабирует перо на два раза в направлении оси x.  
  
-   Поворачивает перо 90 градусов по часовой стрелке.  
  
-   Рисует второй прямоугольник для демонстрации разницы.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicPenExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Угол поворота.</param>
        <param name="order">Объект <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, указывающий, где будет добавляться матрица поворота: в начале или в конце.</param>
        <summary>Поворачивает локальное геометрическое преобразование на заданный угол в заданном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как форма пера является циклической, поворот не имеет видимого воздействия, если перо не масштабируется в направлении оси x или y.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Масштабирует перо на два раза в направлении оси x.  
  
-   Рисование прямоугольника с помощью пера.  
  
-   Поворачивает перо 90 градусов по часовой стрелке.  
  
-   Рисует второй прямоугольник для демонстрации разницы.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicPenExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет изменение масштаба локального геометрического преобразования при помощи заданных коэффициентов. Этот метод вставляет изменение масштаба перед преобразованием.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="pen.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Коэффициент изменения масштаба по оси Х.</param>
        <param name="sy">Коэффициент изменения масштаба по оси Y.</param>
        <summary>Выполняет изменение масштаба локального геометрического преобразования при помощи заданных коэффициентов. Этот метод вставляет изменение масштаба перед преобразованием.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
 Создает объект <xref:System.Drawing.Pen>.  
  
 Рисование прямоугольника с помощью пера.  
  
 Масштабирует перо на два раза в направлении оси x.  
  
 Рисует второй прямоугольник для демонстрации разницы.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicPenExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Коэффициент изменения масштаба по оси Х.</param>
        <param name="sy">Коэффициент изменения масштаба по оси Y.</param>
        <param name="order">Объект <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, указывающий, где добавляется матрица масштабирования: в начале или в конце.</param>
        <summary>Изменяет масштаб локального геометрического преобразования при помощи заданных коэффициентов в заданном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Pen>.  
  
-   Рисование прямоугольника с помощью пера.  
  
-   Масштабирует перо на два раза в направлении оси x.  
  
-   Рисует второй прямоугольник для демонстрации разницы.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicPenExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineCap">
      <MemberSignature Language="C#" Value="public void SetLineCap (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineCap(valuetype System.Drawing.Drawing2D.LineCap startCap, valuetype System.Drawing.Drawing2D.LineCap endCap, valuetype System.Drawing.Drawing2D.DashCap dashCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLineCap(System::Drawing::Drawing2D::LineCap startCap, System::Drawing::Drawing2D::LineCap endCap, System::Drawing::Drawing2D::DashCap dashCap);" />
      <MemberSignature Language="F#" Value="member this.SetLineCap : System.Drawing.Drawing2D.LineCap * System.Drawing.Drawing2D.LineCap * System.Drawing.Drawing2D.DashCap -&gt; unit" Usage="pen.SetLineCap (startCap, endCap, dashCap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="dashCap" Type="System.Drawing.Drawing2D.DashCap" />
      </Parameters>
      <Docs>
        <param name="startCap">Объект <see cref="T:System.Drawing.Drawing2D.LineCap" />, представляющий стиль завершения, используемый в начале линий, рисуемых при помощи объекта <see cref="T:System.Drawing.Pen" />.</param>
        <param name="endCap">Объект <see cref="T:System.Drawing.Drawing2D.LineCap" />, представляющий стиль окончаний линий, рисуемых при помощи объекта <see cref="T:System.Drawing.Pen" />.</param>
        <param name="dashCap">Объект <see cref="T:System.Drawing.Drawing2D.LineCap" />, представляющий стиль оконечного элемента, используемого в начале или конце пунктирных линий, рисуемых при помощи этого пера <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Устанавливает значения, определяющие стиль завершения, используемый в конце линий, нарисованных при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код создает <xref:System.Drawing.Pen> и настраивает его для нарисованного маркера привязки с наконечником в начале строк:  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicPenExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap StartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap StartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.StartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property StartCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap StartCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberSignature Language="F#" Value="member this.StartCap : System.Drawing.Drawing2D.LineCap with get, set" Usage="System.Drawing.Pen.StartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает стиль завершения, используемый в начале линий, рисуемых при помощи объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Одно из значений <see cref="T:System.Drawing.Drawing2D.LineCap" />, представляющих стиль завершения, используемый в начале линий, которые рисуются с помощью этого пера <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется влияние задания <xref:System.Drawing.Pen.StartCap%2A> свойств и <xref:System.Drawing.Pen.EndCap%2A> на <xref:System.Drawing.Pen>.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowStartAndEndCaps` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Заданное значение отсутствует в перечислении <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.StartCap" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Pen.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает копию геометрического преобразования объекта <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Копия матрицы <see cref="T:System.Drawing.Drawing2D.Matrix" />, которая представляет геометрическое преобразование объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство определяет эллиптическую форму для кончика пера. Этот эллипс получается из круглой фигуры по умолчанию путем применения матрицы преобразования. Обратите внимание, что часть перевода матрицы не учитывается. Так как матрица, возвращаемая <xref:System.Drawing.Pen.Transform%2A> и свойством, является копией геометрического преобразования пера, следует удалить матрицу, если она больше не нужна.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.Transform" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет перевод локального геометрического преобразования на заданные размеры. Этот метод вставляет перевод перед преобразованием.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="pen.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Значение сдвига по оси X.</param>
        <param name="dy">Значение сдвига по оси Y.</param>
        <summary>Выполняет перевод локального геометрического преобразования на заданные размеры. Этот метод вставляет перевод перед преобразованием.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Значение сдвига по оси X.</param>
        <param name="dy">Значение сдвига по оси Y.</param>
        <param name="order">Порядок применения преобразования (в начале или в конце).</param>
        <summary>Выполняет перевод локального геометрического преобразования на заданные размеры в заданном порядке.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public float Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Width { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Width : single with get, set" Usage="System.Drawing.Pen.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или устанавливает ширину пера <see cref="T:System.Drawing.Pen" />, в единицах объекта <see cref="T:System.Drawing.Graphics" />, используемого для рисования.</summary>
        <value>Ширина объекта <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно получить доступ к единице измерения <xref:System.Drawing.Graphics> объекта, используя его <xref:System.Drawing.Graphics.PageUnit%2A> свойство. Единицей измерения обычно являются пиксели. Значение <xref:System.Drawing.Pen.Width%2A> 0 приведет к тому, что <xref:System.Drawing.Pen> <xref:System.Drawing.Pen.Width%2A> Рисование будет равно 1.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется влияние задания <xref:System.Drawing.Pen.Width%2A> свойств и <xref:System.Drawing.Pen.LineJoin%2A> на <xref:System.Drawing.Pen>.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowLineJoin` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Drawing.Pen.Width" /> устанавливается для неизменного объекта <see cref="T:System.Drawing.Pen" />, например такого, какие возвращаются классом <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
