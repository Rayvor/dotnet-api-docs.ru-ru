<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="626205fd4abe46be508bde925786572574530190" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75134952" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет графический буфер для двойной буферизации.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.Drawing.BufferedGraphics> позволяет реализовать пользовательскую двойную буферизацию для графики. Он предоставляет оболочку для графического буфера, а также методы, которые можно использовать для записи в буфер и отрисовки его содержимого на выходном устройстве.  
  
 Графические объекты, использующие двойную буферизацию, могут уменьшить или устранить мерцание, вызванное перерисовкой отображаемой поверхности. При использовании двойной буферизации обновленная графика сначала рисуется в буфере в памяти, а содержимое этого буфера быстро записывается на некоторые или все отображаемые поверхности. Это относительно короткая перезапись отображаемой графики обычно сокращает или устраняет мерцание, которое иногда возникает при обновлении графики.  
  
> [!NOTE]
>  Самый простой способ использовать двойную буферизацию — установить флаг стиля элемента управления <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> для элемента управления с помощью метода <xref:System.Windows.Forms.Control.SetStyle%2A>. Установка флага <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> для элемента управления перенаправляет все прорисовки элемента управления через графический буфер по умолчанию, не требуя дополнительного кода. По умолчанию этот флаг имеет значение `true`.  
  
 Класс <xref:System.Drawing.BufferedGraphics> не имеет открытого конструктора и должен быть создан <xref:System.Drawing.BufferedGraphicsContext> для домена приложения с помощью метода <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>. <xref:System.Drawing.BufferedGraphicsContext> для текущего домена приложения можно получить из статического свойства <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>.  
  
 Свойство <xref:System.Drawing.BufferedGraphics.Graphics%2A> может использоваться для рисования в графическом буфере. Это свойство предоставляет доступ к объекту <xref:System.Drawing.Graphics>, который рисует графический буфер, выделенный для данного объекта <xref:System.Drawing.BufferedGraphics>.  
  
 Метод <xref:System.Drawing.BufferedGraphics.Render%2A> без аргументов рисует содержимое графического буфера на поверхность, указанную при выделении буфера. Другие перегрузки метода <xref:System.Drawing.BufferedGraphics.Render%2A> позволяют указать <xref:System.Drawing.Graphics> объект или объект <xref:System.IntPtr>, указывающий на контекст устройства, в который будет нарисовано содержимое графического буфера.  
  
 Дополнительные сведения о рисовании графических объектов с двойной буферизацией см. в разделе [Двойная буферизация графики](~/docs/framework/winforms/advanced/double-buffered-graphics.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование объекта <xref:System.Drawing.BufferedGraphics> для рисования графики с помощью нескольких типов реализаций буферизации. При выборе формы также запускается и останавливается таймер, который вызывает обновление. Обновления Draw позволяют наблюдать за последствиями двойной буферизации. При щелчке правой кнопкой мыши формы циклически передаются следующие режимы рисования:  
  
-   Рисование непосредственно в <xref:System.Windows.Forms.Control.Handle%2A> для <xref:System.Windows.Forms.Form>.  
  
-   Рисование путем переопределения метода <xref:System.Windows.Forms.Form.OnPaint%2A> с помощью стиля элемента управления <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>.  
  
-   Рисование путем переопределения метода <xref:System.Windows.Forms.Form.OnPaint%2A> для метода формы без использования стиля элемента управления <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>.  
  
 В каждом режиме текст рисуется, который определяет текущий режим, и описывает поведение, возникающее при нажатии каждой кнопки мыши.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Класс <see cref="T:System.Drawing.BufferedGraphics" /> не является потокобезопасным. При доступе к графическому буферу из отдельных потоков важно использовать механизм управления доступом к потокам для предотвращения конфликтов.</threadsafe>
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Двойная буферизация графики</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Drawing.BufferedGraphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По завершении использования объекта <xref:System.Drawing.BufferedGraphics> вызовите <xref:System.Drawing.BufferedGraphics.Dispose%2A>. Метод <xref:System.Drawing.BufferedGraphics.Dispose%2A> оставляет объект <xref:System.Drawing.BufferedGraphics> в непригодном для использования состоянии. После вызова <xref:System.Drawing.BufferedGraphics.Dispose%2A>необходимо освободить все ссылки на объект <xref:System.Drawing.BufferedGraphics>, чтобы сборщик мусора мог освободить память, занимаемую объектом <xref:System.Drawing.BufferedGraphics>. Дополнительные сведения см. в разделе [Очистка неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Всегда вызывайте <xref:System.Drawing.BufferedGraphics.Dispose%2A> перед тем, как освободить последнюю ссылку на объект <xref:System.Drawing.BufferedGraphics>. В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Drawing.BufferedGraphics> метод `Finalize`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Двойная буферизация графики</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Drawing.Graphics" />, выводящий данные в графический буфер.</summary>
        <value>Объект <see cref="T:System.Drawing.Graphics" />, выводящий данные в графический буфер.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство предоставляет объект <xref:System.Drawing.Graphics>, который рисует графический буфер, выделенный для данного объекта <xref:System.Drawing.BufferedGraphics>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Двойная буферизация графики</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает содержимое графического буфера.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает содержимое графического буфера в устройство по умолчанию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод записывает содержимое графического буфера на устройство, указанное путем вызова метода <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> <xref:System.Drawing.BufferedGraphicsContext>, используемого для создания этого <xref:System.Drawing.BufferedGraphics> объекта.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Двойная буферизация графики</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">Объект <see cref="T:System.Drawing.Graphics" />, в который записывается содержимое графического буфера.</param>
        <summary>Записывает содержимое графического буфера в заданный объект <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод записывает содержимое графического буфера в указанный объект <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется визуализация содержимого графического буфера с заданным <xref:System.Drawing.Graphics> объектом. Этот код является частью большого примера, приведенного для класса <xref:System.Drawing.BufferedGraphics>.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Двойная буферизация графики</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">Ссылка <see cref="T:System.IntPtr" />, указывающая на контекст устройства, в который записывается содержимое графического буфера.</param>
        <summary>Записывает содержимое графического буфера в контекст устройства, связанный с заданным дескриптором <see cref="T:System.IntPtr" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод записывает содержимое графического буфера в контекст устройства, связанный с заданным маркером <xref:System.IntPtr>.  
  
   
  
## Examples  
 В следующем примере кода показано, как визуализировать содержимое графического буфера `grafx` в заданный контекст устройства. Этот код является частью большого примера, приведенного для класса <xref:System.Drawing.BufferedGraphics>.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Двойная буферизация графики</related>
      </Docs>
    </Member>
  </Members>
</Type>
