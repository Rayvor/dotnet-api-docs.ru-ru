<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2320c0e5dd768ab9aebaa6800aa7bdec9a90eae" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70334625" /></Metadata><TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Инкапсулирует поверхность рисования GDI+. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> Класс предоставляет методы для рисования объектов на устройстве отображения. Объект <xref:System.Drawing.Graphics> связан с конкретным контекстом устройства.  
  
 <xref:System.Drawing.Graphics> Объект можно получить, <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> вызвав метод для объекта, который наследуется от <xref:System.Windows.Forms.Control?displayProperty=nameWithType>или путем <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> обработки <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> события элемента управления и доступа к свойству <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> класса. Вы также можете создать <xref:System.Drawing.Graphics> объект из образа с <xref:System.Drawing.Graphics.FromImage%2A> помощью метода. Дополнительные сведения о создании <xref:System.Drawing.Graphics> объекта см. в разделе как [ Создание графических объектов для рисования](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 С помощью <xref:System.Drawing.Graphics> объекта можно рисовать множество различных фигур и линий. Дополнительные сведения о способах рисования линий и фигур см. в описании `Draw`конкретного метода *графикалелемент* для линии или фигуры, которые необходимо нарисовать. К этим методам <xref:System.Drawing.Graphics.DrawArc%2A>относятся <xref:System.Drawing.Graphics.DrawClosedCurve%2A> <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>,, <xref:System.Drawing.Graphics.DrawRectangle%2A>и. Дополнительные сведения о способах рисования линий и фигур см. в разделе [Использование пера для рисования линий и фигур](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) и [Использование кисти для заливки фигур](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 Изображения и значки можно также нарисовать с помощью <xref:System.Drawing.Graphics.DrawImage%2A> методов и <xref:System.Drawing.Graphics.DrawIcon%2A> соответственно. Чтобы выполнить побитовую пересылку цветовых данных с экрана на поверхность <xref:System.Drawing.Graphics> рисования объекта, см. раздел. <xref:System.Drawing.Graphics.CopyFromScreen%2A> Дополнительные сведения о том, как нарисовать изображения с <xref:System.Drawing.Graphics> помощью объекта, см. [в разделе Работа с изображениями, точечными рисунками, значками и метафайлами](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 Кроме того, можно управлять системой координат, используемой <xref:System.Drawing.Graphics> объектом. Дополнительные сведения о системе координат и ее управлении см. в разделе [системы координат и преобразования](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует наличия <xref:System.Windows.Forms.PaintEventArgs> объекта. Объект имеет имя `e` и<xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. <xref:System.Windows.Forms.PaintEventArgs> Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG. Файл называется Сампимаг. jpg и находится в папке примера.  
  
-   Создает точку, в которой рисуется левый верхний угол изображения.  
  
-   Выводит немасштабированное изображение на экран с помощью <xref:System.Drawing.Graphics> объекта.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Практическое руководство. Создание объектов Graphics для рисования</related>
    <related type="Article" href="https://msdn.microsoft.com/library/eb0f6d6f-9e52-4167-9592-ff4b82fb5869">Приступая к программированию графики</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6207cad1-7a34-4bd6-bfc1-db823ca7a73e">Управление состоянием объекта Graphics</related>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Массив байтов, содержащий комментарий.</param>
        <summary>Добавляет комментарий к текущему объекту <see cref="T:System.Drawing.Imaging.Metafile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод является допустимым только в <xref:System.Drawing.Graphics> том случае, если <xref:System.Drawing.Imaging.Metafile>он связан с.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms <xref:System.Windows.Forms.PaintEventArgs>и требует `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика <xref:System.Windows.Forms.Form> событий, а также `thisForm`для примера. Код выполняет следующие действия.  
  
-   Создает временный <xref:System.Drawing.Graphics> объект для создания метафайла и `hdc`получает обработчик контекста устройства.  
  
-   Создает новый метафайл с помощью `hdc`.  
  
-   Создает для вывода метафайла <xref:System.Drawing.Imaging.Metafile>из. <xref:System.Drawing.Graphics>  
  
-   Рисует прямоугольник в метафайле.  
  
-   Добавляет комментарий к метафайлу.  
  
-   Удаляет <xref:System.Drawing.Graphics> для метафайла, который закрывает метафайл.  
  
-   Удаляет метафайл.  
  
-   Освобождает временный `hdc`.  
  
-   Удаляет временный <xref:System.Drawing.Graphics>объект.  
  
-   Создает второй метафайл из ранее созданного файла.  
  
-   Отображает метафайл на экране.  
  
-   Удаляет метафайл.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а затем открывает и использует новый графический контейнер.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а затем открывает и использует новый графический контейнер.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, который представляет состояние объекта <see cref="T:System.Drawing.Graphics" /> на момент вызова метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод с <xref:System.Drawing.Graphics.EndContainer%2A> методом для создания вложенных графических контейнеров. Графические контейнеры имеют состояние графика, например преобразование, область отсечения и свойства подготовки к просмотру.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода <xref:System.Drawing.Graphics>объекта информационный блок, <xref:System.Drawing.Graphics> содержащий состояние, помещается в стек. Метод возвращает объект <xref:System.Drawing.Drawing2D.GraphicsContainer> , который идентифицирует этот блок информации. <xref:System.Drawing.Graphics.BeginContainer%2A> При передаче идентифицирующего объекта в <xref:System.Drawing.Graphics.EndContainer%2A> метод информационный блок удаляется из стека и используется для <xref:System.Drawing.Graphics> восстановления до состояния, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; Это значит, что <xref:System.Drawing.Graphics.BeginContainer%2A> метод можно вызвать несколько раз перед <xref:System.Drawing.Graphics.EndContainer%2A> вызовом метода. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода информационный блок помещается в стек, а <xref:System.Drawing.Drawing2D.GraphicsContainer> для информационного блока получается. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> в метод <xref:System.Drawing.Graphics> возвращается в состояние, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, который возвращал эту конкретную <xref:System.Drawing.Drawing2D.GraphicsContainer>функцию. Информационный блок, помещенный в стек <xref:System.Drawing.Graphics.BeginContainer%2A> этим вызовом метода, удаляется из стека, а все информационные блоки, помещенные в этот стек после этого <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, также удаляются.  
  
 Вызовы метода размещают информационные блоки в том же стеке, что и вызовы <xref:System.Drawing.Graphics.BeginContainer%2A> метода. <xref:System.Drawing.Graphics.Save%2A> Так же, <xref:System.Drawing.Graphics.EndContainer%2A> как вызов метода объединяется <xref:System.Drawing.Graphics.BeginContainer%2A> с вызовом метода, <xref:System.Drawing.Graphics.Restore%2A> вызов метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызовом метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> методом) после соответствующего вызова метода, удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> методом) после соответствующего вызова метода, удаляются из стека.  
  
 Графическое состояние, установленное <xref:System.Drawing.Graphics.BeginContainer%2A> методом, включает качество отрисовки по умолчанию. любые изменения состояния качества рендеринга, существующие при вызове метода, сбрасываются в значения по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Открывает новый графический контейнер и сохраняет старый контейнер.  
  
-   Преобразует координаты мира в контейнере.  
  
-   Заполняет красный прямоугольник в (переведенные координаты) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный контейнер.  
  
-   Заполняет зеленый прямоугольник (до непреобразованных координат) сохраненного контейнера.  
  
 Результатом является зеленый прямоугольник, который пересекает красный прямоугольник того же размера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">Структура <see cref="T:System.Drawing.Rectangle" />, которая вместе с параметром <paramref name="srcrect" /> задает преобразование масштаба для контейнера.</param>
        <param name="srcrect">Структура <see cref="T:System.Drawing.Rectangle" />, которая вместе с параметром <paramref name="dstrect" /> задает преобразование масштаба для контейнера.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения для контейнера.</param>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а также открывает и использует новый графический контейнер с указанным преобразованием масштаба.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, который представляет состояние объекта <see cref="T:System.Drawing.Graphics" /> на момент вызова метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод с <xref:System.Drawing.Graphics.EndContainer%2A> методом для создания вложенных графических контейнеров. Графические контейнеры имеют состояние графика, например преобразование, область отсечения и свойства подготовки к просмотру.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода <xref:System.Drawing.Graphics>объекта информационный блок, <xref:System.Drawing.Graphics> содержащий состояние, помещается в стек. Метод возвращает объект <xref:System.Drawing.Drawing2D.GraphicsContainer> , который идентифицирует этот блок информации. <xref:System.Drawing.Graphics.BeginContainer%2A> При передаче идентифицирующего объекта в <xref:System.Drawing.Graphics.EndContainer%2A> метод информационный блок удаляется из стека и используется для <xref:System.Drawing.Graphics> восстановления до состояния, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; Это значит, что <xref:System.Drawing.Graphics.BeginContainer%2A> метод можно вызвать несколько раз перед <xref:System.Drawing.Graphics.EndContainer%2A> вызовом метода. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода информационный блок помещается в стек, а <xref:System.Drawing.Drawing2D.GraphicsContainer> для информационного блока получается. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> в метод <xref:System.Drawing.Graphics> возвращается в состояние, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, который возвращал эту конкретную <xref:System.Drawing.Drawing2D.GraphicsContainer>функцию. Информационный блок, помещенный в стек <xref:System.Drawing.Graphics.BeginContainer%2A> этим вызовом метода, удаляется из стека, а все информационные блоки, помещенные в этот стек после этого <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, также удаляются.  
  
 Вызовы метода размещают информационные блоки в том же стеке, что и вызовы <xref:System.Drawing.Graphics.BeginContainer%2A> метода. <xref:System.Drawing.Graphics.Save%2A> Так же, <xref:System.Drawing.Graphics.EndContainer%2A> как вызов метода объединяется <xref:System.Drawing.Graphics.BeginContainer%2A> с вызовом метода, <xref:System.Drawing.Graphics.Restore%2A> вызов метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызовом метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> методом) после соответствующего вызова метода, удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> методом) после соответствующего вызова метода, удаляются из стека.  
  
 Этот метод задает преобразование масштаба для нового графического контейнера с `dstrect` параметрами и. `srcrect` Масштаб равен преобразованию, которое при применении к `srcrect` `dstrect`дает результат.  
  
 Графическое состояние, установленное <xref:System.Drawing.Graphics.BeginContainer%2A> методом, включает качество отрисовки по умолчанию. любые изменения состояния качества рендеринга, существующие при вызове метода, сбрасываются в значения по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает два прямоугольника, чтобы указать преобразование шкалы для нового контейнера.  
  
-   Открывает новый графический контейнер и сохраняет старый контейнер.  
  
-   Заполняет красный прямоугольник в (масштабированные координаты) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный контейнер.  
  
-   Заполняет зеленый прямоугольник (до немасштабируемых координат) сохраненного контейнера.  
  
 Результатом является зеленый прямоугольник, который пересекается с меньшим красным прямоугольником.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">Структура <see cref="T:System.Drawing.RectangleF" />, которая вместе с параметром <paramref name="srcrect" /> задает преобразование масштаба для нового графического контейнера.</param>
        <param name="srcrect">Структура <see cref="T:System.Drawing.RectangleF" />, которая вместе с параметром <paramref name="dstrect" /> задает преобразование масштаба для нового графического контейнера.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения для контейнера.</param>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а также открывает и использует новый графический контейнер с указанным преобразованием масштаба.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, который представляет состояние объекта <see cref="T:System.Drawing.Graphics" /> на момент вызова метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод с <xref:System.Drawing.Graphics.EndContainer%2A> методом для создания вложенных графических контейнеров. Графические контейнеры имеют состояние графика, например преобразование, область отсечения и свойства подготовки к просмотру.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода <xref:System.Drawing.Graphics>объекта информационный блок, <xref:System.Drawing.Graphics> содержащий состояние, помещается в стек. Метод возвращает объект <xref:System.Drawing.Drawing2D.GraphicsContainer> , который идентифицирует этот блок информации. <xref:System.Drawing.Graphics.BeginContainer%2A> При передаче идентифицирующего объекта в <xref:System.Drawing.Graphics.EndContainer%2A> метод информационный блок удаляется из стека и используется для <xref:System.Drawing.Graphics> восстановления до состояния, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; Это значит, что <xref:System.Drawing.Graphics.BeginContainer%2A> метод можно вызвать несколько раз перед <xref:System.Drawing.Graphics.EndContainer%2A> вызовом метода. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода информационный блок помещается в стек, а <xref:System.Drawing.Drawing2D.GraphicsContainer> для информационного блока получается. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> в метод <xref:System.Drawing.Graphics> возвращается в состояние, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, который возвращал эту конкретную <xref:System.Drawing.Drawing2D.GraphicsContainer>функцию. Информационный блок, помещенный в стек <xref:System.Drawing.Graphics.BeginContainer%2A> этим вызовом метода, удаляется из стека, а все информационные блоки, помещенные в этот стек после этого <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, также удаляются.  
  
 Вызовы метода размещают информационные блоки в том же стеке, что и вызовы <xref:System.Drawing.Graphics.BeginContainer%2A> метода. <xref:System.Drawing.Graphics.Save%2A> Так же, <xref:System.Drawing.Graphics.EndContainer%2A> как вызов метода объединяется <xref:System.Drawing.Graphics.BeginContainer%2A> с вызовом метода, <xref:System.Drawing.Graphics.Restore%2A> вызов метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызовом метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метода все информационные блоки, размещенные в стеке ( `Save` методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> методом) после соответствующего вызова метода, удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> методом) после соответствующего вызова метода, удаляются из стека.  
  
 Этот метод задает преобразование масштаба для нового графического контейнера с `dstrect` параметрами и. `srcrect` Масштаб равен преобразованию, которое при применении к `srcrect` `dstrect`дает результат.  
  
 Графическое состояние, установленное <xref:System.Drawing.Graphics.BeginContainer%2A> методом, включает качество отрисовки по умолчанию. любые изменения состояния качества рендеринга, существующие при вызове метода, сбрасываются в значения по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает два прямоугольника, чтобы указать преобразование шкалы для нового контейнера.  
  
-   Открывает новый графический контейнер и сохраняет старый контейнер.  
  
-   Заполняет красный прямоугольник в (масштабированные координаты) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный контейнер.  
  
-   Заполняет зеленый прямоугольник (до немасштабируемых координат) сохраненного контейнера.  
  
 Результатом является зеленый прямоугольник, который пересекается с меньшим красным прямоугольником.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Структура <see cref="T:System.Drawing.Color" />, которая представляет собой цвет фона для поверхности рисования.</param>
        <summary>Очищает всю поверхность рисования и выполняет заливку поверхности указанным цветом фона.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> Метод очищает состояние графического объекта и не должен вызываться, когда графический объект не может быть обновлен. Например, если <xref:System.Drawing.Graphics.Clear%2A> метод вызывается на защищенном рабочем столе в сеансе сервера терминалов, <xref:System.Drawing.Graphics> может <xref:System.Runtime.InteropServices.ExternalException> произойти исключение, при котором объект остается в нестабильном состоянии.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код очищает поверхность <xref:System.Drawing.Graphics> рисования и задает цвет фона для определенного системой цвета.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект <see cref="T:System.Drawing.Region" />, ограничивающий область рисования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Объект <see cref="T:System.Drawing.Region" />, ограничивающий часть данного объекта <see cref="T:System.Drawing.Graphics" />, доступную для рисования в текущий момент.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменение объекта, возвращаемого свойством, не <xref:System.Drawing.Graphics> влияет на последующее рисование с помощью объекта. <xref:System.Drawing.Graphics.Clip%2A> <xref:System.Drawing.Region> Чтобы изменить область обрезки, замените <xref:System.Drawing.Graphics.Clip%2A> значение свойства новым <xref:System.Drawing.Region> объектом. Чтобы определить, является ли вырезанная область бесконечной, <xref:System.Drawing.Graphics.Clip%2A> извлеките свойство и <xref:System.Drawing.Region.IsInfinite%2A> вызовите его метод.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Graphics.Clip%2A> свойство. Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `SetAndFillClip` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает структуру <see cref="T:System.Drawing.RectangleF" />, которая  ограничивает отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Структура <see cref="T:System.Drawing.RectangleF" />, представляющая ограничивающий прямоугольник для отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Единица для результирующего прямоугольника обозначается <xref:System.Drawing.Graphics.PageUnit%2A> свойством. Единицей по умолчанию являются пиксели. Объект <xref:System.Drawing.Graphics> , как правило, связан с элементом управления, и источник прямоугольника будет относиться к клиентской области этого элемента управления.  
  
 Если вырезанная область имеет бесконечное значение <xref:System.Drawing.Graphics.ClipBounds%2A> , свойство возвращает большой прямоугольник, не имеющий смысла. Чтобы определить, является ли вырезанная область бесконечной, <xref:System.Drawing.Graphics.Clip%2A> извлеките свойство и <xref:System.Drawing.Region.IsInfinite%2A> вызовите его метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, задающее способ рисования составных изображений в данном объекте <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает элемент перечисления <see cref="T:System.Drawing.Drawing2D.CompositingMode" />. Значение по умолчанию — <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Режим компоновки определяет, перезаписываются ли Пиксели из исходного изображения или объединяются с пикселями фона.  
  
> [!NOTE]
>  Не <xref:System.Drawing.Graphics.CompositingMode%2A> следует использовать <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> значение свойства, если <xref:System.Drawing.Graphics.TextRenderingHint%2A> свойство имеет <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>значение. Может возникнуть исключение или изображение может отображаться неправильно.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает качество отрисовки составных изображений, которые формируются в данном объекте <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает элемент перечисления <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />. Значение по умолчанию — <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Качество компоновки определяет уровень качества визуализации для составных изображений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет перемещение набора битов данных о цвете с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Точка в верхнем левом углу исходного прямоугольника.</param>
        <param name="upperLeftDestination">Точка в верхнем левом углу целевого прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <summary>Выполняет перемещение набора битов данных о цвете, соответствующих прямоугольнику пикселей, с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для создания слоев одного изображения поверх другого. Чтобы указать способ смешивания цветов источника и назначения, используйте один из <xref:System.Drawing.Graphics.CopyFromScreen%2A> методов, <xref:System.Drawing.CopyPixelOperation> принимающих параметр.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обработайте <xref:System.Windows.Forms.Control.Paint> событие формы и вызовите `CopyPixels1` метод из <xref:System.Windows.Forms.Control.Paint> метода обработки событий, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Практическое руководство. Печать формы Windows Forms</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Практическое руководство. Копировать пиксели для снижения мерцания в Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Точка в верхнем левом углу исходного прямоугольника.</param>
        <param name="upperLeftDestination">Точка в верхнем левом углу целевого прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <param name="copyPixelOperation">Одно из значений перечисления <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Выполняет перемещение набора битов данных о цвете, соответствующих прямоугольнику пикселей, с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для создания слоев одного изображения поверх другого. `copyPixelOperation` Параметр позволяет указать, следует ли смешивать цвета источника с цветами в области назначения.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обработайте <xref:System.Windows.Forms.Control.Paint> событие формы и вызовите `CopyPixels2` метод из <xref:System.Windows.Forms.Control.Paint> метода обработки событий, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" /> не является членом <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Практическое руководство. Печать формы Windows Forms</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Практическое руководство. Копировать пиксели для снижения мерцания в Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">Координата X точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="sourceY">Координата Y точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="destinationX">Координата X точки в верхнем левом углу конечного прямоугольника.</param>
        <param name="destinationY">Координата Y точки в верхнем левом углу конечного прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <summary>Выполняет передачу данных о цвете, соответствующих прямоугольной области пикселей, блоками битов с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для создания слоев одного изображения поверх другого. Чтобы указать способ смешивания цветов источника и назначения, используйте один из <xref:System.Drawing.Graphics.CopyFromScreen%2A> методов, <xref:System.Drawing.CopyPixelOperation> принимающих параметр.  
  
   
  
## Examples  
 В следующем примере кода показано, <xref:System.Drawing.Graphics.CopyFromScreen%2A> как использовать для печати копии текущей формы.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Практическое руководство. Печать формы Windows Forms</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Практическое руководство. Копировать пиксели для снижения мерцания в Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="5" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">Координата X точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="sourceY">Координата Y точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="destinationX">Координата X точки в верхнем левом углу конечного прямоугольника.</param>
        <param name="destinationY">Координата Y точки в верхнем левом углу конечного прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <param name="copyPixelOperation">Одно из значений <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Выполняет передачу данных о цвете, соответствующих прямоугольной области пикселей, блоками битов с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для создания слоев одного изображения поверх другого. `copyPixelOperation` Параметр позволяет указать, следует ли смешивать цвета источника с цветами в области назначения.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обработайте <xref:System.Windows.Forms.Control.Paint> событие формы и вызовите `CopyPixels4` метод из <xref:System.Windows.Forms.Control.Paint> метода обработки событий, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" /> не является членом <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">Практическое руководство. Печать формы Windows Forms</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">Практическое руководство. Копировать пиксели для снижения мерцания в Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые этим объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Drawing.Graphics.Dispose%2A> позволяет перераспределить ресурсы, используемые <xref:System.Drawing.Graphics> этим объектом, для других целей.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   <xref:System.Drawing.Image> Создает из графического файла сампимаг. jpg в каталоге example.  
  
-   Создает объект <xref:System.Drawing.Graphics> <xref:System.Drawing.Image>из.  
  
-   Изменяет изображение, заполняя в нем прямоугольник.  
  
-   <xref:System.Drawing.Image> Отображает на экране.  
  
-   Освобождает созданный <xref:System.Drawing.Graphics>объект.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает горизонтальное разрешение данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Значение горизонтального разрешения в точках на дюйм, поддерживаемое этим объектом <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании приложений с высоким разрешением см. в разделе  
  
 [Высокое разрешение dpi](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 В следующем методе показано использование <xref:System.Drawing.Graphics.DpiX%2A> свойств и. <xref:System.Drawing.Graphics.DpiY%2A> Этот пример предназначен для использования с Windows Form. Чтобы выполнить этот пример, вставьте его в форму, содержащую именованный <xref:System.Windows.Forms.ListBox> элемент ListBox1, и вызовите этот метод из конструктора формы.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Высокое разрешение DPI</related>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает вертикальное разрешение данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Значение вертикального разрешения в точках на дюйм, поддерживаемое этим объектом <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании приложений с высоким разрешением см. в разделе  
  
 [Высокое разрешение dpi](https://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 В следующем методе показано использование <xref:System.Drawing.Graphics.DpiX%2A> свойств и. <xref:System.Drawing.Graphics.DpiY%2A> Этот пример предназначен для использования с Windows Form. Чтобы выполнить этот пример, вставьте его в форму, содержащую именованный <xref:System.Windows.Forms.ListBox> элемент ListBox1, и вызовите этот метод из конструктора формы.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">Высокое разрешение DPI</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует дугу, которая является частью эллипса, заданного парой координат, шириной и высотой.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, определяющая границы эллипса.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод Рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга — это часть периметра эллипса `startAngle` между параметром `startAngle`  +  `sweepAngle` и параметрами.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник для привязки эллипса.  
  
-   Определяет начало (45 градусов) и угол поворота (270 градусов).  
  
-   Отображает эллиптическую дугу на экране.  
  
 Результатом является частичный эллипс, в котором отсутствует сегмент между + и-45 градусами оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, определяющая границы эллипса.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод Рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга — это часть периметра эллипса `startAngle` между параметром `startAngle`  +  `sweepAngle` и параметрами.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник для привязки эллипса.  
  
-   Определяет начало (45 градусов) и угол поворота (270 градусов).  
  
-   Отображает эллиптическую дугу на экране.  
  
 Результатом является частичный эллипс, в котором отсутствует сегмент между + и-45 градусами оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> равно <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="width">Ширина прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота прямоугольника, определяющего эллипс.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод Рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга — это часть периметра эллипса `startAngle` между параметром `startAngle`  +  `sweepAngle` и параметрами.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника для привязки эллипса.  
  
-   Определяет начало (45 градусов) и угол поворота (270 градусов).  
  
-   Отображает эллиптическую дугу на экране.  
  
 Результатом является частичный эллипс, в котором отсутствует сегмент между + и-45 градусами оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="width">Ширина прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота прямоугольника, определяющего эллипс.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод Рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга — это часть периметра эллипса `startAngle` между параметром `startAngle`  +  `sweepAngle` и параметрами.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника для привязки эллипса.  
  
-   Определяет начало (45 градусов) и угол поворота (270 градусов).  
  
-   Отображает эллиптическую дугу на экране.  
  
 Результатом является частичный эллипс, в котором отсутствует сегмент между + и-45 градусами оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует кривую Безье, определяемую четырьмя структурами <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="pt1">Структура <see cref="T:System.Drawing.Point" />, представляющая собой начальную точка кривой.</param>
        <param name="pt2">Структура <see cref="T:System.Drawing.Point" />, представляющая собой первую контрольную точка кривой.</param>
        <param name="pt3">Структура <see cref="T:System.Drawing.Point" />, представляющая собой вторую контрольную точка кривой.</param>
        <param name="pt4">Структура <see cref="T:System.Drawing.Point" />, представляющая собой конечную точка кривой.</param>
        <summary>Рисует кривую Безье, определяемую четырьмя структурами <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кривая Безье рисуется от первой точки к четвертой точке. Вторая и третья точки представляют собой контрольные точки, определяющие форму кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает начальную, конечную и две контрольные точки для кривой.  
  
-   Рисует кривую Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="pt1">Структура <see cref="T:System.Drawing.PointF" />, представляющая собой начальную точка кривой.</param>
        <param name="pt2">Структура <see cref="T:System.Drawing.PointF" />, представляющая собой первую контрольную точка кривой.</param>
        <param name="pt3">Структура <see cref="T:System.Drawing.PointF" />, представляющая собой вторую контрольную точка кривой.</param>
        <param name="pt4">Структура <see cref="T:System.Drawing.PointF" />, представляющая собой конечную точка кривой.</param>
        <summary>Рисует кривую Безье, определяемую четырьмя структурами <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сплайн Безье строится от первой точки к четвертой точке. Вторая и третья точки представляют собой контрольные точки, определяющие форму кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает начальную, конечную и две контрольные точки для кривой.  
  
-   Рисует кривую Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="x1">Координата X начальной точки кривой.</param>
        <param name="y1">Координата Y начальной точки кривой.</param>
        <param name="x2">Координата X первой контрольной точки кривой.</param>
        <param name="y2">Координата Y первой контрольной точки кривой.</param>
        <param name="x3">Координата X второй контрольной точки кривой.</param>
        <param name="y3">Координата Y второй контрольной точки кривой.</param>
        <param name="x4">Координата X конечной точки кривой.</param>
        <param name="y4">Координата Y конечной точки кривой.</param>
        <summary>Строит кривую Безье, определяемую четырьмя упорядоченными парами координат, которые представляют собой точки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сплайн Безье строится от первой точки к четвертой точке. Вторая и третья точки представляют собой контрольные точки, определяющие форму кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает координаты начала, окончания и двух контрольных точек кривой.  
  
-   Рисует кривую Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует последовательность кривых Безье из массива структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют собой точки, определяющие кривую. Количество точек в массиве должно быть кратно трем плюс единица, например 4, 7 или 10.</param>
        <summary>Рисует последовательность кривых Безье из массива структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Число точек в массиве должно быть кратно 3 плюс 1, поскольку для первого сплайна требуется 4 точки, а для всех остальных сплайнов требуется по три точки. Первая кривая Безье строится от первой точки к четвертой точке в массиве точек. Вторая и третья точки представляют собой контрольные точки, определяющие форму кривой. Каждой последующей кривой требуется ровно три точки: две дополнительные контрольные точки и конечная точка. Конечная точка предыдущей кривой используется в качестве начальной точки для каждой дополнительной кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает начальную, конечную и две контрольные точки для первой кривой и конечной точки, а также две контрольные точки для второй кривой.  
  
-   Рисует последовательные кривые Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют собой точки, определяющие кривую. Количество точек в массиве должно быть кратно трем плюс единица, например 4, 7 или 10.</param>
        <summary>Рисует последовательность кривых Безье из массива структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Число точек в массиве должно быть кратно 3 плюс 1, поскольку для первого сплайна требуется 4 точки, а для всех остальных сплайнов требуется по три точки. Первая кривая Безье строится с первой точки до четвертой точки в массиве точек. Вторая и третья точки представляют собой контрольные точки, определяющие форму кривой. Каждой последующей кривой требуется ровно три точки: две дополнительные контрольные точки и конечная точка. Конечная точка предыдущей кривой используется в качестве начальной точки для каждой дополнительной кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает начальную, конечную и две контрольные точки для первой кривой и конечной точки, а также две контрольные точки для второй кривой.  
  
-   Рисует последовательные кривые Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Строит замкнутую фундаментальную кривую, определяемую массивом структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <summary>Строит замкнутую фундаментальную кривую, определяемую массивом структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует замкнутую фундаментальную кривую, которая проходит через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки до первой точки, чтобы закрыть фигуру.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семью точками, образуя замкнутый многоугольник.  
  
-   Рисует зеленую замкнутую кривую через семь точек.  
  
 Метод использует натяжение по умолчанию 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.  
  
-или- 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <summary>Строит замкнутую фундаментальную кривую, определяемую массивом структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует замкнутую фундаментальную кривую, которая проходит через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.PointF> структуры.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семью точками, образуя замкнутый многоугольник.  
  
-   Рисует зеленую замкнутую кривую через семь точек.  
  
 Метод использует натяжение по умолчанию 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <param name="fillmode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой. Данный параметр является обязательным, однако не обрабатывается.</param>
        <summary>Строит замкнутую фундаментальную кривую, определяемую массивом структур <see cref="T:System.Drawing.Point" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует замкнутую фундаментальную кривую, которая проходит через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семью точками, образуя многоугольник.  
  
-   Создает параметры натяжения и режима заполнения.  
  
-   Рисует зеленую замкнутую кривую через семь точек.  
  
 Метод использует натяжение 1,0 и устанавливает для `FillMode.Alternate`режима заполнения значение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <param name="fillmode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой. Это параметр является обязательным, однако не обрабатывается.</param>
        <summary>Строит замкнутую фундаментальную кривую, определяемую массивом структур <see cref="T:System.Drawing.PointF" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует замкнутую фундаментальную кривую, которая проходит через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.PointF> структуры.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семью точками, образуя многоугольник.  
  
-   Создает параметры натяжения и режима заполнения.  
  
-   Рисует зеленую замкнутую кривую через семь точек.  
  
 Метод использует натяжение 1,0 и устанавливает для `FillMode.Alternate`режима заполнения значение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.  
  
-или- 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.Point> структуры для рисования кривой.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Рисует открытую зеленую кривую через семь точек.  
  
 Метод использует натяжение по умолчанию 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.PointF> структуры для рисования кривой.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Рисует открытую зеленую кривую через семь точек.  
  
 Метод использует натяжение по умолчанию 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.Point" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.Point> структуры для рисования кривой.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Создает параметр натяжения.  
  
-   Рисует открытую замкнутую кривую зеленого цвета через семь точек.  
  
 Метод использует натяжение 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют собой точки, определяющие кривую.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.PointF" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.PointF> структуры для рисования кривой.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Создает параметр натяжения.  
  
-   Рисует открытую замкнутую кривую зеленого цвета через семь точек.  
  
 Метод использует натяжение 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <param name="offset">Смещение от первого элемента в массиве параметра <paramref name="points" /> до начальной точки кривой.</param>
        <param name="numberOfSegments">Количество сегментов, включаемых в кривую после начальной точки.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.PointF" />. Смещение при рисовании начинается от начала массива.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.PointF> структуры для рисования кривой.  
  
 Значение `offset` параметра указывает количество элементов, которые нужно пропустить в массиве. Первый элемент после пропущенных элементов представляет начальную точку кривой.  
  
 Значение `numberOfSegments` параметра указывает количество сегментов, которые после начальной точки должны рисоваться в кривой. Значение `numberOfSegments` параметра должно быть не меньше 1. Значение `offset` параметра плюс значение `numberOfSegments` параметра должно быть меньше числа элементов `points` в массиве параметра.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Определяет смещение начальной точки и число сегментов.  
  
-   Рисует открытую зеленую кривую (начиная с третьей точки) до последних пяти точек.  
  
 Метод использует натяжение по умолчанию 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <param name="offset">Смещение от первого элемента в массиве параметра <paramref name="points" /> до начальной точки кривой.</param>
        <param name="numberOfSegments">Количество сегментов, включаемых в кривую после начальной точки.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.Point" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.Point> структуры для рисования кривой.  
  
 Значение `offset` параметра указывает количество элементов, которые нужно пропустить в массиве. Первый элемент после пропущенных элементов представляет начальную точку кривой.  
  
 Значение `numberOfSegments` параметра указывает количество сегментов, которые после начальной точки должны рисоваться в кривой. Значение `numberOfSegments` параметра должно быть не меньше 1. Значение `offset` параметра плюс значение `numberOfSegments` параметра должно быть меньше числа элементов `points` в массиве параметра.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Определяет смещение начальной точки и число сегментов.  
  
-   Определяет натяжение.  
  
-   Рисует открытую зеленую кривую (начиная с третьей точки) до последних пяти точек.  
  
 Метод устанавливает натяжение равным 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <param name="offset">Смещение от первого элемента в массиве параметра <paramref name="points" /> до начальной точки кривой.</param>
        <param name="numberOfSegments">Количество сегментов, включаемых в кривую после начальной точки.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальную кривую через точки указанного массива структур <see cref="T:System.Drawing.PointF" /> с указанным натяжением. Смещение при рисовании начинается от начала массива.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует фундаментальный сплайн, который проходит через каждую точку в массиве.  
  
 Массив точек должен содержать по крайней мере три <xref:System.Drawing.PointF> структуры для рисования кривой.  
  
 Значение `offset` параметра указывает количество элементов, которые нужно пропустить в массиве. Первый элемент после пропущенных элементов представляет начальную точку кривой.  
  
 Значение `numberOfSegments` параметра указывает количество сегментов, которые после начальной точки должны рисоваться в кривой. Значение `numberOfSegments` параметра должно быть не меньше 1. Значение `offset` параметра плюс значение `numberOfSegments` параметра должно быть меньше числа элементов `points` в массиве параметра.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает красные и зеленые перья.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семью точками, образуя неполный многоугольник.  
  
-   Определяет смещение начальной точки и число сегментов.  
  
-   Определяет натяжение.  
  
-   Рисует открытую зеленую кривую (начиная с третьей точки) до последних пяти точек.  
  
 Метод устанавливает натяжение равным 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует эллипс, определенный ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, определяющая границы эллипса.</param>
        <summary>Рисует эллипс, определяемый ограничивающей структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует эллипс, определяемый ограничивающим прямоугольником, заданным `rect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник для привязки эллипса.  
  
-   Отображает эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, определяющая границы эллипса.</param>
        <summary>Рисует эллипс, определяемый ограничивающей структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует эллипс, определяемый ограничивающим прямоугольником, заданным `rect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник для привязки эллипса.  
  
-   Отображает эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс.</param>
        <summary>Рисует эллипс, определяемый ограничивающим прямоугольником, заданным с помощью координат для верхнего левого угла прямоугольника, высоты и ширины.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод `x`рисует эллипс, определяемый ограничивающим прямоугольником `width`, который описывается параметрами, `y`, и `height` .  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника для привязки эллипса.  
  
-   Отображает эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс.</param>
        <summary>Рисует эллипс, определенный ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод `x`рисует эллипс, определяемый ограничивающим прямоугольником `width`, который описывается параметрами, `y`, и `height` .  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника для привязки эллипса.  
  
-   Отображает эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" />, расположенным по указанным координатам.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">Объект <see cref="T:System.Drawing.Icon" /> для рисования.</param>
        <param name="targetRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения на экране. Изображение, содержащееся в параметре <paramref name="icon" />, масштабируется по размерам этой прямоугольной области.</param>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" /> в пределах области, заданной структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает значок из стандартного файла значка Windows Сампикон. ico в папке example.  
  
-   Создает прямоугольник, в котором рисуется значок.  
  
-   Отображает значок на экране.  
  
 Положение прямоугольника находит значок на экране, а размер прямоугольника определяет масштабирование рисуемого значка.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="icon" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">Объект <see cref="T:System.Drawing.Icon" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" />, расположенным по указанным координатам.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает значок из стандартного файла значка Windows Сампикон. ico в папке example.  
  
-   Создает координаты верхнего левого угла, в котором рисуется значок.  
  
-   Отображает значок на экране.  
  
 Отображаемый значок не масштабируется.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">Объект <see cref="T:System.Drawing.Icon" /> для рисования.</param>
        <param name="targetRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение не масштабируется в соответствии с размерами прямоугольника, а сохраняет исходный размер. Если размеры изображения больше размеров прямоугольника, оно обрезается и оставляется его часть внутри прямоугольника.</param>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" /> без его масштабирования.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает значок из стандартного файла значка Windows Сампикон. ico в папке example.  
  
-   Создает прямоугольник, в котором рисуется значок.  
  
-   Отображает значок на экране.  
  
 Положение прямоугольника определяет значок на экране, а рисуемый значок — немасштабируемый и необрезанный.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="icon" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя исходный размер.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="point">Структура <see cref="T:System.Drawing.Point" />, представляющая местоположение верхнего левого угла изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 Этот метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. Если вызвать этот метод для рисования изображения на устройстве с разрешением 96 точек на дюйм, то ширина отображаемого изображения будет в пикселях (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точку, в которой рисуется левый верхний угол изображения.  
  
-   Отображает немасштабированное изображение на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанные форму и размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Изображение, `image` представленное параметром, масштабируется и обрезается в соответствии с формой параллелограмма, заданными `destPoints` параметрами.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Отображает изображение на экране.  
  
 Положение параллелограмма находит изображение на экране, а размер исходного изображения и размера и формы параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="point">Структура <see cref="T:System.Drawing.PointF" />, задающая расположение верхнего левого угла отображаемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 Этот метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. Если вызвать этот метод для рисования изображения на устройстве с разрешением 96 точек на дюйм, то ширина отображаемого изображения будет в пикселях (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точку, в которой рисуется левый верхний угол изображения.  
  
-   Отображает немасштабированное изображение на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанные форму и размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Изображение, представленное `image` объектом, масштабируется и обрезается в соответствии с формой параллелограмм, заданным `destPoints` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Отображает изображение на экране.  
  
 Положение параллелограмма находит изображение на экране, а размер исходного изображения и размера и формы параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изображение, представленное `image` объектом, масштабируется по размерам `rect` прямоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник, в котором рисуется изображение.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника размещает изображение на экране, а размер исходного изображения и размер прямоугольника определяют масштабирование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер создаваемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изображение, представленное `image` объектом, масштабируется по размерам `rect` прямоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник, в котором рисуется изображение.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника размещает изображение на экране, а исходный размер изображения и размер прямоугольника определяют масштабирование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <summary>Рисует заданное изображение, используя его исходный фактический размер, в месте, задаваемом парой координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> Метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. При вызове <xref:System.Drawing.Graphics.DrawImage%2A> для рисования изображения на устройстве с разрешением 96 точек на дюйм размер отображаемого изображения в пикселях будет составлять (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера Сампимаг. jpg в папке примера.  
  
-   Создает координаты точки, в которой рисуется левый верхний угол изображения.  
  
-   Рисует немасштабированное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 Этот метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. Если вызвать этот метод для рисования изображения на устройстве с разрешением 96 точек на дюйм, то ширина отображаемого изображения будет в пикселях (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает координаты точки, в которой рисуется левый верхний угол изображения.  
  
-   Отображает немасштабированное изображение на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Создает прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Отображает изображение на экране.  
  
 Положение параллелограмма находит изображение на экране, а размер прямоугольника и размер и форму параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие целевой параллелограмм, в который нарисовывается изображение.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Положение объекта параллелограмм находит изображение на экране, размер исходного прямоугольника, а также размер и форму целевого объекта параллелограмм определяет масштабирование и обрезку рисуемого изображения, а также размер прямоугольника. какая часть исходного изображения отображается на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник назначения, в котором нарисовывается изображение.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника назначения находит изображение на экране, размеры исходного и целевого прямоугольников определяют масштабирование изображенного изображения, а размер исходного прямоугольника определяет, какая часть исходного изображения отображается в на.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник назначения, в котором нарисовывается изображение.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника назначения находит изображение на экране, размеры исходного и целевого прямоугольников определяют масштабирование изображенного изображения, а размер исходного прямоугольника определяет, какая часть исходного изображения отображается в на.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть`image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Создает прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного параллелограмма положение находит изображение на экране, а размер прямоугольника и размер и форма параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие целевой параллелограмм, в который нарисовывается изображение.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного расположения параллелограмма положение находит изображение на экране, размер исходного прямоугольника, а также размер и форма целевого объекта параллелограмм определяют масштабирование и обрезку изображения, а также размер элемента прямоугольник определяет, какая часть исходного изображения отображается на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <summary>Рисует часть изображения в заданном месте.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 360 и горизонтальным разрешением в 72 точек на дюйм имеет физическую ширину 5 дюймов. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 Этот метод рисует часть изображения, используя его физический размер, поэтому часть изображения будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что часть изображения имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. Если вызвать этот метод для отрисовки этой части изображения на устройстве с разрешением 96 точек на дюйм, то ширина отображаемой части изображения будет в пикселях (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает координаты, по которым рисуется левый верхний угол изображения.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Размер исходного прямоугольника определяет, какая часть немасштабированного исходного изображения отображается на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <param name="width">Ширина отображаемого изображения.</param>
        <param name="height">Высота отображаемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прямоугольник `x` ,определяемыйпараметрами`y`, `height` ,, и определяет расположение и размер рисуемого изображения. `width`  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает расположение и размер прямоугольника, в котором рисуется изображение.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника размещает изображение на экране, а размер исходного изображения и размер прямоугольника определяют масштабирование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <summary>Рисует часть изображения в заданном месте.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 360 и горизонтальным разрешением в 72 точек на дюйм имеет физическую ширину 5 дюймов. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 Этот метод рисует часть изображения, используя его физический размер, поэтому часть изображения будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что часть изображения имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. Если вызвать этот метод для отрисовки этой части изображения на устройстве с разрешением 96 точек на дюйм, то ширина отображаемой части изображения будет в пикселях (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает координаты, по которым рисуется левый верхний угол изображения.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Размер исходного прямоугольника определяет, какая часть немасштабированного исходного изображения отображается на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <param name="width">Ширина отображаемого изображения.</param>
        <param name="height">Высота отображаемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прямоугольник `x` ,определяемыйпараметрами`y`, `height` ,, и определяет расположение и размер рисуемого изображения. `width`  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает расположение и размер прямоугольника, в котором рисуется изображение.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника размещает изображение на экране, а размер исходного изображения и размер прямоугольника определяют масштабирование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
 Эта перегрузка с `callback` параметром предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова:  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Создает прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного параллелограмма положение находит изображение на экране, а размер прямоугольника и размер и форма параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 Поскольку в этом примере используется перегрузка, которая не `callBackData` передает параметр <xref:System.Drawing.Graphics.DrawImageAbort> , обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `true`, что приводит к завершению метода, а код обработки исключений, содержащийся в примере, выводит текст исключения, а не для рисования изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
 Эта перегрузка с `callback` параметром предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Создает прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного параллелограмма положение находит изображение на экране, а размер прямоугольника и размер и форма параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 Поскольку в этом примере используется перегрузка, которая не `callBackData` передает параметр <xref:System.Drawing.Graphics.DrawImageAbort> , обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `true`, что приводит к завершению метода, а код обработки исключений, содержащийся в примере, выводит текст исключения, а не для рисования изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
 Эта перегрузка с `callback` параметрами и `callbackData` предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями и данными, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Создает прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного параллелограмма положение находит изображение на экране, а размер прямоугольника и размер и форма параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 `callBackData` Поскольку в <xref:System.Drawing.Graphics.DrawImageAbort> этом примере используется перегрузка, которая передает параметр, обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `false`, что приводит к тому, что метод продолжит работу, и в примере на экран выводится скорректированное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <paramref name="image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <paramref name="srcRect" />.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм.  
  
 Параметр задает прямоугольную часть `image` объекта для рисования. `srcRect` Эта часть масштабируется и обрезается так, чтобы она поместилась в параллелограмм `destPoints` , заданный параметром.  
  
 Эта перегрузка с `callback` параметрами и `callbackData` предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями и данными, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования <xref:System.Windows.Forms.PaintEventArgs>с Windows Forms и требует `e`, что `Pa` <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором рисуется изображение.  
  
-   Создает прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного параллелограмма положение находит изображение на экране, а размер прямоугольника и размер и форма параллелограмма определяют масштабирование и обрезку изображенного изображения.  
  
 `callBackData` Поскольку в <xref:System.Drawing.Graphics.DrawImageAbort> этом примере используется перегрузка, которая передает параметр, обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `false`, что приводит к тому, что метод продолжит работу, и в примере на экран выводится скорректированное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник назначения, в котором нарисовывается изображение.  
  
-   Создает координаты исходного прямоугольника, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника назначения находит изображение на экране, а размеры исходного и конечного прямоугольника определяют масштабирование изображения, а размер исходного прямоугольника определяет, какая часть исходного изображения отображается в на.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает координаты конечного прямоугольника, в котором рисуется изображение.  
  
-   Создает исходный прямоугольник, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Отображает изображение на экране.  
  
 Положение прямоугольника назначения находит изображение на экране, размеры исходного и целевого прямоугольников определяют масштабирование изображенного изображения, а размер исходного прямоугольника определяет, какая часть исходного изображения отображается в на.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник назначения, в котором нарисовывается изображение.  
  
-   Создает координаты исходного прямоугольника, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного прямоугольника назначения положение находит изображение на экране, а размеры исходного и конечного прямоугольника определяют масштабирование изображения, а размер исходного прямоугольника определяет, какая часть элемента на экране отображается исходное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <param name="imageAttrs">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает прямоугольник назначения, в котором нарисовывается изображение.  
  
-   Создает координаты исходного прямоугольника, из которого извлекается часть изображения.  
  
-   Задает единицу измерения исходного прямоугольника в пикселях.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного прямоугольника назначения положение находит изображение на экране, а размеры исходного и конечного прямоугольника определяют масштабирование изображения, а размер исходного прямоугольника определяет, какая часть элемента на экране отображается исходное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <param name="imageAttr">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и изменении цвета объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` объектом.  
  
 Эта перегрузка с `callback` параметром предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором рисуется изображение.  
  
-   Создает исходный прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный целевой прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного прямоугольника назначения положение находит изображение на экране, а размер исходного прямоугольника, а также размер и форма целевого прямоугольника определяют масштабирование изображенного изображения.  
  
 Поскольку в этом примере используется перегрузка, которая не `callBackData` передает параметр <xref:System.Drawing.Graphics.DrawImageAbort> , обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `true`, что приводит к завершению метода, а код обработки исключений, содержащийся в примере, выводит текст исключения, а не для рисования изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <param name="imageAttrs">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
 Эта перегрузка с `callback` параметром предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором рисуется изображение.  
  
-   Создает исходный прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный целевой прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного прямоугольника назначения положение находит изображение на экране, а размер исходного прямоугольника, а также размер и форма целевого прямоугольника определяют масштабирование изображенного изображения.  
  
 Поскольку в этом примере используется перегрузка, которая не `callBackData` передает параметр <xref:System.Drawing.Graphics.DrawImageAbort> , обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `true`, что приводит к завершению метода, а код обработки исключений, содержащийся в примере, выводит текст исключения, а не для рисования изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <param name="imageAttrs">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see langword="DrawImage" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
 Эта перегрузка с `callback` параметрами и `callbackData` предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями и данными, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором рисуется изображение.  
  
-   Создает исходный прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный целевой прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного прямоугольника назначения положение находит изображение на экране, а размер исходного прямоугольника, а также размер и форма целевого прямоугольника определяют масштабирование изображенного изображения.  
  
 `callBackData` Поскольку в <xref:System.Drawing.Graphics.DrawImageAbort> этом примере используется перегрузка, которая передает параметр, обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `false`, что приводит к тому, что метод продолжит работу, и в примере на экран выводится скорректированное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Член перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, используемую для определения исходного прямоугольника.</param>
        <param name="imageAttrs">Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <paramref name="image" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see langword="DrawImage" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` Параметры `srcX`, `srcY` ,`srcWidth`и задаютпрямоугольнуючастьрисуемогообъекта`srcHeight` . Прямоугольник задается относительно левого верхнего угла исходного изображения. Эта часть масштабируется по размеру прямоугольника, указанного `destRect` параметром.  
  
 Эта перегрузка с `callback` параметрами и `callbackData` предоставляет средства для завершения рисования изображения после его запуска в соответствии с критериями и данными, определенными приложением. Например, приложение может начать рисование большого изображения, и пользователь может прокручивать изображение с экрана, в этом случае приложение может завершить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код сначала определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и просто проверяет, вызывает <xref:System.Drawing.Graphics.DrawImage%2A> ли метод его с параметром NULL `callBackData` . Основная часть примера выполняет следующие действия.  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метода обратного вызова.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором рисуется изображение.  
  
-   Создает исходный прямоугольник для выбора части изображения для рисования.  
  
-   Устанавливает точечное изображение в пиксельное.  
  
-   Рисует исходное изображение на экране.  
  
-   Создает дополнительный целевой прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настроенного изображения для использования значения гаммы "больше обычного".  
  
-   Рисует скорректированное изображение на экране.  
  
 Для исходного, ненастроенного прямоугольника назначения положение находит изображение на экране, а размер исходного прямоугольника, а также размер и форма целевого прямоугольника определяют масштабирование изображенного изображения.  
  
 `callBackData` Поскольку в <xref:System.Drawing.Graphics.DrawImageAbort> этом примере используется перегрузка, которая передает параметр, обратный вызов <xref:System.Drawing.Graphics.DrawImage%2A> возвращает `false`, что приводит к тому, что метод продолжит работу, и в примере на экран выводится скорректированное изображение.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует заданное изображение, используя его исходный фактический размер, в месте, задаваемом парой координат.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="point">Структура <see cref="T:System.Drawing.Point" />, задающая верхний левый угол создаваемого рисунка.</param>
        <summary>Рисует заданное изображение в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. При вызове <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для рисования изображения на устройстве с разрешением 96 точек на дюйм размер отображаемого изображения в пикселях будет составлять (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG Сампимаг. jpg в папке примера.  
  
-   Создает точку, в которой рисуется левый верхний угол изображения.  
  
-   Рисует изображение целиком, используя его физический размер.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая верхний левый угол создаваемого рисунка. Свойства X и Y прямоугольника определяют верхний левый угол. Свойства ширины и высоты не обрабатываются.</param>
        <summary>Рисует заданное изображение в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. При вызове <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для рисования изображения на устройстве с разрешением 96 точек на дюйм размер отображаемого изображения в пикселях будет составлять (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <summary>Рисует заданное изображение, используя его исходный фактический размер, в месте, задаваемом парой координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. При вызове <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для рисования изображения на устройстве с разрешением 96 точек на дюйм размер отображаемого изображения в пикселях будет составлять (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает изображение из файла JPEG, Сампимаг. jpg, в папке примера.  
  
-   Создает точку, в которой рисуется левый верхний угол изображения.  
  
-   Рисует изображение целиком, используя его физический размер.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла выводимого изображения.</param>
        <param name="y">Координата Y верхнего левого угла выводимого изображения.</param>
        <param name="width">Не используется.</param>
        <param name="height">Не используется.</param>
        <summary>Рисует заданное изображение в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Image> сохраняет значение ширины в пикселях и значение для горизонтального разрешения (точек на дюйм). Физическая ширина изображения, измеряемая в дюймах, — это ширина в пикселях, деленная на разрешение по горизонтали. Например, изображение с шириной в пикселях 216 и горизонтальным разрешением 72 точек на дюйм имеет физическую ширину в 3 дюйма. Аналогичные примечания применяются к высоте и физической высоте в пикселях.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод рисует изображение, используя его физический размер, поэтому изображение будет иметь правильный размер в дюймах независимо от разрешения (точек на дюйм) устройства дисплея. Например, предположим, что изображение имеет ширину в пикселях 216 и горизонтальное разрешение в 72 точек на дюйм. При вызове <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для рисования изображения на устройстве с разрешением 96 точек на дюйм размер отображаемого изображения в пикселях будет составлять (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="image">Изображение <see cref="T:System.Drawing.Image" /> для отрисовки.</param>
        <param name="rect">Прямоугольник <see cref="T:System.Drawing.Rectangle" />, в котором должно рисоваться изображение.</param>
        <summary>Рисует заданное изображение без масштабирования и при необходимости обрезает его, чтобы оно вмещалось в указываемом прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обработайте <xref:System.Windows.Forms.Control.Paint> событие формы и вызовите `DrawImageUnscaled` метод из <xref:System.Windows.Forms.Control.Paint> метода обработки событий, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Проводит линию, соединяющую две точки, задаваемые парами координат.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="pt1">Структура <see cref="T:System.Drawing.Point" />, представляющая первую точка для соединения.</param>
        <param name="pt2">Структура <see cref="T:System.Drawing.Point" />, представляющая вторую точка для соединения.</param>
        <summary>Проводит линию, соединяющую две структуры <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает точки для конечных точек линии.  
  
-   Отображает линию на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Рисование линий и фигур с помощью пера</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="pt1">Структура <see cref="T:System.Drawing.PointF" />, представляющая первую точка для соединения.</param>
        <param name="pt2">Структура <see cref="T:System.Drawing.PointF" />, представляющая вторую точка для соединения.</param>
        <summary>Проводит линию, соединяющую две структуры <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует линию, соединяющую две точки, указанные `pt1` параметрами и p.`2`  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает точки для конечных точек линии.  
  
-   Отображает линию на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Рисование линий и фигур с помощью пера</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="x1">Координата X первой точки.</param>
        <param name="y1">Координата Y первой точки.</param>
        <param name="x2">Координата X второй точки.</param>
        <param name="y2">Координата Y второй точки.</param>
        <summary>Проводит линию, соединяющую две точки, задаваемые парами координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `x1`Этот метод рисует линию `y1` `y2` , соединяющую две точки, указанные параметрами, ,и.`x2`  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает координаты конечных точек линии.  
  
-   Отображает линию на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Рисование линий и фигур с помощью пера</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="x1">Координата X первой точки.</param>
        <param name="y1">Координата Y первой точки.</param>
        <param name="x2">Координата X второй точки.</param>
        <param name="y2">Координата Y второй точки.</param>
        <summary>Проводит линию, соединяющую две точки, задаваемые парами координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `x1`Этот метод рисует линию `y1` `y2` , соединяющую две точки, указанные параметрами, ,и.`x2`  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает координаты конечных точек линии.  
  
-   Отображает линию на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">Рисование линий и фигур с помощью пера</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует набор сегментов линий, которые соединяют массив структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль сегментов линии.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют собой точки для соединения.</param>
        <summary>Рисует набор сегментов линий, которые соединяют массив структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует ряд линий, соединяющих массив конечных точек. Первые две точки в массиве указывают первую строку. Каждая дополнительная точка задает конец сегмента линии, начальная точка которого является конечной точкой предыдущего сегмента линии.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает массив точек для сегментов линии.  
  
-   Рисует сегменты Соединенных линий на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль сегментов линии.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют собой точки для соединения.</param>
        <summary>Рисует набор сегментов линий, которые соединяют массив структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует ряд линий, соединяющих массив конечных точек. Первые две точки в массиве указывают первую строку. Каждая дополнительная точка задает конец сегмента линии, начальная точка которого является конечной точкой предыдущего сегмента линии.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Код создает черное перо.  
  
-   Создает массив точек для сегментов линии.  
  
-   Рисует сегменты Соединенных линий на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль контура.</param>
        <param name="path">Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> для рисования.</param>
        <summary>Рисует объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущее преобразование в графическом контексте применяется к <xref:System.Drawing.Drawing2D.GraphicsPath> перед прорисовкой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект графического контура и добавляет к нему эллипс.  
  
-   Создает черное перо.  
  
-   Отображает графический контур на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="path" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует сектор, определяемый эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, представляющая прямоугольник, ограничивающий эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, который определяется эллипсом, заданным структурой <see cref="T:System.Drawing.Rectangle" /> и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует круговую фигуру, определяемую дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником. Круговая фигура состоит из двух радиальных линий, определяемых `startAngle` параметрами `sweepAngle` и, и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник, ограничивающий законченный эллипс.  
  
-   Определяет углы, с которых начинается рисование (относительно оси x) и для рисования (и в направлении по часовой стрелке).  
  
-   Рисует сегмент круга на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, представляющая прямоугольник, ограничивающий эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, который определяется эллипсом, заданным структурой <see cref="T:System.Drawing.RectangleF" /> и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует круговую фигуру, определяемую дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником. Круговая фигура состоит из двух радиальных линий, определяемых `startAngle` параметрами `sweepAngle` и, и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник, ограничивающий законченный эллипс.  
  
-   Определяет углы, с которых начинается рисование (относительно оси x) и для рисования (и в направлении по часовой стрелке).  
  
-   Рисует сегмент круга на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, определяемый эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует круговую фигуру, определяемую дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется `x`ограничивающим прямоугольником `width`, который описывается параметрами, `y`, и `height` . Круговая фигура состоит из двух радиальных линий, определяемых `startAngle` параметрами `sweepAngle` и, и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника, ограничивающего законченный эллипс.  
  
-   Определяет углы, с которых начинается рисование (относительно оси x) и для рисования (и в направлении по часовой стрелке).  
  
-   Отображает круговую фигуру на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, определяемый эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует круговую фигуру, определяемую дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется `x`ограничивающим прямоугольником `width`, который описывается параметрами, `y`, и `height` . Круговая фигура состоит из двух радиальных линий, определяемых `startAngle` параметрами `sweepAngle` и, и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника, ограничивающего законченный эллипс.  
  
-   Определяет углы, с которых начинается рисование (относительно оси x) и для рисования (и в направлении по часовой стрелке).  
  
-   Рисует сегмент круга на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует многоугольник, определяемый массивом структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль многоугольника.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют собой вершины многоугольника.</param>
        <summary>Рисует многоугольник, определяемый массивом структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая пара двух последовательных точек в массиве указывает сторону многоугольника. Кроме того, если последняя и первая точки массива не совпадают, они указывают последнюю сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает массив из семи точек для вершин многоугольника.  
  
-   Рисует многоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль многоугольника.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют собой вершины многоугольника.</param>
        <summary>Рисует многоугольник, определяемый массивом структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая пара двух последовательных точек в массиве указывает сторону многоугольника. Кроме того, если последняя и первая точки массива не совпадают, они указывают последнюю сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает массив из семи точек для вершин многоугольника.  
  
-   Рисует многоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует прямоугольник, который определен парой координат, шириной и высотой.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль прямоугольника.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, представляющая прямоугольник для рисования.</param>
        <summary>Рисует прямоугольник, определяемый структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о рисовании см. <xref:System.Drawing.RectangleF>в разделе <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает прямоугольник.  
  
-   Отображает прямоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль прямоугольника.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для рисования.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для рисования.</param>
        <param name="width">Ширина прямоугольника для рисования.</param>
        <param name="height">Высота прямоугольника для рисования.</param>
        <summary>Рисует прямоугольник, который определен парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о рисовании см. <xref:System.Drawing.RectangleF>в разделе <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника.  
  
-   Отображает прямоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль прямоугольника.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для рисования.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для рисования.</param>
        <param name="width">Ширина прямоугольника для рисования.</param>
        <param name="height">Высота прямоугольника для рисования.</param>
        <summary>Рисует прямоугольник, который определен парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о рисовании см. <xref:System.Drawing.RectangleF>в разделе <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает расположение и размер прямоугольника.  
  
-   Отображает прямоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует набор прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль контуров прямоугольников.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.Rectangle" />, которые представляют прямоугольники для рисования.</param>
        <summary>Рисует набор прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает массив из трех прямоугольников.  
  
-   Отображает прямоугольники на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="rects" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль контуров прямоугольников.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.RectangleF" />, которые представляют прямоугольники для рисования.</param>
        <summary>Рисует набор прямоугольников, определяемых структурами <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает черное перо.  
  
-   Создает массив из трех прямоугольников.  
  
-   Отображает прямоугольники на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="rects" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает указываемую текстовую строку в заданном месте с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="point">Структура <see cref="T:System.Drawing.PointF" />, задающая верхний левый угол создаваемого текста.</param>
        <summary>Создает указываемую текстовую строку в заданном месте с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для рисования.  
  
-   Определяет шрифт как Arial (16pt).  
  
-   Создает сплошную черную кисть для рисования.  
  
-   Создает точку для левого верхнего угла рисования текста.  
  
-   Отображает строку на экране, используя шрифт, кисть и конечную точку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
- или - 
 <paramref name="s" /> — <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="layoutRectangle">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает место расположения создаваемого текста.</param>
        <summary>Рисует заданную текстовую строку в указанном прямоугольнике с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текст, представленный `s` параметром, рисуется внутри прямоугольника, представленного `layoutRectangle` параметром. Если текст не умещается внутри прямоугольника, он усекается в ближайшее слово. Для дальнейшего управления отображением строки внутри прямоугольника используйте <xref:System.Drawing.Graphics.DrawString%2A> перегрузку, которая <xref:System.Drawing.StringFormat>принимает.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для рисования.  
  
-   Определяет шрифт как Arial (16pt).  
  
-   Создает сплошную черную кисть для рисования.  
  
-   Создает прямоугольник, в котором будет нарисован текст.  
  
-   Отображает прямоугольник на экране.  
  
-   Отображает строку на экране с помощью шрифта, кисти и прямоугольника назначения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="point">Структура <see cref="T:System.Drawing.PointF" />, задающая верхний левый угол создаваемого текста.</param>
        <param name="format">Объект <see cref="T:System.Drawing.StringFormat" />, определяющий атрибуты форматирования, такие как междустрочный интервал и выравнивание, которые применяются к создаваемому тексту.</param>
        <summary>Рисует заданную текстовую строку в заданном месте с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />, используя атрибуты форматирования заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для рисования.  
  
-   Определяет шрифт как Arial (16pt).  
  
-   Создает сплошную черную кисть для рисования.  
  
-   Создает точку для левого верхнего угла рисования текста.  
  
-   Задает формат строки для вертикального рисования.  
  
-   Отображает строку на экране, используя шрифт, кисть, конечную точку и формат.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="layoutRectangle">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает место расположения создаваемого текста.</param>
        <param name="format">Объект <see cref="T:System.Drawing.StringFormat" />, определяющий атрибуты форматирования, такие как междустрочный интервал и выравнивание, которые применяются к создаваемому тексту.</param>
        <summary>Рисует заданную текстовую строку в заданном прямоугольнике с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />, используя атрибуты форматирования заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текст, представленный `s` параметром, рисуется внутри прямоугольника, представленного `layoutRectangle` параметром. Если текст не умещается внутри прямоугольника, он усекается в ближайшее слово, если не указано иное с помощью `format` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для рисования.  
  
-   Определяет шрифт как Arial (16pt).  
  
-   Создает сплошную черную кисть для рисования.  
  
-   Создает прямоугольник, в котором будет нарисован текст.  
  
-   Отображает прямоугольник на экране.  
  
-   Задает формат строки для ее центрирования внутри прямоугольника.  
  
-   Отображает строку на экране с помощью шрифта, кисти и прямоугольника назначения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
-или- 
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="x">Координата X верхнего левого угла отображаемого текста.</param>
        <param name="y">Координата Y верхнего левого угла отображаемого текста.</param>
        <summary>Создает указываемую текстовую строку в заданном месте с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для рисования.  
  
-   Определяет шрифт как Arial (16pt).  
  
-   Создает сплошную черную кисть для рисования.  
  
-   Создает точку для левого верхнего угла рисования текста.  
  
-   Отображает строку на экране, используя шрифт, кисть и конечную точку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="x">Координата X верхнего левого угла отображаемого текста.</param>
        <param name="y">Координата Y верхнего левого угла отображаемого текста.</param>
        <param name="format">Объект <see cref="T:System.Drawing.StringFormat" />, определяющий атрибуты форматирования, такие как междустрочный интервал и выравнивание, которые применяются к создаваемому тексту.</param>
        <summary>Рисует заданную текстовую строку в заданном месте с помощью определяемых объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />, используя атрибуты форматирования заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для рисования.  
  
-   Определяет шрифт как Arial (16pt).  
  
-   Создает сплошную черную кисть для рисования.  
  
-   Создает координаты точки для левого верхнего угла рисования текста.  
  
-   Задает формат строки для вертикального рисования  
  
-   Отображает строку на экране, используя шрифт, кисть, конечную точку и формат.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="s" /> — <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">Объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, представляющий контейнер, восстанавливаемый этим методом.</param>
        <summary>Закрывает текущий графический контейнер и восстанавливает состояние данного объекта <see cref="T:System.Drawing.Graphics" />, которое было сохранено при вызове метода <see cref="M:System.Drawing.Graphics.BeginContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод с <xref:System.Drawing.Graphics.BeginContainer%2A> методом для создания вложенных графических контейнеров. Графические контейнеры имеют состояние графика, например преобразование, область отсечения и свойства подготовки к просмотру.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода <xref:System.Drawing.Graphics>объекта информационный блок, <xref:System.Drawing.Graphics> содержащий состояние, помещается в стек. Метод возвращает объект <xref:System.Drawing.Drawing2D.GraphicsContainer> , который идентифицирует этот блок информации. <xref:System.Drawing.Graphics.BeginContainer%2A> При передаче идентифицирующего объекта в <xref:System.Drawing.Graphics.EndContainer%2A> метод информационный блок удаляется из стека и используется для <xref:System.Drawing.Graphics> восстановления до состояния, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; Это значит, что <xref:System.Drawing.Graphics.BeginContainer%2A> метод можно вызвать несколько раз перед <xref:System.Drawing.Graphics.EndContainer%2A> вызовом метода. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода информационный блок помещается в стек, а <xref:System.Drawing.Drawing2D.GraphicsContainer> для информационного блока получается. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> в метод <xref:System.Drawing.Graphics> возвращается в состояние, в котором оно находилось в момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, который возвращал эту конкретную <xref:System.Drawing.Drawing2D.GraphicsContainer>функцию. Информационный блок, помещенный в стек <xref:System.Drawing.Graphics.BeginContainer%2A> этим вызовом метода, удаляется из стека, а все информационные блоки, помещенные в этот стек после этого <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода, также удаляются.  
  
 Вызовы метода размещают информационные блоки в том же стеке, что и вызовы <xref:System.Drawing.Graphics.BeginContainer%2A> метода. <xref:System.Drawing.Graphics.Save%2A> Так же, <xref:System.Drawing.Graphics.EndContainer%2A> как вызов метода объединяется <xref:System.Drawing.Graphics.BeginContainer%2A> с вызовом метода, <xref:System.Drawing.Graphics.Restore%2A> вызов метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызовом метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> методом) после соответствующего вызова метода, удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> методом) после соответствующего вызова метода, удаляются из стека.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Открывает новый графический контейнер и сохраняет старый контейнер.  
  
-   Преобразует координаты мира в контейнере.  
  
-   Заполняет красный прямоугольник в (переведенные координаты) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный контейнер.  
  
-   Заполняет зеленый прямоугольник (до непреобразованных координат) сохраненного контейнера.  
  
 Результатом является зеленый прямоугольник, который пересекает красный прямоугольник того же размера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект<see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 В следующем примере кода создается форма, которая имеет <xref:System.Drawing.Imaging.Metafile> как один из своих закрытых членов. Метод вызывает <xref:System.Drawing.Graphics.EnumerateMetafile%2A> ,`MetafileCallback` который вызывает метод формы для каждой записи в метафайле. <xref:System.Windows.Forms.Control.OnPaint%2A> Метод `MetafileCallback` вызывает метод <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>. Обратите внимание `MetafileCallback` , что метод получает данные записи в <xref:System.IntPtr>виде, но <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод принимает данные записи в виде массива байтов. Вызов <xref:System.Runtime.InteropServices.Marshal.Copy%2A> копирует данные записи в массив байтов, чтобы их можно было <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>передать.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" /> , определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" /> , определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" /> , определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова`callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" /> , определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoint">Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданной точке, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" /> , определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой верхний левый, верхний правый и нижний левый угол параллелограмма. Четвертая точка выражается из первых трех, образуя параллелограмм. Отображаемый метафайл масштабируется и обрезается в соответствии с параллелограмм.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления.</param>
        <param name="destRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <paramref name="srcRect" />.</param>
        <param name="callback">Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" /> .</param>
        <param name="imageAttr">Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз методу обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты рисунка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись по отдельности отправляется в метод обратного вызова `callback` , указанный параметром. Как правило, метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызывает метод для воспроизведения или прорисовки записи.  
  
 Если метод обратного вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>вызывает, он должен сделать это, <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> вызвав метод <xref:System.Drawing.Imaging.Metafile> перечисления, для которого выполняется перечисление.  
  
 Любой рисунок, который выполняется за пределами прямоугольника, `srcRect` заданного параметром, игнорируется.  
  
 Атрибуты изображения, заданные `imageAttr` параметром, заменяют указанные при написании метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">Работа с растровыми и векторными изображениями с использованием классов Image, Bitmap и Metafile</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, чтобы исключить из нее часть, определяемую структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, которая задает прямоугольник, исключаемый из вырезанной области.</param>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, чтобы исключить из нее часть, определяемую структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод исключает область, указанную `rect` параметром из текущей области отсечения, и присваивает результирующую область <xref:System.Drawing.Graphics.Clip%2A> свойству этого <xref:System.Drawing.Graphics>объекта.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник размером 100 пикселей на 100 пикселей, верхний левый угол которого находится в координатах (100, 100).  
  
-   Создает область, определяемую прямоугольником.  
  
-   Задает область отсечения для исключения прямоугольной области.  
  
-   Заполняет 300 пикселей на 300 пиксельного прямоугольника, верхний левый угол которого находится в координатах (0,0) с сплошной синей кистью.  
  
 Результатом является синий прямоугольник с квадратной областью в сторону отсутствующего правого нижнего угла.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">Объект <see cref="T:System.Drawing.Region" />, который задает область, исключаемую из вырезанной области.</param>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, чтобы исключить из нее часть, определяемую структурой <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод исключает область, указанную `region` параметром из текущей области отсечения, и присваивает результирующую область <xref:System.Drawing.Graphics.Clip%2A> свойству этого <xref:System.Drawing.Graphics>объекта.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник размером 100 пикселей на 100 пикселей, верхний левый угол которого находится в координатах (100, 100).  
  
-   Задает область отсечения для исключения прямоугольника.  
  
-   Заполняет 300 пикселей на 300 пиксельного прямоугольника, верхний левый угол которого находится в координатах (0,0) с сплошной синей кистью.  
  
 Результатом является синий прямоугольник с квадратной областью, в которой отсутствует правый нижний угол.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной кривой, проходящей через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает массив из четырех точек для определения сплайна.  
  
-   Заполняет кривую на экране.  
  
 Значение натяжения кривой по умолчанию равно 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной кривой, проходящей через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.PointF> структуры.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает массив из четырех точек для определения сплайна.  
  
-   Заполняет кривую на экране.  
  
 Значение натяжения кривой по умолчанию равно 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <param name="fillmode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной сплайновой кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной кривой, проходящей через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает массив из четырех точек для определения сплайна.  
  
-   Задает для <xref:System.Drawing.Drawing2D.FillMode.Winding>режима заполнения значение.  
  
-   Заполняет кривую на экране.  
  
 Значение натяжения кривой по умолчанию равно 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <param name="fillmode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной сплайновой кривой, определяемой массивом структур <see cref="T:System.Drawing.PointF" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной кривой, проходящей через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение 0,5 по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает массив из четырех точек для определения сплайна.  
  
-   Задает для <xref:System.Drawing.Drawing2D.FillMode.Winding>режима заполнения значение.  
  
-   Заполняет кривую на экране.  
  
 Значение натяжения кривой по умолчанию равно 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
-или- 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющих кривую.</param>
        <param name="fillmode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />, используя указанные режим заливки и натяжение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной кривой, проходящей через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает массив из четырех точек для определения сплайна.  
  
-   Задает для <xref:System.Drawing.Drawing2D.FillMode.Winding>режима заполнения значение.  
  
-   Устанавливает натяжение равным 1,0.  
  
-   Заполняет кривую на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
-или- 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющих кривую.</param>
        <param name="fillmode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <param name="tension">Значение, превышающее или равное 0,0F, которое задает натяжение кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.PointF" />, используя указанные режим заливки и натяжение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной кривой, проходящей через каждую точку в массиве. Если последняя точка не соответствует первой, добавляется дополнительный сегмент кривой с последней точки на первую точку, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 `tension` Параметр определяет форму сплайна. Если значение `tension` параметра равно 0,0 f, этот метод рисует сегменты прямой линии для соединения точек. `tension` Обычно параметр меньше или равен 1,0 f. Значения более 1,0 F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает массив из четырех точек для определения сплайна.  
  
-   Задает для <xref:System.Drawing.Drawing2D.FillMode.Winding>режима заполнения значение.  
  
-   Устанавливает натяжение равным 1,0.  
  
-   Заполняет кривую на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, содержащая ограничивающий прямоугольник, определяющий эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, который задан структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с помощью <xref:System.Drawing.Brush>. Эллипс определяется ограничивающим прямоугольником, представленным `rect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает прямоугольник, ограничивающий эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, содержащая ограничивающий прямоугольник, определяющий эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, который задан структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с помощью <xref:System.Drawing.Brush>. Эллипс определяется ограничивающим прямоугольником, представленным `rect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает прямоугольник, ограничивающий эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с помощью <xref:System.Drawing.Brush>. Эллипс определяется `x`ограничивающим прямоугольником `width`, представленным параметрами, `y`, и `height` .  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает расположение и размер прямоугольника, ограничивающего эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с помощью <xref:System.Drawing.Brush>. Эллипс определяется `x`ограничивающим прямоугольником `width`, представленным параметрами, `y`, и `height` .  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает расположение и размер прямоугольника, ограничивающего эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="path">Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />, представляющий контур для заливки.</param>
        <summary>Заполняет внутреннюю часть объекта <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.GraphicsPath> Состоит из ряда сегментов линий и кривых. Если путь, представленный `path` параметром, не закрыт, добавляется дополнительный сегмент из последней точки к первой точке, чтобы закрыть путь.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает объект графического контура.  
  
-   Добавляет эллипс к графическому контуру.  
  
-   Заполняет контур на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="path" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, представляющая ограничивающий прямоугольник, определяющий эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан структурой <see cref="T:System.Drawing.RectangleF" />, и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть круговой секции, определяемой дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником. Раздел круга состоит из двух радиальных линий, определяемых `startAngle` параметрами `sweepAngle` и, и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает прямоугольник, ограничивающий эллипс.  
  
-   Определяет начальный угол (относительно оси x) и угол поворота (как в направлении по часовой стрелке).  
  
-   Заполняет область круговой формы эллипса на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть круговой секции, определяемой дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником. Раздел круга состоит из двух радиальных линий, определяемых `startAngle` параметрами `sweepAngle` и, и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает расположение и размер прямоугольника, ограничивающего эллипс.  
  
-   Определяет начальный угол (относительно оси x) и угол поворота (как в направлении по часовой стрелке).  
  
-   Заполняет область круговой формы эллипса на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <paramref name="startAngle" /> и заканчивая второй стороной сектора.</param>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть круговой секции, определяемой дугой эллипса, и двумя радиальными линиями, пересекающимися с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником. Сектор состоит из двух радиальных линий, определяемых `startAngle` параметрами и `sweepAngle` , и дуги между пересечениями этих радиальных линий с помощью эллипса.  
  
 `sweepAngle` Если параметр имеет значение больше 360 градусов или меньше-360 градусов, он обрабатывается так, как если бы он был равен 360 градусам или-360 градусам соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную красную кисть.  
  
-   Создает расположение и размер прямоугольника, ограничивающего эллипс.  
  
-   Определяет начальный угол (относительно оси x) и угол поворота (как в направлении по часовой стрелке).  
  
-   Заполняет область круговой формы эллипса на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть многоугольника, определяемого массивом точек, заданных структурами <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определяемого массивом точек, заданных структурами <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая две последовательные точки в массиве указывают сторону многоугольника. Кроме того, если последняя и первая точки не совпадают, они указывают закрывающую сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определяемого массивом точек, заданных структурами <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая две последовательные точки в массиве указывают сторону многоугольника. Кроме того, если последняя и первая точки не совпадают, они указывают закрывающую сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
- или - 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <param name="fillMode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий стиль заливки.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определенного массивом точек, заданных структурами <see cref="T:System.Drawing.Point" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая две последовательные точки в массиве указывают сторону многоугольника. Кроме того, если последняя и первая точки не совпадают, они указывают закрывающую сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Задает для <xref:System.Drawing.Drawing2D.FillMode.Winding>режима заполнения значение.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="points" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <param name="fillMode">Член перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий стиль заливки.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определенного массивом точек, заданных структурами <see cref="T:System.Drawing.PointF" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая две последовательные точки в массиве указывают сторону многоугольника. Кроме того, если последняя и первая точки не совпадают, они указывают закрывающую сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Задает для <xref:System.Drawing.Drawing2D.FillMode.Winding>режима заполнения значение.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть прямоугольника, который определен парой координат, шириной и высотой.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, представляющая прямоугольник для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, определяемого структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть прямоугольника, определяемого `rect` параметром, включая заданный верхний левый угол и до вычисляемого нижнего и нижнего краев.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает прямоугольник.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, представляющая прямоугольник для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, определяемого структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть прямоугольника, определяемого `rect` параметром, включая заданный верхний левый угол и до вычисляемого нижнего и нижнего краев.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает прямоугольник.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для заливки.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для заливки.</param>
        <param name="width">Ширина прямоугольника для заливки.</param>
        <param name="height">Высота прямоугольника для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, который определен парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет`x`внутреннюю часть прямоугольника, определяемого параметрами, `y`, `width`и `height` , включая заданный верхний левый угол и до вычисляемых нижних и нижних границ.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает расположение и размер прямоугольника.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для заливки.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для заливки.</param>
        <param name="width">Ширина прямоугольника для заливки.</param>
        <param name="height">Высота прямоугольника для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, который определен парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет `x`внутреннюю часть прямоугольника, определяемого параметрами, `y`, `width`и `height` , включая заданный верхний левый угол и до вычисляемых нижних и нижних границ.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает расположение и размер прямоугольника.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть набора прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.Rectangle" />, которые представляют прямоугольники для заливки.</param>
        <summary>Заполняет внутреннюю часть набора прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает массив из трех прямоугольников.  
  
-   Заполняет три прямоугольные области на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> — <see langword="null" />.  
  
- или - 
 <paramref name="rects" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.RectangleF" />, которые представляют прямоугольники для заливки.</param>
        <summary>Заполняет внутреннюю часть набора прямоугольников, определяемых структурами <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает массив из трех прямоугольников.  
  
-   Заполняет три прямоугольные области на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="rects" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="region">Объект <see cref="T:System.Drawing.Region" />, представляющий область для заливки.</param>
        <summary>Заполняет внутреннюю часть объекта <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Region> состоит из прямоугольников и контуров. Если область не закрыта, для ее закрытия добавляется дополнительный сегмент из последней точки к первой точке.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает сплошную кисть синего цвета.  
  
-   Создает прямоугольник.  
  
-   Создает прямоугольную область.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="region" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вызывает принудительное выполнение всех отложенных графических операций и немедленно возвращается, не дожидаясь их окончания.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывает принудительное выполнение всех отложенных графических операций и немедленно возвращается, не дожидаясь их окончания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод запускает сброс и немедленно возвращает значение без ожидания завершения любой выполняемой в данный момент операции графики.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">Член перечисления <see cref="T:System.Drawing.Drawing2D.FlushIntention" />, которым определяется, будет ли метод выполнять немедленный возврат или будет ожидать окончания всех выполняемых операций.</param>
        <summary>Вызывает принудительное выполнение всех отложенных графических операций. При этом в соответствии с настройкой метод дожидается или не дожидается окончания операций для возврата.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.Drawing.Drawing2D.FlushIntention.Flush> <xref:System.Drawing.Drawing2D.FlushIntention.Sync> для параметра указывает, что метод возвращает значение сразу после начала записи, а параметр указывает, что метод ожидает перед возвратом до тех пор, пока не завершится ни одна из существующих операций. `intention`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора для контекста устройства.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора для контекста устройства.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для контекста заданного устройства.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для <xref:System.Drawing.Graphics> освобождения <xref:System.Drawing.Graphics.FromHdc%2A> связанных ресурсов, созданных методом.  
  
 Даже если устройство вывода имеет связанный цветовой профиль ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] по умолчанию этот профиль использовать не будет. Чтобы включить ICM для <xref:System.Drawing.Graphics>, <xref:System.Drawing.Graphics> создайте из с параметром hdc после передачи в `SetICMMode` функцию HDC (и ICM_ON). Затем любая прорисовка, выполненная с помощью, <xref:System.Drawing.Graphics> будет скорректирована в соответствии с профилем ICM, связанным с устройством отображения. Включение ICM приведет к снижению производительности.  
  
 Состояние контекста устройства (режим сопоставления, логическая единица и т. д.) во время вызова <xref:System.Drawing.Graphics.FromHdc%2A> может повлиять на отрисовку, <xref:System.Drawing.Graphics>выполненную.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает переменную `hdc` внутреннего типа указателя и задает ее в качестве маркера для контекста устройства графического объекта формы.  
  
-   Создает новый графический объект с помощью `hdc`.  
  
-   Рисует прямоугольник с новым графическим объектом (на экране).  
  
-   Освобождает новый графический объект с помощью `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <param name="hdevice">Дескриптор устройства.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора контекста устройства и дескриптора устройства.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для контекста заданного устройства и самого устройства.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для <xref:System.Drawing.Graphics> освобождения <xref:System.Drawing.Graphics.FromHdc%2A> связанных ресурсов, созданных методом.  
  
 Даже если устройство вывода имеет связанный цветовой профиль ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] по умолчанию этот профиль использовать не будет. Чтобы включить ICM для <xref:System.Drawing.Graphics>, <xref:System.Drawing.Graphics> создайте из с параметром hdc после передачи в `SetICMMode` функцию HDC (и ICM_ON). Затем любая прорисовка, выполненная с помощью, <xref:System.Drawing.Graphics> будет скорректирована в соответствии с профилем ICM, связанным с устройством отображения. Включение ICM приведет к снижению производительности.  
  
 Состояние контекста устройства (режим сопоставления, логическая единица и т. д.) во время вызова <xref:System.Drawing.Graphics.FromHdc%2A> может повлиять на отрисовку, <xref:System.Drawing.Graphics>выполненную.  
  
 Маркер устройства обычно используется для запроса конкретных возможностей принтера.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <summary>Возвращает объект <see cref="T:System.Drawing.Graphics" /> для контекста заданного устройства.</summary>
        <returns>Объект <see cref="T:System.Drawing.Graphics" /> для контекста заданного устройства.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не следует использовать.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Дескриптор окна.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора окна.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для заданного дескриптора окна.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для <xref:System.Drawing.Graphics> освобождения <xref:System.Drawing.Graphics.FromHwnd%2A> связанных ресурсов, созданных методом.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms <xref:System.Windows.Forms.PaintEventArgs>и требует `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика <xref:System.Windows.Forms.Form> событий, а также `thisForm`для примера. Код выполняет следующие действия.  
  
-   Создает новую переменную `hwnd` внутреннего указателя и задает ее в качестве маркера формы в примере.  
  
-   Создает новый <xref:System.Drawing.Graphics> объект из маркера.  
  
-   Рисует прямоугольник в новом <xref:System.Drawing.Graphics> виде с помощью красного пера.  
  
-   Уничтожает новый <xref:System.Drawing.Graphics>объект.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Дескриптор окна.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> для указанного дескриптора окна.</summary>
        <returns>Объект <see cref="T:System.Drawing.Graphics" /> для указанного дескриптора окна.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не следует использовать.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">Объект <see cref="T:System.Drawing.Image" />, на основе которого будет создан новый объект <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного рисунка <see cref="T:System.Drawing.Image" />.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для указанного объекта <see cref="T:System.Drawing.Image" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если изображение имеет индексированный формат пикселей, этот метод создает исключение с сообщением "не удается создать объект Graphics из изображения с индексированным форматом пикселей". В следующем списке показаны Индексированные форматы пикселей.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 Можно сохранить индексированное изображение в другом формате с помощью <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> метода, а затем <xref:System.Drawing.Graphics> извлечь объект для нового изображения.  
  
 Этот метод также вызывает исключение, если изображение имеет любой из следующих форматов пикселей.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для <xref:System.Drawing.Graphics> освобождения <xref:System.Drawing.Graphics.FromImage%2A> связанных ресурсов, созданных методом.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующее действие:  
  
-   Создает объект <xref:System.Drawing.Image> из графического файла сампимаг. jpg в папке example.  
  
-   Создает объект <xref:System.Drawing.Graphics> <xref:System.Drawing.Image>из.  
  
-   Изменяет изображение, заполняя в нем прямоугольник.  
  
-   <xref:System.Drawing.Image> Отображает на экране.  
  
-   Освобождает созданный <xref:System.Drawing.Graphics>объект.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Объект <paramref name="image" /> имеет индексированный формат пикселей или его формат не определен.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/737bae30-e599-4e1d-bf30-bab8280b32be">Практическое руководство. Создание растрового изображения во время выполнения</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a626d701-bd99-4fd8-b92f-7b8f794e042b">Работа с растровыми и векторными изображениями</related>
        <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">Практическое руководство. Создание объектов Graphics для рисования</related>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает совокупный контекст графики.</summary>
        <returns>Объект <see cref="T:System.Object" />, представляющий совокупный контекст графики.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение — это массив объектов, в котором первый элемент содержит совокупную область отсечения, а второй элемент содержит совокупную матрицу преобразования и преобразования.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает дескриптор текущей полутоновой палитры Windows.</summary>
        <returns>Внутренний указатель, который задает дескриптор палитры.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод предназначен [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] для повышения качества передачи полутонов, когда на дисплее используется 8 бит на пиксель. <xref:System.Drawing.Graphics.GetHalftonePalette%2A> Чтобы отобразить изображение с помощью палитры полутонов, выполните следующую процедуру.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Определяет атрибуты взаимодействия <xref:System.Runtime.InteropServices.DllImportAttribute> для файла DLL Windows GDI32. dll, который содержит необходимые [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функции.  
  
-   Определяет функции `RealizePalette` и в этой библиотеке DLL как внешние. `SelectPalette`  
  
-   Создает образ из существующего файла образа Сампимаг. jpg (который должен находиться в той же папке, что и файл с примером кода) и рисует изображение на экране.  
  
-   Создает переменные внутреннего типа указателя и задает их значения для объекта Graphics и для текущей палитры полутонов Windows соответственно.  
  
-   Выбирает и реализует палитру полутонов.  
  
-   Создает новый графический объект, `hdc` используя параметр.  
  
-   Снова отображает изображение.  
  
-   Освобождает дескриптор контекста устройства.  
  
 Результатом является два рендеринга образца изображения: один с 16-разрядной палитрой и один с 8-разрядной палитрой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHdc() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetHdc();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает дескриптор контекста устройства, связанный с данным объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Дескриптор контекста устройства, связанный с данным объектом <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Контекст устройства представляет собой структуру Windows, основанную [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] на, которая определяет набор графических объектов и связанных с ними атрибутов, а также графические режимы, влияющие на выходные данные. Этот метод возвращает контекст устройства, за исключением шрифта. Поскольку шрифт не выбран, вызовы <xref:System.Drawing.Font.FromHdc%2A> метода с использованием маркера, возвращенного <xref:System.Drawing.Graphics.GetHdc%2A> методом, завершатся ошибкой.  
  
 Вызовы методов <xref:System.Drawing.Graphics.ReleaseHdc%2A> и должны быть парными. <xref:System.Drawing.Graphics.GetHdc%2A> Во время создания пары методов <xref:System.Drawing.Graphics.ReleaseHdc%2A> [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]иобычно вызываются только функции. <xref:System.Drawing.Graphics.GetHdc%2A> Вызовы в этой области, сделанные [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] для методов <xref:System.Drawing.Graphics> , вызвавших этот `hdc` параметр, завершаются `ObjectBusy` ошибкой. Кроме того [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] , игнорирует любые изменения состояния, <xref:System.Drawing.Graphics> `hdc` внесенные в параметр в последующих операциях.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. В примере показан вызов функции Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] для выполнения той же задачи [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> , что и метод. Код выполняет следующие действия.  
  
-   Определяет атрибут взаимодействия <xref:System.Runtime.InteropServices.DllImportAttribute> для DLL-файла Windows GDI32. dll. Эта библиотека DLL содержит нужную [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функцию.  
  
-   <xref:System.Drawing.Rectangle> Определяет функцию в этой библиотеке DLL как внешнюю.  
  
-   Создает красное перо.  
  
-   При помощи пера рисует прямоугольник на экране с помощью [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> метода.  
  
-   Определяет переменную `hdc` внутреннего типа указателя и задает для ее значения маркер контекста устройства формы.  
  
-   Рисует прямоугольник на экране с помощью [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> функции.  
  
-   Освобождает контекст устройства, представленный `hdc` параметром.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Структура <see cref="T:System.Drawing.Color" />, для которой необходимо найти соответствие.</param>
        <summary>Получает цвет, ближайший к указанной структуре <see cref="T:System.Drawing.Color" />.</summary>
        <returns>Структура <see cref="T:System.Drawing.Color" />, представляющая цвет, ближайший к цвету, определяемому с помощью параметра <paramref name="color" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает произвольный цвет с координатами ARGB (255, 165, 63, 136).  
  
-   Создает сплошную кисть и устанавливает для ее цвета указанный цвет.  
  
-   Заполняет эллипс, используя произвольный цвет.  
  
-   Создает второй цвет и присваивает его значение ближайшему системному цвету ARGB.  
  
-   Заполняет второй эллипс этим цветом.  
  
 Результатом является два эллипса: первый рисуется с произвольным указанным цветом, второй — с помощью системного цвета, ближайшего к указанному цвету.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает режим интерполяции, связанный с данным объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Drawing.Drawing2D.InterpolationMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Режим интерполяции определяет, как вычисляются промежуточные значения между двумя конечными точками.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей вырезанной области и указанной структуры <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, пересекающаяся с текущей вырезанной областью.</param>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей вырезанной области и указанной структуры <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод присваивает <xref:System.Drawing.Graphics.Clip%2A> свойство этой <xref:System.Drawing.Graphics> области, представленной пересечением текущей вырезанной области, и прямоугольника, заданного `rect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с верхним левым углом в точке (0, 0) и задает в качестве вырезанной области этот прямоугольник.  
  
-   Создает второй прямоугольник с верхним левым углом в (100, 100) и задает в качестве вырезанной области пересечение этого прямоугольника и текущей области отсечения (первый прямоугольник).  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих прямоугольника, сплошной синей кистью.  
  
-   Сбрасывает отсеченную область до бесконечности.  
  
-   Рисование прямоугольников вокруг двух областей отсечения. Он использует черное перо для первого прямоугольника обрезки и красное перо для второй области обрезки.  
  
 В результате только пересечение двух прямоугольников заполняется синим.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, пересекающаяся с текущей вырезанной областью.</param>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей вырезанной области и указанной структуры <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод присваивает <xref:System.Drawing.Graphics.Clip%2A> свойство этой <xref:System.Drawing.Graphics> области, представленной пересечением текущей вырезанной области, и прямоугольника, заданного `rect` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с верхним левым углом в точке (0, 0) и задает в качестве вырезанной области этот прямоугольник.  
  
-   Создает второй прямоугольник с верхним левым углом в (100, 100) и задает в качестве вырезанной области пересечение этого прямоугольника и текущей области отсечения (первый прямоугольник).  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих прямоугольника, сплошной синей кистью.  
  
-   Сбрасывает отсеченную область до бесконечности.  
  
-   Рисование прямоугольников вокруг двух областей отсечения. Он использует черное перо для первого прямоугольника обрезки и красное перо для второй области обрезки.  
  
 В результате только пересечение двух прямоугольников заполняется синим.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">Объект <see cref="T:System.Drawing.Region" />, пересекающийся с текущей областью.</param>
        <summary>Обновляет вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей вырезанной области и указанной структуры <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод присваивает <xref:System.Drawing.Graphics.Clip%2A> свойству этой <xref:System.Drawing.Graphics> области, представленной пересечением текущей вырезанной области, и региону, заданному `region` параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с верхним левым углом в точке (0, 0).  
  
-   Создает регион и задает его для прямоугольника и задает область отсечения в этом регионе.  
  
-   Создает второй прямоугольник с верхним левым углом в (100, 100).  
  
-   Создает регион и задает его для второго прямоугольника и задает для вырезанной области пересечение этой области и текущей области отсечения (первый прямоугольник), используя режим <xref:System.Drawing.Drawing2D.CombineMode.Replace>объединения.  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих региона, сплошной синей кистью.  
  
-   Сбрасывает отсеченную область до бесконечности.  
  
-   Рисование прямоугольников вокруг двух областей отсечения. Он использует черное перо для первой вырезанной области и красное перо для второй области обрезки.  
  
 В результате пересечение двух регионов заполняется синим.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, является ли вырезанная область данного объекта <see cref="T:System.Drawing.Graphics" /> пустой.</summary>
        <value>Значение <see langword="true" />, если вырезанная область данного объекта <see cref="T:System.Drawing.Graphics" /> является пустой; в противном случае устанавливается значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Указывает, содержится ли точка, задаваемая с помощью пары координат, в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Структура <see cref="T:System.Drawing.Point" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли заданная структура <see cref="T:System.Drawing.Point" /> в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если точка, задаваемая параметром <paramref name="point" />, содержится в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: одну внутри вырезанной области и одну за другой.  
  
-   Проверяет каждую из точек на видимость и рисует только видимую.  
  
 Результатом является один маленький красный круг, который находится внутри области обрезки.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">Структура <see cref="T:System.Drawing.PointF" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли заданная структура <see cref="T:System.Drawing.PointF" /> в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если точка, задаваемая параметром <paramref name="point" />, содержится в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную отсеченную область и задает ее в качестве вырезанной области для графики формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: одну внутри вырезанной области и одну за другой.  
  
-   Проверяет каждую из точек на видимость и рисует только видимую.  
  
 Результатом является один маленький красный круг, который находится внутри области обрезки.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый структурой <see cref="T:System.Drawing.Rectangle" />, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если прямоугольник, задаваемый параметром <paramref name="rect" />, содержится в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает расположение и размер двух прямоугольников, один внутри вырезанной области, а второй — снаружи.  
  
-   Проверяет видимость каждого прямоугольника и отображает только видимый.  
  
 Результатом является один маленький красный прямоугольник, который находится внутри области отсечения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый структурой <see cref="T:System.Drawing.RectangleF" />, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если прямоугольник, задаваемый параметром <paramref name="rect" />, содержится в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает два прямоугольника, один внутри вырезанной области, а второй — снаружи.  
  
-   Проверяет видимость каждого прямоугольника и отображает только видимый.  
  
 Результатом является один маленький красный прямоугольник, который находится внутри области отсечения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X точки, проверяемой на видимость.</param>
        <param name="y">Координата Y точки, проверяемой на видимость.</param>
        <summary>Указывает, содержится ли точка, задаваемая с помощью пары координат, в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если точка, определяемая параметрами <paramref name="x" /> и <paramref name="y" />, содержится внутри видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: одну внутри вырезанной области и одну за другой.  
  
-   Проверяет каждую из точек на видимость и рисует только видимую.  
  
 Результатом является один маленький красный круг, который находится внутри области обрезки.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Координата X точки, проверяемой на видимость.</param>
        <param name="y">Координата Y точки, проверяемой на видимость.</param>
        <summary>Указывает, содержится ли точка, задаваемая с помощью пары координат, в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если точка, определяемая параметрами <paramref name="x" /> и <paramref name="y" />, содержится внутри видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: одну внутри вырезанной области и одну за другой.  
  
-   Проверяет каждую из точек на видимость и рисует только видимую.  
  
 Результатом является один маленький красный круг, который находится внутри области обрезки.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X верхнего левого угла прямоугольника, проверяемого на видимость.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника, проверяемого на видимость.</param>
        <param name="width">Ширина прямоугольника, проверяемого на видимость.</param>
        <param name="height">Высота прямоугольника, проверяемого на видимость.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый с помощью пары координат, ширины и высоты, в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если прямоугольник, определяемый параметрами <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> и <paramref name="height" />, содержится внутри видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает расположение и размер двух прямоугольников, один внутри вырезанной области, а второй — снаружи.  
  
-   Проверяет видимость каждого прямоугольника и отображает только видимый.  
  
 Результатом является один маленький красный прямоугольник, который находится внутри области отсечения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Координата X верхнего левого угла прямоугольника, проверяемого на видимость.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника, проверяемого на видимость.</param>
        <param name="width">Ширина прямоугольника, проверяемого на видимость.</param>
        <param name="height">Высота прямоугольника, проверяемого на видимость.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый с помощью пары координат, ширины и высоты, в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение <see langword="true" />, если прямоугольник, определяемый параметрами <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> и <paramref name="height" />, содержится внутри видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольную вырезанную область и задает ее в качестве вырезанной области для графического объекта формы с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает расположение и размер двух прямоугольников, один внутри вырезанной области, а второй — снаружи.  
  
-   Проверяет видимость каждого прямоугольника и отображает только видимый.  
  
 Результатом является один маленький красный прямоугольник, который находится внутри области отсечения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, которое указывает, является ли видимая вырезанная область данного объекта <see cref="T:System.Drawing.Graphics" /> пустой.</summary>
        <value>Значение <see langword="true" />, если видимая часть вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> является пустой; в противном случае устанавливается значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Видимая область обрезки является пересечением области обрезки этого `Graphics` и вырезанной области окна.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="layoutRect">Структура <see cref="T:System.Drawing.RectangleF" />, которая задает прямоугольник компоновки для строки.</param>
        <param name="stringFormat">Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, такие как междустрочный интервал.</param>
        <summary>Получает массив объектов <see cref="T:System.Drawing.Region" />, каждый из которых ограничивает диапазон позиций символов в рамках указанной строки.</summary>
        <returns>Этот метод возвращает массив объектов <see cref="T:System.Drawing.Region" />, каждый из которых ограничивает диапазон позиций символов в рамках указанной строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Регионы, возвращаемые этим методом, зависят от разрешения, поэтому может возникнуть небольшая вероятность потери точности, если строки записываются в метафайл в одном разрешении и затем воспроизводятся с другим разрешением.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Задает строку "первый и второй диапазоны" и шрифт для вывода строки ("Times New Roman", 16 точек).  
  
-   Задает два диапазона символов в строке (что соответствует словам "First" и "Second").  
  
-   Создает прямоугольник, в котором отображается строка.  
  
-   Задает форматирование строки 3/4, включая два диапазона символов.  
  
-   Отображает строку на экране.  
  
-   Измеряет диапазоны символов, определяет прямоугольники, ограничивающие два указанных диапазона.  
  
-   Рисует два прямоугольника на экране.  
  
 Результатом является отображаемая строка с первым диапазоном ("первый"), ограниченный красным прямоугольником, и вторым диапазоном ("Second"), ограниченным синим прямоугольником.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Измеряет указанную строку в процессе ее создания с помощью заданного объекта <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <summary>Измеряет указанную строку в процессе ее создания с помощью заданного объекта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> в процессе рисования с использованием шрифта <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat>которые принимают и <xref:System.Drawing.StringFormat.GenericTypographic%2A>передают. Кроме того, убедитесь <xref:System.Drawing.Graphics.TextRenderingHint%2A> , что <xref:System.Drawing.Graphics> для <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>имеет значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения.  
  
-   Создает объект Font и присваивает ему значение Arial (16 точек).  
  
-   Создает объект размера, использует его и объект Font для измерения размера строки.  
  
-   Рисует прямоугольник красного цвета с помощью измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" /> определяет формат текстовой строки.</param>
        <param name="layoutArea">Структура <see cref="T:System.Drawing.SizeF" />, которая задает максимальную область размещения для текста.</param>
        <summary>Измеряет указанную строку в процессе ее создания с заданным шрифтом <see cref="T:System.Drawing.Font" /> в пределах заданной области макета.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> в процессе рисования с использованием шрифта <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat>которые принимают и <xref:System.Drawing.StringFormat.GenericTypographic%2A>передают. Кроме того, убедитесь <xref:System.Drawing.Graphics.TextRenderingHint%2A> , что <xref:System.Drawing.Graphics> для <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>имеет значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения, а объект Font имеет значение Arial (16 точек).  
  
-   Задает максимальный размер макета строки.  
  
-   Создает объект размера и использует его, объект Font и максимальный размер макета для измерения размера строки.  
  
-   Рисует прямоугольник красного цвета с помощью измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="width">Максимальная ширина строки (в пикселях).</param>
        <summary>Измеряет указанную строку в процессе ее создания с помощью заданного объекта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> в процессе рисования с использованием шрифта <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр задает максимальное значение компонента Width возвращаемой <xref:System.Drawing.SizeF> структуры (<xref:System.Drawing.SizeF.Width%2A>). `width` Если параметр меньше фактической ширины строки, возвращаемый <xref:System.Drawing.SizeF.Width%2A> компонент усекается до значения, представляющего максимальное число символов, которое будет соответствовать заданной ширине. `width` Чтобы разместить всю строку, возвращаемый <xref:System.Drawing.SizeF.Height%2A> компонент корректируется на значение, позволяющее отобразить строку с переносом символов.  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat>которые принимают и <xref:System.Drawing.StringFormat.GenericTypographic%2A>передают. Кроме того, убедитесь <xref:System.Drawing.Graphics.TextRenderingHint%2A> , что <xref:System.Drawing.Graphics> для <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>имеет значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения, а объект Font имеет значение Arial (16 точек).  
  
-   Задает максимальную ширину строки.  
  
-   Создает объект размера, использует его, объект Font и максимальную ширину строки для измерения размера строки.  
  
-   Рисует прямоугольник красного цвета с помощью измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" /> определяет формат текстовой строки.</param>
        <param name="origin">Структура <see cref="T:System.Drawing.PointF" />, представляющая расположение верхнего левого угла строки.</param>
        <param name="stringFormat">Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, такие как междустрочный интервал.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> при отображении с шрифтом <paramref name="font" /> и форматом <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat>которые принимают и <xref:System.Drawing.StringFormat.GenericTypographic%2A>передают. Кроме того, убедитесь <xref:System.Drawing.Graphics.TextRenderingHint%2A> , что <xref:System.Drawing.Graphics> для <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>имеет значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта, установленный в значение Arial (16 точек)  
  
-   Создает точку для размещения верхнего левого угла строки.  
  
-   Создает объект формата строки и устанавливает для его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>значение.  
  
-   Создает объект Size для измерения строки.  
  
-   Измеряет размер строки, используя строку, объект Font, точку поиска и формат строки.  
  
-   Рисует прямоугольник красного цвета с помощью точки поиска и измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
 Результатом является вертикальный прямоугольник, включающий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" /> определяет формат текстовой строки.</param>
        <param name="layoutArea">Структура <see cref="T:System.Drawing.SizeF" />, которая задает максимальную область размещения для текста.</param>
        <param name="stringFormat">Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, такие как междустрочный интервал.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> при отображении с шрифтом <paramref name="font" /> и форматом <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat>которые принимают и <xref:System.Drawing.StringFormat.GenericTypographic%2A>передают. Кроме того, убедитесь <xref:System.Drawing.Graphics.TextRenderingHint%2A> , что <xref:System.Drawing.Graphics> для <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>имеет значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения, а объект Font имеет значение Arial (16 точек).  
  
-   Задает максимальный размер макета строки, создавая объект размера для измерения строки.  
  
-   Создает объект формата строки и устанавливает для его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>значение.  
  
-   Измеряет размер строки, используя строку, объект Font, максимальный размер макета и формат строки.  
  
-   Рисует прямоугольник красного цвета с помощью измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
 Результатом является вертикальный прямоугольник, включающий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="width">Максимальная ширина строки.</param>
        <param name="format">Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, такие как междустрочный интервал.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> при отображении с шрифтом <paramref name="font" /> и форматом <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat>которые принимают и <xref:System.Drawing.StringFormat.GenericTypographic%2A>передают. Кроме того, убедитесь <xref:System.Drawing.Graphics.TextRenderingHint%2A> , что <xref:System.Drawing.Graphics> для <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>имеет значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект Font, присвойте ему значение Arial (16 точек).  
  
-   Задает максимальную ширину строки.  
  
-   Создает объект формата строки и устанавливает для его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>значение.  
  
-   Создает объект Size для измерения строки.  
  
-   Измеряет размер строки, используя строку, объект Font, максимальную ширину и формат строки.  
  
-   Рисует прямоугольник красного цвета с помощью измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
 Результатом является вертикальный прямоугольник, включающий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> — <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat * int * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="layoutArea">Структура <see cref="T:System.Drawing.SizeF" />, которая задает максимальную область размещения для текста.</param>
        <param name="stringFormat">Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, такие как междустрочный интервал.</param>
        <param name="charactersFitted">Количество знаков в строке.</param>
        <param name="linesFilled">Количество строк текста в строке.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер строки в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> параметра <paramref name="text" />, при отображении с использованием шрифта <paramref name="font" /> и формата <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и включает небольшой объем дополнительного пространства до и после строки, что позволяет зависнуть глифы. Кроме того, <xref:System.Drawing.Graphics.DrawString%2A> этот метод корректирует точки глифов для оптимизации качества отображения и может отображать строку, которая уже больше, <xref:System.Drawing.Graphics.MeasureString%2A>чем сообщает. Чтобы получить метрики, подходящие для смежных строк в макете (например, при реализации форматированного текста <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> ), используйте метод или <xref:System.Drawing.Graphics.MeasureString%2A> один из методов, <xref:System.Drawing.StringFormat> которые принимают <xref:System.Drawing.StringFormat.GenericTypographic%2A>и передают. Также убедитесь, <xref:System.Drawing.Graphics.TextRenderingHint%2A> что <xref:System.Drawing.Graphics> для имеет <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>значение.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта, установленный в значение Arial (16 точек)  
  
-   Задает максимальный размер макета строки.  
  
-   Создает объект формата строки и устанавливает для его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>значение.  
  
-   Создает целочисленные переменные `charactersFitted` и `linesFilled` объект Size для измерения строки.  
  
-   Измеряет размер строки и определяет допустимое количество символов и строк, используя строку, объект Font, максимальный размер макета и строковый формат.  
  
-   Рисует прямоугольник красного цвета с помощью измеряемого размера строки.  
  
-   Рисует строку в изображенном прямоугольнике.  
  
-   Рисует значения количества заданных и заполненных строк.  
  
 Результатом является вертикальный прямоугольник, включающий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">Шрифты и текст</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Умножает универсальное преобразование данного объекта <see cref="T:System.Drawing.Graphics" /> на указываемый объект <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">Объект <see cref="T:System.Drawing.Drawing2D.Matrix" /> 4x4, на который умножается универсальное преобразование.</param>
        <summary>Умножает универсальное преобразование данного объекта <see cref="T:System.Drawing.Graphics" /> на указываемый объект <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод добавляет матрицу, указанную `matrix` параметром, чтобы результат был x- `matrix` преобразованием.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   `transformMatrix` Создает матрицу (две две матрицы идентификации плюс вектор нулевого смещения).  
  
-   Преобразует матрицу преобразования в вектор (200, 100).  
  
-   Поворачивает матрицу универсального преобразования Windows Form на 30 градусов, добавляет матрицу вращения на 30 градусов в матрицу преобразования формы.  
  
-   Умножает повернутую матрицу универсального преобразования на переведенный `transformMatrix`и добавляет `transformMatrix` к матрице универсального преобразования.  
  
-   Рисует повернутый, преобразованный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Матричное представление преобразований</related>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">Объект <see cref="T:System.Drawing.Drawing2D.Matrix" /> 4x4, на который умножается универсальное преобразование.</param>
        <param name="order">Член перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, определяющий порядок умножения.</param>
        <summary>Умножает универсальное преобразование данного объекта <see cref="T:System.Drawing.Graphics" /> на указываемый объект <see cref="T:System.Drawing.Drawing2D.Matrix" /> в заданном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> `matrix` для параметра указывает, что порядок умножения равен x World. `order` Значение <xref:System.Drawing.Drawing2D.MatrixOrder.Append> `matrix`для `order` указывает, что порядок умножения является мировым преобразованием x.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   `transformMatrix` Создает матрицу (две две матрицы идентификации плюс вектор нулевого смещения).  
  
-   Преобразует матрицу преобразования в вектор (200, 100).  
  
-   Поворачивает матрицу универсального преобразования Windows Form на 30 градусов, добавляя матрицу вращения на 30 градусов к матрице преобразования формы.  
  
-   Умножает повернутую матрицу универсального преобразования на переведенный `transformMatrix`, добавляя `transformMatrix` к матрице универсального преобразования.  
  
-   Рисует повернутый, преобразованный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">Матричное представление преобразований</related>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает масштабирование между универсальными единицами и единицами страницы для данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает значение для масштабирования между универсальными единицами и единицами страницы для данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Drawing.Graphics.PageScale%2A> члены и <xref:System.Drawing.Graphics.TranslateTransform%2A> для изменения масштаба и источника при рисовании прямоугольника.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangePageScaleAndTranslateTransform` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Типы систем координат</related>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает единицу измерения для координат страницы данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений <see cref="T:System.Drawing.GraphicsUnit" /> отличается от значения <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Графическая единица — это единица измерения, используемая для координат страницы <xref:System.Drawing.Graphics>в этом объекте.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется результат изменения <xref:System.Drawing.Graphics.PageUnit%2A> свойства.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangePageUnit` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Объект <see cref="P:System.Drawing.Graphics.PageUnit" /> устанавливается равным значению <see cref="F:System.Drawing.GraphicsUnit.World" />, которое не является физической единицей измерения.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Типы систем координат</related>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое задает порядок смещения пикселей во время отрисовки данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает член перечисления <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство используется для задания более высокого качества, более медленной отрисовки или более низкого качества, более быстрого отображения содержимого <xref:System.Drawing.Graphics> этого объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A>и <xref:System.Drawing.Graphics.ReleaseHdc%2A> — это два метода, которые позволяют получить и освободить обработчик для устройства Windows. При завершении работы с маркером <xref:System.Drawing.Graphics.GetHdc%2A> Windows всегда следует выполнять вызов метода. <xref:System.Drawing.Graphics.ReleaseHdc%2A>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Освобождает дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Контекст устройства представляет собой структуру Windows, основанную [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] на, которая определяет набор графических объектов и связанных с ними атрибутов, а также графические режимы, влияющие на выходные данные.  
  
 Вызовы методов <xref:System.Drawing.Graphics.ReleaseHdc%2A> и должны быть парными. <xref:System.Drawing.Graphics.GetHdc%2A> В <xref:System.Drawing.Graphics.GetHdc%2A> рамках пары методов и <xref:System.Drawing.Graphics.ReleaseHdc%2A> , как правило, вызовы вызываются только для [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функций. Вызовы в этой области, сделанные [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] для методов <xref:System.Drawing.Graphics> , вызвавших этот `hdc` параметр, завершаются `ObjectBusy` ошибкой. Кроме того [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] , игнорирует любые изменения состояния, <xref:System.Drawing.Graphics> `hdc` внесенные в параметр в последующих операциях.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. В примере показан вызов функции Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] для выполнения той же задачи [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> , что и метод. Код выполняет следующие действия.  
  
-   Определяет атрибут взаимодействия <xref:System.Runtime.InteropServices.DllImportAttribute> для DLL-файла Windows GDI32. dll. Эта библиотека DLL содержит нужную [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функцию, которая <xref:System.Drawing.Rectangle> определяет функцию в этой библиотеке DLL как внешнюю.  
  
-   Создает красное перо.  
  
-   При помощи пера рисует прямоугольник на экране с помощью [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> метода.  
  
-   Определяет переменную `hdc` внутреннего типа указателя и задает для ее значения маркер контекста устройства формы.  
  
-   Рисует прямоугольник на экране с помощью [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> функции.  
  
-   Освобождает контекст устройства, представленный `hdc` параметром.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <summary>Освобождает дескриптор контекста устройства.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает начало координат при отрисовке данного объекта <see cref="T:System.Drawing.Graphics" /> для кистей сглаживания цветовых переходов и штриховки.</summary>
        <value>Структура <see cref="T:System.Drawing.Point" />, которая представляет начало координат для сглаживания с параметром 8 бит на пиксель и 16 бит на пиксель и, кроме того, используется для настройки начала координат кистей штриховки.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сбрасывает вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" /> и делает ее бесконечной.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если область <xref:System.Drawing.Graphics> отсечения имеет бесконечное значение, элементы, которые <xref:System.Drawing.Graphics> эта отрисовка не будут обрезаны.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с верхним левым углом в точке (0, 0) и задает в качестве вырезанной области этот прямоугольник.  
  
-   Создает второй прямоугольник с верхним левым углом в (100, 100) и задает в качестве вырезанной области пересечение этого прямоугольника и текущей области отсечения (первый прямоугольник).  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих прямоугольника, сплошной синей кистью.  
  
-   Сбрасывает отсеченную область до бесконечности.  
  
-   Рисует прямоугольники вокруг двух областей отсечения; Он использует черное перо для первого прямоугольника обрезки и красное перо для второй области обрезки.  
  
 В результате только пересечение двух прямоугольников заполняется синим.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сбрасывает матрицу универсального преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> и делает ее единичной матрицей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Матрица идентификаторов представляет собой преобразование без масштабирования, вращения или перевода. Сброс универсального преобразования этого <xref:System.Drawing.Graphics> типа к матрице идентификации означает, что его универсальное преобразование не изменяет геометрию преобразованных элементов.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует универсальное преобразование Windows Form в вектор (100, 0).  
  
-   Сохраняет графическое состояние формы.  
  
-   Сбрасывает универсальное преобразование формы в удостоверение и заполняет прямоугольник сплошной красной кистью.  
  
-   Восстанавливает переведенное состояние графики и заполняет прямоугольник сплошной синей кистью.  
  
 Результатом является непереведенный красный прямоугольник и переведенный прямоугольник с заливкой синим цветом.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">Объект <see cref="T:System.Drawing.Drawing2D.GraphicsState" />, представляющий состояние, в которое восстанавливается данный объект <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Восстанавливает состояние данного объекта <see cref="T:System.Drawing.Graphics" />, возвращая его к состоянию, представленному объектом <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.Drawing.Graphics.Save%2A> метода <xref:System.Drawing.Graphics>объекта информационный блок, <xref:System.Drawing.Graphics> содержащий состояние, помещается в стек. Метод возвращает объект <xref:System.Drawing.Drawing2D.GraphicsState> , который идентифицирует этот блок информации. <xref:System.Drawing.Graphics.Save%2A> При <xref:System.Drawing.Drawing2D.GraphicsState> передаче идентификации <xref:System.Drawing.Graphics.Restore%2A> в метод информационный блок удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> до состояния, в котором <xref:System.Drawing.Graphics.Save%2A> оно находилось в момент вызова метода. Обратите внимание <xref:System.Drawing.Drawing2D.GraphicsState> , что объект, возвращаемый данным <xref:System.Drawing.Graphics.Save%2A> вызовом метода, может быть `Restore` передан методу только один раз.  
  
 Вызовы метода могут быть вложенными, то есть можно <xref:System.Drawing.Graphics.Save%2A> вызвать метод несколько <xref:System.Drawing.Graphics.Restore%2A> раз перед вызовом метода. <xref:System.Drawing.Graphics.Save%2A> Каждый раз при вызове <xref:System.Drawing.Graphics.Save%2A> метода информационный блок помещается в стек, а <xref:System.Drawing.Drawing2D.GraphicsState> для информационного блока получается. При передаче одного из этих объектов <xref:System.Drawing.Graphics.Restore%2A> в метод <xref:System.Drawing.Graphics> возвращается в состояние, в котором оно находилось в момент <xref:System.Drawing.Graphics.Save%2A> вызова метода, который возвращал эту конкретную <xref:System.Drawing.Drawing2D.GraphicsState>функцию. Информационный блок, помещенный в стек <xref:System.Drawing.Graphics.Save%2A> этим вызовом метода, удаляется из стека, а все информационные блоки, помещенные в этот стек после этого <xref:System.Drawing.Graphics.Save%2A> вызова метода, также удаляются.  
  
 Вызовы метода размещают информационные блоки в том же стеке, что и вызовы <xref:System.Drawing.Graphics.Save%2A> метода. <xref:System.Drawing.Graphics.BeginContainer%2A> Так же, <xref:System.Drawing.Graphics.Restore%2A> как вызов сопряжен <xref:System.Drawing.Graphics.Save%2A> с вызовом, <xref:System.Drawing.Graphics.EndContainer%2A> вызов метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызовом метода.  
  
 При вызове <xref:System.Drawing.Graphics.Restore%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> методом) после соответствующего вызова метода, удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.EndContainer%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> методом) после соответствующего вызова метода, удаляются из стека.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует универсальное преобразование Windows Form в вектор (100, 0).  
  
-   Сохраняет графическое состояние формы.  
  
-   Сбрасывает универсальное преобразование формы в удостоверение и заполняет прямоугольник сплошной красной кистью.  
  
-   Восстанавливает переведенное состояние графики и заполняет второй прямоугольник сплошной синей кистью.  
  
 Результатом является непереведенный красный прямоугольник и переведенный прямоугольник с заливкой синим цветом.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Применяет заданное вращение к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Угол поворота в градусах.</param>
        <summary>Применяет заданное вращение к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция вращения состоит из умножения матрицы преобразования на матрицу, элементы которой являются производными от `angle` параметра. Этот метод применяет поворот, добавляя его к матрице преобразования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует матрицу универсального преобразования Windows Form в вектор (100, 0).  
  
-   Поворачивает мировое преобразование на угол в 30 градусов, добавляя матрицу вращения в матрицу мирового преобразования.  
  
-   Рисует повернутый, преобразованный эллипс с помощью синего пера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Угол поворота в градусах.</param>
        <param name="order">Член перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, указывающий на порядок добавления вращения к матрице преобразования: обычный или обратный.</param>
        <summary>Применяет заданный поворот к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция вращения состоит из умножения матрицы преобразования на матрицу, элементы которой являются производными от `angle` параметра. Этот метод добавляет матрицу преобразования объекта в <xref:System.Drawing.Graphics> конец или добавляет ее матрицу вращения в соответствии `order` с параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует матрицу универсального преобразования Windows Form в вектор (100, 0).  
  
-   Поворачивает мировое преобразование на угол в 30 градусов, добавляя матрицу вращения в матрицу мирового преобразования с <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Рисует переведенный, повернутый эллипс с синим пером.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" /> и связывает сохраненное состояние с объектом <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsState" />, который представляет сохраненное состояние данного объекта <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.Drawing.Graphics.Save%2A> метода <xref:System.Drawing.Graphics>объекта информационный блок, <xref:System.Drawing.Graphics> содержащий состояние, помещается в стек. Метод возвращает объект <xref:System.Drawing.Drawing2D.GraphicsState> , который идентифицирует этот блок информации. <xref:System.Drawing.Graphics.Save%2A> При <xref:System.Drawing.Drawing2D.GraphicsState> передаче идентификации <xref:System.Drawing.Graphics.Restore%2A> в метод информационный блок удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> до состояния, в котором <xref:System.Drawing.Graphics.Save%2A> оно находилось в момент вызова метода. Обратите внимание <xref:System.Drawing.Drawing2D.GraphicsState> , что объект, возвращаемый данным <xref:System.Drawing.Graphics.Save%2A> вызовом метода, может быть <xref:System.Drawing.Graphics.Restore%2A> передан методу только один раз.  
  
 Вызовы метода могут быть вложенными, то есть можно <xref:System.Drawing.Graphics.Save%2A> вызвать метод несколько <xref:System.Drawing.Graphics.Restore%2A> раз перед вызовом метода. <xref:System.Drawing.Graphics.Save%2A> Каждый раз при вызове <xref:System.Drawing.Graphics.Save%2A> метода информационный блок помещается в стек, а <xref:System.Drawing.Drawing2D.GraphicsState> для информационного блока получается. При передаче одного из этих объектов <xref:System.Drawing.Graphics.Restore%2A> в метод <xref:System.Drawing.Graphics> возвращается в состояние, в котором оно находилось в момент <xref:System.Drawing.Graphics.Save%2A> вызова метода, который возвращал эту конкретную <xref:System.Drawing.Drawing2D.GraphicsState>функцию. Информационный блок, помещенный в стек <xref:System.Drawing.Graphics.Save%2A> этим вызовом метода, удаляется из стека, а все информационные блоки, помещенные в этот стек после этого <xref:System.Drawing.Graphics.Save%2A> вызова метода, также удаляются.  
  
 Вызовы метода размещают информационные блоки в том же стеке, что и вызовы <xref:System.Drawing.Graphics.Save%2A> метода. <xref:System.Drawing.Graphics.BeginContainer%2A> Так же, <xref:System.Drawing.Graphics.Restore%2A> как вызов сопряжен <xref:System.Drawing.Graphics.Save%2A> с вызовом, <xref:System.Drawing.Graphics.EndContainer%2A> вызов метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызовом метода.  
  
 При вызове <xref:System.Drawing.Graphics.Restore%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.Save%2A> методом) после соответствующего вызова метода, удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.EndContainer%2A> метода все информационные блоки, размещенные в стеке ( <xref:System.Drawing.Graphics.Save%2A> методом или <xref:System.Drawing.Graphics.BeginContainer%2A> <xref:System.Drawing.Graphics.BeginContainer%2A> методом) после соответствующего вызова метода, удаляются из стека.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует универсальное преобразование Windows Form в вектор (100, 0).  
  
-   Сохраняет графическое состояние формы.  
  
-   Сбрасывает универсальное преобразование формы в удостоверение (матрица идентификаторов 2x2 и преобразование нулей в векторе) и заполняет прямоугольник сплошной красной кистью.  
  
-   Восстанавливает переведенное состояние графики и заполняет прямоугольник сплошной синей кистью.  
  
 Результатом является непереведенный красный прямоугольник слева и переведенный синий прямоугольник справа от формы.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Применяет указанную операцию масштабирования к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> путем ее добавления к матрице преобразования объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Коэффициент масштабирования по оси X.</param>
        <param name="sy">Коэффициент масштабирования по оси Y.</param>
        <summary>Применяет указанную операцию масштабирования к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> путем ее добавления к матрице преобразования объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция масштабирования состоит из умножения матрицы преобразования на диагональную матрицу, элементы которой равны`sx`( `sy`,, 1). Этот метод добавляет матрицу преобразования объекта в <xref:System.Drawing.Graphics> начало матрицы масштабирования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу универсального преобразования Windows Form на 30 градусов.  
  
-   Масштабирует эту матрицу с коэффициентом 3 в направлении x и коэффициентом 1 в направлении по оси y, добавляя преобразование масштабирования.  
  
-   Рисует масштабированный, повернутый прямоугольник с помощью синего пера.  
  
 Результат по-прежнему является прямоугольником.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Коэффициент масштабирования по оси X.</param>
        <param name="sy">Коэффициент масштабирования по оси Y.</param>
        <param name="order">Член перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, указывающий порядок добавления операции масштабирования к матрице преобразования: обычный или обратный.</param>
        <summary>Применяет заданную операцию масштабирования к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция масштабирования состоит из умножения матрицы преобразования на диагональную матрицу, элементы которой равны`sx`( `sy`,, 1). Этот метод добавляет матрицу преобразования объекта в <xref:System.Drawing.Graphics> конец или добавляет ее матрицу масштабирования в соответствии `order` с параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу универсального преобразования Windows Form на 30 градусов.  
  
-   Масштабирует эту матрицу с коэффициентом 3 в направлении x и коэффициентом 1 в направлении y, добавляя преобразование масштабирования к <xref:System.Drawing.Drawing2D.MatrixOrder.Append> элементу.  
  
-   Рисует повернутый, масштабируемый прямоугольник с помощью синего пера.  
  
 Результатом является параллелограмм.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Задает вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" /> равной свойству <see langword="Clip" /> указанного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />, содержащий новую вырезанную область.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> указанный объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если графический путь, представленный `path` параметром, не закрыт, для закрытия пути добавляется дополнительный сегмент из последней точки к первой точке.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает графический контур и добавляет к нему эллипс.  
  
-   Задает в качестве вырезанной области путь в виде эллиптического пути.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 В результате получается закрашенный черный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">Объект <see cref="T:System.Drawing.Graphics" />, из которого извлекается новая вырезанная область.</param>
        <summary>Задает вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" /> равной свойству <see langword="Clip" /> указанного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms <xref:System.Windows.Forms.PaintEventArgs>и требует `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика <xref:System.Windows.Forms.Form> событий, а также `thisForm`для примера. Код выполняет следующие действия.  
  
-   Создает временную <xref:System.Drawing.Graphics> `thisForm` копию<xref:System.Windows.Forms.Form> из примера.  
  
-   Задает небольшую область отсечения для временного <xref:System.Drawing.Graphics> прямоугольника.  
  
-   Обновляет область обрезки графического объекта формы до того, как она является временной <xref:System.Drawing.Graphics>.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный квадрат.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, представляющая новую вырезанную область.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> прямоугольник, задаваемый структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает небольшой прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" />, представляющая новую вырезанную область.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> прямоугольник, задаваемый структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает небольшой прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> для объединения.</param>
        <param name="combineMode">Член перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей вырезанной области и заданного объекта <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если графический путь, представленный `path` параметром, не закрыт, для закрытия пути добавляется дополнительный сегмент из последней точки к первой точке.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает графический контур и добавляет к нему эллипс.  
  
-   Задает в качестве вырезанной области путь к эллиптическим путям <xref:System.Drawing.Drawing2D.CombineMode.Replace> с элементом.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 В результате получается закрашенный черный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">Объект <see cref="T:System.Drawing.Graphics" />, который задает вырезанную область для объединения.</param>
        <param name="combineMode">Член перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей вырезанной области и свойства <see cref="P:System.Drawing.Graphics.Clip" /> заданного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms <xref:System.Windows.Forms.PaintEventArgs>и требует `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика <xref:System.Windows.Forms.Form> событий, а также `thisForm`для примера. Код выполняет следующие действия.  
  
-   Создает временную <xref:System.Drawing.Graphics> `thisForm` копию<xref:System.Windows.Forms.Form> из примера.  
  
-   Задает небольшую область отсечения для временного <xref:System.Drawing.Graphics> прямоугольника.  
  
-   Обновляет область обрезки графического объекта формы на новую <xref:System.Drawing.Graphics> <xref:System.Drawing.Drawing2D.CombineMode.Replace> с элементом.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный квадрат.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" /> для объединения.</param>
        <param name="combineMode">Член перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей вырезанной области и прямоугольника, задаваемого структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает небольшой прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику с <xref:System.Drawing.Drawing2D.CombineMode.Replace> элементом.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">Структура <see cref="T:System.Drawing.RectangleF" /> для объединения.</param>
        <param name="combineMode">Член перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей вырезанной области и прямоугольника, задаваемого структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает небольшой прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику с <xref:System.Drawing.Drawing2D.CombineMode.Replace> элементом.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">Объект <see cref="T:System.Drawing.Region" /> для объединения.</param>
        <param name="combineMode">Член из перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей вырезанной области и заданного объекта <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает небольшой прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику с <xref:System.Drawing.Drawing2D.CombineMode.Replace> элементом.  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является небольшой, закрашенный черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает качество отрисовки данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Drawing.Drawing2D.SmoothingMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Режим сглаживания определяет, используют ли линии, кривые и края заполненных областей с помощью сглаживания (также называемого сглаживанием). Единственным исключением является то, что кисти градиента пути не подчиняются режиму сглаживания. Области, заполненные <xref:System.Drawing.Drawing2D.PathGradientBrush> с помощью, выводятся таким же образом (с псевдонимом <xref:System.Drawing.Graphics.SmoothingMode%2A> ) независимо от свойства.  
  
   
  
## Examples  
 Следующий метод демонстрирует влияние задания <xref:System.Drawing.Pen.DashCap%2A>свойств, <xref:System.Drawing.Pen.DashPattern%2A>и <xref:System.Drawing.Graphics.SmoothingMode%2A> . Выходные данные примера показаны на следующем рисунке.  
  
 ![Строки с примененным сглаживанием и без него.] (~/add/media/gdi-smoothingmode.png "Строки с примененным сглаживанием и без него.")  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowPensAndSmoothingMode` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение коррекции показателя гаммы для отрисовки текста.</summary>
        <value>Значение коррекции показателя гаммы, который используется для отрисовки текста со сглаживанием и текста ClearType.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение гамма-коррекции должно находиться в диапазоне от 0 до 12. Значение по умолчанию — 4.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Drawing.Graphics.TextRenderingHint%2A> свойств и. <xref:System.Drawing.Graphics.TextContrast%2A>  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangeTextRenderingHintAndTextContrast` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает режим отрисовки текста, связанного с данным объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Drawing.Text.TextRenderingHint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подсказка по отрисовке текста определяет, будет ли текст отображаться с помощью сглаживания.  
  
> [!NOTE]
>  Не <xref:System.Drawing.Graphics.CompositingMode%2A> следует использовать <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> значение свойства, если <xref:System.Drawing.Graphics.TextRenderingHint%2A> свойство имеет <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>значение. Может возникнуть исключение или изображение может отображаться неправильно.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Drawing.Graphics.TextRenderingHint%2A> свойств и. <xref:System.Drawing.Graphics.TextContrast%2A>  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangeTextRenderingHintAndTextContrast` метод при обработке <xref:System.Windows.Forms.Control.Paint> события формы, передав `e` его как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает копию геометрического универсального преобразования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Копия матрицы <see cref="T:System.Drawing.Drawing2D.Matrix" />, которая представляет геометрическое универсальное преобразование объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В GDI+ используются три координатных пространства: мир, страница и устройство. Мировые координаты — это координаты, используемые для моделирования определенного графического мира, а также координаты, передаваемые методам в .NET Framework. Координаты страницы относятся к системе координат, используемой областью рисования, такой как форма или элемент управления. Координаты устройства — это координаты, используемые физическим устройством, которое рисуется, например экран или принтер. <xref:System.Drawing.Graphics.Transform%2A> Свойство представляет мировое преобразование, которое сопоставляет координаты мира с координатами страницы.  
  
 Поскольку возвращаемая матрица и <xref:System.Drawing.Graphics.Transform%2A> свойство являются копией геометрического преобразования, следует удалить матрицу, если она больше не нужна.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">Типы систем координат</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует массив точек из одного координатного пространства в другое, используя текущее универсальное преобразование и преобразование страницы данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Член перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий конечное координатное пространство.</param>
        <param name="srcSpace">Член перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий исходное координатное пространство.</param>
        <param name="pts">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют собой точки для преобразования.</param>
        <summary>Преобразует массив точек из одного координатного пространства в другое, используя текущее универсальное преобразование и преобразование страницы данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает две точки и рисует между ними синяя линия.  
  
-   Задает преобразование мира для преобразования по суммам 40 в направлении x и 30 в направлении y.  
  
-   Преобразует точки из мировых координат (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) в координаты страницы (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Сбрасывает преобразование «мир» в удостоверение.  
  
-   Отображает красную линию между преобразованными точками.  
  
 Результат представляет собой синюю линию и переведенную красную линию под ней.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Член перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий конечное координатное пространство.</param>
        <param name="srcSpace">Член перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий исходное координатное пространство.</param>
        <param name="pts">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют собой точки для преобразования.</param>
        <summary>Преобразует массив точек из одного координатного пространства в другое, используя текущее универсальное преобразование и преобразование страницы данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает две точки и рисует между ними синяя линия.  
  
-   Задает преобразование мира для преобразования по суммам 40 в направлении x и 30 в направлении y.  
  
-   Преобразует точки из мировых координат (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) в координаты страницы (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Сбрасывает преобразование «мир» к удостоверениям и рисует красную линию между преобразованными точками.  
  
 Результат представляет собой синюю линию и переведенную красную линию под ней.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сдвигает вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном объеме в горизонтальном и вертикальном направлениях.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <summary>Сдвигает вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном объеме в горизонтальном и вертикальном направлениях.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику.  
  
-   Преобразует вырезанную область на вектор (50, 50).  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является переведенный, маленький и черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <summary>Сдвигает вырезанную область данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном объеме в горизонтальном и вертикальном направлениях.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник для вырезанной области.  
  
-   Задает область отсечения прямоугольнику.  
  
-   Преобразует вырезанную область вектором (50.0 F, 50.0 F).  
  
-   Заполняет большой прямоугольник сплошной черной кистью.  
  
 Результатом является переведенный, маленький и черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Изменяет начало координат координатной системы путем добавления заданного сдвига к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <summary>Изменяет начало координат координатной системы путем добавления заданного сдвига к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Источник обычно является верхним левым углом области рисования.  Операция преобразования состоит из умножения матрицы преобразования на матрицу, часть перевода которой является `dx` параметрами и. `dy` Этот метод применяет преобразование, добавляя матрицу перевода к матрице преобразования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу универсального преобразования Windows Form, 30,0 на F градусы.  
  
-   Перемещает источник объекта Graphics путем вызова <xref:System.Drawing.Graphics.TranslateTransform%2A>, предмещая перевод в матрицу преобразования.  
  
-   Рисует переведенный, повернутый эллипс с синим пером.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 На следующем рисунке показаны выходные данные выполнения предыдущего примера кода.  
  
 ![Переведенный и преобразованный эллипс] (~/add/media/ndp-tranlatetransform.png "Переведенный и преобразованный эллипс")  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Системы координат и преобразования</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Использование преобразований в управляемом GDI+</related>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <param name="order">Член перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, указывающий на порядок добавления сдвига к матрице преобразования: обычный или обратный.</param>
        <summary>Изменяет начало координат координатной системы путем применения заданного сдвига к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> в указываемом порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция преобразования состоит из умножения матрицы преобразования на матрицу, часть перевода которой является `dx` параметрами и. `dy` Этот метод добавляет матрицу преобразования объекта в <xref:System.Drawing.Graphics> конец или добавляет ее матрицу перевода в соответствии `order` с параметром.  
  
   
  
## Examples  
 Следующий пример кода предназначен для использования с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, что <xref:System.Windows.Forms.Control.Paint> является параметром обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу универсального преобразования Windows Form, 30,0 на F градусы.  
  
-   Перемещает источник объекта Graphics путем вызова <xref:System.Drawing.Graphics.TranslateTransform%2A>, добавляя перевод в матрицу мирового преобразования.  
  
-   Рисует повернутый, преобразованный эллипс с помощью синего пера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Системы координат и преобразования</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">Использование преобразований в управляемом GDI+</related>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает ограничивающий прямоугольник видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Структура <see cref="T:System.Drawing.RectangleF" />, представляющая ограничивающий прямоугольник для видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Единица для результирующего прямоугольника обозначается <xref:System.Drawing.Graphics.PageUnit%2A> свойством. Единицей по умолчанию являются пиксели. Объект <xref:System.Drawing.Graphics> , как правило, связан с элементом управления, и источник прямоугольника будет относиться к клиентской области этого элемента управления.  
  
 Видимая область обрезки является пересечением области обрезки этого <xref:System.Drawing.Graphics> и вырезанной области окна.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
