<Type Name="IsJitIntrinsic" FullName="System.Runtime.CompilerServices.IsJitIntrinsic">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59a141758712afd8555614c391b431470ece1d86" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75091901" /></Metadata><TypeSignature Language="C#" Value="public static class IsJitIntrinsic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsJitIntrinsic extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsJitIntrinsic" />
  <TypeSignature Language="VB.NET" Value="Public Class IsJitIntrinsic" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsJitIntrinsic abstract sealed" />
  <TypeSignature Language="F#" Value="type IsJitIntrinsic = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="06c9c-101">Указывает, что измененный метод является внутренним значением, для которого JIT-компилятор может генерировать особый код.</span><span class="sxs-lookup"><span data-stu-id="06c9c-101">Indicates that a modified method is an intrinsic value for which the just-in-time (JIT) compiler  can perform special code generation.</span></span> <span data-ttu-id="06c9c-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="06c9c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06c9c-103">Компиляторы создают пользовательские модификаторы в метаданных, чтобы изменить способ, которым JIT-компилятор обрабатывает значения, если поведение по умолчанию не подходит.</span><span class="sxs-lookup"><span data-stu-id="06c9c-103">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="06c9c-104">Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение таким образом, как указывает модификатор.</span><span class="sxs-lookup"><span data-stu-id="06c9c-104">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="06c9c-105">Компиляторы могут применять настраиваемые модификаторы к методам, параметрам и возвращаемым значениям.</span><span class="sxs-lookup"><span data-stu-id="06c9c-105">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="06c9c-106">JIT-компилятор должен реагировать на обязательные модификаторы, но может игнорировать необязательные модификаторы.</span><span class="sxs-lookup"><span data-stu-id="06c9c-106">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="06c9c-107">Пользовательские модификаторы можно создавать в метаданных с помощью одного из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="06c9c-107">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="06c9c-108">Использование методов в классе <xref:System.Reflection.Emit.TypeBuilder>, таких как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="06c9c-108">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="06c9c-109">Создание файла инструкций на языке MSIL, который содержит вызовы `modopt` и `modreq`, а также сборку файла с помощью [Ilasm. exe (АССЕМБЛЕР IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="06c9c-109">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="06c9c-110">Использование API неуправляемого отражения.</span><span class="sxs-lookup"><span data-stu-id="06c9c-110">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
