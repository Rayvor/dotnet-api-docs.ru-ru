<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aed087b0de37bece4cdde966d45d638f0755e9ac" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70666116" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Указывает, что измененное целое число является стандартным значением <see langword="long" /> из C++. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C++ Стандарт указывает, что `long` значение и целочисленное значение являются отдельными типами.  Однако они представлены в сборке с помощью `ELEMENT_TYPE_I4` .  Чтобы отличить `long` от целого числа C++в, компилятор C++ <xref:System.Runtime.CompilerServices.IsLong> Майкрософт добавляет модификатор к любому экземпляру в `long` при порождении экземпляра.  Этот процесс критически важен для поддержания безопасности типа на уровне языка.  
  
 Компиляторы создают пользовательские модификаторы в метаданных, чтобы изменить способ, которым JIT-компилятор обрабатывает значения, если поведение по умолчанию не подходит.  Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение таким образом, как указывает модификатор.  Компиляторы могут применять настраиваемые модификаторы к методам, параметрам и возвращаемым значениям.  JIT-компилятор должен реагировать на обязательные модификаторы, но может игнорировать необязательные модификаторы.  
  
 Пользовательские модификаторы можно создавать в метаданных с помощью одного из следующих методов:  
  
-   Использование методов <xref:System.Reflection.Emit.TypeBuilder> в классе, таких как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  
  
-   Создание файла инструкций промежуточного языка MSIL, который содержит вызовы `modopt` и `modreq`и сборку файла с помощью [Ilasm. exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  
  
-   Использование API неуправляемого отражения.  
  
   
  
## Examples  
 В следующем примере показано, как выдать <xref:System.Runtime.CompilerServices.IsLong> объект в сборку с помощью отражения.  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
