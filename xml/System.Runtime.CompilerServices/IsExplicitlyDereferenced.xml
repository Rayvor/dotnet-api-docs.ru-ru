<Type Name="IsExplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsExplicitlyDereferenced">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e6cf0f46bf4c7b48e6a88ee33dcb68e158f822b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69274101" /></Metadata><TypeSignature Language="C#" Value="public static class IsExplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsExplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsExplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsExplicitlyDereferenced abstract sealed" />
  <TypeSignature Language="F#" Value="type IsExplicitlyDereferenced = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="99db7-101">Указывает, что управляемый указатель представляет параметр-указатель внутри сигнатуры метода.</span><span class="sxs-lookup"><span data-stu-id="99db7-101">Indicates that a managed pointer represents a pointer parameter within a method signature.</span></span> <span data-ttu-id="99db7-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="99db7-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99db7-103">В C++управляемые указатели и управляемые ссылки передаются в метаданные в виде указателей.</span><span class="sxs-lookup"><span data-stu-id="99db7-103">In C++, managed pointers and managed references are emitted into metadata as pointers.</span></span>  <span data-ttu-id="99db7-104">Для различения двух типов в метаданных компилятор Майкрософт C++ применяет этот модификатор к управляемым указателям.</span><span class="sxs-lookup"><span data-stu-id="99db7-104">To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.</span></span>  <span data-ttu-id="99db7-105">Он не создает модификатор для управляемых ссылочных типов.</span><span class="sxs-lookup"><span data-stu-id="99db7-105">It emits no modifier on managed reference types.</span></span>  <span data-ttu-id="99db7-106">Компиляторам необходимо знать правильный синтаксис вызова при импорте метода из области метаданных.</span><span class="sxs-lookup"><span data-stu-id="99db7-106">Compilers need to know the correct calling syntax when importing a method from metadata scope.</span></span>  <span data-ttu-id="99db7-107">Класс и его участник <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> , класс, неоднозначность ссылочных параметров из параметров указателя. <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced></span><span class="sxs-lookup"><span data-stu-id="99db7-107">The <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="99db7-108">Компиляторы создают пользовательские модификаторы в метаданных, чтобы изменить способ, которым JIT-компилятор обрабатывает значения, если поведение по умолчанию не подходит.</span><span class="sxs-lookup"><span data-stu-id="99db7-108">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="99db7-109">Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение таким образом, как указывает модификатор.</span><span class="sxs-lookup"><span data-stu-id="99db7-109">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="99db7-110">Компиляторы могут применять настраиваемые модификаторы к методам, параметрам и возвращаемым значениям.</span><span class="sxs-lookup"><span data-stu-id="99db7-110">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="99db7-111">JIT-компилятор должен реагировать на обязательные модификаторы, но может игнорировать необязательные модификаторы.</span><span class="sxs-lookup"><span data-stu-id="99db7-111">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="99db7-112">Пользовательские модификаторы можно создавать в метаданных с помощью одного из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="99db7-112">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="99db7-113">Использование методов <xref:System.Reflection.Emit.TypeBuilder> в классе, таких как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="99db7-113">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="99db7-114">Создание файла инструкций промежуточного языка MSIL, который содержит вызовы `modopt` и `modreq`и сборку файла с помощью [Ilasm. exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="99db7-114">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="99db7-115">Использование API неуправляемого отражения.</span><span class="sxs-lookup"><span data-stu-id="99db7-115">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99db7-116">В следующем примере показано, как выдать <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> объект в сборку с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="99db7-116">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsExplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
