<Type Name="WSHttpBindingBase" FullName="System.ServiceModel.WSHttpBindingBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed00b684783946c0c47008bdf6114bc7ff55cd93" /><Meta Name="ms.sourcegitcommit" Value="2b78f05b0c6fa92adaf5e1dfe5a50388f952efe7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/02/2019" /><Meta Name="ms.locfileid" Value="71805225" /></Metadata><TypeSignature Language="C#" Value="public abstract class WSHttpBindingBase : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WSHttpBindingBase extends System.ServiceModel.Channels.Binding implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.WSHttpBindingBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WSHttpBindingBase&#xA;Inherits Binding&#xA;Implements IBindingRuntimePreferences" />
  <TypeSignature Language="C++ CLI" Value="public ref class WSHttpBindingBase abstract : System::ServiceModel::Channels::Binding, System::ServiceModel::Channels::IBindingRuntimePreferences" />
  <TypeSignature Language="F#" Value="type WSHttpBindingBase = class&#xA;    inherit Binding&#xA;    interface IBindingRuntimePreferences" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Http</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.Binding</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IBindingRuntimePreferences</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет базовый класс, члены которого являются общими для классов <see cref="T:System.ServiceModel.WSHttpBinding" /> и <see cref="T:System.ServiceModel.WSFederationHttpBinding" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.ServiceModel.WSHttpBindingBase> предоставляет несколько базовых функциональных возможностей для привязок, используемых для настройки безопасных и надежных веб-служб с возможностью взаимодействия, таких как привязки, реализованные классом <xref:System.ServiceModel.WSHttpBinding> для недуплексных контрактов службы, и, в частности, для безопасной привязки <xref:System.ServiceModel.WSFederationHttpBinding> с возможностью взаимодействия, поддерживающей протокол WS-Federation.  
  
 По умолчанию эта привязка создает стек времени выполнения, использующий WS-Security для безопасности и проверки подлинности сообщений, HTTP для доставки сообщений и кодирование сообщений Text/XML. Ее также можно настроить для использования WS-ReliableMessaging для надежности.  
  
 Использование WS-ReliableMessaging настраивается с использованием необязательного параметра `reliableSessionEnabled`.  
  
   
  
## Examples  
 В следующем примере показано использование функциональных возможностей, предоставляемых классом <xref:System.ServiceModel.WSHttpBindingBase> с производными классами <xref:System.ServiceModel.WSHttpBinding> и <xref:System.ServiceModel.WSFederationHttpBinding>.  
  
 [!code-csharp[WSHttpBindingBase#0](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#0)]
 [!code-vb[WSHttpBindingBase#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.WSHttpBindingBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WSHttpBindingBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WSHttpBindingBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.WSHttpBindingBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как использовать конструктор без параметров.  
  
 [!code-csharp[WSHttpBindingBase#1](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#1)]
 [!code-vb[WSHttpBindingBase#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WSHttpBindingBase (bool reliableSessionEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool reliableSessionEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (reliableSessionEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WSHttpBindingBase(bool reliableSessionEnabled);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.WSHttpBindingBase : bool -&gt; System.ServiceModel.WSHttpBindingBase" Usage="new System.ServiceModel.WSHttpBindingBase reliableSessionEnabled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reliableSessionEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reliableSessionEnabled">Значение <see langword="true" />, если надежный сеанс разрешен; в противном случае — значение <see langword="false" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.WSHttpBindingBase" /> со значением, указывающим, разрешен ли надежный сеанс.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassProxyOnLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BypassProxyOnLocal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BypassProxyOnLocal : bool with get, set" Usage="System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, будет ли доступ к локальным адресам осуществляться в обход прокси-сервера.</summary>
        <value>Значение <see langword="true" /> — для обхода прокси-сервера для локальных адресов; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интернет-ресурс является локальным, если у него локальный адрес. Локальный адрес — это тот же компьютер, локальная локальная сеть или интрасеть, который определяется синтаксическим образом за счет отсутствия точки (.), как в URI `http://webserver/` и `http://localhost/`.  
  
 Значение свойства <xref:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal%2A> определяет, будут ли конечные точки, настроенные с помощью элементов <xref:System.ServiceModel.WSHttpBindingBase>, использовать прокси-сервер при доступе к локальным ресурсам.  
  
 Если свойству <xref:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal%2A> присвоено значение `true`, данный прокси-сервер не будет использоваться в запросах к локальным интернет-ресурсам. Если <xref:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal%2A> присвоено значение `false`, все интернет-запросы выполняются через прокси-сервер.  
  
   
  
## Examples  
  
 В следующем примере показано, как задать это свойство для указания того, что доступ к локальным ресурсам должен осуществляться в обход прокси-сервера.  
  
 [!code-csharp[WSHttpBindingBase#3](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#3)]
 [!code-vb[WSHttpBindingBase#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#3)]  
  
 Значение этого свойства также может быть задано в файле конфигурации.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindingElements">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateBindingElements () As BindingElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElementCollection ^ CreateBindingElements();" />
      <MemberSignature Language="F#" Value="override this.CreateBindingElements : unit -&gt; System.ServiceModel.Channels.BindingElementCollection" Usage="wSHttpBindingBase.CreateBindingElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElementCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает упорядоченную коллекцию элементов привязки, содержащихся в текущей привязке.</summary>
        <returns>Коллекция <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />, содержащая объекты <see cref="T:System.ServiceModel.Channels.BindingElement" /> для привязки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Важен порядок элементов привязки. Он соответствует порядку создания и расположения в стеке каналов транспорта и протокола.  
  
   
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#16](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#16)]
 [!code-vb[WSHttpBindingBase#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageSecurity">
      <MemberSignature Language="C#" Value="protected abstract System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateMessageSecurity () As SecurityBindingElement" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::ServiceModel::Channels::SecurityBindingElement ^ CreateMessageSecurity();" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageSecurity : unit -&gt; System.ServiceModel.Channels.SecurityBindingElement" Usage="wSHttpBindingBase.CreateMessageSecurity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SecurityBindingElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Если реализован в производном классе, возвращает элемент <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> из текущей привязки.</summary>
        <returns>Элемент <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> текущей привязки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVersion">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; set; }" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EnvelopeVersion EnvelopeVersion" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property EnvelopeVersion As EnvelopeVersion" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EnvelopeVersion ^ EnvelopeVersion { System::ServiceModel::EnvelopeVersion ^ get(); void set(System::ServiceModel::EnvelopeVersion ^ value); };" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="member this.EnvelopeVersion : System.ServiceModel.EnvelopeVersion with get, set" Usage="System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="C#" Value="public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnvelopeVersion As EnvelopeVersion" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EnvelopeVersion ^ EnvelopeVersion { System::ServiceModel::EnvelopeVersion ^ get(); };" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.EnvelopeVersion : System.ServiceModel.EnvelopeVersion" Usage="System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EnvelopeVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает версию протокола SOAP, используемого для сообщений, обрабатываемых этой привязкой.</summary>
        <value>Значение <see cref="T:System.ServiceModel.EnvelopeVersion" />, используемое с данной привязкой. Значение всегда — SOAP 1.2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как получить версию конверта.  
  
 [!code-csharp[WSHttpBindingBase#4](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#4)]
 [!code-vb[WSHttpBindingBase#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransport">
      <MemberSignature Language="C#" Value="protected abstract System.ServiceModel.Channels.TransportBindingElement GetTransport ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ServiceModel.Channels.TransportBindingElement GetTransport() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.GetTransport" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetTransport () As TransportBindingElement" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::ServiceModel::Channels::TransportBindingElement ^ GetTransport();" />
      <MemberSignature Language="F#" Value="abstract member GetTransport : unit -&gt; System.ServiceModel.Channels.TransportBindingElement" Usage="wSHttpBindingBase.GetTransport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.TransportBindingElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Если реализован в производном классе, возвращает элемент привязки транспорта из текущей привязки.</summary>
        <returns>Элемент <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> текущей привязки.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostNameComparisonMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.HostNameComparisonMode HostNameComparisonMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
      <MemberSignature Language="VB.NET" Value="Public Property HostNameComparisonMode As HostNameComparisonMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::HostNameComparisonMode HostNameComparisonMode { System::ServiceModel::HostNameComparisonMode get(); void set(System::ServiceModel::HostNameComparisonMode value); };" />
      <MemberSignature Language="F#" Value="member this.HostNameComparisonMode : System.ServiceModel.HostNameComparisonMode with get, set" Usage="System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.HostNameComparisonMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, используется ли имя узла для доступа к службе при сравнении по универсальному коду ресурса (URI).</summary>
        <value>Значение <see cref="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode" />, указывающее, используется ли имя узла для доступа к службе при сопоставлении по URI. Значение по умолчанию — <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />, при котором имя узла в найденном соответствии не используется.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как получить значение <xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode%2A>.  
  
 [!code-csharp[WSHttpBindingBase#5](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#5)]
 [!code-vb[WSHttpBindingBase#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferPoolSize">
      <MemberSignature Language="C#" Value="public long MaxBufferPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxBufferPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferPoolSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxBufferPoolSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferPoolSize : int64 with get, set" Usage="System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(524288)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает максимальный объем (в байтах) памяти, выделяемой диспетчеру буферов, управляющему буферами, которые требуются конечным точкам, использующим эту привязку.</summary>
        <value>Максимальный размер (в байтах) буферного пула, используемого конечной точкой, настроенной с этой привязкой. Значение по умолчанию — 524 288 байт.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Диспетчер буферов <xref:System.ServiceModel.Channels.BufferManager> пытается оптимизировать затраты на использование буферов с помощью буферного пула. Буферы требуются для обработки службой сообщений, приходящих из канала. Если в буферном пуле недостаточно памяти для обработки потока сообщений диспетчер <xref:System.ServiceModel.Channels.BufferManager> должен выделить дополнительную память из кучи CLR что увеличивает время сборки мусора. Интенсивное выделение памяти из мусорной кучи CLR указывает на то, что размер буферного пула слишком мал и производительность можно повысить за счет выделения большего объема памяти путем увеличения предельного значения <xref:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize%2A>.  
  
   
  
## Examples  
 В этом примере показано, как получить значение <xref:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize%2A>.  
  
 [!code-csharp[WSHttpBindingBase#6](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#6)]
 [!code-vb[WSHttpBindingBase#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxReceivedMessageSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxReceivedMessageSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxReceivedMessageSize : int64 with get, set" Usage="System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает максимальный размер (в байтах) сообщения, которое может быть обработано привязкой.</summary>
        <value>Максимальный размер (в байтах) сообщения, обрабатываемого привязкой. Значение по умолчанию - 65 536 байт.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Размер сообщений, которые службы могут принимать из сети с использованием объекта <xref:System.ServiceModel.WSHttpBindingBase>, ограничен объемом памяти, выделенной для каждого сообщения. Такое ограничение размера сообщения позволяет снизить уязвимость к атакам типа «отказ в обслуживании» (DoS).  
  
   
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#7](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#7)]
 [!code-vb[WSHttpBindingBase#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение меньше нуля.</exception>
        <exception cref="T:System.ServiceModel.QuotaExceededException">Размер сообщения превышает максимально допустимый.</exception>
      </Docs>
    </Member>
    <Member MemberName="MessageEncoding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.WSMessageEncoding MessageEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageEncoding As WSMessageEncoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::WSMessageEncoding MessageEncoding { System::ServiceModel::WSMessageEncoding get(); void set(System::ServiceModel::WSMessageEncoding value); };" />
      <MemberSignature Language="F#" Value="member this.MessageEncoding : System.ServiceModel.WSMessageEncoding with get, set" Usage="System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WSMessageEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее формат, используемый для кодирования сообщений SOAP (MTOM или Text/XML).</summary>
        <value>Значение <see cref="T:System.ServiceModel.WSMessageEncoding" />, в котором указывается формат для кодирования сообщений SOAP (MTOM или Text/XML). Значение по умолчанию — <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#8](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#8)]
 [!code-vb[WSHttpBindingBase#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProxyAddress">
      <MemberSignature Language="C#" Value="public Uri ProxyAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ProxyAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property ProxyAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ ProxyAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProxyAddress : Uri with get, set" Usage="System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает URI-адрес прокси-сервера HTTP.</summary>
        <value>Объект <see cref="T:System.Uri" />, используемый в качестве адреса прокси-сервера HTTP. Значение по умолчанию — <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если свойству <xref:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy%2A> присвоено значение `true`, значение свойства <xref:System.ServiceModel.WSHttpBindingBase.ProxyAddress%2A> не учитывается.  
  
   
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#9](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#9)]
 [!code-vb[WSHttpBindingBase#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Property ReaderQuotas As XmlDictionaryReaderQuotas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDictionaryReaderQuotas ^ ReaderQuotas { System::Xml::XmlDictionaryReaderQuotas ^ get(); void set(System::Xml::XmlDictionaryReaderQuotas ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReaderQuotas : System.Xml.XmlDictionaryReaderQuotas with get, set" Usage="System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает ограничения по сложности сообщений SOAP, которые могут обрабатываться конечными точками, настроенными с этой привязкой.</summary>
        <value>Объект <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />, в котором задаются ограничения по сложности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ограничения по сложности включают такие элементы, как максимальная глубина элемента или максимальная длина строкового содержимого сообщения. Ограничения защищают от атак типа «отказ в обслуживании» (DoS), при которых сложность сообщения используется для того, чтобы исчерпать ресурсы процессора в конечной точке.  
  
   
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#10](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#10)]
 [!code-vb[WSHttpBindingBase#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReliableSession">
      <MemberSignature Language="C#" Value="public System.ServiceModel.OptionalReliableSession ReliableSession { get; }" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.OptionalReliableSession ReliableSession" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReliableSession As OptionalReliableSession" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::OptionalReliableSession ^ ReliableSession { System::ServiceModel::OptionalReliableSession ^ get(); };" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ReliableSession : System.ServiceModel.OptionalReliableSession" Usage="System.ServiceModel.WSHttpBindingBase.ReliableSession" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C#" Value="public System.ServiceModel.OptionalReliableSession ReliableSession { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Property ReliableSession As OptionalReliableSession" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::OptionalReliableSession ^ ReliableSession { System::ServiceModel::OptionalReliableSession ^ get(); void set(System::ServiceModel::OptionalReliableSession ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.ReliableSession : System.ServiceModel.OptionalReliableSession with get, set" Usage="System.ServiceModel.WSHttpBindingBase.ReliableSession" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.OptionalReliableSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект, обеспечивающий удобный доступ к свойствам элемента привязки надежного сеанса, доступным при использовании одной из предоставляемых системой привязок.</summary>
        <value>Объект <see cref="T:System.ServiceModel.ReliableSession" />, обеспечивающий удобный доступ к свойствам элемента привязки надежного сеанса, доступным при использовании одной из предоставляемых системой привязок.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Надежные сеансы разрешает конструктор <xref:System.ServiceModel.WSHttpBindingBase.%23ctor%28System.Boolean%29>.  
  
   
  
## Examples  
 В этом примере показано, как возвратить свойства привязки надежного сеанса.  
  
 [!code-csharp[WSHttpBindingBase#11](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#11)]
 [!code-vb[WSHttpBindingBase#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="System.ServiceModel.WSHttpBindingBase.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает схему транспорта URI для каналов и прослушивателей, настроенных с этой привязкой.</summary>
        <value>Значение «http», если режиму безопасности элемента привязки транспорта присвоено значение <see cref="F:System.ServiceModel.SecurityMode.None" /> или <see cref="F:System.ServiceModel.SecurityMode.Message" />; в противном случае — значение «https».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#12](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#12)]
 [!code-vb[WSHttpBindingBase#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReaderQuotas">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReaderQuotas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReaderQuotas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.ShouldSerializeReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeReaderQuotas () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeReaderQuotas();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeReaderQuotas : unit -&gt; bool" Usage="wSHttpBindingBase.ShouldSerializeReaderQuotas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает значение, указывающее, изменилось ли значение свойства <see cref="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" /> относительно значения по умолчанию и нужно ли его сериализовать.</summary>
        <returns>Значение <see langword="true" />, если значение свойства <see cref="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" /> подлежит сериализации, в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReliableSession">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReliableSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReliableSession() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.ShouldSerializeReliableSession" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeReliableSession () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeReliableSession();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeReliableSession : unit -&gt; bool" Usage="wSHttpBindingBase.ShouldSerializeReliableSession " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает значение, указывающее, изменилось ли значение свойства <see cref="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" /> относительно значения по умолчанию и нужно ли его сериализовать.</summary>
        <returns>Значение <see langword="true" />, если значение свойства <see cref="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" /> подлежит сериализации, в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTextEncoding">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTextEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTextEncoding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.WSHttpBindingBase.ShouldSerializeTextEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTextEncoding () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTextEncoding();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTextEncoding : unit -&gt; bool" Usage="wSHttpBindingBase.ShouldSerializeTextEncoding " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает значение, указывающее, изменилось ли значение свойства <see cref="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" /> относительно значения по умолчанию и нужно ли его сериализовать.</summary>
        <returns>Значение <see langword="true" />, если значение свойства <see cref="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" /> подлежит сериализации, в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <MemberSignature Language="C#" Value="bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ReceiveSynchronously As Boolean Implements IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ServiceModel::Channels::IBindingRuntimePreferences::ReceiveSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, синхронно или асинхронно обрабатываются входящие запросы.</summary>
        <value>Значение <see langword="true" />, если входящие запросы обрабатываются синхронно. Значение <see langword="false" />, если входящие запросы обрабатываются асинхронно. Значение по умолчанию — <see langword="false" /> (асинхронная обработка запросов).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано использование элемента ReceiveSynchronously.  
  
 [!code-csharp[WSHttpBindingBase#19](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#19)]
 [!code-vb[WSHttpBindingBase#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding TextEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding TextEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property TextEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ TextEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextEncoding : System.Text.Encoding with get, set" Usage="System.ServiceModel.WSHttpBindingBase.TextEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceModel.Configuration.EncodingConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает кодировку, используемую в тексте сообщений.</summary>
        <value>Объект <see cref="T:System.Text.Encoding" />, указывающий используемую кодировку. Значение по умолчанию — <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#13](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#13)]
 [!code-vb[WSHttpBindingBase#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionFlow">
      <MemberSignature Language="C#" Value="public bool TransactionFlow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransactionFlow" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionFlow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TransactionFlow { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionFlow : bool with get, set" Usage="System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, должна ли эта привязка поддерживать поточные WS-транзакции.</summary>
        <value>Значение <see langword="true" />, если поточные транзакции поддерживаются; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#14](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#14)]
 [!code-vb[WSHttpBindingBase#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultWebProxy">
      <MemberSignature Language="C#" Value="public bool UseDefaultWebProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultWebProxy" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultWebProxy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultWebProxy { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultWebProxy : bool with get, set" Usage="System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, должен ли использоваться автоматически настроенный прокси-сервер HTTP системы, если он доступен.</summary>
        <value>Значение <see langword="true" />, если должен использоваться автоматически настроенный прокси-сервер HTTP системы (при его наличии); в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ошибочно присваивать этому свойству значение `true`, а свойству <xref:System.ServiceModel.WSHttpBindingBase.ProxyAddress%2A> значение, отличное от `null`.  
  
   
  
## Examples  
 В этом примере показано, как возвратить максимальный размер сообщения.  
  
 [!code-csharp[WSHttpBindingBase#15](~/samples/snippets/csharp/VS_Snippets_CFX/wshttpbindingbase/cs/service.cs#15)]
 [!code-vb[WSHttpBindingBase#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wshttpbindingbase/vb/service.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
