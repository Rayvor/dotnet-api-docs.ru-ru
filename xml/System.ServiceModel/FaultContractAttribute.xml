<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd37f52a49fa79bca72031fc7d0f30b10132ee80" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75058629" /></Metadata><TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Задает одну или несколько ошибок протокола SOAP, сообщения о которых возвращаются, когда операция службы обнаруживает ошибки обработки.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пометьте операцию атрибутом <xref:System.ServiceModel.FaultContractAttribute>, чтобы объявить одно или несколько конкретных условий исключения, добавляемых в описание операции службы на языке WSDL, как явные сообщения об ошибках SOAP, возвращаемые операцией.  
  
 Во всех управляемых приложениях обработка ошибок представлена объектами <xref:System.Exception>. В приложениях на основе SOAP, таких как приложения Windows Communication Foundation (WCF), методы служб обмениваются сведениями об ошибках обработки с помощью сообщений о сбоях SOAP. Поскольку приложения WCF выполняются в обоих типах систем ошибок, все управляемые сведения об исключениях, которые должны быть отправлены клиенту, должны быть преобразованы из исключений в ошибки SOAP. Можно использовать поведения исключений службы по умолчанию или явно управлять тем, будут ли исключения сопоставляться с сообщениями об ошибках и как будет выполняться это сопоставление. Общие сведения об исключениях и ошибках SOAP в приложениях WCF см. в разделе [Указание и обработка ошибок в контрактах и службах](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  
  
 Рекомендуется, чтобы операции службы использовали <xref:System.ServiceModel.FaultContractAttribute> для формального указания всех ошибок SOAP, которые клиент может получить в нормальном процессе операции. Кроме того, чтобы свести к минимуму раскрытие информации, рекомендуется возвращать в сообщении об ошибке SOAP только те сведения, которые необходимо знать клиенту.  
  
-   Свойство <xref:System.ServiceModel.FaultContractAttribute.Action%2A> управляет действием сообщения об ошибке.  
  
-   Свойство <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> Возвращает тип объекта детализации, сериализованного в сообщении об ошибке.  
  
-   Свойства <xref:System.ServiceModel.FaultContractAttribute.Name%2A> и <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> управляют именем и пространством имен, соответственно, сообщения об ошибке.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> указывает, задан ли для сообщения об ошибке уровень защиты, и если да, то свойство <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> управляет этим уровнем защиты.  
  
> [!CAUTION]
>  Если сообщение об ошибке содержит конфиденциальную информацию или может привести к проблемам безопасности, настоятельно рекомендуется установить свойство <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>.  
  
-   Если <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> явно заданы как <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, так и <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>, то необходимо использовать привязку с включенной безопасностью, используя свойство <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> в привязке или исключение.  
  
-   Если выбирается привязка, разрешающая обеспечение безопасности, а свойство <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> нигде в контракте не задается, все данные приложений будут шифроваться и подписываться.  
  
-   Если выбрана привязка, для которой не включена безопасность (например, <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> по умолчанию отключена безопасность), а <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> не задан явно, никакие данные приложения не будут защищены.  
  
 Для многих сценариев параметр <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> для сообщений об ошибках достаточно велик. Дополнительные сведения см. в разделе [Основные сведения об уровне защиты](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Чтобы возвратить указанную ошибку из операции, помеченной <xref:System.ServiceModel.FaultContractAttribute>, вызовите <xref:System.ServiceModel.FaultException%601> (где параметр типа является сериализуемыми сведениями об ошибке), когда во время операции возникает управляемое исключение. Клиентские приложения WCF выдают ошибку SOAP как тот же тип, который был вызван в реализации клиента, то есть <xref:System.ServiceModel.FaultException%601> (где typeparameter находится вне — сериализуемые сведения об ошибке). <xref:System.ServiceModel.FaultContractAttribute> можно использовать только для указания ошибок SOAP для двусторонних операций службы и для пар асинхронных операций. односторонние операции не поддерживают ошибки SOAP и поэтому не поддерживают <xref:System.ServiceModel.FaultContractAttribute>.  
  
> [!NOTE]
>  Для передачи информации об ошибках можно использовать любой сериализуемый тип. Единственное ограничение в этой версии WCF состоит в том, что типы, указанные в <xref:System.ServiceModel.FaultContractAttribute>, должны быть сериализуемыми <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>. Сведения о поддержке сериализации <xref:System.Runtime.Serialization.DataContractSerializer> см. в разделе [сериализатор контрактов данных](~/docs/framework/wcf/feature-details/data-contract-serializer.md).  
  
 Например, чтобы указать, что клиенты могут рассчитывать на ошибку SOAP, содержащую <xref:System.Int32>, поместите этот параметр типа в <xref:System.ServiceModel.FaultContractAttribute> метода службы.  
  
> [!NOTE]
>  В следующих примерах кода не задаются свойства <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>, <xref:System.ServiceModel.FaultContractAttribute.Name%2A>или <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A>.  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 Затем в методе службы вызовите новую <xref:System.ServiceModel.FaultException%601>, где параметром типа является тип, содержащий сведения об ошибке (в приведенном выше примере — <xref:System.Int32>). Например:  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 Предыдущий пример является очень базовым; практически любую информацию можно передать с помощью <xref:System.Int32?displayProperty=nameWithType> кода, поэтому этот тип сведений не является самым полезным. Как правило, приложения WCF указывают ошибки SOAP с типами сведений, специфичными для требований клиента к сведениям об ошибках. Более полный пример см. в подразделе "Пример".  
  
> [!NOTE]
>  Если указать <xref:System.ServiceModel.FaultException%601>, где параметр типа является <xref:System.String?displayProperty=nameWithType>, строковое значение присваивается свойству Detail в клиентском приложении; Клиенты не могут получить эту строку, вызвав метод <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType>. Чтобы при вызове клиентским приложением метода <xref:System.Exception.ToString%2A?displayProperty=nameWithType> возвращалось строковое значение, необходимо вызывать исключение <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> внутри операции и передавать строку конструктору.  
  
 Чтобы явно управлять поведением приложения при возникновении исключения или <xref:System.ServiceModel.FaultException%601>, реализуйте интерфейс <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> на <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> или <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> и присвойте его свойству <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>. <xref:System.ServiceModel.Dispatcher.IErrorHandler> позволяет явно управлять создаваемой ошибкой SOAP и отправкой ее обратно клиенту.  
  
 Чтобы упростить отладку, задайте для <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> значение `true` в коде или используйте <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> в файле конфигурации приложения. Когда эта функция включена, служба автоматически возвращает вызывающему объекту информацию об исключениях. Эти ошибки появляются на клиенте как <xref:System.ServiceModel.FaultException> исключения.  
  
> [!IMPORTANT]
>  Поскольку управляемые исключения могут предоставлять внутренние сведения о приложении, установка <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> или <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> в `true` может позволить клиентам WCF получать сведения о внутренних исключениях операций службы, включая персональные и другие конфиденциальные сведения.  
>   
>  Поэтому задавать для свойства <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> или <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> значение `true` рекомендуется только для временной отладки приложения службы. Кроме того, WSDL для метода, который возвращает такие необработанные управляемые исключения, не содержит контракт для исключения <xref:System.ServiceModel.FaultException%601> типа <xref:System.String>. Клиенты должны рассчитывать на возможность неизвестной ошибки SOAP (возвращается клиентам WCF как объекты <xref:System.ServiceModel.FaultException?displayProperty=nameWithType>) для правильного получения отладочной информации.  
  
   
  
## Examples  
 В следующем примере кода показано, как с помощью атрибута <xref:System.ServiceModel.FaultContractAttribute> указать, что операция `SampleMethod` может возвращать ошибку SOAP с типом по умолчанию `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 В следующем примере кода показано, что клиенты WCF `ISampleService` испытывают ошибку SOAP в качестве <xref:System.ServiceModel.FaultException%601> типа `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">Сериализуемый тип, который содержит информацию об ошибке для вызывающего объекта.</param>
        <summary>Инициализация нового экземпляра класса <see cref="T:System.ServiceModel.FaultContractAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор обычно выполняется путем применения атрибута к методу службы и указания типа в качестве аргумента в атрибуте.  
  
   
  
## Examples  
 В следующем примере кода показано, как с помощью атрибута <xref:System.ServiceModel.FaultContractAttribute> указать, что операция `SampleMethod` может возвращать ошибку SOAP с типом по умолчанию `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="detailType" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает действие сообщения об ошибке SOAP, которое задается как компонент контракта операции.</summary>
        <value>Значение действия для сообщения об ошибке SOAP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте для управления действием сообщения об ошибке SOAP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает тип сериализуемого объекта, который содержит информацию об ошибке.</summary>
        <value>Тип, представляющий сериализуемый класс ошибки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как с помощью атрибута <xref:System.ServiceModel.FaultContractAttribute> указать, что операция `SampleMethod` может возвращать ошибку SOAP с типом по умолчанию `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, присвоен ли сообщению об ошибке SOAP уровень защиты.</summary>
        <value>Значение <see langword="true" />, если сообщению об ошибке присвоен уровень защиты; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A>, чтобы указать, должно ли сообщение об ошибке SOAP быть зашифрованным, подписанным или обоими. Дополнительные сведения см. в свойстве <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя сообщения об ошибке в языке WSDL.</summary>
        <value>Имя сообщения ошибки. Значение по умолчанию — имя типа, используемого в качестве сведений об ошибке.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает пространство имен ошибки SOAP.</summary>
        <value>Пространство имен ошибки SOAP.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает уровень защиты, который требуется от привязки для ошибки SOAP.</summary>
        <value>Одно из значений <see cref="T:System.Net.Security.ProtectionLevel" />. Значение по умолчанию: <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> определяет, как привязка должна выполнять шифрование, подписывание или оба эти действия при передаче сообщения об ошибке SOAP. Настоятельно рекомендуется, чтобы ошибка операции явным образом определяла требования к уровню защиты безопасности в контракте. Уровень защиты по умолчанию — <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>. Это означает, что определяемое сообщение об ошибке SOAP не требует шифрования или цифровой подписи (Хотя привязка может предоставить такую поддержку, если она настроена). Если сообщение об ошибке содержит конфиденциальную информацию или может привести к проблемам безопасности, настоятельно рекомендуется установить для свойства <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> значение <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Дополнительные сведения о проблемах безопасности см. в разделе [Общие сведения об уровне защиты](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Поведение защиты в среде выполнения представляет собой сочетание свойств уровня защиты, которые имеют иерархическую структуру. При задании внешнего значения устанавливается значение по умолчанию для всех более узких областей, если явно не задано другое значение для более узкой области. В этом случае внешнее значение остается значением по умолчанию для всех более узких областей за исключением тех областей, для которых задано иное значение.  
  
 Например, если <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> имеет значение <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> и никакие другие узкие области не имеют параметров уровня защиты, все сообщения в контракте операции шифруются и подписываются, включая сообщения об ошибках. Однако если для одной из этих <xref:System.ServiceModel.OperationContractAttribute> операций задано значение <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, то сообщения для этой операции будут подписаны, но все остальные сообщения в контракте шифруются и подписываются, включая сообщения об ошибках.  
  
 Ниже приводятся области, в которых заданы эти значения.  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 Свойство <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> атрибута <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 Свойство <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> атрибута <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Если в контракте отсутствует явно заданный уровень защиты, а базовая привязка поддерживает безопасность (как на транспортном уровне, так и на уровне сообщений), эффективным уровнем защиты для всего контракта является <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Если привязка не поддерживает безопасность (например, <xref:System.ServiceModel.BasicHttpBinding>), эффективным уровнем <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> является <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> для всего контракта. В результате в зависимости от привязки конечной точки клиенты могут требовать разную степень защиты на уровне сообщений или транспортном уровне, даже если контракт задает <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
