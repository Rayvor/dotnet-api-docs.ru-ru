<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cca9d43f5d75d4ca5e1b48f649086195ff3502e1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69103048" /></Metadata><TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="709b8-101">Указывает, какой режим выполнения операции поддерживается классом службы — однопотоковый или многопотоковый.</span><span class="sxs-lookup"><span data-stu-id="709b8-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709b8-102">Класс <xref:System.ServiceModel.ConcurrencyMode> используется вместе со свойством <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A>, чтобы задать режим выполнения операции (однопотоковый или многопотоковый), поддерживаемый классом службы.</span><span class="sxs-lookup"><span data-stu-id="709b8-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="709b8-103">Однопотоковая операция может разрешать или не разрешать повторный вызов.</span><span class="sxs-lookup"><span data-stu-id="709b8-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="709b8-104">В следующей таблице показано, когда Windows Communication Foundation (WCF) позволяет вызывать операцию, пока другая выполняется, в зависимости от <xref:System.ServiceModel.ConcurrencyMode>.</span><span class="sxs-lookup"><span data-stu-id="709b8-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="709b8-105">Значение ConcurrencyMode</span><span class="sxs-lookup"><span data-stu-id="709b8-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="709b8-106">Когда может быть вызвана новая операция</span><span class="sxs-lookup"><span data-stu-id="709b8-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="709b8-107">Single</span><span class="sxs-lookup"><span data-stu-id="709b8-107">Single</span></span>|<span data-ttu-id="709b8-108">Никогда.</span><span class="sxs-lookup"><span data-stu-id="709b8-108">Never.</span></span>|  
|<span data-ttu-id="709b8-109">Повторные входящие</span><span class="sxs-lookup"><span data-stu-id="709b8-109">Reentrant</span></span>|<span data-ttu-id="709b8-110">Только при вызове другой службы или обратном вызове.</span><span class="sxs-lookup"><span data-stu-id="709b8-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="709b8-111">Несколько</span><span class="sxs-lookup"><span data-stu-id="709b8-111">Multiple</span></span>|<span data-ttu-id="709b8-112">Всегда.</span><span class="sxs-lookup"><span data-stu-id="709b8-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="709b8-113">В следующем примере кода показано различие между использованием одиночного, повторного входа и нескольких.</span><span class="sxs-lookup"><span data-stu-id="709b8-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="709b8-114">Этот пример не компилируется без реальной реализации, но демонстрирует тип гарантий потоков, которые создает WCF, и то, что означает код операции.</span><span class="sxs-lookup"><span data-stu-id="709b8-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="709b8-115">Экземпляр службы является многопотоковым.</span><span class="sxs-lookup"><span data-stu-id="709b8-115">The service instance is multi-threaded.</span></span> <span data-ttu-id="709b8-116">Гарантии синхронизации не предоставляются.</span><span class="sxs-lookup"><span data-stu-id="709b8-116">No synchronization guarantees are made.</span></span> <span data-ttu-id="709b8-117">Поскольку другие потоки могут в любое время изменить объект службы, необходимо всегда обеспечивать синхронизацию и согласованность состояний.</span><span class="sxs-lookup"><span data-stu-id="709b8-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="709b8-118">Экземпляр службы является однопотоковым и допускает повторные входящие вызовы.</span><span class="sxs-lookup"><span data-stu-id="709b8-118">The service instance is single-threaded and accepts reentrant calls.</span></span> <span data-ttu-id="709b8-119">Служба, допускающая повторные входящие вызовы, принимает вызовы при вызове другой службы; следовательно, разработчик должен обеспечить сохранение согласованного состояния объекта до вызовов и подтвердить допустимость данных локальной операции после вызовов.</span><span class="sxs-lookup"><span data-stu-id="709b8-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span></span> <span data-ttu-id="709b8-120">Обратите внимание, что экземпляр службы разблокируется только путем вызова другой службы по каналу WCF.</span><span class="sxs-lookup"><span data-stu-id="709b8-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span></span> <span data-ttu-id="709b8-121">В этом случае вызванная служба может повторно войти в первую службу через обратный вызов.</span><span class="sxs-lookup"><span data-stu-id="709b8-121">In this case, the called service can reenter the first service via a callback.</span></span> <span data-ttu-id="709b8-122">Если первая служба не допускает повторные входящие вызовы, последовательность вызовов приводит к взаимоблокировке.</span><span class="sxs-lookup"><span data-stu-id="709b8-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span></span> <span data-ttu-id="709b8-123">Дополнительные сведения см. в разделе <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span><span class="sxs-lookup"><span data-stu-id="709b8-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="709b8-124">Экземпляр службы является однопотоковым и не допускает повторные входящие вызовы.</span><span class="sxs-lookup"><span data-stu-id="709b8-124">The service instance is single-threaded and does not accept reentrant calls.</span></span> <span data-ttu-id="709b8-125">Если свойство <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> имеет значение <see cref="F:System.ServiceModel.InstanceContextMode.Single" /> и во время обслуживания вызова экземпляром поступают дополнительные сообщения, эти сообщения должны ждать освобождения службы или истечения времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="709b8-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
