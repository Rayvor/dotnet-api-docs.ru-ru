<Type Name="ICompiledExpressionRoot" FullName="System.Activities.XamlIntegration.ICompiledExpressionRoot">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88c7d97f5366d72a4de806800b59fc0378ac7739" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70438650" /></Metadata><TypeSignature Language="C#" Value="public interface ICompiledExpressionRoot" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICompiledExpressionRoot" />
  <TypeSignature Language="DocId" Value="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICompiledExpressionRoot" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICompiledExpressionRoot" />
  <TypeSignature Language="F#" Value="type ICompiledExpressionRoot = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Указывает сведения о компилированном корне выражения.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecuteExpression">
      <MemberSignature Language="C#" Value="public bool CanExecuteExpression (string expressionText, bool isReference, System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt; locations, out int expressionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecuteExpression(string expressionText, bool isReference, class System.Collections.Generic.IList`1&lt;class System.Activities.LocationReference&gt; locations, [out] int32&amp; expressionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecuteExpression (expressionText As String, isReference As Boolean, locations As IList(Of LocationReference), ByRef expressionId As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecuteExpression(System::String ^ expressionText, bool isReference, System::Collections::Generic::IList&lt;System::Activities::LocationReference ^&gt; ^ locations, [Runtime::InteropServices::Out] int % expressionId);" />
      <MemberSignature Language="F#" Value="abstract member CanExecuteExpression : string * bool * System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt; *  -&gt; bool" Usage="iCompiledExpressionRoot.CanExecuteExpression (expressionText, isReference, locations, expressionId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionText" Type="System.String" />
        <Parameter Name="isReference" Type="System.Boolean" />
        <Parameter Name="locations" Type="System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt;" />
        <Parameter Name="expressionId" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expressionText">Используемый текст выражения.</param>
        <param name="isReference">Значение <see langword="true" />, если ссылка; в противном случае — значение <see langword="false" />.</param>
        <param name="locations">Коллекция расположений.</param>
        <param name="expressionId">Идентификатор выражения.</param>
        <summary>Показывает, может ли <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> выполнить выражение.</summary>
        <returns>Значение <see langword="true" />, если объект <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> может выполнить выражение; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpressionTreeForExpression">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetExpressionTreeForExpression (int expressionId, System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt; locationReferences);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetExpressionTreeForExpression(int32 expressionId, class System.Collections.Generic.IList`1&lt;class System.Activities.LocationReference&gt; locationReferences) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpressionTreeForExpression (expressionId As Integer, locationReferences As IList(Of LocationReference)) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetExpressionTreeForExpression(int expressionId, System::Collections::Generic::IList&lt;System::Activities::LocationReference ^&gt; ^ locationReferences);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionTreeForExpression : int * System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt; -&gt; System.Linq.Expressions.Expression" Usage="iCompiledExpressionRoot.GetExpressionTreeForExpression (expressionId, locationReferences)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionId" Type="System.Int32" />
        <Parameter Name="locationReferences" Type="System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt;" />
      </Parameters>
      <Docs>
        <param name="expressionId">Идентификатор выражения.</param>
        <param name="locationReferences">Ссылка на расположение.</param>
        <summary>Получает или дерево выражения, используемое для выражения.</summary>
        <returns>Дерево выражения, используемое для выражения.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public string GetLanguage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetLanguage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLanguage () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetLanguage();" />
      <MemberSignature Language="F#" Value="abstract member GetLanguage : unit -&gt; string" Usage="iCompiledExpressionRoot.GetLanguage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает язык, используемый в корне выражения.</summary>
        <returns>Используемый язык.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredLocations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; GetRequiredLocations (int expressionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetRequiredLocations(int32 expressionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredLocations (expressionId As Integer) As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetRequiredLocations(int expressionId);" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredLocations : int -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="iCompiledExpressionRoot.GetRequiredLocations expressionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expressionId">Идентификатор выражения.</param>
        <summary>Получает список обязательных расположений для корня выражения.</summary>
        <returns>Список обязательных расположений для корня выражения.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeExpression">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вызывает <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeExpression">
      <MemberSignature Language="C#" Value="public object InvokeExpression (int expressionId, System.Collections.Generic.IList&lt;System.Activities.Location&gt; locations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeExpression(int32 expressionId, class System.Collections.Generic.IList`1&lt;class System.Activities.Location&gt; locations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeExpression (expressionId As Integer, locations As IList(Of Location)) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeExpression(int expressionId, System::Collections::Generic::IList&lt;System::Activities::Location ^&gt; ^ locations);" />
      <MemberSignature Language="F#" Value="abstract member InvokeExpression : int * System.Collections.Generic.IList&lt;System.Activities.Location&gt; -&gt; obj" Usage="iCompiledExpressionRoot.InvokeExpression (expressionId, locations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionId" Type="System.Int32" />
        <Parameter Name="locations" Type="System.Collections.Generic.IList&lt;System.Activities.Location&gt;" />
      </Parameters>
      <Docs>
        <param name="expressionId">Идентификатор выражения.</param>
        <param name="locations">Используемые расположения.</param>
        <summary>Вызывает <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" />, используя указанные идентификатор выражения и расположения.</summary>
        <returns>Вызванное выражение.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeExpression">
      <MemberSignature Language="C#" Value="public object InvokeExpression (int expressionId, System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt; locations, System.Activities.ActivityContext activityContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeExpression(int32 expressionId, class System.Collections.Generic.IList`1&lt;class System.Activities.LocationReference&gt; locations, class System.Activities.ActivityContext activityContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeExpression(int expressionId, System::Collections::Generic::IList&lt;System::Activities::LocationReference ^&gt; ^ locations, System::Activities::ActivityContext ^ activityContext);" />
      <MemberSignature Language="F#" Value="abstract member InvokeExpression : int * System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt; * System.Activities.ActivityContext -&gt; obj" Usage="iCompiledExpressionRoot.InvokeExpression (expressionId, locations, activityContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionId" Type="System.Int32" />
        <Parameter Name="locations" Type="System.Collections.Generic.IList&lt;System.Activities.LocationReference&gt;" />
        <Parameter Name="activityContext" Type="System.Activities.ActivityContext" />
      </Parameters>
      <Docs>
        <param name="expressionId">Идентификатор выражения.</param>
        <param name="locations">Расположения.</param>
        <param name="activityContext">Контекст действия.</param>
        <summary>Вызывает <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" />, используя указанные идентификатор выражения и расположения и контекст действия.</summary>
        <returns>Вызванное выражение.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
