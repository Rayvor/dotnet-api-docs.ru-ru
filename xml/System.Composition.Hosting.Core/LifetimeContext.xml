<Type Name="LifetimeContext" FullName="System.Composition.Hosting.Core.LifetimeContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1fad874e0c670dfb3f71e61a78eb8546e366e299" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70337330" /></Metadata><TypeSignature Language="C#" Value="public sealed class LifetimeContext : System.Composition.CompositionContext, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LifetimeContext extends System.Composition.CompositionContext implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.LifetimeContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeContext&#xA;Inherits CompositionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeContext sealed : System::Composition::CompositionContext, IDisposable" />
  <TypeSignature Language="F#" Value="type LifetimeContext = class&#xA;    inherit CompositionContext&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Hosting</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Composition.CompositionContext</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="36156-101">Представляет узел в дереве времени существования.</span><span class="sxs-lookup"><span data-stu-id="36156-101">Represents a node in the lifetime tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="36156-102"><xref:System.Composition.Hosting.Core.LifetimeContext> Объект является единицей совместного использования общих частей.</span><span class="sxs-lookup"><span data-stu-id="36156-102">The <xref:System.Composition.Hosting.Core.LifetimeContext> object is the unit of sharing for shared parts.</span></span> <span data-ttu-id="36156-103">Он управляет реализацией связанных частей и может использоваться для получения экземпляров либо в составе существующей операции композиции, либо в качестве основания для новой операции композиции.</span><span class="sxs-lookup"><span data-stu-id="36156-103">It controls the disposal of bound parts and can be used to retrieve instances, either as part of an existing composition operation or as the basis of a new composition operation.</span></span> <span data-ttu-id="36156-104">Отдельный контекст времени существования может быть помечен для хранения частей, ограниченных определенными границами общего доступа.</span><span class="sxs-lookup"><span data-stu-id="36156-104">An individual lifetime context can be marked to contain parts that are constrained by particular sharing boundaries.</span></span>

<span data-ttu-id="36156-105">Этот объект содержит две части независимо защищенного общего состояния: экземпляры общих компонентов и экземпляры привязанных частей.</span><span class="sxs-lookup"><span data-stu-id="36156-105">This object contains two pieces of independently protected shared state: shared part instances and bound part instances.</span></span> <span data-ttu-id="36156-106">Экземпляр общей части является недоступным, доступным для чтения и не приводит к проблемам, если он добавляется во время реализации.</span><span class="sxs-lookup"><span data-stu-id="36156-106">A shared part instance is lock-free, readable, and does not result in issues if it is added to during disposal.</span></span> <span data-ttu-id="36156-107">Она защищена сама по себе блокировка.</span><span class="sxs-lookup"><span data-stu-id="36156-107">It is protected by being locked itself.</span></span> <span data-ttu-id="36156-108">Логика активации в этой блокировке не вызывает проблем.</span><span class="sxs-lookup"><span data-stu-id="36156-108">Activation logic is unavoidably called under this lock.</span></span> <span data-ttu-id="36156-109">Экземпляр привязанной части всегда защищен блокировкой <see langword="this" />и никогда не должен записываться в после удаления.</span><span class="sxs-lookup"><span data-stu-id="36156-109">A bound part instance is always protected by locking <see langword="this" />, and should never be written to after disposal.</span></span> <span data-ttu-id="36156-110">Для <see langword="null" /> экземпляра привязанной части задается блокировка <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> в методе.</span><span class="sxs-lookup"><span data-stu-id="36156-110">A bound part instance is set to <see langword="null" /> under a lock in the <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> method.</span></span> <span data-ttu-id="36156-111">Если запись была разрешена после реализации для экземпляра привязанной части, это привело бы к освобождению частей, которые не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="36156-111">If writing were allowed after disposal for a bound part instance, it would result in disposable parts not being released.</span></span> <span data-ttu-id="36156-112">Метод Dispose в привязанной части вызывается за пределами блокировки.</span><span class="sxs-lookup"><span data-stu-id="36156-112">The dispose method on a bound part is called outside of the lock.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBoundInstance">
      <MemberSignature Language="C#" Value="public void AddBoundInstance (IDisposable instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBoundInstance(class System.IDisposable instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AddBoundInstance(System.IDisposable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBoundInstance (instance As IDisposable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBoundInstance(IDisposable ^ instance);" />
      <MemberSignature Language="F#" Value="member this.AddBoundInstance : IDisposable -&gt; unit" Usage="lifetimeContext.AddBoundInstance instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.IDisposable" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="36156-113">Часть.</span><span class="sxs-lookup"><span data-stu-id="36156-113">The part.</span></span></param>
        <summary><span data-ttu-id="36156-114">Привязывает время существования удаляемой части к этому контексту времени жизни.</span><span class="sxs-lookup"><span data-stu-id="36156-114">Binds the lifetime of a disposable part to this lifetime context.</span></span></summary>
        <remarks></remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="36156-115">Операция выполняется с ликвидированным объектом.</span><span class="sxs-lookup"><span data-stu-id="36156-115">The operation was performed on a disposed object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateSharingId">
      <MemberSignature Language="C#" Value="public static int AllocateSharingId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AllocateSharingId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateSharingId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AllocateSharingId();" />
      <MemberSignature Language="F#" Value="static member AllocateSharingId : unit -&gt; int" Usage="System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36156-116">Создает идентификатор, который можно использовать для поиска общих экземпляров частей.</span><span class="sxs-lookup"><span data-stu-id="36156-116">Generates an identifier that can be used to locate shared part instances.</span></span></summary>
        <returns><span data-ttu-id="36156-117">Новый уникальный идентификатор.</span><span class="sxs-lookup"><span data-stu-id="36156-117">A new unique identifier.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="lifetimeContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36156-118">Освобождает контекст времени жизни и все экземпляры частей, привязанные к нему.</span><span class="sxs-lookup"><span data-stu-id="36156-118">Releases the lifetime context and any part instances bound to it.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextWithin">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.LifetimeContext FindContextWithin (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.LifetimeContext FindContextWithin(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindContextWithin (sharingBoundary As String) As LifetimeContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::LifetimeContext ^ FindContextWithin(System::String ^ sharingBoundary);" />
      <MemberSignature Language="F#" Value="member this.FindContextWithin : string -&gt; System.Composition.Hosting.Core.LifetimeContext" Usage="lifetimeContext.FindContextWithin sharingBoundary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.LifetimeContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary"><span data-ttu-id="36156-119">Общая граница, в пределах которой нужно найти контекст времени существования.</span><span class="sxs-lookup"><span data-stu-id="36156-119">The sharing boundary to find a lifetime context within.</span></span></param>
        <summary><span data-ttu-id="36156-120">Находит наиболее широкий контекст времени существования в пределах всех заданных общих границ.</span><span class="sxs-lookup"><span data-stu-id="36156-120">Finds the broadest lifetime context within all of the specified sharing boundaries.</span></span></summary>
        <returns><span data-ttu-id="36156-121">Наиболее широкий контекст времени существования в пределах всех заданных общих границ.</span><span class="sxs-lookup"><span data-stu-id="36156-121">The broadest lifetime context within all of the specified sharing boundaries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36156-122">В настоящее время корень не может быть границей.</span><span class="sxs-lookup"><span data-stu-id="36156-122">Currently, the root cannot be a boundary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreate">
      <MemberSignature Language="C#" Value="public object GetOrCreate (int sharingId, System.Composition.Hosting.Core.CompositionOperation operation, System.Composition.Hosting.Core.CompositeActivator creator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreate(int32 sharingId, class System.Composition.Hosting.Core.CompositionOperation operation, class System.Composition.Hosting.Core.CompositeActivator creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(System.Int32,System.Composition.Hosting.Core.CompositionOperation,System.Composition.Hosting.Core.CompositeActivator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreate (sharingId As Integer, operation As CompositionOperation, creator As CompositeActivator) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreate(int sharingId, System::Composition::Hosting::Core::CompositionOperation ^ operation, System::Composition::Hosting::Core::CompositeActivator ^ creator);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreate : int * System.Composition.Hosting.Core.CompositionOperation * System.Composition.Hosting.Core.CompositeActivator -&gt; obj" Usage="lifetimeContext.GetOrCreate (sharingId, operation, creator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingId" Type="System.Int32" />
        <Parameter Name="operation" Type="System.Composition.Hosting.Core.CompositionOperation" />
        <Parameter Name="creator" Type="System.Composition.Hosting.Core.CompositeActivator" />
      </Parameters>
      <Docs>
        <param name="sharingId"><span data-ttu-id="36156-123">Идентификатор общей части.</span><span class="sxs-lookup"><span data-stu-id="36156-123">The ID of the shared part.</span></span></param>
        <param name="operation"><span data-ttu-id="36156-124">Операция, в которой следует при необходимости создать часть.</span><span class="sxs-lookup"><span data-stu-id="36156-124">An operation in which to create a part, if necessary.</span></span></param>
        <param name="creator"><span data-ttu-id="36156-125">Активатор, который может активировать новый экземпляр части, если необходимо.</span><span class="sxs-lookup"><span data-stu-id="36156-125">An activator that can activate a new part instance, if necessary.</span></span></param>
        <summary><span data-ttu-id="36156-126">Извлекает экземпляр общей части с указанным идентификатором, или, если не удается найти экземпляр части, создает и использует экземпляр части с помощью заданного создателя в указанной операции.</span><span class="sxs-lookup"><span data-stu-id="36156-126">Retrieves a shared part instance with the specified ID, or if the part instance can not be found, creates and shares a part instance using the specified creator within the specified operation.</span></span></summary>
        <returns><span data-ttu-id="36156-127">Новая или извлеченная часть.</span><span class="sxs-lookup"><span data-stu-id="36156-127">The new or retrieved part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36156-128">Этот метод не блокируется, если экземпляр части уже существует.</span><span class="sxs-lookup"><span data-stu-id="36156-128">This method is lock-free if the part instance already exists.</span></span> <span data-ttu-id="36156-129">Если экземпляр части должен быть создан, будет сделана блокировка, которая будет выполнять сериализацию других операций записи, использующих этот метод (одновременные операции чтения будут по-прежнему защищены и остаются без блокировки).</span><span class="sxs-lookup"><span data-stu-id="36156-129">If the part instance must be created, a lock will be taken that will serialize other writes that use this method (concurrent reads will continue to be safe and lock-free).</span></span> <span data-ttu-id="36156-130">Важно, чтобы композиция и, таким же, заблокировала получение, были строго конечными в корне в дереве времени существования.</span><span class="sxs-lookup"><span data-stu-id="36156-130">It is important that the composition, and thus lock acquisition, is strictly leaf-to-root in the lifetime tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lifetimeContext.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36156-131">Возвращает строковое представление конкретного объекта <see cref="T:System.Composition.Hosting.Core.LifetimeContext" />.</span><span class="sxs-lookup"><span data-stu-id="36156-131">Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="36156-132">Строковое представление конкретного объекта <see cref="T:System.Composition.Hosting.Core.LifetimeContext" />.</span><span class="sxs-lookup"><span data-stu-id="36156-132">The string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public override bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="override this.TryGetExport : System.Composition.Hosting.Core.CompositionContract * obj -&gt; bool" Usage="lifetimeContext.TryGetExport (contract, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="36156-133">Контракт.</span><span class="sxs-lookup"><span data-stu-id="36156-133">The contract.</span></span></param>
        <param name="export"><span data-ttu-id="36156-134">По возвращении этот метод содержит экземпляр контракта, если доступно; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36156-134">After this method returns, contains the contract instance if available; otherwise, <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36156-135">Извлекает экземпляр контракта из контекста композиции.</span><span class="sxs-lookup"><span data-stu-id="36156-135">Retrieves a contract instance from the composition context.</span></span></summary>
        <returns><span data-ttu-id="36156-136">Значение <see langword="true" />, если экземпляр был получен; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="36156-136"><see langword="true" /> if the instance was retrieved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="36156-137">Не найден экспорт для <paramref name="contract" />.</span><span class="sxs-lookup"><span data-stu-id="36156-137">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
