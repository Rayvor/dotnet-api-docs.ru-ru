<Type Name="ComContractElement" FullName="System.ServiceModel.Configuration.ComContractElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e41cdb34008f3e51f564c2783f261777b5e4325" /><Meta Name="ms.sourcegitcommit" Value="93667418e6e77da6ba7109a407c61b8969cec4ec" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/05/2019" /><Meta Name="ms.locfileid" Value="67571153" /></Metadata><TypeSignature Language="C#" Value="public sealed class ComContractElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComContractElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Configuration.ComContractElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComContractElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComContractElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type ComContractElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="188f1-101">Указывает контракт службы интеграции COM+.</span><span class="sxs-lookup"><span data-stu-id="188f1-101">Specifies a COM+ integration service contract.</span></span> <span data-ttu-id="188f1-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="188f1-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="188f1-103">Контракты службы интеграции COM +, в настоящее время ограничены `"http://tempuri.org"` пространство имен и имя контракта является производным от поддерживающего COM-интерфейса.</span><span class="sxs-lookup"><span data-stu-id="188f1-103">COM+ integration service contracts are currently restricted to the `"http://tempuri.org"` namespace, and the contract name is derived from the supporting COM interface.</span></span> <span data-ttu-id="188f1-104">Однако можно указать альтернативы, используя раздел `comContracts` в файле конфигурации.</span><span class="sxs-lookup"><span data-stu-id="188f1-104">You can, however, specify alternatives by using the `comContracts` section in the configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="188f1-105">Приведенную ниже конфигурацию можно использовать для указания пространства имен, имени контракта и пользовательских типов.</span><span class="sxs-lookup"><span data-stu-id="188f1-105">You can use the following configuration to specify the namespace, contract name, and user defined types to be included.</span></span> <span data-ttu-id="188f1-106">Для контракта службы также можно задать другие параметры.</span><span class="sxs-lookup"><span data-stu-id="188f1-106">You can also specify other settings for a service contract</span></span>  
  
 [!code-xml[S_UEComContractElement#100](~/samples/snippets/csharp/VS_Snippets_CFX/s_uecomcontractelement/common/app.config#100)]   
  
 <span data-ttu-id="188f1-107">После инициализации службы указанные пространства имен и имена контрактов применяются к созданным описаниям служб.</span><span class="sxs-lookup"><span data-stu-id="188f1-107">When the service is initialized, the specified namespaces and contract names are applied to the generated service descriptions.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/42e74148-223d-4888-a8ed-1d928527eb09"><span data-ttu-id="188f1-108">ComContracts в конфигурации</span><span class="sxs-lookup"><span data-stu-id="188f1-108">ComContracts in Configuration</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="188f1-109">Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Configuration.ComContractElement" />.</span><span class="sxs-lookup"><span data-stu-id="188f1-109">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComContractElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Configuration.ComContractElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComContractElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="188f1-110">Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Configuration.ComContractElement" />.</span><span class="sxs-lookup"><span data-stu-id="188f1-110">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComContractElement (string contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Configuration.ComContractElement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComContractElement(System::String ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Configuration.ComContractElement : string -&gt; System.ServiceModel.Configuration.ComContractElement" Usage="new System.ServiceModel.Configuration.ComContractElement contractType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractType"><span data-ttu-id="188f1-111">Строка, содержащая тип контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-111">A string that contains the type of contract.</span></span></param>
        <summary><span data-ttu-id="188f1-112">Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Configuration.ComContractElement" />.</span><span class="sxs-lookup"><span data-stu-id="188f1-112">Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contract">
      <MemberSignature Language="C#" Value="public string Contract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Contract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Contract" />
      <MemberSignature Language="VB.NET" Value="Public Property Contract As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Contract { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Contract : string with get, set" Usage="System.ServiceModel.Configuration.ComContractElement.Contract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("contract", Options=System.Configuration.ConfigurationPropertyOptions.IsRequired | System.Configuration.ConfigurationPropertyOptions.IsKey)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-113">Возвращает или задает тип контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-113">Gets or sets the contract type.</span></span></summary>
        <value><span data-ttu-id="188f1-114">Тип контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-114">The contract type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExposedMethods">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.ComMethodElementCollection ExposedMethods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.ComMethodElementCollection ExposedMethods" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.ExposedMethods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExposedMethods As ComMethodElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::ComMethodElementCollection ^ ExposedMethods { System::ServiceModel::Configuration::ComMethodElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExposedMethods : System.ServiceModel.Configuration.ComMethodElementCollection" Usage="System.ServiceModel.Configuration.ComContractElement.ExposedMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("exposedMethods", Options=System.Configuration.ConfigurationPropertyOptions.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.ComMethodElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-115">Возвращает коллекцию методов COM+, которые предоставляется при предоставлении интерфейса компонента COM+ как веб-службы.</span><span class="sxs-lookup"><span data-stu-id="188f1-115">Gets a collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.</span></span></summary>
        <value><span data-ttu-id="188f1-116">Коллекция методов COM+, которые предоставляются при предоставлении интерфейса компонента COM+ как веб-службы.</span><span class="sxs-lookup"><span data-stu-id="188f1-116">The collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="188f1-117">Средство конфигурации интеграции COM+ (ComSvcConfig.exe) может применяться для добавления определенных методов COM-интерфейса для использования в созданном контракте службы.</span><span class="sxs-lookup"><span data-stu-id="188f1-117">The COM+ integration configuration tool (ComSvcConfig.exe) can be used to add specific methods from a COM interface to appear on the generated service contract.</span></span>  
  
 <span data-ttu-id="188f1-118">Например, для добавления в созданный контракт службы трех именованных методов из COM-интерфейса `IFinances` компонента `ItemOrders.Financial` можно использовать приведенную ниже команду.</span><span class="sxs-lookup"><span data-stu-id="188f1-118">For example, you can use the following command to add the three named methods from the `IFinances` COM interface on the `ItemOrders.Financial` component, to the generated service contract.</span></span>  
  
```  
ComSvcConfig.exe /i /application:OnlineStore /contract:ItemOrders.Financial,IFinances.{TransferFunds,AddFunds,RemoveFunds} /hosting:complus  
```  
  
 <span data-ttu-id="188f1-119">При запуске средства ComSvcConfig.exe оно создает следующий контракт службы, в котором указанные выше методы перечисляются как элементы `exposedMethod`.</span><span class="sxs-lookup"><span data-stu-id="188f1-119">When you run the ComSvcConfig.exe tool, it then generates the following service contract listing the previously mentioned methods as `exposedMethod` elements.</span></span>  
  
 [!code-xml[S_UEComContractElement#101](~/samples/snippets/csharp/VS_Snippets_CFX/s_uecomcontractelement/common/app2.config#101)]   
  
 <span data-ttu-id="188f1-120">Во время инициализации службы среда выполнения пытается создать контракт службы, отображая и добавляя только те методы, которые включены в список элементов `exposedMethod`.</span><span class="sxs-lookup"><span data-stu-id="188f1-120">At service initialization time, the runtime attempts to generate a service contract by reflecting over and adding only the methods included in the list of `exposedMethod` elements.</span></span> <span data-ttu-id="188f1-121">Для каждого метода интерфейса, который не включен в контракт службы, создается трассировка.</span><span class="sxs-lookup"><span data-stu-id="188f1-121">A trace is produced for every interface method that is not included on the service contract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.Configuration.ComContractElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("name", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-122">Возвращает или задает имя контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-122">Gets or sets the contract name.</span></span></summary>
        <value><span data-ttu-id="188f1-123">Имя контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-123">The contract name.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.Configuration.ComContractElement.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("namespace", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.None)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-124">Возвращает или задает пространство имен контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-124">Gets or sets the contract namespace.</span></span></summary>
        <value><span data-ttu-id="188f1-125">Пространство имен контракта.</span><span class="sxs-lookup"><span data-stu-id="188f1-125">The contract namespace.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistableTypes">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.ComPersistableTypeElementCollection PersistableTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.ComPersistableTypeElementCollection PersistableTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.PersistableTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistableTypes As ComPersistableTypeElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::ComPersistableTypeElementCollection ^ PersistableTypes { System::ServiceModel::Configuration::ComPersistableTypeElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistableTypes : System.ServiceModel.Configuration.ComPersistableTypeElementCollection" Usage="System.ServiceModel.Configuration.ComContractElement.PersistableTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("persistableTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.ComPersistableTypeElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-126">Возвращает все сохраняемые типы.</span><span class="sxs-lookup"><span data-stu-id="188f1-126">Gets all the persistable types.</span></span></summary>
        <value><span data-ttu-id="188f1-127">Сохраняемые типы.</span><span class="sxs-lookup"><span data-stu-id="188f1-127">The persistable types.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.ServiceModel.Configuration.ComContractElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresSession">
      <MemberSignature Language="C#" Value="public bool RequiresSession { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresSession" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.RequiresSession" />
      <MemberSignature Language="VB.NET" Value="Public Property RequiresSession As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequiresSession { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RequiresSession : bool with get, set" Usage="System.ServiceModel.Configuration.ComContractElement.RequiresSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requiresSession", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-128">Возвращает или задает логическое значение, указывающее, ограничено ли использование контракта только сеансовыми привязками.</span><span class="sxs-lookup"><span data-stu-id="188f1-128">Gets or sets a Boolean value that specifies whether the contract can only be used on sessionful bindings.</span></span></summary>
        <value><span data-ttu-id="188f1-129">Значение <see langword="true" />, если контракт можно использовать только в сеансовых привязках; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="188f1-129"><see langword="true" /> if the contract can only be used on sessionful bindings; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="188f1-130">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="188f1-130">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="188f1-131">При инициализации службы среда выполнения интеграции обеспечивает согласованность этого параметра с типом используемой привязки.</span><span class="sxs-lookup"><span data-stu-id="188f1-131">When the service is initialized, the integration runtime ensures that this setting is consistent with the type of binding to be used.</span></span> <span data-ttu-id="188f1-132">В случае конфликта одной или нескольких привязок для контракта создается исключение.</span><span class="sxs-lookup"><span data-stu-id="188f1-132">An exception is generated if one or more of the bindings for the contract are in conflict.</span></span> <span data-ttu-id="188f1-133">Если этому свойству присвоено значение `false`, то при использовании одностороннего канала и наличии параметров [out] также создается исключение.</span><span class="sxs-lookup"><span data-stu-id="188f1-133">If this property is `false`, a one-way channel is in use and there are any [out] parameters, an exception is also generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserDefinedTypes">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Configuration.ComUdtElementCollection UserDefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Configuration.ComUdtElementCollection UserDefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserDefinedTypes As ComUdtElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Configuration::ComUdtElementCollection ^ UserDefinedTypes { System::ServiceModel::Configuration::ComUdtElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserDefinedTypes : System.ServiceModel.Configuration.ComUdtElementCollection" Usage="System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("userDefinedTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Configuration.ComUdtElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="188f1-134">Возвращает коллекцию определяемых пользователем типов (UDT), предназначенную для включения в контракт службы.</span><span class="sxs-lookup"><span data-stu-id="188f1-134">Gets a collection of User Defined Types (UDT) that is to be included in the service contract.</span></span> <span data-ttu-id="188f1-135">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="188f1-135">This class cannot be inherited.</span></span></summary>
        <value><span data-ttu-id="188f1-136">Коллекция определенных пользователем типов (UDT).</span><span class="sxs-lookup"><span data-stu-id="188f1-136">The collection of User Defined Types (UDT).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="188f1-137">Среда выполнения интеграции СОМ+ создает службы путем проверки библиотеки типов.</span><span class="sxs-lookup"><span data-stu-id="188f1-137">The COM+ integration runtime creates services by inspecting the type library.</span></span> <span data-ttu-id="188f1-138">Если в компоненте СОМ+ содержатся методы, которые служат для передачи VARIANT, система не в состоянии определить фактические типы для передачи до среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="188f1-138">When a COM+ component contains methods that pass a VARIANT, the system cannot determine the actual types to be passed prior to runtime.</span></span> <span data-ttu-id="188f1-139">Поэтому при попытке передать пользовательский тип (UDT) в рамках VARIANT происходит сбой, поскольку данный тип не является известным типом для сериализации.</span><span class="sxs-lookup"><span data-stu-id="188f1-139">Therefore, when you attempt to pass a User Defined Type (UDT) within a VARIANT, it fails because it is not a known type for serialization.</span></span>  
  
 <span data-ttu-id="188f1-140">Для решения этой проблемы можно добавить пользовательские типы в файл конфигурации, чтобы их можно было включить как известные типы в соответствующий контракт службы.</span><span class="sxs-lookup"><span data-stu-id="188f1-140">To circumvent this problem, you can add the UDTs to the configuration file so that they can be included as known types on the appropriate service contract.</span></span> <span data-ttu-id="188f1-141">Для этого необходимо однозначно определить пользовательский тип и контракты, то есть исходные интерфейсы СОМ, которые его используют.</span><span class="sxs-lookup"><span data-stu-id="188f1-141">In order to do so, you have to uniquely identify the UDT and the contract(s), that is, the original COM interface(s) that uses it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="188f1-142">В следующем примере показано добавление два конкретных пользовательских типа `<userDefinedTypes>` раздел файла конфигурации для этой цели.</span><span class="sxs-lookup"><span data-stu-id="188f1-142">The following example demonstrates adding two specific UDTs to the `<userDefinedTypes>` section of the configuration file for this purpose.</span></span>  
  
 [!code-xml[S_UEComContractElement#102](~/samples/snippets/csharp/VS_Snippets_CFX/s_uecomcontractelement/common/app3.config#102)]   
  
 <span data-ttu-id="188f1-143">Атрибуты `<userDefinedType>` элемента определяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="188f1-143">The attributes of the `<userDefinedType>` element are defined as follows:</span></span>  
  
-   <span data-ttu-id="188f1-144">`typeName`: необязательный атрибут, предоставляющий доступное для чтения имя типа.</span><span class="sxs-lookup"><span data-stu-id="188f1-144">`typeName`: An optional attribute that provides the readable type name.</span></span> <span data-ttu-id="188f1-145">Не используется средой выполнения, но помогает читателю различать типы.</span><span class="sxs-lookup"><span data-stu-id="188f1-145">This is not used by the runtime but helps a reader to distinguish the types.</span></span>  
  
-   <span data-ttu-id="188f1-146">`typeLibID`: строка идентификатора GUID, в которой указывается зарегистрированная библиотека типов, в которой задан тип.</span><span class="sxs-lookup"><span data-stu-id="188f1-146">`typeLibID`: A GUID string that specifies the registered type library that defines the type.</span></span>  
  
-   <span data-ttu-id="188f1-147">`typeLibVersion`: строка, в которой указывается версия библиотеки типов, в которой задан тип.</span><span class="sxs-lookup"><span data-stu-id="188f1-147">`typeLibVersion`: A string that specifies the type library version that defines the type.</span></span>  
  
-   <span data-ttu-id="188f1-148">`typeDefID`: строка идентификатора GUID, в которой указывается пользовательский тип в зарегистрированной библиотеке типов.</span><span class="sxs-lookup"><span data-stu-id="188f1-148">`typeDefID`: A GUID string that specifies the specific UDT type within the registered type library.</span></span>  
  
 <span data-ttu-id="188f1-149">При запуске службы среда выполнения интеграции выполняет поиск по указанным типам и добавляет их в коллекции известных типов для заданных контрактов.</span><span class="sxs-lookup"><span data-stu-id="188f1-149">When the service is initialized, the integration runtime looks up the specified types and adds them to the known types collection for the specified contracts.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>