<Type Name="IEnumerator" FullName="System.Collections.IEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57ece1576ae05d0b48c761981c00c70ac85b37b3" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75150474" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("496B0ABF-CDEE-11d3-88E8-00902754C43A")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Поддерживает простой перебор по неуниверсальной коллекции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IEnumerator> является базовым интерфейсом для всех неуниверсальных перечислителей. Его универсальным эквивалентом является интерфейс <xref:System.Collections.Generic.IEnumerator%601?displayProperty=nameWithType>.  
  
 Инструкция `foreach` языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Поэтому вместо непосредственного управления перечислителем рекомендуется использовать `foreach`.  
  
 Перечислители могут использоваться для чтения данных в коллекции, но не для ее изменения.  
  
 Метод <xref:System.Collections.IEnumerator.Reset%2A> предоставляется для COM-взаимодействия и не требует полной реализации. Вместо этого разработчик может создать <xref:System.NotSupportedException>.  
  
 Изначально перечислитель располагается перед первым элементом коллекции. Необходимо вызвать метод <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции перед чтением значения <xref:System.Collections.IEnumerator.Current%2A>; в противном случае <xref:System.Collections.IEnumerator.Current%2A> не определен.  
  
 <xref:System.Collections.IEnumerator.Current%2A> возвращает тот же объект, пока не будет вызван метод <xref:System.Collections.IEnumerator.MoveNext%2A> или <xref:System.Collections.IEnumerator.Reset%2A>. <xref:System.Collections.IEnumerator.MoveNext%2A> задает <xref:System.Collections.IEnumerator.Current%2A> в качестве значения для следующего элемента.  
  
 Если <xref:System.Collections.IEnumerator.MoveNext%2A> передает конец коллекции, перечислитель размещается после последнего элемента в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A> возвращает `false`. Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A> также возвращают `false`. Если последний вызов <xref:System.Collections.IEnumerator.MoveNext%2A> вернул `false`, <xref:System.Collections.IEnumerator.Current%2A> не определено.  
  
 Чтобы снова присвоить <xref:System.Collections.IEnumerator.Current%2A> первому элементу коллекции, можно вызвать метод <xref:System.Collections.IEnumerator.Reset%2A>, если он реализован, а затем <xref:System.Collections.IEnumerator.MoveNext%2A>. Если <xref:System.Collections.IEnumerator.Reset%2A> не реализована, необходимо создать новый экземпляр перечислителя, чтобы вернуться к первому элементу коллекции.  
  
 Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, поведение перечислителя не определено.  
  
 У перечислителя нет эксклюзивного доступа к коллекции, поэтому перечисление коллекции не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приведет к тому, что перечислитель создаст исключение. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления, либо перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется реализация интерфейсов <xref:System.Collections.IEnumerable> и <xref:System.Collections.IEnumerator> для пользовательской коллекции. В этом примере члены этих интерфейсов не вызываются явным образом, но реализуются для поддержки использования `foreach` (`for each` в Visual Basic) для прохода по коллекции.  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#1)]
 [!code-vb[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
        <value>Элемент коллекции, соответствующий текущей позиции перечислителя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IEnumerator.Current%2A> не определена при выполнении любого из следующих условий:  
  
-   Перечислитель располагается перед первым элементом в коллекции сразу после создания перечислителя.   чтобы переместить перечислитель к первому элементу коллекции перед считыванием значения <xref:System.Collections.IEnumerator.Current%2A>, необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
-   Последний вызов <xref:System.Collections.IEnumerator.MoveNext%2A> вернул `false`, который указывает на конец коллекции.  
  
-   Перечислитель становится недействительным из-за изменений, внесенных в коллекцию, таких как добавление, изменение или удаление элементов.  
  
 <xref:System.Collections.IEnumerator.Current%2A> возвращает тот же объект, пока не будет вызван метод <xref:System.Collections.IEnumerator.MoveNext%2A>. <xref:System.Collections.IEnumerator.MoveNext%2A> задает <xref:System.Collections.IEnumerator.Current%2A> в качестве значения для следующего элемента.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется реализация интерфейсов <xref:System.Collections.IEnumerator> для пользовательской коллекции. В этом примере <xref:System.Collections.IEnumerator.Current%2A> не вызывается явно, но реализуется для поддержки использования `foreach` (`for each` в Visual Basic). Этот пример кода является частью более крупного примера для интерфейса <xref:System.Collections.IEnumerator>.  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#2)]
 [!code-vb[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool" Usage="iEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель к следующему элементу коллекции.</summary>
        <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После создания перечислителя или после вызова метода <xref:System.Collections.IEnumerator.Reset%2A> перечислитель размещается перед первым элементом коллекции, а первый вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A> перемещает перечислитель по первому элементу коллекции.  
  
 Если <xref:System.Collections.IEnumerator.MoveNext%2A> передает конец коллекции, перечислитель размещается после последнего элемента в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A> возвращает `false`. Когда перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A> также возвращают `false`, пока не будет вызван <xref:System.Collections.IEnumerator.Reset%2A>.  
  
 Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, поведение <xref:System.Collections.IEnumerator.MoveNext%2A> не определено.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется реализация интерфейсов <xref:System.Collections.IEnumerator> для пользовательской коллекции. В этом примере <xref:System.Collections.IEnumerator.MoveNext%2A> не вызывается явно, но реализуется для поддержки использования `foreach` (`for each` в Visual Basic). Этот пример кода является частью более крупного примера для интерфейса <xref:System.Collections.IEnumerator>.  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#2)]
 [!code-vb[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
        <exception cref="T:System.InvalidOperationException">После создания перечислителя семейство было изменено.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, поведение <xref:System.Collections.IEnumerator.Reset%2A> не определено.  
  
 Метод <xref:System.Collections.IEnumerator.Reset%2A> предоставляется для COM-взаимодействия. Он не обязательно должен быть реализован; Вместо этого разработчик может просто вызвать <xref:System.NotSupportedException>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется реализация интерфейсов <xref:System.Collections.IEnumerator> для пользовательской коллекции. В этом примере <xref:System.Collections.IEnumerator.Reset%2A> не вызывается явно, но реализуется для поддержки использования `foreach` (`for each` в Visual Basic). Этот пример кода является частью более крупного примера для интерфейса <xref:System.Collections.IEnumerator>.  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#2)]
 [!code-vb[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Все вызовы <see cref="M:System.Collections.IEnumerator.Reset" /> должны привести к одному и тому же состоянию перечислителя. Предпочтительная реализация — переместить перечислитель в начало коллекции перед первым элементом. Это сделает перечислитель недействительным, если коллекция была изменена с момента создания перечислителя, что согласуется с <see cref="M:System.Collections.IEnumerator.MoveNext" /> и <see cref="P:System.Collections.IEnumerator.Current" />.</para></block>
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <exception cref="T:System.InvalidOperationException">После создания перечислителя семейство было изменено.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
