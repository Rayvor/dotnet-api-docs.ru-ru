<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd00651dda7a217f20b4a6182134480cafd83b60" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75150422" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Поддерживает структурное сравнение объектов коллекции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интерфейс <xref:System.Collections.IStructuralComparable> позволяет реализовать пользовательские сравнения для элементов коллекции. Иными словами, можно точно определить, что означает для одного объекта коллекции, который должен предшествовать, следовать или находиться в том же положении в порядке сортировки, что и второй объект коллекции. Затем можно указать, что это определение должно использоваться с типом коллекции, который принимает интерфейс <xref:System.Collections.IStructuralComparable>.  
  
 Интерфейс содержит один элемент, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, который определяет, является ли текущий объект коллекции меньшим, равным или большим, чем второй объект в порядке сортировки. Фактическое сравнение элементов или элементов в текущем экземпляре с элементами во втором объекте выполняется реализацией интерфейса <xref:System.Collections.IComparer>, которая содержит определение пользовательского сравнения.  
  
> [!NOTE]
>  Интерфейс <xref:System.Collections.IStructuralComparable> поддерживает только структурные сравнения для сортировки или упорядочения. Интерфейс <xref:System.Collections.IStructuralEquatable> поддерживает пользовательские сравнения для структурного равенства.  
  
 .NET Framework предоставляет два компаратора по умолчанию. Один из них возвращается свойством <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType>; второй возврат возвращается свойством <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>.  
  
 Универсальные классы кортежей (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>и т. д.) и класс <xref:System.Array> предоставляют явные реализации интерфейса <xref:System.Collections.IStructuralComparable>. Путем приведения ( C#в) или преобразования (в Visual Basic) текущего экземпляра массива или кортежа в значение <xref:System.Collections.IStructuralComparable> интерфейса и предоставления реализации <xref:System.Collections.IComparer> в качестве аргумента для метода <xref:System.Collections.IStructuralComparable.CompareTo%2A> можно определить пользовательский порядок сортировки для массива или коллекции. Однако в большинстве случаев метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> не вызывается напрямую. Вместо этого метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> вызывается методами сортировки, такими как <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. В этом случае необходимо определить реализацию <xref:System.Collections.IComparer> и передать ее в качестве аргумента в конструктор класса метода сортировки или объекта коллекции. Метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> с пользовательским компаратором затем вызывается автоматически при сортировке коллекции.  
  
   
  
## Examples  
 В следующем примере создается массив объектов <xref:System.Tuple%606>, содержащих данные о населении для трех городов США с 1960 до 2000. Первым компонентом из шести компонентов является название города. Оставшиеся пять компонентов представляют собой совокупность с интервалом в десять лет от 1960 до 2000.  
  
 Класс `PopulationComparer` предоставляет реализацию <xref:System.Collections.IComparer>, которая позволяет сортировать массив секступлес по любому из его компонентов. В конструкторе класса `PopulationComparer` предоставляются два значения: расположение компонента, определяющего порядок сортировки, и логическое значение, которое указывает, должны ли объекты кортежа сортироваться в порядке возрастания или убывания.  
  
 Затем в этом примере элементы массива отображаются в несортированном порядке, сортируются по третьему компоненту (заполнение в 1970) и отображаются, а затем сортируются по шестому компоненту (заполнение в 2000) и отображаются. Обратите внимание, что в примере не вызывается метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> напрямую. Метод вызывается неявно методом <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> для каждого объекта кортежа в массиве.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Объект для сравнения с текущим экземпляром.</param>
        <param name="comparer">Объект, который сравнивает члены текущего объекта коллекции с соответствующими членами объекта <paramref name="other" />.</param>
        <summary>Определяет позицию текущего объекта коллекции относительно другого объекта в порядке сортировки (находится перед другим объектов, на одной позиции с ним или после другого объекта).</summary>
        <returns>Целое число со знаком, определяющее соотношение между текущим объектом коллекции и объектом <paramref name="other" /> в порядке сортировки:<br /> — Если меньше нуля, текущий экземпляр стоит перед объектом <paramref name="other" />.<br /> — Если ноль, текущий экземпляр и объект <paramref name="other" /> равны.<br /> — Если больше нуля, текущий экземпляр стоит после объекта <paramref name="other" />.  
  
 <list type="table"><listheader><term> Возвращаемое значение 
 </term><description> Описание 
 </description></listheader><item><term> -1 
 </term><description> Текущий экземпляр стоит перед объектом <paramref name="other" />.  
  
 </description></item><item><term> 0 
 </term><description> Текущий экземпляр и объект <paramref name="other" /> равны.  
  
 </description></item><item><term> 1 
 </term><description> Текущий экземпляр стоит после объекта <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> поддерживает пользовательское структурное сравнение и сортировку объектов Array и Tuple. Метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> вызывает метод <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> объекта `comparer` для сравнения отдельных элементов массива или компонентов кортежа, начиная с первого элемента или компонента. Отдельные вызовы <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> End и метод <xref:System.Collections.IStructuralComparable.CompareTo%2A> возвращают значение, если выполняется одно из следующих условий.  
  
-   Метод <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> возвращает значение-1.  
  
-   Метод <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> возвращает 1.  
  
-   Метод <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> вызывается для последнего элемента или компонента в объекте коллекции.  
  
   
  
## Examples  
 В следующем примере создается массив объектов <xref:System.Tuple%606>, содержащих данные о населении для трех городов США с 1960 до 2000. Первым компонентом из шести компонентов является название города. Оставшиеся пять компонентов представляют собой совокупность с интервалом в десять лет от 1960 до 2000.  
  
 Класс `PopulationComparer` предоставляет реализацию <xref:System.Collections.IComparer>, которая позволяет сортировать массив секступлес по любому из его компонентов. В конструкторе класса `PopulationComparer` предоставляются два значения: расположение компонента, определяющего порядок сортировки, и значение <xref:System.Boolean>, указывающее, должны ли объекты кортежа сортироваться в порядке возрастания или убывания.  
  
 Затем в этом примере элементы массива отображаются в несортированном порядке, сортируются по третьему компоненту (заполнение в 1970) и отображаются, а затем сортируются по шестому компоненту (заполнение в 2000) и отображаются. Обратите внимание, что пример не вызывает напрямую реализацию <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType>. Метод вызывается неявно методом <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> для каждого объекта кортежа в массиве.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="other" /> и этот экземпляр не принадлежат к одному типу.</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>
