<Type Name="CodeIterationStatement" FullName="System.CodeDom.CodeIterationStatement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c33230e400f72320493b9e616414e6a8d58b2b44" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63910438" /></Metadata><TypeSignature Language="C#" Value="public class CodeIterationStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeIterationStatement extends System.CodeDom.CodeStatement" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeIterationStatement" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeIterationStatement&#xA;Inherits CodeStatement" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeIterationStatement : System::CodeDom::CodeStatement" />
  <TypeSignature Language="F#" Value="type CodeIterationStatement = class&#xA;    inherit CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7ce5b-101">Представляет оператор <see langword="for" /> или цикл по блоку операторов, использующие выражение проверки как условие для продолжения цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-101">Represents a <see langword="for" /> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce5b-102">Объект <xref:System.CodeDom.CodeIterationStatement> может представлять `for` цикла или `while` цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-102">A <xref:System.CodeDom.CodeIterationStatement> can represent a `for` loop or `while` loop.</span></span>  
  
 <span data-ttu-id="7ce5b-103"><xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> Свойство указывает оператор для выполнения перед первой итерацией цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-103">The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration.</span></span> <span data-ttu-id="7ce5b-104"><xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> Свойство указывает выражение для продолжения цикла, которой должен быть равен `true` в конце каждой итерации цикла для начала следующей итерации.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-104">The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin.</span></span> <span data-ttu-id="7ce5b-105"><xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> Свойство указывает оператор для выполнения в конце каждой итерации цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-105">The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration.</span></span> <span data-ttu-id="7ce5b-106"><xref:System.CodeDom.CodeIterationStatement.Statements%2A> Свойство указывает коллекцию операторов для выполнения внутри цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-106">The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce5b-107">В этом примере показано использование <xref:System.CodeDom.CodeIterationStatement> для представления `for` цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-107">This example demonstrates using a <xref:System.CodeDom.CodeIterationStatement> to represent a `for` loop.</span></span>  
  
 [!code-cpp[CodeIterationStatementExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeIterationStatementExample/CPP/codeiterationstatementexample.cpp#2)]
 [!code-csharp[CodeIterationStatementExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeIterationStatementExample/CS/codeiterationstatementexample.cs#2)]
 [!code-vb[CodeIterationStatementExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeIterationStatementExample/VB/codeiterationstatementexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ce5b-108">Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIterationStatement" />.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ce5b-109">Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIterationStatement" />.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement (System.CodeDom.CodeStatement initStatement, System.CodeDom.CodeExpression testExpression, System.CodeDom.CodeStatement incrementStatement, params System.CodeDom.CodeStatement[] statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeStatement initStatement, class System.CodeDom.CodeExpression testExpression, class System.CodeDom.CodeStatement incrementStatement, class System.CodeDom.CodeStatement[] statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initStatement As CodeStatement, testExpression As CodeExpression, incrementStatement As CodeStatement, ParamArray statements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement(System::CodeDom::CodeStatement ^ initStatement, System::CodeDom::CodeExpression ^ testExpression, System::CodeDom::CodeStatement ^ incrementStatement, ... cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ statements);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeIterationStatement : System.CodeDom.CodeStatement * System.CodeDom.CodeExpression * System.CodeDom.CodeStatement * System.CodeDom.CodeStatement[] -&gt; System.CodeDom.CodeIterationStatement" Usage="new System.CodeDom.CodeIterationStatement (initStatement, testExpression, incrementStatement, statements)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="testExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="incrementStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="statements" Type="System.CodeDom.CodeStatement[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="initStatement"><span data-ttu-id="7ce5b-110"><see cref="T:System.CodeDom.CodeStatement" /> содержит оператор инициализации цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-110">A <see cref="T:System.CodeDom.CodeStatement" /> containing the loop initialization statement.</span></span></param>
        <param name="testExpression"><span data-ttu-id="7ce5b-111"><see cref="T:System.CodeDom.CodeExpression" /> содержит выражение для проверки выходного условия.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-111">A <see cref="T:System.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</span></span></param>
        <param name="incrementStatement"><span data-ttu-id="7ce5b-112"><see cref="T:System.CodeDom.CodeStatement" /> содержит оператор приращения по циклам.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-112">A <see cref="T:System.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</span></span></param>
        <param name="statements"><span data-ttu-id="7ce5b-113">Массив типа <see cref="T:System.CodeDom.CodeStatement" />, содержащий операторы внутри цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-113">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements within the loop.</span></span></param>
        <summary><span data-ttu-id="7ce5b-114">Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIterationStatement" />, используя заданные параметры.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class using the specified parameters.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="IncrementStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement IncrementStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement IncrementStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property IncrementStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ IncrementStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IncrementStatement : System.CodeDom.CodeStatement with get, set" Usage="System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ce5b-115">Получает или задает оператор, вызываемый после каждого прохода цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-115">Gets or sets the statement that is called after each loop cycle.</span></span></summary>
        <value><span data-ttu-id="7ce5b-116"><see cref="T:System.CodeDom.CodeStatement" />, указывающий оператор приращения по циклам.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-116">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the per cycle increment statement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce5b-117">Этот оператор называется после каждой итерации.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-117">This statement is called after each iteration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="InitStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement InitStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement InitStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property InitStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ InitStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitStatement : System.CodeDom.CodeStatement with get, set" Usage="System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ce5b-118">Получает или задает оператор инициализации цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-118">Gets or sets the loop initialization statement.</span></span></summary>
        <value><span data-ttu-id="7ce5b-119"><see cref="T:System.CodeDom.CodeStatement" />, указывающий оператор инициализации цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-119">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the loop initialization statement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce5b-120">Можно указать пустой оператор инициализации, этому свойству присвоить <xref:System.CodeDom.CodeExpressionStatement> , содержащий <xref:System.CodeDom.CodeSnippetExpression> , содержащий пустую строку.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-120">You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection Statements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ Statements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Statements : System.CodeDom.CodeStatementCollection" Usage="System.CodeDom.CodeIterationStatement.Statements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ce5b-121">Получает коллекцию операторов для выполнения внутри цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-121">Gets the collection of statements to be executed within the loop.</span></span></summary>
        <value><span data-ttu-id="7ce5b-122">Массив типа <see cref="T:System.CodeDom.CodeStatement" />, указывающий операторы внутри цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-122">An array of type <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statements within the loop.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="TestExpression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression TestExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression TestExpression" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property TestExpression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ TestExpression { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TestExpression : System.CodeDom.CodeExpression with get, set" Usage="System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ce5b-123">Получает или задает выражение для проверки как условие продолжения цикла.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-123">Gets or sets the expression to test as the condition that continues the loop.</span></span></summary>
        <value><span data-ttu-id="7ce5b-124"><see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение для проверки.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-124">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to test.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce5b-125">Если это выражение возвращает значение `true`, цикл будет продолжен.</span><span class="sxs-lookup"><span data-stu-id="7ce5b-125">If this expression resolves to `true`, the loop will continue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>