<Type Name="SqlPersistenceProviderFactory" FullName="System.ServiceModel.Persistence.SqlPersistenceProviderFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14b83799bf4dc9229fcb0a037b98514cc8b8ca6b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70538665" /></Metadata><TypeSignature Language="C#" Value="public class SqlPersistenceProviderFactory : System.ServiceModel.Persistence.PersistenceProviderFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlPersistenceProviderFactory extends System.ServiceModel.Persistence.PersistenceProviderFactory" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlPersistenceProviderFactory&#xA;Inherits PersistenceProviderFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPersistenceProviderFactory : System::ServiceModel::Persistence::PersistenceProviderFactory" />
  <TypeSignature Language="F#" Value="type SqlPersistenceProviderFactory = class&#xA;    inherit PersistenceProviderFactory" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Persistence.PersistenceProviderFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляемая системой реализация <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" />, используемая для создания экземпляра <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" />, использующего базу данных SQL для хранения сведений о сохраняемом состоянии службы.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory> представляет класс фабрики для полнофункционального поставщика сохраняемых служб. Этот поставщик, предоставляемый системой, можно использовать для сохранения и извлечения сведений о состоянии устойчивой службы WCF.  
  
 Помимо сохраняемости, поставщик, созданный классом <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>, реализует блокировку записей данных о состоянии службы путем наследования из абстрактного класса <xref:System.ServiceModel.Persistence.LockingPersistenceProvider>.  Методы, взаимодействующие с материализованными данными ( <xref:System.ServiceModel.Persistence.LockingPersistenceProvider.Create%2A> например <xref:System.ServiceModel.Persistence.LockingPersistenceProvider.Update%2A>, или), имеют необязательный параметр (`lockInstance`), который определяет, освобождаются ли блокировки на рассматриваемых данных.  
  
> [!NOTE]
>  Для исключений <xref:System.ServiceModel.Persistence.PersistenceException>, вызываемых объектом <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>, по умолчанию не скрываются подробные сведения. Чтобы защититься от уязвимостей системы безопасности, эти сведения можно скрыть <xref:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults%2A> , `false`задав для значение.  
  
> [!NOTE]
>  Поставщик сохраняемости SQL сохраняет данные в базе данных SQL Server и извлекает их из этой базы. Ведущее приложение должно создать безопасную среду SQL Server, чтобы защититься от злоумышленников, получающих доступ для чтения/записи данных о состоянии экземпляра либо в базе данных, либо на линии связи между приложением и базой данных.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перегружает конструктор для класса <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory> и предоставляет параметры для задания перечисленного ниже.  
  
-   Строка соединения, используемая для доступа к базе данных SQL.  
  
-   Время ожидания блокировки, используемое для задания длительности блокировки владения.  
  
-   Формат сериализации данных сохраняемости: XML или двоичные данные.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlPersistenceProviderFactory (System.Collections.Specialized.NameValueCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Specialized.NameValueCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameters As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlPersistenceProviderFactory(System::Collections::Specialized::NameValueCollection ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory : System.Collections.Specialized.NameValueCollection -&gt; System.ServiceModel.Persistence.SqlPersistenceProviderFactory" Usage="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory parameters" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="parameters">Коллекция параметров, используемых новой фабрикой поставщика сохраняемости. В число допустимых параметров входят <see langword="lockTimeout" />, <see langword="connectionStringName" /> и <see langword="serializeAsText" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" />, настроенный с указанной коллекцией параметров.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор можно использовать для произвольного задания параметров `lockTimeout`, `connectionString` и `serializeAsText` без задания остальных параметров, необходимых для других конструкторов (например, чтобы задать параметры `connectionString` и `lockTimeout`, не задавая параметр `serializeAsText`).  
  
   
  
## Examples  
 В следующем примере кода показано, как создать новый экземпляр класса <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>, используя коллекцию параметров.  
  
 [!code-csharp[SqlPersistenceProviderFactory#3](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlPersistenceProviderFactory (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlPersistenceProviderFactory(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory : string -&gt; System.ServiceModel.Persistence.SqlPersistenceProviderFactory" Usage="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Параметры соединения для нового экземпляра поставщика сохраняемости.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" />, настроенный с указанной строкой подключения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как создать новый экземпляр класса <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>, используя строку подключения.  
  
 [!code-csharp[SqlPersistenceProviderFactory#2](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlPersistenceProviderFactory (string connectionString, bool serializeAsText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, bool serializeAsText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, serializeAsText As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlPersistenceProviderFactory(System::String ^ connectionString, bool serializeAsText);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory : string * bool -&gt; System.ServiceModel.Persistence.SqlPersistenceProviderFactory" Usage="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory (connectionString, serializeAsText)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="serializeAsText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="connectionString">Параметры соединения для нового экземпляра поставщика сохраняемости.</param>
        <param name="serializeAsText">Задает, будут ли данные сериализованы как текст или как двоичные данные.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" />, настроенный с указанной строкой подключения и параметрами <see langword="serializeAsText" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию `serializeAsText` для `false`параметра равно, что означает, что данные сохраняемости сериализуются как двоичные данные.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание нового экземпляра класса <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>.  
  
 [!code-csharp[SqlPersistenceProviderFactory#1](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlPersistenceProviderFactory (string connectionString, bool serializeAsText, TimeSpan lockTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, bool serializeAsText, valuetype System.TimeSpan lockTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, serializeAsText As Boolean, lockTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlPersistenceProviderFactory(System::String ^ connectionString, bool serializeAsText, TimeSpan lockTimeout);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory : string * bool * TimeSpan -&gt; System.ServiceModel.Persistence.SqlPersistenceProviderFactory" Usage="new System.ServiceModel.Persistence.SqlPersistenceProviderFactory (connectionString, serializeAsText, lockTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="serializeAsText" Type="System.Boolean" />
        <Parameter Name="lockTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="connectionString">Параметры соединения для нового экземпляра фабрики поставщика сохраняемости.</param>
        <param name="serializeAsText">Задает, будут ли данные сериализованы как текст или как двоичные данные.</param>
        <param name="lockTimeout">Время ожидания для блокировки владения. Заблокированные экземпляры автоматически разблокируются по прошествии этого времени. Время ожидания <see langword="TimeSpan.Zero" />означает, что блокировка не используется.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" />, настроенный с указанной строкой подключения и параметрами <see langword="serializeAsText" /> и <see langword="lockTimeout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию `serializeAsText` для `false`параметра равно, что означает, что данные сохраняемости сериализуются как двоичные данные.  
  
 Значение по умолчанию `lockTimeout` для `TimeSpan.Zero`параметра равно, что означает, что блокировка не используется. Если `TimeSpan.MaxValue` используется, блокировки сохраняются бессрочно.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется создание нового экземпляра класса <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>.  
  
 [!code-csharp[SqlPersistenceProviderFactory#0](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.ServiceModel.Persistence.SqlPersistenceProviderFactory.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает параметры соединения для экземпляров поставщика сохраняемости, создаваемых этой фабрикой.</summary>
        <value>Параметры соединения для экземпляров поставщика сохраняемости, создаваемых этой фабрикой.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как осуществляется задание свойства `ConnectionString` и доступ к нему.  
  
 [!code-csharp[SqlPersistenceProviderFactory#4](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Persistence.PersistenceProvider CreateProvider (Guid id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Persistence.PersistenceProvider CreateProvider(valuetype System.Guid id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.CreateProvider(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateProvider (id As Guid) As PersistenceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Persistence::PersistenceProvider ^ CreateProvider(Guid id);" />
      <MemberSignature Language="F#" Value="override this.CreateProvider : Guid -&gt; System.ServiceModel.Persistence.PersistenceProvider" Usage="sqlPersistenceProviderFactory.CreateProvider id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Persistence.PersistenceProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id">Уникальный идентификатор создаваемого поставщика сохраняемости.</param>
        <summary>Инициализирует новый экземпляр <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" />, использующий в качестве хранилища сохраняемости базу данных SQL.</summary>
        <returns>Созданный новый объект <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Инициализированный поставщик сохраняемости использует текущие параметры создающей фабрики (<xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.ConnectionString%2A>, <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.LockTimeout%2A> и <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.SerializeAsText%2A>), даже если параметры фабрики изменились после создания поставщика сохраняемости.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется выполнение метода `CreateProvider`. Обратите внимание, что обращение к получающемуся поставщику производится как к экземпляру <xref:System.ServiceModel.Persistence.LockingPersistenceProvider>.  
  
 [!code-csharp[SqlPersistenceProviderFactory#7](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCloseTimeout">
      <MemberSignature Language="C#" Value="protected override TimeSpan DefaultCloseTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DefaultCloseTimeout" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultCloseTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultCloseTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property TimeSpan DefaultCloseTimeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCloseTimeout : TimeSpan" Usage="System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultCloseTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение времени ожидания по умолчанию, используемое при закрытии поставщиков сохраняемости, созданных с помощью этой фабрики.</summary>
        <value>Значение времени ожидания по умолчанию.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию для времени ожидания закрытия составляет 15 секунд.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultOpenTimeout">
      <MemberSignature Language="C#" Value="protected override TimeSpan DefaultOpenTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DefaultOpenTimeout" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultOpenTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultOpenTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property TimeSpan DefaultOpenTimeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultOpenTimeout : TimeSpan" Usage="System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultOpenTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение времени ожидания по умолчанию, используемое при открытии поставщика сохраняемости.</summary>
        <value>Значение времени ожидания по умолчанию.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию для времени ожидания открытия составляет 15 секунд.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan LockTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan LockTimeout" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.LockTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property LockTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan LockTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.LockTimeout : TimeSpan with get, set" Usage="System.ServiceModel.Persistence.SqlPersistenceProviderFactory.LockTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Значение времени ожидания для блокировки владения, используемое экземплярами поставщика сохраняемости, созданными этим экземпляром. Заблокированные экземпляры автоматически разблокируются по прошествии этого времени.</summary>
        <value>Значение времени ожидания для владения блокировкой.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Время ожидания `TimeSpan.Zero`означает, что блокировка не используется.  
  
   
  
## Examples  
 В следующем примере кода показано, как осуществляется доступ к свойству `LockTimeout`.  
  
 [!code-csharp[SqlPersistenceProviderFactory#5](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAbort">
      <MemberSignature Language="C#" Value="protected override void OnAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnAbort" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAbort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAbort();" />
      <MemberSignature Language="F#" Value="override this.OnAbort : unit -&gt; unit" Usage="sqlPersistenceProviderFactory.OnAbort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Представляет этап прерывания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OnAbort`активируется при внезапном завершении работы узла службы, когда активные команды, обрабатываемые в данный момент, закрываются.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginClose">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginClose (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.IAsyncResult OnBeginClose(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnBeginClose (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IAsyncResult ^ OnBeginClose(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.OnBeginClose : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="sqlPersistenceProviderFactory.OnBeginClose (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Промежуток времени, по истечении которого поставщик сохраняемости прерывает эту попытку.</param>
        <param name="callback">Метод, вызываемый при завершении этой операции.</param>
        <param name="state">Предоставляемый пользователем объект, отличающий конкретную асинхронную операцию от других операций.</param>
        <summary>Представляет начало этапа Close.</summary>
        <returns>Состояние вызова асинхронного метода <see cref="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этап Close наступает при закрытии службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginOpen">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginOpen (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.IAsyncResult OnBeginOpen(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnBeginOpen (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IAsyncResult ^ OnBeginOpen(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.OnBeginOpen : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="sqlPersistenceProviderFactory.OnBeginOpen (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Промежуток времени, по истечении которого поставщик сохраняемости прерывает эту попытку.</param>
        <param name="callback">Метод, вызываемый при завершении этой операции.</param>
        <param name="state">Предоставляемый пользователем объект, отличающий конкретную асинхронную операцию от других операций.</param>
        <summary>Представляет начало этапа Open.</summary>
        <returns>Состояние вызова асинхронного метода <see cref="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этап Open наступает при открытии службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClose">
      <MemberSignature Language="C#" Value="protected override void OnClose (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClose(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnClose(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClose (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClose(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="override this.OnClose : TimeSpan -&gt; unit" Usage="sqlPersistenceProviderFactory.OnClose timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Промежуток времени, по истечении которого поставщик сохраняемости прерывает эту попытку.</param>
        <summary>Представляет этап Close.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этап Close наступает при закрытии службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndClose">
      <MemberSignature Language="C#" Value="protected override void OnEndClose (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEndClose(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnEndClose(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEndClose (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEndClose(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="override this.OnEndClose : IAsyncResult -&gt; unit" Usage="sqlPersistenceProviderFactory.OnEndClose result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Ссылка на результат операции.</param>
        <summary>Представляет конец этапа Close.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этап Close наступает при закрытии службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndOpen">
      <MemberSignature Language="C#" Value="protected override void OnEndOpen (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEndOpen(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnEndOpen(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEndOpen (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEndOpen(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="override this.OnEndOpen : IAsyncResult -&gt; unit" Usage="sqlPersistenceProviderFactory.OnEndOpen result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Ссылка на результат операции.</param>
        <summary>Представляет конец этапа Open.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этап Open наступает при открытии службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpen">
      <MemberSignature Language="C#" Value="protected override void OnOpen (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnOpen(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnOpen(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnOpen (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnOpen(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="override this.OnOpen : TimeSpan -&gt; unit" Usage="sqlPersistenceProviderFactory.OnOpen timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Промежуток времени, по истечении которого поставщик сохраняемости прерывает эту попытку.</param>
        <summary>Представляет этап Open.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этап Open наступает при открытии службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsText">
      <MemberSignature Language="C#" Value="public bool SerializeAsText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SerializeAsText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.SerializeAsText" />
      <MemberSignature Language="VB.NET" Value="Public Property SerializeAsText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SerializeAsText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SerializeAsText : bool with get, set" Usage="System.ServiceModel.Persistence.SqlPersistenceProviderFactory.SerializeAsText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает способ сериализации данных в поставщиках сохраняемости, созданных этой фабрикой: как текст или как двоичные данные.</summary>
        <value>Значение <see langword="true" />, если данные службы проходят сериализацию как текст, в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию `serializeAsText` для `false`параметра равно, что означает, что данные сохраняемости сериализуются как двоичные данные.  
  
   
  
## Examples  
 В следующем примере кода показано, как осуществляется доступ к свойству `SerializeAsText`.  
  
 [!code-csharp[SqlPersistenceProviderFactory#6](~/samples/snippets/csharp/VS_Snippets_CFX/sqlpersistenceproviderfactory/cs/sqlpersistenceproviderfactory.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
