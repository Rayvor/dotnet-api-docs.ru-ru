<Type Name="EntityCollection&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityCollection&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="39f530d3afb5d436c64e79ea18f09287315da565" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70335866" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityCollection&lt;TEntity&gt; : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityCollection`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.RelatedEnd implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityCollection(Of TEntity)&#xA;Inherits RelatedEnd&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IListSource" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityCollection sealed : System::Data::Objects::DataClasses::RelatedEnd, System::Collections::Generic::ICollection&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource" />
  <TypeSignature Language="F#" Value="type EntityCollection&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit RelatedEnd&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.RelatedEnd</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">Тип сущности коллекции.</typeparam>
    <summary>Представляет коллекцию объектов, образующих сторону отношения "many".</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Data.Objects.DataClasses.EntityCollection%601> является коллекцией объектов определенного типа сущности, который представляет элемент «многие» в связи «один ко многим» или «многие ко многим».  
  
 Объект <xref:System.Data.Objects.DataClasses.EntityCollection%601> возвращается свойством навигации. Метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> используется для загрузки связанных объектов в коллекцию <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Чтобы сохранить несвязанную коллекцию объектов определенного типа сущности, например результат запроса <xref:System.Data.Objects.ObjectQuery%601>, используйте экземпляр класса <xref:System.Collections.Generic.List%601>.  
  
 Для коллекции <xref:System.Data.Objects.DataClasses.EntityCollection%601> может существовать соответствующая ссылка <xref:System.Data.Objects.DataClasses.EntityReference%601>. Если объекты <xref:System.Data.Objects.DataClasses.EntityCollection%601> и <xref:System.Data.Objects.DataClasses.EntityReference%601> расположены на противоположных концах одной связи, целостность связи поддерживается на уровне объектов. Эти два класса автоматически синхронизируются.  
  
 Этот класс не наследуется.  
  
   
  
## Examples  
 Этот пример основан на. Чтобы запустить код, используемый в данном примере, нужно сначала добавить к проекту модель AdventureWorks Sales и настроить его для использования платформы Entity Framework. Для этого выполните процедуры, описанные в [следующих руководствах. Вручную настройте проект](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework и [выполните следующие действия. Вручную Определите файлы](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)модели и сопоставления.  
  
 Код в примере выполняет следующие действия.  
  
1.  Создает две новые сущности `SalesOrderHeader` и добавляет их в сущность `Contact`.  
  
2.  Возвращает все связанные элементы из <xref:System.Data.Objects.DataClasses.RelationshipManager>, которые относятся к сущности `Contact`.  
  
3.  Проходит по коллекции элементов <xref:System.Data.Objects.DataClasses.IRelatedEnd>.  
  
4.  Возвращает <xref:System.Data.Objects.DataClasses.EntityCollection%601> для каждого связанного элемента.  
  
5.  Использует метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> для удаления одной сущности из коллекции.  
  
6.  Вызывает метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A>, чтобы определить, был ли объект удален из коллекции.  
  
7.  Использует метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> для добавления сущности обратно в коллекцию.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот открытый конструктор для объекта <xref:System.Data.Objects.DataClasses.EntityCollection%601> предназначен для использования службами объектов во время десериализации графов объектов. Доступ к экземпляру <xref:System.Data.Objects.DataClasses.EntityCollection%601> следует выполнять из свойства навигации, а не используя этот конструктор.  
  
 Чтобы сохранить несвязанную коллекцию объектов определенного типа сущности, например результат запроса <xref:System.Data.Objects.ObjectQuery%601>, используйте экземпляр класса <xref:System.Collections.Generic.List%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Add : 'Entity -&gt; unit" Usage="entityCollection.Add entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Объект, добавляемый в коллекцию. <paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
        <summary>Добавляет объект в коллекцию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> добавляет объект в коллекцию <xref:System.Data.Objects.DataClasses.EntityCollection%601> и создает связь между двумя объектами. Если исходный объект присоединен к экземпляру <xref:System.Data.Objects.ObjectContext>, метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> также добавляет объект в контекст <xref:System.Data.Objects.ObjectContext>. Эта операция преобразуется в операцию вставки в источнике данных при <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> вызове. Дополнительные сведения см. в разделе [Создание, добавление, изменение и удаление объектов](https://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1).  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Метод можно вызывать несколько раз для одного и того же экземпляра объекта.  
  
   
  
## Examples  
 Этот пример основан на. Чтобы запустить код, используемый в данном примере, нужно сначала добавить к проекту модель AdventureWorks Sales и настроить его для использования платформы Entity Framework. Для этого выполните процедуры, описанные в [следующих руководствах. Вручную настройте проект](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework и [выполните следующие действия. Вручную Определите файлы](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)модели и сопоставления.  
  
 В этом примере создаются две новые сущности `SalesOrderHeader`, добавляются к сущности `Contact`, а после удаления объекта используется метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> для добавления объекта обратно в коллекцию.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="entity" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет связь между двумя присоединенными объектами в контексте объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt; -&gt; unit" Usage="entityCollection.Attach entities" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="entityCollection.Attach entities" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">Коллекция объектов в контексте объекта, которые связаны с исходным объектом.</param>
        <summary>Определяет отношения между объектом и коллекцией связанных объектов в контексте объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Data.Objects.ObjectContext.Attach%2A> используется, чтобы определить связи между объектом и коллекцией связанных объектов, если и исходный объект, и коллекция связанных объектов уже существуют в контексте объекта. Чтобы присоединить объект или граф объектов, где уже определены связи, вызовите метод <xref:System.Data.Objects.ObjectContext.Attach%2A> в контексте <xref:System.Data.Objects.ObjectContext>. Чтобы создать новый объект, связанный с исходным объектом, вызовите метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> для коллекции <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Дополнительные сведения см. в разделе [Присоединение и отсоединение объектов](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Если коллекция уже заполнена целиком или частично, метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> выполнит слияние существующих сущностей с заданными. Предполагается, что заданные сущности не образуют полный набор связанных сущностей.  
  
 Все передаваемые сущности должны находиться в состоянии <xref:System.Data.EntityState.Unchanged> или <xref:System.Data.EntityState.Modified>. Объекты в состоянии <xref:System.Data.EntityState.Deleted> допускаются только в случае, когда диспетчер состояний уже отслеживает данный экземпляр связи.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Коллекция <paramref name="entities" /> равна <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Исходный объект или объект в коллекции <paramref name="entities" /> имеет значение <see langword="null" /> либо не находится в состоянии <see cref="F:System.Data.EntityState.Unchanged" /> или <see cref="F:System.Data.EntityState.Modified" />.  
  
- или - 
Не удается определить связь на основании метаданных модели EDM. Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityCollection.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Присоединяемый объект.</param>
        <summary>Определяет связь между двумя присоединенными объектами в контексте объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> используется, чтобы определить связи между двумя объектами, если оба объекта уже существуют в контексте объекта. Чтобы присоединить объект или граф объектов, где уже определены связи, вызовите метод <xref:System.Data.Objects.ObjectContext.Attach%2A> в контексте <xref:System.Data.Objects.ObjectContext>. Чтобы создать новый объект, связанный с исходным объектом, вызовите метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> для коллекции <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Дополнительные сведения см. в разделе [Присоединение и отсоединение объектов](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Если в коллекцию <xref:System.Data.Objects.DataClasses.EntityCollection%601> уже загружены объекты, метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> выполняет слияние нового объекта с объектами, существующими в <xref:System.Data.Objects.DataClasses.EntityCollection%601>.  
  
 Предполагается, что присоединяемый объект не представляет полный набор связанных сущностей.  
  
 Объект, связанный с этой ссылкой <xref:System.Data.Objects.DataClasses.EntityCollection%601>, и все присоединенные к нему объекты должны находиться в состоянии <xref:System.Data.EntityState.Unchanged> или <xref:System.Data.EntityState.Modified>.  
  
 Объект в состоянии <xref:System.Data.EntityState.Deleted> можно присоединять только в случае, если <xref:System.Data.Objects.ObjectStateManager> уже отслеживает экземпляр связи.  
  
   
  
## Examples  
 Этот пример основан на. Чтобы запустить код, используемый в данном примере, нужно сначала добавить к проекту модель AdventureWorks Sales и настроить его для использования платформы Entity Framework. Для этого выполните процедуры, описанные в [следующих руководствах. Вручную настройте проект](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework и [выполните следующие действия. Вручную Определите файлы](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)модели и сопоставления.  
  
 В этом примере коллекция отсоединенных объектов `SalesOrderDetail` и отсоединенный объект `SalesOrderHeader` присоединяются к контексту объекта, а затем определяются связи между объектом `SalesOrderHeader` и каждым из объектов `SalesOrderDetail`.  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Когда <paramref name="entity" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Если объект <paramref name="entity" /> не может быть связан с исходным объектом. Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.  
  
-или- 
Если объект имеет значение <see langword="null" /> либо не находится в состоянии <see cref="F:System.Data.EntityState.Unchanged" /> или <see cref="F:System.Data.EntityState.Modified" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="override this.Clear : unit -&gt; unit" Usage="entityCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все сущности из коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A> выполняет следующие действия.  
  
-   Устанавливает флаг в значение `false`. <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>  
  
-   Удаляет все сущности из коллекции.  
  
-   Отсоединяет связи между удаленными сущностями и владельцем коллекции <xref:System.Data.Objects.DataClasses.EntityCollection%601> от <xref:System.Data.Objects.ObjectStateManager>.  
  
-   Удаляет владельца коллекции <xref:System.Data.Objects.DataClasses.EntityCollection%601> из связанных сущностей.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Entity -&gt; bool&#xA;override this.Contains : 'Entity -&gt; bool" Usage="entityCollection.Contains entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Объект для поиска в <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
        <summary>Определяет, существует ли в коллекции указанный объект.</summary>
        <returns>Значение <see langword="true" />, если объект найден в коллекции <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использует метод <xref:System.Object.Equals%2A?displayProperty=nameWithType> для сравнения указанного объекта с объектами, находящимися в коллекции.  
  
   
  
## Examples  
 Этот пример основан на. Чтобы запустить код, используемый в данном примере, нужно сначала добавить к проекту модель AdventureWorks Sales и настроить его для использования платформы Entity Framework. Для этого выполните процедуры, описанные в [следующих руководствах. Вручную настройте проект](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework и [выполните следующие действия. Вручную Определите файлы](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)модели и сопоставления.  
  
 Код в примере выполняет следующие действия.  
  
1.  Создает две новые сущности `SalesOrderHeader` и добавляет их в сущность `Contact`.  
  
2.  Возвращает все связанные элементы из <xref:System.Data.Objects.DataClasses.RelationshipManager>, которые относятся к сущности Contact.  
  
3.  Проходит по коллекции элементов <xref:System.Data.Objects.DataClasses.IRelatedEnd>.  
  
4.  Возвращает <xref:System.Data.Objects.DataClasses.EntityCollection%601> для каждого связанного элемента.  
  
5.  Использует метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> для удаления одной сущности из коллекции.  
  
6.  Вызывает метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A>, чтобы определить, был ли объект удален из коллекции.  
  
7.  Использует метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> для добавления сущности обратно в коллекцию.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TEntity[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TEntity(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TEntity&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'Entity[] * int -&gt; unit&#xA;override this.CopyTo : 'Entity[] * int -&gt; unit" Usage="entityCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Массив для копирования данных.</param>
        <param name="arrayIndex">Индекс (отсчет с нуля) в массиве, с которого начинается копирование.</param>
        <summary>Копирует все содержимое коллекции в массив, начиная с указанного индекса в массиве назначения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;.Count" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.Count" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает число объектов, содержащихся в коллекции.</summary>
        <value>Число элементов, содержащихся в коллекции <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Count%2A> Свойство получает количество сущностей, находящихся в данный момент в локальной коллекции, и не отражает размер коллекции в источнике данных. Нулевое число не обязательно означает, что связанная коллекция пуста. Чтобы определить размер коллекции в источнике данных, вызовите <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> метод или включите связанный объект в путь запроса. Дополнительные сведения см. в разделе [Загрузка связанных объектов](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;" Usage="entityCollection.CreateSourceQuery " FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.CreateSourceQuery " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает запрос объектов, в результате выполнения которого возвращается набор объектов, существующих в текущей коллекции.</summary>
        <returns>Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий коллекцию сущностей.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство используется, чтобы получить новый экземпляр <xref:System.Data.Objects.ObjectQuery%601>, возвращающий тот же набор объектов. Это полезно в качестве начального этапа более сложного соединения, объединения или фильтруемого запроса, а также для того, чтобы вернуть те же объекты в отсоединенном состоянии, используя параметр <xref:System.Data.Objects.MergeOption.NoTracking>.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A>используется для фильтрации объектов в <xref:System.Data.Objects.DataClasses.EntityCollection%601> , позволяя выполнять привязку только объектов определенного типа. Дополнительные сведения см. [в разделе Привязка объектов к элементам управления](https://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b).  
  
   
  
## Examples  
 Этот пример основан на измененной версии. Эта версия поддерживает наследование типа «одна таблица на тип», причем `Course` является абстрактным типом. Выполните инструкции из пошагового руководства по изменению модели School для поддержки примера наследования «таблица на тип», используемого в этом разделе.  
  
 В этом примере показано, как <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> использовать для фильтрации объектов <xref:System.Data.Objects.DataClasses.EntityCollection%601> в привязке и привязки только к объектам определенного типа. Полную версию этого примера см. в разделе [как Привязка элементов управления к производным типам](https://msdn.microsoft.com/library/09730c14-3b7b-4563-af4a-7ecfa4e34bd5).  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.EntityState.Added" />.  
  
- или - 
Если объект находится в состоянии <see cref="F:System.Data.EntityState.Detached" /> с параметром <see cref="T:System.Data.Objects.MergeOption" />, отличным от <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;" Usage="entityCollection.GetEnumerator " FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.GetEnumerator " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает перечислитель, используемый для перебора объектов в коллекции.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" />, который осуществляет итерацию по набору значений, кэшированных объектом <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;.IsReadOnly" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> доступной только для чтения.</summary>
        <value>Всегда возвращает значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityCollection.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Задает порядок слияния объектов в данной коллекции с объектами, которые могли быть возвращены предыдущими запросами относительно того же объекта <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Загружает связанные объекты в коллекцию, используя заданный параметр слияния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Этот метод вызывает внутренний `RelatedEnd.ValidateLoad` метод перед загрузкой коллекции, который проверяет, что <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> вызов имеет правильные условия. `RelatedEnd.ValidateLoad` Метод проверяет следующее:

* Существует допустимое <xref:System.Data.Objects.ObjectContext> значение.
* Сущность не находится в <xref:System.Data.EntityState.Deleted> состоянии.
* <xref:System.Data.Objects.MergeOption>параметр <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> for должен <xref:System.Data.Objects.MergeOption.NoTracking> иметь значение, только если исходная сущность — <xref:System.Data.Objects.MergeOption.NoTracking>. Если исходная сущность была получена с другой <xref:System.Data.Objects.MergeOption>, то <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption> может быть любым, <xref:System.Data.Objects.MergeOption.NoTracking> но ( <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> например, сущность могла быть загружена с <xref:System.Data.Objects.MergeOption.OverwriteChanges> помощью и параметр может быть <xref:System.Data.Objects.MergeOption.AppendOnly>).
* Если `mergeOption` имеет <xref:System.Data.Objects.MergeOption.NoTracking>значение ,<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> то метод не вызывается для уже <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> загруженного объекта и не <xref:System.Data.Objects.DataClasses.RelatedEnd>вызывается для непустого, неотслеживающего.
  
 Если объекты в <xref:System.Data.Objects.ObjectContext>коллекции уже загружены в <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> , метод применяет <xref:System.Data.Objects.MergeOption> заданный `mergeOption` параметр. Дополнительные сведения см. в разделе [разрешение удостоверений, управление состоянием и отслеживание изменений](https://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
 Чтобы явно загрузить связанные объекты, необходимо вызвать `Load` метод для связанного элемента, возвращенного свойством навигации. Для связи «один ко многим» вызовите <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> метод для. <xref:System.Data.Objects.DataClasses.EntityCollection%601> Для связи « <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> один к одному» вызовите метод On <xref:System.Data.Objects.DataClasses.EntityReference%601>. В результате данные связанного объекта будут загружены в контекст объекта. Коллекцию возвращаемых `foreach` результатов можно перечислить с помощью цикла (`For Each...Next` в Visual Basic) `Load` и условно вызвать метод для <xref:System.Data.Objects.DataClasses.EntityReference%601> свойств и <xref:System.Data.Objects.DataClasses.EntityCollection%601> для каждой сущности в результатах.  
  
 Метод загружает связанные объекты из источника данных независимо от того, <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> является ли он `true`. <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A>  
  
> [!NOTE]
>  Если метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> вызывается во время перечисления `foreach` (C#) или `For Each` (Visual Basic), службы объектов пытаются открыть новый модуль чтения данных. Эта операция завершится ошибкой, если не был включен режим MARS путем задания `multipleactiveresultsets=true` в строке соединения. Кроме того, можно загрузить результат запроса в коллекцию <xref:System.Collections.Generic.List%601>. В результате модуль чтения данных будет закрыт, и появится возможность выполнять перечисление по коллекции для загрузки объектов, на которые существуют ссылки.  
  
 Метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A?displayProperty=nameWithType> синхронизирован с методом <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Этот пример основан на. Чтобы запустить код, используемый в данном примере, нужно сначала добавить к проекту модель AdventureWorks Sales и настроить его для использования платформы Entity Framework. Для этого выполните процедуры, описанные в [следующих руководствах. Вручную настройте проект](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework и [выполните следующие действия. Вручную Определите файлы](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)модели и сопоставления.  
  
 В этом примере загружаются связанные объекты `SalesOrderHeader` для сущности `Contact`.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithload)]
 [!code-vb[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithload)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollectionDeserialized">
      <MemberSignature Language="C#" Value="public void OnCollectionDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnCollectionDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCollectionDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCollectionDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnCollectionDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnCollectionDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Контекст потоковой передачи.</param>
        <summary>Используется внутренне для десериализации объектов сущности.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Контекст потоковой передачи.</param>
        <summary>Используется внутренне для сериализации объектов сущности.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Entity -&gt; bool" Usage="entityCollection.Remove entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Объект, который должен быть удален из коллекции.</param>
        <summary>Удаляет объект из коллекции и помечает отношение для удаления.</summary>
        <returns><see langword="true" />, если элемент был успешно удален; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> также удаляет связь между исходным объектом и объектом, удаляемым из коллекции. Если связь содержит ограничение ссылочной целостности, при вызове метода <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> для зависимого объекта и этот объект, и связь будут помечены к удалению. Это происходит из-за того, что ограничение показывает, что зависимый объект не может существовать без связи с родительским объектом. Дополнительные сведения см. в разделе [элемент ReferentialConstraint (CSDL)](https://msdn.microsoft.com/library/24f96a80-85b5-4f2e-a14c-0e3eb6796fa0).  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>Возвращает `false` , если указанный объект отсутствует в коллекции.  
  
   
  
## Examples  
 Этот пример основан на. Чтобы запустить код, используемый в данном примере, нужно сначала добавить к проекту модель AdventureWorks Sales и настроить его для использования платформы Entity Framework. Для этого выполните процедуры, описанные в [следующих руководствах. Вручную настройте проект](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework и [выполните следующие действия. Вручную Определите файлы](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)модели и сопоставления.  
  
 В этом примере используется метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> для удаления одной сущности из коллекции, а затем вызывается метод <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A>, чтобы определить, был ли объект удален из коллекции.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение объекта <paramref name="entity" /> равно <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Объект <paramref name="entity" /> не присоединен к тому же контексту объекта.  
  
- или - 
У объекта <paramref name="entity" /> нет допустимого диспетчера связей.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает перечислитель, который используется для перебора набора значений, помещенных в кэш коллекцией <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" />, который осуществляет итерацию по набору значений, кэшированных объектом <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, содержит ли коллекция связанных сущностей объекты коллекции.</summary>
        <value>Это свойство всегда возвращает значение <see langword="false" />, поскольку коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> содержит объекты, а не коллекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Objects.DataClasses.EntityCollection%601> приведен к типу интерфейса <xref:System.ComponentModel.IListSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию в виде объекта <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
        <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.Objects.DataClasses.EntityCollection%601> приведен к типу интерфейса <xref:System.ComponentModel.IListSource>.  
  
 Этот метод делает возможной привязку данных к коллекции <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Он вызывается элементом управления, привязанным к коллекции. Дополнительные сведения см. [в разделе Привязка объектов к элементам управления](https://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
