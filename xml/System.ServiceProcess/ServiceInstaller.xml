<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e6765d4baec8d048456f421424ebdc9a9b90ced" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70564215" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Устанавливает класс, расширяющий класс <see cref="T:System.ServiceProcess.ServiceBase" /> для реализации службы. Этот класс вызывается программой установки при установке служебного приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller> Работает только со службой, с которой она связана. Она используется программой установки для записи значений реестра, связанных со службой, в подраздел в разделе реестра HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Служба идентифицируется по ее ServiceName в этом подразделе. Подраздел также содержит имя исполняемого файла или библиотеки DLL, к которой принадлежит служба.  
  
 Чтобы установить службу, создайте класс установщика проекта, наследующий от <xref:System.Configuration.Install.Installer> класса, и <xref:System.ComponentModel.RunInstallerAttribute> задайте `true`атрибуту класса значение. В проекте создайте по одному <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляру для каждого приложения службы и по одному <xref:System.ServiceProcess.ServiceInstaller> экземпляру для каждой службы в приложении. В конструкторе класса установщика проекта задайте свойства установки для службы с помощью <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляров и <xref:System.ServiceProcess.ServiceInstaller> и <xref:System.Configuration.Install.Installer.Installers%2A> добавьте экземпляры в коллекцию.  
  
> [!NOTE]
>  Рекомендуется использовать конструктор для добавления экземпляров установщика; Однако если необходимо добавить <xref:System.Configuration.Install.Installer.Installers%2A> в коллекцию <xref:System.ServiceProcess.ServiceInstaller.Install%2A> в методе, необходимо выполнить те же действия в коллекции в <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методе.  
  
 Для всех классов, производных от <xref:System.Configuration.Install.Installer> класса, состояние <xref:System.Configuration.Install.Installer.Installers%2A> коллекции должно <xref:System.ServiceProcess.ServiceInstaller.Install%2A> быть одинаковым в методах и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Однако при <xref:System.ServiceProcess.ServiceInstaller.Install%2A> добавлении экземпляров <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>  установщика в коллекцию в конструкторе класса пользовательского установщика можно избежать обслуживания коллекции по методам и. <xref:System.Configuration.Install.Installer.Installers%2A>  При вызове программы установки она ищет <xref:System.ComponentModel.RunInstallerAttribute> атрибут. Если атрибут имеет `true`значение, программа устанавливает все службы, добавленные <xref:System.Configuration.Install.Installer.Installers%2A> в коллекцию, которая была связана с установщиком проекта. Если <xref:System.ComponentModel.RunInstallerAttribute> параметр `false` имеет значение или не существует, программа установки игнорирует установщик проекта.  
  
 Объект <xref:System.ServiceProcess.ServiceProcessInstaller> , связанный с вашим классом установки проекта, устанавливает общие <xref:System.ServiceProcess.ServiceInstaller> для всех экземпляров в проекте сведения. Если эта служба разделяет ее от других служб в проекте установки, то сведения, относящиеся к конкретной службе, устанавливаются этим методом.  
  
> [!NOTE]
>  Крайне важно, <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> чтобы компонент был идентичен классу, производному от <xref:System.ServiceProcess.ServiceBase>. Как правило, значение <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> свойства для службы задается в функции Main () исполняемого файла приложения службы. Диспетчер управления службами использует <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> свойство для нахождение службы в этом исполняемом файле.  
  
 Другие свойства <xref:System.ServiceProcess.ServiceInstaller> можно изменить либо до, либо после его добавления <xref:System.Configuration.Install.Installer.Installers%2A> в коллекцию установщика проекта. Например, служба <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> может быть настроена на автоматический запуск службы при перезагрузке или потребовать от пользователя запуска службы вручную.  
  
 Обычно методы <xref:System.ServiceProcess.ServiceInstaller> в коде не вызываются; они обычно вызываются только программой установки. Программа установки автоматически вызывает методы и <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> в процессе установки. При необходимости он создает ошибки, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (или <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) для всех ранее установленных компонентов.  
  
 Служебная программа установки <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> вызывает метод для удаления объекта.  
  
 Программа установки приложения автоматически сохраняет сведения об уже установленных компонентах с помощью установщика <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>проекта. Эти сведения о состоянии постоянно обновляются как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр, и каждый <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 При выполнении установки автоматически создается <xref:System.Diagnostics.EventLogInstaller> для установки источника журнала событий, связанного <xref:System.ServiceProcess.ServiceBase> с производным классом. Свойство для этого источника задается <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> конструктором для журнала приложений компьютера. <xref:System.Diagnostics.EventLog.Log%2A> <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> При задании <xref:System.ServiceProcess.ServiceInstaller> значения параметра (который должен совпадать с параметром <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> службы) <xref:System.Diagnostics.EventLog.Source%2A> автоматически устанавливается одно и то же значение. При сбое установки выполняется откат установки источника вместе с ранее установленными службами.  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Метод пытается прерывать работу службы, если она запущена. Независимо от успешности или нет, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> отменяет изменения, <xref:System.ServiceProcess.ServiceInstaller.Install%2A>внесенные. Если для ведения журнала событий был создан новый источник, то источник удаляется.  
  
   
  
## Examples  
 В следующем примере создается установщик проекта с именем `MyProjectInstaller`, который наследует от. <xref:System.Configuration.Install.Installer> Предполагается наличие исполняемого файла службы, который содержит две службы: "Hello-World Service 1" и "Hello-World Service 2". В конструкторе для `MyProjectInstaller` (который будет вызываться программой установки <xref:System.ServiceProcess.ServiceInstaller> ) для каждой из <xref:System.ServiceProcess.ServiceProcessInstaller> этих служб создаются объекты, а для исполняемого файла создается. Чтобы программа установки могла распознать `MyProjectInstaller` как допустимый установщик <xref:System.ComponentModel.RunInstallerAttribute> , атрибуту присваивается значение `true`.  
  
 Дополнительные свойства задаются в установщике процесса и установщиках служб перед добавлением установщиков в <xref:System.Configuration.Install.Installer.Installers%2A> коллекцию. Когда программа установки обращается к `MyProjectInstaller`, объекты, добавленные <xref:System.Configuration.Install.Installer.Installers%2A> в <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> коллекцию через вызов, будут установлены в свою очередь. В ходе этого процесса установщик сохраняет сведения о состоянии, указывающие, какие объекты были установлены, поэтому в случае сбоя установки можно выполнить резервное копирование каждого из них.  
  
 Как правило, экземпляр класса установщика проекта не создается явным образом. Необходимо создать его и добавить <xref:System.ComponentModel.RunInstallerAttribute> атрибут к синтаксису, но это программа установки, которая фактически вызывает, и, следовательно, создает класс.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы установить службу, создайте класс установщика проекта, наследующий от <xref:System.Configuration.Install.Installer> класса, и <xref:System.ComponentModel.RunInstallerAttribute> задайте `true`атрибуту класса значение. В проекте создайте по одному <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляру для каждого приложения службы и по одному <xref:System.ServiceProcess.ServiceInstaller> экземпляру для каждой службы в приложении. В конструкторе класса установщика проекта задайте свойства установки для службы с помощью <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляров и <xref:System.ServiceProcess.ServiceInstaller> и <xref:System.Configuration.Install.Installer.Installers%2A> добавьте экземпляры в коллекцию.  
  
 Конструктор автоматически создает источник журнала событий, свойство которого <xref:System.Diagnostics.EventLog.Log%2A> задано в журнале <xref:System.Diagnostics.EventLogInstaller>приложений компьютера, и. <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> При установке <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> значения параметра <xref:System.Diagnostics.EventLog.Source%2A> , который должен совпадать с параметром службы, для свойства журнала событий автоматически устанавливается то же значение. <xref:System.ServiceProcess.ServiceInstaller> Источник удаляется автоматически в случае сбоя установки.  
  
 Конструктор задает для `ServiceStartMode.Manual`  свойства значение, чтобы указать, что пользователь запускает службу. <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Можно сбросить свойство, чтобы `ServiceStartMode.Automatic` указать, что служба запускается при перезагрузке компьютера.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Объект <see cref="T:System.ComponentModel.IComponent" />, из которого будет выполняться копирование.</param>
        <summary>Копирует в данный установщик свойства из экземпляра класса <see cref="T:System.ServiceProcess.ServiceBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод редко вызывается в коде. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>обычно вызывается только конструкторами.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>сохраняет имя `component` службы параметра <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> в <xref:System.ServiceProcess.ServiceInstaller> экземпляре. (Поскольку параметр должен быть экземпляром класса, производного от <xref:System.ServiceProcess.ServiceBase>, `component` гарантированно имеет <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> свойство.)  
  
> [!NOTE]
>  При использовании конструктора Visual Studio этот метод вызывается во время разработки, когда пользователь щелкает `Add Installer` компонент, который указал этот класс в качестве установщика. Установщик принимает всю информацию из компонента Live Component и сохраняет ее для использования во время установки.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Компонент, связанный с данным установщиком, не наследуется из класса <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, следует ли задержать запуск службы, пока не заработают другие автоматически запускающиеся службы.</summary>
        <value>Значение <see langword="true" /> для задержки автоматического запуска службы; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство может быть применено к любой службе, но оно игнорируется, если только режим запуска службы не  <xref:System.ServiceProcess.ServiceStartMode.Automatic> равен.  <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Параметр вступает в силу при следующем перезапуске системы. Диспетчер управления службами не гарантирует определенное время запуска для службы.  
  
 Служба отложенного автоматического запуска не может быть членом группы упорядочения нагрузки, но может зависеть от другой службы автоматического запуска. Если приложение вызывает службу отложенного автоматического запуска перед загрузкой, вызов завершается с ошибкой.  
  
 В операционных системах, не поддерживающих отложенный автоматический запуск, установка этого свойства не оказывает никакого влияния.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает описание для службы.</summary>
        <value>Описание службы. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.Description%2A> Используйте свойство, чтобы описать назначение установленной службы пользователю. Пользователь может просмотреть описание службы в приложениях, отображающих сведения об установленных службах.  
  
 Например, с помощью Windows XP можно просмотреть описание службы с помощью служебной программы командной строки (SC. exe) службы управления службами или просмотреть описание службы в узле **службы** консоли **управления компьютером** .  
  
   
  
## Examples  
 В следующем примере кода задаются свойства установки для нового приложения службы Windows. В примере задается имя службы вместе с отображаемым именем и описанием. После назначения свойств установки для службы в этом примере <xref:System.ServiceProcess.ServiceInstaller> объект добавляется <xref:System.Configuration.Install.Installer.Installers%2A> в коллекцию.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает псевдоним, обозначающий службу для пользователя.</summary>
        <value>Имя, связанное со службой, которое часто используется в интерактивных инструментах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Используется, например, в диспетчере управления службами, чтобы предоставить понятное для пользователя описательное имя службы. Параметр <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> является значением реестра, но никогда не используется в качестве раздела реестра. Поэтому ограничения на <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> значение свойства не применяются. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>используется в качестве раздела реестра HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, поэтому он ограничен.  
  
 Отображаемое имя никогда не используется программой установки для обнаружения службы, поэтому нет ограничений на выбор имени, как и для <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Устанавливает службу, записывая в реестр сведения о служебном приложении. Этот метод предназначен для использования инструментами установки, которые автоматически обрабатывают соответствующие методы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно методы <xref:System.ServiceProcess.ServiceInstaller> в коде не вызываются; они обычно вызываются только программой установки. Программа установки автоматически вызывает <xref:System.ServiceProcess.ServiceInstaller.Install%2A> метод во время установки. При необходимости он создает ошибки, вызывая метод <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> для объекта, создавшего исключение.  
  
 Программа установки приложения автоматически сохраняет сведения о уже установленных компонентах с помощью установщика <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>проекта. Эти сведения о состоянии <xref:System.ServiceProcess.ServiceInstaller.Install%2A> , переданные в `stateSaver` качестве параметра, постоянно обновляются как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 Объект <xref:System.ServiceProcess.ServiceProcessInstaller> , связанный с вашим классом установки проекта, устанавливает общие <xref:System.ServiceProcess.ServiceInstaller> для всех экземпляров в проекте сведения. Если эта служба разделяет ее от других служб в проекте установки, то сведения, относящиеся к конкретной службе, устанавливаются этим методом.  
  
 Чтобы установить службу, создайте класс установщика проекта, наследующий от <xref:System.Configuration.Install.Installer> класса, и <xref:System.ComponentModel.RunInstallerAttribute> задайте `true`атрибуту класса значение. В проекте создайте по одному <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляру для каждого приложения службы и по одному <xref:System.ServiceProcess.ServiceInstaller> экземпляру для каждой службы в приложении. В конструкторе класса установщика проекта задайте свойства установки для службы с помощью <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляров и <xref:System.ServiceProcess.ServiceInstaller> и <xref:System.Configuration.Install.Installer.Installers%2A> добавьте экземпляры в коллекцию.  
  
> [!NOTE]
>  Рекомендуется использовать конструктор для добавления экземпляров установщика; Однако если необходимо добавить <xref:System.Configuration.Install.Installer.Installers%2A> в коллекцию <xref:System.ServiceProcess.ServiceInstaller.Install%2A> в методе, необходимо выполнить те же действия в коллекции в <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методе.  
  
 Для всех классов, производных от <xref:System.Configuration.Install.Installer> класса, состояние <xref:System.Configuration.Install.Installer.Installers%2A> коллекции должно <xref:System.ServiceProcess.ServiceInstaller.Install%2A> быть одинаковым в методах и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Однако при <xref:System.ServiceProcess.ServiceInstaller.Install%2A> добавлении экземпляров <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>  установщика в коллекцию в конструкторе класса пользовательского установщика можно избежать обслуживания коллекции по методам и. <xref:System.Configuration.Install.Installer.Installers%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Средства установки не содержат <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> для исполняемого файла.  
  
- или - 
Имя файла сборки — <see langword="null" /> или пустая строка.  
  
-или- 
Недопустимое имя службы.  
  
- или - 
Не удалось открыть диспетчер служб.</exception>
        <exception cref="T:System.ArgumentException">Отображаемое имя службы содержит более 255 символов.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Системе не удалось создать дескриптор для службы.  
  
 -или-  
  
 Служба с этим именем уже установлена.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Объект <see cref="T:System.Configuration.Install.ComponentInstaller" />, с которым сравнивается текущий установщик.</param>
        <summary>Определяет, будут ли два установщика устанавливать одну и ту же службу.</summary>
        <returns><see langword="true" />, если вызов метода <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> для обоих установщиков будет приводить к установке одной и той же службы; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A>Указывает, например, должны ли два установщика устанавливать одну и ту же службу с одной и той же учетной записью пользователя.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Отменяет сведения о служебном приложении, записанные в реестр процедурой установки. Этот метод предназначен для использования инструментами установки, которые автоматически обрабатывают соответствующие методы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно методы <xref:System.ServiceProcess.ServiceInstaller> в коде не вызываются; они обычно вызываются только программой установки. Программа установки автоматически вызывает метод в <xref:System.ServiceProcess.ServiceInstaller.Install%2A> процессе установки. При необходимости он создает ошибки, вызывая метод <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> для объекта, создавшего исключение.  
  
 Программа установки приложения автоматически сохраняет сведения об уже установленных компонентах с помощью установщика <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>проекта. Эти сведения о состоянии <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> , переданные в `savedState` качестве параметра, постоянно обновляются как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает имя, использованное системой для идентификации этой службы. Это свойство должно совпадать со свойством <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> устанавливаемой службы.</summary>
        <value>Имя устанавливаемой службы. Это значение должно быть задано до установки службы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Крайне важно, <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> чтобы компонент был идентичен классу, производному от <xref:System.ServiceProcess.ServiceBase>. Как правило, значение <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> свойства для службы задается в функции Main () исполняемого файла приложения службы. Диспетчер управления службами использует <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> свойство для нахождение службы в этом исполняемом файле.  
  
 При задании <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> установщика <xref:System.Diagnostics.EventLog.Source%2A> службы для соответствующего журнала событий задается то же значение. Это позволяет службе автоматически регистрировать команды службы (например, запуск и завершение) в журнале приложений на компьютере.  
  
> [!NOTE]
>  Если источник с таким же именем уже существует на компьютере, но в журнале, отличном от журнала приложения, будет создано исключение. Если источник существует и связан с журналом приложений, этот источник используется для передачи вызовов команды службе, и исключение не создается.  
  
 Значение <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> не может `null` быть или иметь нулевую длину. Его максимальный размер — 256 символов. Он также не может содержать символы прямой или обратной косой черты, знаки\\"/" и "", или символов из набора символов ASCII со значением меньше десятичного значения 32.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое свойство <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет службы, необходимые для запуска данной службы.</summary>
        <value>Массив служб, которые должны быть запущены до запуска службы, связанной с данным установщиком.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед запуском службы может потребоваться выполнение других служб. Сведения из этого свойства записываются в раздел реестра. Когда пользователь (или система в случае автоматического запуска) пытается запустить службу, диспетчер управления службами (SCM) проверяет, что каждая из служб в массиве уже запущена.  
  
 Если какая-либо служба в массиве не запущена, SCM пытается запустить их. Сюда входят службы с  `Manual` .  <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>  
  
 Если любая служба, от которой зависит эта служба, не запускается, эта служба не запустится. Исключение не возникает, если система не запущена, так как на системном уровне отсутствует обработка исключений для обнаружения этого. Решите, как справиться со сбоями при запуске службы и реализовать это в коде. Как правило, при запуске службы пользователю появляется диалоговое окно, если не удается запустить службу.  
  
 Если служба не запускается, в журнал событий приложения записывается запись.  
  
 Службы, от которых зависит эта служба, не должны находиться в одном исполняемом файле.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, как и когда запускается эта служба.</summary>
        <value>Объект <see cref="T:System.ServiceProcess.ServiceStartMode" />, представляющий способ запуска службы. По умолчанию используется значение <see langword="Manual" />, указывающее, что служба не будет запускаться автоматически после перезагрузки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте для <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> параметра значение, чтобы указать, что служба должна запускаться автоматически после перезагрузки или что пользователь должен вручную запустить службу. Службу также можно отключить, указав, что она не может быть запущена вручную или программно, пока она не будет включена.  
  
 После установки изменить <xref:System.ServiceProcess.ServiceInstaller> значения свойств нельзя. Чтобы изменить <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, необходимо удалить и переустановить службу либо вручную изменить параметр с помощью диспетчера управления службами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Режим запуска не является значением перечисления <see cref="T:System.ServiceProcess.ServiceStartMode" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Удаляет службу, удаляя сведения о ней из реестра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сначала удалите попытки службы, прежде чем удалять ее. Если служба не может быть остановлена, исключение не перехватывается и метод продолжит работу с удалением службы.  
  
 Обычно методы <xref:System.ServiceProcess.ServiceInstaller> в коде не вызываются; они обычно вызываются только программой установки. InstallUtil используется для удаления служб, а также для их установки; При удалении принимается параметр в вызове командной строки.  
  
 Программа удаления приложения автоматически сохраняет сведения об удаляемых компонентах с помощью установщика <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>проекта. Эти сведения о состоянии <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> , переданные в `savedState` качестве параметра, постоянно обновляются как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 Для всех классов, производных от <xref:System.Configuration.Install.Installer> класса, состояние <xref:System.Configuration.Install.Installer.Installers%2A> коллекции должно <xref:System.ServiceProcess.ServiceInstaller.Install%2A> быть одинаковым в методах и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Однако при <xref:System.ServiceProcess.ServiceInstaller.Install%2A> добавлении экземпляров <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>  установщика в коллекцию в конструкторе класса пользовательского установщика можно избежать обслуживания коллекции по методам и. <xref:System.Configuration.Install.Installer.Installers%2A>  
  
 Отсутствует механизм отката для удаления, поэтому, если одна из служб не может быть удалена, это не повлияет на другие службы (обычно в том же проекте установки), который удаляется.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Не удалось открыть диспетчер служб.  
  
 - или -  
  
 Системе не удалось получить дескриптор для службы.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
