<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6855e29e57ce76c89acda5ee686bcea9de5cf1b" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75048359" /></Metadata><TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1;netcore-1.0;netcore-1.1;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что открытое поле или свойство представляет XML-элемент, когда <see cref="T:System.Xml.Serialization.XmlSerializer" /> сериализует или десериализует объект, содержащий его.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlElementAttribute> принадлежит семейству атрибутов, который управляет тем, как <xref:System.Xml.Serialization.XmlSerializer> сериализует или десериализует объект. Полный список схожих атрибутов см. в разделе [атрибуты, управляющие СЕРИАЛИЗАЦИЕЙ XML](~/docs/standard/serialization/attributes-that-control-xml-serialization.md).  
  
 XML-документ обычно содержит XML-элементы, каждый из которых состоит из трех частей: открывающий тег с возможными атрибутами, закрывающий тег и данные между тегами. XML-теги могут быть вложенными, то есть данные между тегами также могут быть XML-элементами. Эта емкость одного элемента, охватывающего другой элемент, позволяет документу содержать иерархии данных. Элемент XML может также включать атрибуты.  
  
 Применение <xref:System.Xml.Serialization.XmlElementAttribute> к открытым полям или открытым свойствам чтения и записи для управления характеристиками XML-элементов, таких как имя элемента и пространство имен.  
  
 <xref:System.Xml.Serialization.XmlElementAttribute> можно несколько раз применить к полю, которое возвращает массив объектов. Целью этого является указание (с помощью свойства <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A>) различных типов, которые могут быть вставлены в массив. Например, массив в следующем C# коде принимает как строки, так и целые числа.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 В результате XML-код может выглядеть следующим образом.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 Обратите внимание, что при применении <xref:System.Xml.Serialization.XmlElementAttribute> несколько раз без указания значения свойства <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A>, элементы именуются по типу допустимых объектов.  
  
 Если применить <xref:System.Xml.Serialization.XmlElementAttribute> к полю или свойству, которое возвращает массив, то элементы массива кодируются как последовательность XML-элементов.  
  
 Напротив, если <xref:System.Xml.Serialization.XmlElementAttribute> не применяется к такому полю или свойству, элементы массива кодируются как последовательность элементов, вложенных в элемент с именем после поля или свойства. (Используйте атрибуты <xref:System.Xml.Serialization.XmlArrayAttribute> и <xref:System.Xml.Serialization.XmlArrayItemAttribute>, чтобы управлять сериализацией массива.)  
  
 Можно задать свойство <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A>, чтобы указать тип, производный от типа исходного поля или свойства, то есть поля или свойства, к которым было применено <xref:System.Xml.Serialization.XmlElementAttribute>.  
  
 Если поле или свойство возвращает <xref:System.Collections.ArrayList>, к элементу можно применить несколько экземпляров <xref:System.Xml.Serialization.XmlElementAttribute>. Для каждого экземпляра присвойте свойству <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> тип объекта, который может быть вставлен в массив.  
  
 Дополнительные сведения об использовании атрибутов см. в разделе [атрибуты](~/docs/standard/attributes/index.md).  
  
> [!NOTE]
>  Вместо более длинного <xref:System.Xml.Serialization.XmlElementAttribute>можно использовать слово `XmlElement` в коде.  
  
   
  
## Examples  
 В следующем примере выполняется сериализация класса с именем `Group` и применение <xref:System.Xml.Serialization.XmlElementAttribute> к нескольким его членам. Поле с именем `Employees` возвращает массив объектов `Employee`. В этом случае <xref:System.Xml.Serialization.XmlElementAttribute> указывает, что результирующий XML не будет вложенным (это поведение по умолчанию для элементов в массиве).  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">Введение в сериализацию XML</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">Практическое руководство. Указание имени альтернативного элемента для потока XML</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">Управление сериализацией XML с использованием атрибутов</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">Примеры сериализации XML</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">XML Schema Definition Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере <xref:System.Xml.Serialization.XmlElementAttribute> применяется к классу.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Имя XML-элемента сериализованного члена.</param>
        <summary>Инициализация нового экземпляра  класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> и указывает имя элемента XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Xml.Serialization.XmlSerializer> использует имя члена в качестве имени XML-элемента при сериализации экземпляра класса. Например, поле с именем `Vehicle` создает XML-элемент с именем `Vehicle`. Однако если требуется другой элемент, например `Cars`, передайте его в параметр `elementName`.  
  
   
  
## Examples  
 В следующем примере показан простой класс, содержащий одно поле с именем `Vehicles`. Пример применяет <xref:System.Xml.Serialization.XmlElementAttribute> к полю и включает параметр `elementName`, тем самым предписывая <xref:System.Xml.Serialization.XmlSerializer> создавать XML-элементы под названием «автомобили», а не «транспортные средства».  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Type" /> объекта, являющегося производным от типа члена.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> и указывает тип для члена, к которому применяется <see cref="T:System.Xml.Serialization.XmlElementAttribute" />. Данный тип используется при сериализации или десериализации <see cref="T:System.Xml.Serialization.XmlSerializer" /> содержащего его объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте параметр `type`, чтобы указать тип, производный от базового класса. Например, предположим, что свойство с именем `MyAnimal` возвращает объект `Animal`. Необходимо расширить объект, чтобы создать новый класс с именем `Mammal`, наследуемый от класса `Animal`. Чтобы указать <xref:System.Xml.Serialization.XmlSerializer> принимать `Mammal` класса при сериализации `MyAnimal` свойства, передайте <xref:System.Type> из `Mammal` в конструктор.  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Orchestra`, содержащий одно поле с именем `Instruments`, которое возвращает массив объектов `Instrument`. Второй класс с именем `Brass` наследуется от класса `Instrument`. Пример применяет <xref:System.Xml.Serialization.XmlElementAttribute> к полю `Instruments` и задает тип `Brass`, позволяя полю `Instruments` принимать `Brass`ные объекты. В примере также указывается имя XML-элемента путем установки свойства <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A>.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string * Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">Имя XML-элемента сериализованного члена.</param>
        <param name="type"><see cref="T:System.Type" /> объекта, являющегося производным от типа члена.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> и указывает имя XML-элемента и производного типа для члена, к которому применяется <see cref="T:System.Xml.Serialization.XmlElementAttribute" />. Данный тип члена используйте при сериализации <see cref="T:System.Xml.Serialization.XmlSerializer" /> содержащего его объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Xml.Serialization.XmlSerializer> использует имя члена в качестве имени XML-элемента при сериализации экземпляра класса. Например, поле с именем `Vehicle` создает XML-элемент с именем `Vehicle`. Однако если требуется другой элемент, например `Cars`, передайте его в параметр `elementName`.  
  
 Используйте параметр `type`, чтобы указать тип, производный от базового класса. Например, предположим, что свойство с именем `MyAnimal` возвращает объект `Animal`. Необходимо расширить объект, чтобы создать новый класс с именем `Mammal`, наследуемый от класса `Animal`. Чтобы указать <xref:System.Xml.Serialization.XmlSerializer> принимать `Mammal` класса при сериализации `MyAnimal` свойства, передайте <xref:System.Type> из `Mammal` в конструктор.  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Orchestra`, содержащий одно поле с именем `Instruments`, которое возвращает массив объектов `Instrument`. Второй класс с именем `Brass` наследуется от класса `Instrument`. Пример применяет <xref:System.Xml.Serialization.XmlElementAttribute> к полю `Instruments` и задает тип `Brass`, позволяя полю `Instruments` принимать `Brass`ные объекты. В примере также указывается имя XML-элемента путем установки свойства <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A>.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип данных определения схемы XML (XSD), сгенерированного <see cref="T:System.Xml.Serialization.XmlSerializer" /> элемента XML.</summary>
        <value>Тип данных схемы XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице перечислены простые типы данных схемы XML с эквивалентами their.NET.  
  
 Для `base64Binary` и `hexBinary` типов данных схемы XML используйте массив структур <xref:System.Byte> и примените <xref:System.Xml.Serialization.XmlElementAttribute> с параметром <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A>, имеющим значение "base64Binary" или "hexBinary", в зависимости от ситуации. Для типов данных XML-схемы `time` и `date` используйте тип <xref:System.DateTime> и примените <xref:System.Xml.Serialization.XmlElementAttribute> с параметром <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> со значением "Дата" или "время".  
  
 Для каждого типа схемы XML, сопоставленного со строкой, примените <xref:System.Xml.Serialization.XmlElementAttribute> со свойством <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A>, для которого задан тип схемы XML. Возможно, это может изменить формат сериализации, а не только схему для элемента.  
  
> [!NOTE]
>  В свойстве учитывается регистр, поэтому его необходимо задать в точности до одного из типов данных схемы XML.  
  
> [!NOTE]
>  Передача двоичных данных в виде XML-элемента более эффективна, чем передача их в виде атрибута XML-схемы.  
  
 Дополнительные сведения о типах данных XML см. в консорциум W3C документе с именем [XML-схемы часть 2: Types](https://www.w3.org/TR/xmlschema-2/).  
  
|Тип данных XSD|Тип данных .NET|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Массив объектов <xref:System.Byte>|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|ОБЪЕКТАХ|<xref:System.String>|  
|float|<xref:System.Single>|  
|гдай|<xref:System.String>|  
|гмонс|<xref:System.String>|  
|гмонсдай|<xref:System.String>|  
|геар|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Массив объектов <xref:System.Byte>|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|целочисленный|<xref:System.String>|  
|язык|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|негативеинтежер|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|нонпоситивеинтежер|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|поситивеинтежер|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|длительность|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|время|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 В следующем примере сериализуется класс с именем `Group`, содержащий поле с именем `ExtraInfo`, которое возвращает <xref:System.Collections.ArrayList>. Пример применяет к полю два экземпляра <xref:System.Xml.Serialization.XmlElementAttribute> и задает разные значения <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> для каждого экземпляра. Каждый экземпляр позволяет <xref:System.Xml.Serialization.XmlSerializer> сериализовать указанные типы, вставленные в массив.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Указанный тип данных XML-схемы не может иметь соответствия в типах данных .NET.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя созданного XML-элемента</summary>
        <value>Имя созданного XML-элемента. По умолчанию используется идентификатор члена</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Укажите <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>, если необходимо, чтобы имя созданного элемента XML отличалось от идентификатора члена.  
  
 Одно и то же значение <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> можно задать для нескольких членов класса, если в созданном XML-документе используются пространства имен XML для различения элементов с одинаковыми именами. Дополнительные сведения об использовании пространств имен и префиксных имен в XML-документе см. в разделе класс <xref:System.Xml.Serialization.XmlSerializerNamespaces>.  
  
   
  
## Examples  
 В следующем примере свойству <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> <xref:System.Xml.Serialization.XmlElementAttribute> присваивается новое значение.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее квалифицирован ли элемент.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Xml.Schema.XmlSchemaForm" />. Значение по умолчанию — <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> определяет, является ли XML-элемент полным или неполным. Свойство <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> соответствует спецификации консорциум W3C 1999, [пространства имен в XML](https://www.w3.org/TR/1999/REC-xml-names-19990114/).  
  
 Если для свойства <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> задано любое значение, попытка установить свойство <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> на `XmlSchemaForm.Unqualified` создает исключение. Значение по умолчанию `XmlSchemaForm.None`указывает <xref:System.Xml.Serialization.XmlSerializer> проверить схему XML-документа, чтобы определить, является ли пространство имен полным. Если в схеме не указано значение для отдельного элемента или атрибута, <xref:System.Xml.Serialization.XmlSerializer> использует значения `elementFormDefault` и `attributeFormDefault`, чтобы определить, является ли элемент или атрибут квалифицированным. В следующем коде XML показана схема:  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 Когда <xref:System.Xml.Serialization.XmlSerializer> считывает схему, <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> значение для `Name` и `Number` — `XmlSchemaForm.None`, но элемент `Name` является полным, а элемент `Number` — неполным.  
  
   
  
## Examples  
 В следующем примере свойству <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> присваивается значение `XmlSchemaForm.Unqualified`.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое указывает, должен ли <see cref="T:System.Xml.Serialization.XmlSerializer" /> сериализовать члена, имеющего значение <see langword="null" />, в качестве пустого тега с атрибутом <see langword="xsi:nil" /> со значением <see langword="true" />.</summary>
        <value><see langword="true" />, если <see cref="T:System.Xml.Serialization.XmlSerializer" /> создает атрибут <see langword="xsi:nil" />; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Спецификация XML-схемы для структур позволяет XML-документу явно сообщать, что содержимое элемента отсутствует. Такой элемент содержит атрибут `xsi:nil` значение `true`. Дополнительные сведения см. в описании спецификации консорциум W3C, [схема XML, часть 1: структуры](https://www.w3.org/TR/xmlschema-1/).
  
 Если свойство <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> имеет значение `true`, то для членов класса, которым было задано значение `null`, создается атрибут `xsi:nil`. Например, если задать поле с именем `MyStringArray` для `null`, <xref:System.Xml.Serialization.XmlSerializer> создаст следующий XML-код.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 Если свойство <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> имеет значение `false`, для членов класса, для которых задано значение `null`, не создается XML-элемент.  
  
> [!NOTE]
>  Невозможно применить свойство <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> к элементу, типизированному как тип значения, так как тип значения не может содержать `null`. Кроме того, нельзя присвоить этому свойству значение `false` для типов значений, допускающих значения NULL. Если такие типы `null`, они будут сериализованы путем установки `xsi:nil` в значение `true`.  
  
   
  
## Examples  
 В следующем примере показано поле с примененным к нему <xref:System.Xml.Serialization.XmlElementAttribute>, а для свойства <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> задано значение `false`.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пространство имен, присвоенное элементу XML, получаемому при сериализации класса.</summary>
        <value>Пространство имен XML-элемента.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> соответствует спецификации консорциум W3C, [пространству имен в XML](https://www.w3.org/TR/1999/REC-xml-names-19990114/).  
  
 Для создания пространств имен, связанных с префиксом, необходимо создать <xref:System.Xml.Serialization.XmlSerializerNamespaces>, содержащий пространства имен и префиксы, используемые в XML-документе. При задании пространства имен для каждого <xref:System.Xml.Serialization.XmlArrayAttribute>оно должно соответствовать одному из пространств имен в <xref:System.Xml.Serialization.XmlSerializerNamespaces>. При создании XML каждый массив правильно предшествует префиксу, связанному с указанным пространством имен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает явный порядок сериализации или десериализации элементов.</summary>
        <value>Порядок генерирования кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте перечисление <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder>, чтобы указать <xref:System.Web.Services.Description.ServiceDescriptionImporter> создать код, который задает свойство <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A>.  
  
> [!IMPORTANT]
>  После того как свойство <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> было использовано в одном из открытых свойств или полей в типе, оно должно быть применено ко всем открытым свойствам и полям для этого типа и всех унаследованных типов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип объекта, используемый для представления элемента XML.</summary>
        <value><see cref="T:System.Type" /> члена.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте свойство <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A>, чтобы указать производный тип для поля или свойства.  
  
 Если поле или свойство возвращает <xref:System.Collections.ArrayList>, к элементу можно применить несколько экземпляров <xref:System.Xml.Serialization.XmlElementAttribute>. Для каждого экземпляра присвойте свойству <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> тип объекта, который может быть вставлен в массив.  
  
   
  
## Examples  
 В следующем примере свойство <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> используется для указания производного объекта для <xref:System.Xml.Serialization.XmlElementAttribute>. Пример также применяет три экземпляра <xref:System.Xml.Serialization.XmlElementAttribute> к полю, которое возвращает <xref:System.Collections.ArrayList>. Каждый экземпляр указывает тип, допустимый в поле.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
