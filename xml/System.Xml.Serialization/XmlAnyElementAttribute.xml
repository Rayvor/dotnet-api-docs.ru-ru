<Type Name="XmlAnyElementAttribute" FullName="System.Xml.Serialization.XmlAnyElementAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4954b417171805d221939e72d6984934ec7baef" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70715829" /></Metadata><TypeSignature Language="C#" Value="public class XmlAnyElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAnyElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlAnyElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlAnyElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlAnyElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlAnyElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что член (поле, возвращающее массив объектов <see cref="T:System.Xml.XmlElement" /> или <see cref="T:System.Xml.XmlNode" />) содержит объекты, представляющие любые элементы XML, не имеющие соответствующего члена в сериализуемом или десериализуемом объекте.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  При работе в переносимой библиотеке классов, например в Silverlight, Windows Phone или проекте приложения для Магазина Windows, и вы используете .NET Framework 4.0.3 и более поздней <xref:System.Xml.Linq.XElement> версии <xref:System.Xml.XmlElement> , используйте <xref:System.Xml.Linq.XNode> или вместо и <xref:System.Xml.XmlNode>.  
  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute> Используйте для хранения произвольных данных (в виде XML-элементов), которые могут быть отправлены как часть документа XML, например метаданные, отправляемые в составе документа.  
  
 Примените <xref:System.Xml.XmlElement> <xref:System.Xml.XmlNode> к полю, которое возвращает массив объектов или. <xref:System.Xml.Serialization.XmlAnyElementAttribute> Такое поле можно использовать двумя способами в зависимости от того, сериализуется или десериализуется объект. При сериализации объект создается в виде XML-элементов или узлов, даже если в сериализованном объекте нет соответствующего члена (или элементов). Если при применении атрибута <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> указать значение свойства, все <xref:System.Xml.XmlElement> объекты или <xref:System.Xml.XmlNode> , вставленные в массив, должны иметь одно и то же имя элемента и пространство имен по умолчанию или исключение. Если задано <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> значение свойства, необходимо также <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> задать свойство, а <xref:System.Xml.XmlElement> объекты или <xref:System.Xml.XmlNode> должны иметь одинаковые значения Name и Namespace. Если значение <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> не указано, то <xref:System.Xml.XmlElement> объекты или <xref:System.Xml.XmlNode> могут иметь любое имя элемента.  
  
 При вызове <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> метода <xref:System.Xml.Serialization.XmlSerializer> класса все элементы, не имеющие соответствующего члена в десериализованном объекте, собираются в массив. После десериализации пройдите по коллекции <xref:System.Xml.XmlElement> элементов для обработки данных. Если указать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение, массив будет содержать только XML-элементы с таким именем. Если <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение не указано, массив будет содержать все элементы, не имеющие соответствующего элемента в классе. Если класс содержит более одного поля, к которому применяется атрибут, используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> свойства, или <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> , чтобы различать содержимое массивов. Если такой класс (с несколькими полями) также содержит одно поле, в котором не заданы отличительные значения свойств (иными словами <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A>) во время десериализации, этот массив содержит все неизвестные элементы XML, которые еще не содержатся в других массивах. Если класс содержит более одного поля, для которого не заданы отличительные <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A>значения, или <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> , поведение при десериализации не определено.  
  
 Можно также применить <xref:System.Xml.Serialization.XmlAnyElementAttribute> к полю, которое возвращает один <xref:System.Xml.XmlElement> объект. В этом случае необходимо использовать свойства и методы <xref:System.Xml.XmlElement> класса для рекурсивного перебора неизвестных элементов.  
  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute> К члену класса можно применить несколько экземпляров компонента, но каждый экземпляр должен иметь <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> уникальное значение свойства. Или, если для каждого <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> экземпляра задано одно и то же свойство, <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> для каждого экземпляра необходимо задать отдельное значение свойства.  
  
 События <xref:System.Xml.Serialization.XmlSerializer.UnknownNode> <xref:System.Xml.Serialization.XmlAnyElementAttribute> и <xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute> объекта не происходят при применении к члену класса <xref:System.Xml.Serialization.XmlSerializer>  .  
  
> [!NOTE]
>  Вы можете использовать слово `XmlAnyElement` в коде, а не дольше. <xref:System.Xml.Serialization.XmlAnyElementAttribute>  
  
 Дополнительные сведения об использовании атрибутов см. в разделе [атрибуты](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 Следующий пример применяет <xref:System.Xml.Serialization.XmlAnyElementAttribute> к полю с именем `AllElements` <xref:System.Xml.XmlElement> , которое возвращает массив объектов.  
  
 [!code-cpp[Classic XmlAnyElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAnyElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAnyElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAnyElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAnyElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAnyElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">Введение в сериализацию XML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAnyElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute> Используйте конструктор при переопределении сериализации поля. Дополнительные сведения о переопределении сериализации см. в <xref:System.Xml.Serialization.XmlAttributeOverrides> разделе класс.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAnyElementAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlAnyElementAttribute : string -&gt; System.Xml.Serialization.XmlAnyElementAttribute" Usage="new System.Xml.Serialization.XmlAnyElementAttribute name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя XML-элемента, созданного при помощи <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> и указывает имя XML-элемента, сгенерированного в документе XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute> Используйте конструктор при переопределении сериализации поля. Дополнительные сведения о переопределении сериализации см. в <xref:System.Xml.Serialization.XmlAttributeOverrides> разделе класс.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute (string name, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAnyElementAttribute(System::String ^ name, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlAnyElementAttribute : string * string -&gt; System.Xml.Serialization.XmlAnyElementAttribute" Usage="new System.Xml.Serialization.XmlAnyElementAttribute (name, ns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя XML-элемента, созданного при помощи <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
        <param name="ns">Пространство имен XML XML-элемента.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> и указывает имя XML-элемента, сгенерированного в документе XML, и его пространство имен XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute> Используйте конструктор при переопределении сериализации поля. Дополнительные сведения о переопределении сериализации см. в <xref:System.Xml.Serialization.XmlAttributeOverrides> разделе класс.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Xml.Serialization.XmlAnyElementAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя XML-элемента.</summary>
        <value>Имя элемента XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если при применении атрибута <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> указать значение свойства, все <xref:System.Xml.XmlElement> объекты или <xref:System.Xml.XmlNode> , вставленные в массив, должны иметь одно и то же имя элемента и пространство имен по умолчанию или исключение. Если задано <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> значение свойства, необходимо также <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> задать свойство, а <xref:System.Xml.XmlElement> объекты или <xref:System.Xml.XmlNode> должны иметь одинаковые значения Name и Namespace. Если значение <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> не указано, то <xref:System.Xml.XmlElement> объекты или <xref:System.Xml.XmlNode> могут иметь любое имя элемента.  
  
 При вызове <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> метода <xref:System.Xml.Serialization.XmlSerializer> класса все атрибуты, не имеющие соответствующего члена в десериализованном объекте, собираются в массив. Если указать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение, массив будет содержать только XML-элементы с таким именем. Если <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение не указано, массив будет содержать все элементы, не имеющие соответствующего элемента в классе. Если класс содержит более одного поля, к которому применяется атрибут, используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> свойства и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> , чтобы различать содержимое массивов. Если такой класс (с несколькими полями) также содержит одно поле, в котором не заданы отличительные значения свойств (т <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> . е. и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A>) во время десериализации, массив содержит все элементы XML, которые еще не содержатся в другом. массивы. При добавлении нескольких полей, не имеющих дифференцированного <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значения или <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> набора значений, Последнее поле в классе содержит все неизвестные элементы, которые еще не содержатся в других массивах, а все `null`остальные поля имеют значение.  
  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute> К члену класса можно применить несколько экземпляров компонента, но каждый экземпляр должен иметь <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> уникальное значение свойства. Или, если для каждого <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> экземпляра задано одно и то же свойство, <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> для каждого экземпляра необходимо задать отдельное значение свойства.  
  
   
  
## Examples  
 [!code-cpp[XmlAnyElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CPP/anyelement.cpp#1)]
 [!code-csharp[XmlAnyElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CS/anyelement.cs#1)]
 [!code-vb[XmlAnyElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAnyElementAttribute Example/VB/anyelement.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Имя элемента члена массива не соответствует имени элемента, указанному свойством <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlAnyElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает пространство имен XML, созданное в документе XML.</summary>
        <value>Пространство имен XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> Свойство позволяет задать уникальное имя для XML-атрибута. Свойство соответствует правилам создания пространства имен XML, как оно найдено в [пространствах имен в XML-](https://www.w3.org/TR/xml-names/) документе из консорциум W3C. <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A>
  
 Чтобы присвоить <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> свойству имя с префиксом, создайте <xref:System.Xml.Serialization.XmlSerializerNamespaces> объект, содержащий пространства имен и префиксы, используемые в XML-документе. Присвойте <xref:System.Xml.Serialization.XmlSerializerNamespaces>свойству одно из пространств имен в. <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> При создании XML имя атрибута правильно предшествует префиксу, связанному с указанным пространством имен.  
  
   
  
## Examples  
 [!code-cpp[XmlAnyElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CPP/anyelement.cpp#1)]
 [!code-csharp[XmlAnyElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CS/anyelement.cs#1)]
 [!code-vb[XmlAnyElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAnyElementAttribute Example/VB/anyelement.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAnyElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlAnyElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает явный порядок сериализации или десериализации элементов.</summary>
        <value>Порядок генерирования кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте перечисление, чтобы <xref:System.Web.Services.Description.ServiceDescriptionImporter> указать для <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> создания кода, устанавливающего свойство. <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder>  
  
> [!IMPORTANT]
>  После того как свойство было использовано в одном из открытых свойств или полей в типе, оно должно быть применено ко всем открытым свойствам и полям для этого типа и всех унаследованных типов. <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
