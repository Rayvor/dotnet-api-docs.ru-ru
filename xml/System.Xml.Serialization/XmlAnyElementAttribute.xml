<Type Name="XmlAnyElementAttribute" FullName="System.Xml.Serialization.XmlAnyElementAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d9a8082a331cebccc4adcf10f079e4b86790b4a" /><Meta Name="ms.sourcegitcommit" Value="f55040f35c19a83c85beb55243330558f6e369be" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/10/2019" /><Meta Name="ms.locfileid" Value="66819268" /></Metadata><TypeSignature Language="C#" Value="public class XmlAnyElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAnyElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlAnyElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlAnyElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlAnyElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlAnyElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что член (поле, возвращающее массив объектов <see cref="T:System.Xml.XmlElement" /> или <see cref="T:System.Xml.XmlNode" />) содержит объекты, представляющие любые элементы XML, не имеющие соответствующего члена в сериализуемом или десериализуемом объекте.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  При работе в переносимой библиотеке классов, например в Silverlight, Windows Phone или проект приложения Windows Store и вы используете .NET Framework 4.0.3 и выше, выполните <xref:System.Xml.Linq.XElement> или <xref:System.Xml.Linq.XNode> вместо <xref:System.Xml.XmlElement> и <xref:System.Xml.XmlNode>.  
  
 Используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute> должен содержать произвольные данные (в виде XML-элементов), которые можно отправить как часть XML-документа, такие как метаданные как часть документа.  
  
 Применить <xref:System.Xml.Serialization.XmlAnyElementAttribute> полю, которое возвращает массив <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> объектов. Это поле можно использовать двумя способами, в зависимости от того, объект сериализации или десериализации. При сериализации объекта создается в виде XML-элементов или узлов, несмотря на то, что они не имеют соответствующего члена (или элементов) в объекте сериализации. Если указать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение свойства при применении атрибута, все <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> вставленных в массив объектов должен иметь то же элемент имя и значение по умолчанию пространство имен, или создается исключение. Если задать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> значение свойства, необходимо задать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> , свойства и <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> объекты также должны иметь одинаковые значения имени и пространства имен. Если не <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение указано, <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> объектов может иметь любое имя элемента.  
  
 При вызове <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> метод <xref:System.Xml.Serialization.XmlSerializer> класс, все элементы, у которых нет соответствующего члена в Десериализуемый объект собираются в массиве. После десериализации выполнения итерации по коллекции <xref:System.Xml.XmlElement> элементов для обработки данных. Если указать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение, массив содержит только XML-элементов с таким именем. Если вы не укажете <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение, массив содержит все элементы, имеющие нет соответствующего члена в классе. Если класс содержит более одного поля, к которому применяется атрибут, используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A>, или <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> свойства, чтобы различать содержимое массивов. Если такой класс (с несколькими полями) также содержит поле, для которого не заданы значения свойств, заданные (другими словами, <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A>) во время десериализации, этот массив содержит все неизвестные элементы XML, которые не содержатся в других массивах. Если класс содержит более одного поля, не поддерживает различение <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A>, или <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> значение не задано, то поведение во время десериализации не определено.  
  
 Можно также применить <xref:System.Xml.Serialization.XmlAnyElementAttribute> к полю, возвращающему <xref:System.Xml.XmlElement> объекта. Если сделать это, необходимо использовать свойства и методы <xref:System.Xml.XmlElement> для рекурсивного выполнения итерации по неизвестные элементы.  
  
 Можно применить несколько экземпляров <xref:System.Xml.Serialization.XmlAnyElementAttribute> к классу элемента, но каждый экземпляр должен иметь различные <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение свойства. Или, если же <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> свойство имеет значение для каждого экземпляра, уникальным <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> свойство должно иметь значение для каждого экземпляра.  
  
 <xref:System.Xml.Serialization.XmlSerializer.UnknownNode> И <xref:System.Xml.Serialization.XmlSerializer.UnknownAttribute> события <xref:System.Xml.Serialization.XmlSerializer> не возникнут, если применить <xref:System.Xml.Serialization.XmlAnyElementAttribute> к члену класса.  
  
> [!NOTE]
>  Можно использовать слово `XmlAnyElement` в коде вместо более длинного <xref:System.Xml.Serialization.XmlAnyElementAttribute>.  
  
 Дополнительные сведения об использовании атрибутов см. в разделе [атрибуты](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 В следующем примере применяется <xref:System.Xml.Serialization.XmlAnyElementAttribute> к полю с именем `AllElements` , возвращающий массив <xref:System.Xml.XmlElement> объектов.  
  
 [!code-cpp[Classic XmlAnyElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAnyElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAnyElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAnyElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAnyElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAnyElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">Введение в сериализацию XML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAnyElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute> конструктор, когда вы переопределяете сериализации поля. Дополнительные сведения о переопределении сериализации см. в разделе <xref:System.Xml.Serialization.XmlAttributeOverrides> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAnyElementAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlAnyElementAttribute : string -&gt; System.Xml.Serialization.XmlAnyElementAttribute" Usage="new System.Xml.Serialization.XmlAnyElementAttribute name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя XML-элемента, созданного при помощи <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> и указывает имя XML-элемента, сгенерированного в документе XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute> конструктор, когда вы переопределяете сериализации поля. Дополнительные сведения о переопределении сериализации см. в разделе <xref:System.Xml.Serialization.XmlAttributeOverrides> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute (string name, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAnyElementAttribute(System::String ^ name, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlAnyElementAttribute : string * string -&gt; System.Xml.Serialization.XmlAnyElementAttribute" Usage="new System.Xml.Serialization.XmlAnyElementAttribute (name, ns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя XML-элемента, созданного при помощи <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
        <param name="ns">Пространство имен XML XML-элемента.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> и указывает имя XML-элемента, сгенерированного в документе XML, и его пространство имен XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute> конструктор, когда вы переопределяете сериализации поля. Дополнительные сведения о переопределении сериализации см. в разделе <xref:System.Xml.Serialization.XmlAttributeOverrides> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Xml.Serialization.XmlAnyElementAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя XML-элемента.</summary>
        <value>Имя элемента XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение свойства при применении атрибута, все <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> вставленных в массив объектов должен иметь то же элемент имя и значение по умолчанию пространство имен, или создается исключение. Если задать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> значение свойства, необходимо задать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> , свойства и <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> объекты также должны иметь одинаковые значения имени и пространства имен. Если не <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение указано, <xref:System.Xml.XmlElement> или <xref:System.Xml.XmlNode> объектов может иметь любое имя элемента.  
  
 При вызове <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> метод <xref:System.Xml.Serialization.XmlSerializer> класс, все атрибуты, у которых нет соответствующего члена в Десериализуемый объект собираются в массиве. Если указать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение, массив содержит только XML-элементов с таким именем. Если вы не укажете <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение, массив содержит все элементы, имеющие нет соответствующего члена в классе. Если класс содержит более одного поля, к которому применяется атрибут, используйте <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> свойства, чтобы различать содержимое массивов. Если такой класс (с несколькими полями) также содержит поле, для которого не заданы значения свойств, заданные (то есть <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> и <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A>) во время десериализации массив содержит все элементы XML, которые не содержатся в другом массивы. При добавлении более одного поля, не поддерживает различение <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> или <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> значение не задано, последнее поле в классе содержит все неизвестные элементы, которые не содержатся в другие массивы, а также все остальные поля задаются `null`.  
  
 Можно применить несколько экземпляров <xref:System.Xml.Serialization.XmlAnyElementAttribute> к классу элемента, но каждый экземпляр должен иметь различные <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> значение свойства. Или, если же <xref:System.Xml.Serialization.XmlAnyElementAttribute.Name%2A> свойство имеет значение для каждого экземпляра, уникальным <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> свойство должно иметь значение для каждого экземпляра.  
  
   
  
## Examples  
 [!code-cpp[XmlAnyElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CPP/anyelement.cpp#1)]
 [!code-csharp[XmlAnyElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CS/anyelement.cs#1)]
 [!code-vb[XmlAnyElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAnyElementAttribute Example/VB/anyelement.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Имя элемента члена массива не соответствует имени элемента, указанному свойством <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlAnyElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает пространство имен XML, созданное в документе XML.</summary>
        <value>Пространство имен XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> Свойство позволяет задать уникальное имя для XML-атрибута. <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> Свойства соответствует правилам для создания пространства имен XML, указанный в [пространства имен в XML](https://www.w3.org/TR/xml-names/) документ из консорциума World Wide Web.
  
 Чтобы задать <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> присваивается имя с префиксом, создайте <xref:System.Xml.Serialization.XmlSerializerNamespaces> , содержащий пространства имен и префиксы, используемые в документе XML. Задайте <xref:System.Xml.Serialization.XmlAnyElementAttribute.Namespace%2A> задается одно из пространств имен в <xref:System.Xml.Serialization.XmlSerializerNamespaces>. При генерации XML, имя атрибута правильно указывается префикс, связанный с указанным пространством имен.  
  
   
  
## Examples  
 [!code-cpp[XmlAnyElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CPP/anyelement.cpp#1)]
 [!code-csharp[XmlAnyElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAnyElementAttribute Example/CS/anyelement.cs#1)]
 [!code-vb[XmlAnyElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAnyElementAttribute Example/VB/anyelement.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAnyElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlAnyElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает явный порядок сериализации или десериализации элементов.</summary>
        <value>Порядок генерирования кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> перечисление, чтобы дать указание <xref:System.Web.Services.Description.ServiceDescriptionImporter> для создания кода, который задает <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> свойства.  
  
> [!IMPORTANT]
>  Один раз <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> свойство было использовано для одного открытого свойства или поля в типе, он должен применяться к все открытые свойства и поля для этого типа и всех наследуемых типов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>