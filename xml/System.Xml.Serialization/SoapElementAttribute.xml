<Type Name="SoapElementAttribute" FullName="System.Xml.Serialization.SoapElementAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7d424e5ea73712993e2a8a24db45aeb74d0545f9" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75049456" /></Metadata><TypeSignature Language="C#" Value="public class SoapElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.SoapElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type SoapElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;netstandard-2.1;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что данный общий член будет сериализован посредством <see cref="T:System.Xml.Serialization.XmlSerializer" /> как кодированный XML-элемент SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс <xref:System.Xml.Serialization.SoapElementAttribute> принадлежит семейству атрибутов, который управляет тем, как <xref:System.Xml.Serialization.XmlSerializer> сериализует или десериализует объект как закодированный SOAP XML. Результирующий XML соответствует разделу 5 документа консорциум W3C, [протоколу SOAP 1,1](https://www.w3.org/TR/2000/NOTE-SOAP-20000508/). Полный список схожих атрибутов см. в разделе [атрибуты, управляющие кодированной СЕРИАЛИЗАЦИЕЙ SOAP](~/docs/standard/serialization/attributes-that-control-encoded-soap-serialization.md).  
  
 Чтобы сериализовать объект как закодированное сообщение SOAP, необходимо создать <xref:System.Xml.Serialization.XmlSerializer> используя <xref:System.Xml.Serialization.XmlTypeMapping>, созданный с помощью метода <xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A> класса <xref:System.Xml.Serialization.SoapReflectionImporter>.  
  
 Примените <xref:System.Xml.Serialization.SoapElementAttribute> к открытому полю, чтобы направить <xref:System.Xml.Serialization.XmlSerializer> сериализацию поля в виде закодированного XML-элемента SOAP.  
  
 Дополнительные сведения об использовании атрибутов см. в разделе [атрибуты](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 В следующем примере сериализуется экземпляр класса с именем `Transportation`, содержащий поле с именем `Vehicle`. К полю применяется <xref:System.Xml.Serialization.SoapElementAttribute>. При сериализации поля имя XML-элемента — «Wheels», а не «Vehicle». Метод `SerializeOverride` создает <xref:System.Xml.Serialization.SoapElementAttribute> и задает для свойства <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> <xref:System.Xml.Serialization.SoapAttributes> значение <xref:System.Xml.Serialization.SoapElementAttribute>. <xref:System.Xml.Serialization.SoapAttributes> добавляется в <xref:System.Xml.Serialization.SoapAttributeOverrides>, который используется для создания <xref:System.Xml.Serialization.XmlTypeMapping>. <xref:System.Xml.Serialization.XmlSerializer> создается с <xref:System.Xml.Serialization.XmlTypeMapping>, а экземпляр класса `Transportation` снова сериализуется. Поскольку <xref:System.Xml.Serialization.SoapElementAttribute> используется для переопределения сериализации, созданное имя элемента XML теперь является "грузовиком" вместо "Wheels".  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализация нового экземпляра класса <see cref="T:System.Xml.Serialization.SoapElementAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализация нового экземпляра класса <see cref="T:System.Xml.Serialization.SoapElementAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сериализуется экземпляр класса с именем `Transportation`, содержащий поле с именем `Vehicle`. К полю применяется <xref:System.Xml.Serialization.SoapElementAttribute>. При сериализации поля имя XML-элемента — «Wheels», а не «Vehicle». Метод `SerializeOverride` создает <xref:System.Xml.Serialization.SoapElementAttribute> и задает для свойства <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> <xref:System.Xml.Serialization.SoapAttributes> значение <xref:System.Xml.Serialization.SoapElementAttribute>. <xref:System.Xml.Serialization.SoapAttributes> добавляется в <xref:System.Xml.Serialization.SoapAttributeOverrides>, который используется для создания <xref:System.Xml.Serialization.XmlTypeMapping>. <xref:System.Xml.Serialization.XmlSerializer> создается с <xref:System.Xml.Serialization.XmlTypeMapping>, а экземпляр класса `Transportation` снова сериализуется. Поскольку <xref:System.Xml.Serialization.SoapElementAttribute> используется для переопределения сериализации, созданное имя элемента XML теперь является "грузовиком" вместо "Wheels".  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapElementAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.SoapElementAttribute : string -&gt; System.Xml.Serialization.SoapElementAttribute" Usage="new System.Xml.Serialization.SoapElementAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Имя XML-элемента сериализованного члена.</param>
        <summary>Инициализация нового экземпляра  класса <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> и указывает имя элемента XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сериализуется экземпляр класса с именем `Transportation`, содержащий поле с именем `Vehicle`. К полю применяется <xref:System.Xml.Serialization.SoapElementAttribute>. При сериализации поля имя XML-элемента — «Wheels», а не «Vehicle». Метод `SerializeOverride` создает <xref:System.Xml.Serialization.SoapElementAttribute> и задает для свойства <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> <xref:System.Xml.Serialization.SoapAttributes> значение <xref:System.Xml.Serialization.SoapElementAttribute>. <xref:System.Xml.Serialization.SoapAttributes> добавляется в <xref:System.Xml.Serialization.SoapAttributeOverrides>, который используется для создания <xref:System.Xml.Serialization.XmlTypeMapping>. <xref:System.Xml.Serialization.XmlSerializer> создается с <xref:System.Xml.Serialization.XmlTypeMapping>, а экземпляр класса `Transportation` снова сериализуется. Поскольку <xref:System.Xml.Serialization.SoapElementAttribute> используется для переопределения сериализации, созданное имя элемента XML теперь является "грузовиком" вместо "Wheels".  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.SoapElementAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип данных языка определения схемы XML (XSD) созданного XML-элемента.</summary>
        <value>Один из типов данных XML-схемы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице перечислены простые типы данных схемы XML с их эквивалентами .NET.  
  
 Для `base64Binary` и `hexBinary` типов данных схемы XML используйте массив структур <xref:System.Byte> и примените <xref:System.Xml.Serialization.SoapElementAttribute> с параметром <xref:System.Xml.Serialization.SoapAttributeAttribute.DataType%2A>, имеющим значение "base64Binary" или "hexBinary", в зависимости от ситуации. Для типов данных XML-схемы `time` и `date` используйте тип <xref:System.DateTime> и примените <xref:System.Xml.Serialization.SoapElementAttribute> с параметром <xref:System.Xml.Serialization.SoapElementAttribute.DataType%2A> со значением "Дата" или "время".  
  
 Для каждого типа данных схемы XML, сопоставленного со строкой, примените <xref:System.Xml.Serialization.SoapElementAttribute> со свойством <xref:System.Xml.Serialization.SoapElementAttribute.DataType%2A>, установленным в тип схемы XML. Обратите внимание, что это не изменяет формат сериализации, а только схему для элемента.  
  
> [!NOTE]
>  В свойстве учитывается регистр, поэтому его необходимо задать в точности до одного из типов данных схемы XML.  
  
> [!NOTE]
>  Передача двоичных данных в виде XML-элемента более эффективна, чем передача их в виде XML-атрибута.  
  
 Дополнительные сведения о типах данных XML см. в консорциум W3C документе, [XML Schema Part, часть 2: Types](https://www.w3.org/TR/xmlschema-2/).  
  
|Тип данных XSD|Тип данных .NET|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Массив объектов <xref:System.Byte>|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|ОБЪЕКТАХ|<xref:System.String>|  
|float|<xref:System.Single>|  
|гдай|<xref:System.String>|  
|гмонс|<xref:System.String>|  
|гмонсдай|<xref:System.String>|  
|геар|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Массив объектов <xref:System.Byte>|  
|ИДЕНТИФИКАТОР|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|integer|<xref:System.String>|  
|язык|<xref:System.String>|  
|long|<xref:System.Int64>|  
|Имя|<xref:System.String>|  
|NCName|<xref:System.String>|  
|негативеинтежер|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|нонпоситивеинтежер|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|поситивеинтежер|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|длительность|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|время|<xref:System.DateTime>|  
|токен|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 В следующем примере сериализуется экземпляр класса с именем `Transportation`, содержащий поле с именем `Vehicle`. К полю применяется <xref:System.Xml.Serialization.SoapElementAttribute>. При сериализации поля имя XML-элемента — «Wheels», а не «Vehicle». Метод `SerializeOverride` создает <xref:System.Xml.Serialization.SoapElementAttribute> и задает для свойства <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> <xref:System.Xml.Serialization.SoapAttributes> значение <xref:System.Xml.Serialization.SoapElementAttribute>. <xref:System.Xml.Serialization.SoapAttributes> добавляется в <xref:System.Xml.Serialization.SoapAttributeOverrides>, который используется для создания <xref:System.Xml.Serialization.XmlTypeMapping>. <xref:System.Xml.Serialization.XmlSerializer> создается с <xref:System.Xml.Serialization.XmlTypeMapping>, а экземпляр класса `Transportation` снова сериализуется. Поскольку <xref:System.Xml.Serialization.SoapElementAttribute> используется для переопределения сериализации, созданное имя элемента XML теперь является "грузовиком" вместо "Wheels".  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.SoapElementAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя созданного XML-элемента</summary>
        <value>Имя созданного XML-элемента. По умолчанию используется идентификатор члена</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сериализуется экземпляр класса с именем `Transportation`, содержащий поле с именем `Vehicle`. К полю применяется <xref:System.Xml.Serialization.SoapElementAttribute>. При сериализации поля имя XML-элемента — «Wheels», а не «Vehicle». Метод `SerializeOverride` создает <xref:System.Xml.Serialization.SoapElementAttribute> и задает для свойства <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> <xref:System.Xml.Serialization.SoapAttributes> значение <xref:System.Xml.Serialization.SoapElementAttribute>. <xref:System.Xml.Serialization.SoapAttributes> добавляется в <xref:System.Xml.Serialization.SoapAttributeOverrides>, который используется для создания <xref:System.Xml.Serialization.XmlTypeMapping>. <xref:System.Xml.Serialization.XmlSerializer> создается с <xref:System.Xml.Serialization.XmlTypeMapping>, а экземпляр класса `Transportation` снова сериализуется. Поскольку <xref:System.Xml.Serialization.SoapElementAttribute> используется для переопределения сериализации, созданное имя элемента XML теперь является "грузовиком" вместо "Wheels".  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.SoapElementAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, должен ли <see cref="T:System.Xml.Serialization.XmlSerializer" /> выполнять сериализацию члена с заданным для атрибута <see langword="xsi:null" /> значением "1".</summary>
        <value><see langword="true" />, если <see cref="T:System.Xml.Serialization.XmlSerializer" /> создает атрибут <see langword="xsi:null" />; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Спецификация XML-схемы для структур позволяет XML-документу явно сообщать, что содержимое элемента отсутствует. Такой элемент содержит атрибут `xsi:null` значение "1". Дополнительные сведения см. в спецификации консорциум W3C, именуемой [схемой XML часть 1: структуры](https://www.w3.org/TR/xmlschema-1/).  
  
 Если свойство <xref:System.Xml.Serialization.SoapElementAttribute.IsNullable%2A> имеет значение `true`, то для членов класса, которым было задано значение `null`, создается атрибут `xsi:null`. Например, если задать поле с именем `MyStringArray` для `null`, <xref:System.Xml.Serialization.XmlSerializer> создаст следующий XML-код.  
  
```  
<MyStringArray xsi:null = "1" />  
```  
  
 Если свойство <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> имеет значение `false`, XML-элемент не создается.  
  
> [!NOTE]
>  Невозможно применить свойство <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> к элементу, типизированному как тип значения, так как тип значения не может содержать `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
