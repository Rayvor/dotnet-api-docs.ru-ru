<Type Name="IPolicyExportExtension" FullName="System.ServiceModel.Description.IPolicyExportExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="553e6c58d808beb4ac2d9a4f6c715b8647773b93" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70529135" /></Metadata><TypeSignature Language="C#" Value="public interface IPolicyExportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyExportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyExportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyExportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyExportExtension" />
  <TypeSignature Language="F#" Value="type IPolicyExportExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Реализуйте <see cref="T:System.ServiceModel.Description.IPolicyExportExtension" /> для вставки настраиваемых утверждений политики привязки в сведениях о языке описания служб (SDL).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте интерфейс <xref:System.ServiceModel.Description.IPolicyExportExtension> в объекте <xref:System.ServiceModel.Channels.BindingElement?displayProperty=nameWithType>, чтобы записать выписки о возможностях и требованиях конечной точки в сведения языка WSDL, предоставленные определенной конечной точкой. Обычно элементом привязки является элемент, реализующий определенное свойство, однако это не является обязательным. Для загрузки средства экспорта политики из файла конфигурации, реализуйте интерфейс <xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType>, возвращающий объект <xref:System.ServiceModel.Channels.BindingElement> средства импорта политики.  
  
 Средство экспорта политики используется Windows Communication Foundation (WCF) для использования утверждений политики для обмена данными с клиентами о существовании требования пользовательской привязки или возможности конечной точки.  
  
 Метод <xref:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy%2A> принимает объекты <xref:System.ServiceModel.Description.MetadataExporter> и <xref:System.ServiceModel.Description.PolicyConversionContext>. Используйте методы <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> и <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A>, чтобы получить коллекции утверждений политики, экспортированные в различные области. Затем добавьте объект утверждения настраиваемой политики в соответствующую коллекцию.  
  
 Свойство <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A> предоставляет объект <xref:System.ServiceModel.Description.ContractDescription> для экспортируемой конечной точки. Этот позволяет расширению <xref:System.ServiceModel.Description.IPolicyExportExtension> правильно определить область экспортированных утверждений политики. Например, атрибуты безопасности в коде могут добавлять поведения в объект <xref:System.ServiceModel.Description.ContractDescription>, указывающие, куда должны быть добавлены утверждения политики безопасности.  
  
 Механизм <xref:System.ServiceModel.Description.IPolicyExportExtension> поддерживает только экспорт утверждений политики в языке WSDL. Для экспорта настраиваемых элементов языка WSDL необходимо использовать механизм <xref:System.ServiceModel.Description.IWsdlExportExtension>, чтобы изменить язык WSDL напрямую.  
  
 После присоединения утверждений настраиваемой политики к информации WSDL клиенты могут обнаруживать и импортировать утверждения настраиваемой привязки путем использования объекта <xref:System.ServiceModel.Description.IPolicyImportExtension>.  
  
   
  
## Examples  
 В следующем примере кода показана реализация метода <xref:System.ServiceModel.Description.IPolicyExportExtension> в <xref:System.ServiceModel.Channels.BindingElement>. В этом примере элемент настраиваемой привязки присоединяется к файлу WSDL на уровне привязки.  
  
 [!code-csharp[CustomPolicySample#14](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyexporter.cs#14)]
 [!code-vb[CustomPolicySample#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyexporter.vb#14)]  
  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType>, которая делает возможной загрузку предыдущего средства импорта политики из файла конфигурации приложения.  
  
 [!code-csharp[CustomPolicySample#15](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyexporter.cs#15)]
 [!code-vb[CustomPolicySample#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyexporter.vb#15)]  
  
 В следующем примере показан основной файл конфигурации, загружающий средство экспорта настраиваемой политики.  
  
 [!code-xml[CustomPolicySample#3](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/app.config#3)]   
  
 В следующем примере показано настраиваемое утверждение в файле WSDL.  
  
 [!code-xml[CustomPolicySample#16](~/samples/snippets/common/VS_Snippets_CFX/custompolicysample/common/tempuri.org.wsdl#16)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExportPolicy">
      <MemberSignature Language="C#" Value="public void ExportPolicy (System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportPolicy(class System.ServiceModel.Description.MetadataExporter exporter, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExportPolicy (exporter As MetadataExporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExportPolicy(System::ServiceModel::Description::MetadataExporter ^ exporter, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ExportPolicy : System.ServiceModel.Description.MetadataExporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="iPolicyExportExtension.ExportPolicy (exporter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exporter" Type="System.ServiceModel.Description.MetadataExporter" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="exporter">Объект <see cref="T:System.ServiceModel.Description.MetadataExporter" />, который можно использовать для изменения процесса экспорта.</param>
        <param name="context">Объект <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />, который можно использовать для вставки утверждения пользовательской политики.</param>
        <summary>Реализация необходима для включения для экспорта утверждения настраиваемой политики о привязках.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте методы <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> и <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A>, чтобы получить коллекции утверждений политики, экспортированные в различные области. Затем добавьте объект <xref:System.ServiceModel.Description.IPolicyExportExtension> в соответствующую коллекцию.  
  
   
  
## Examples  
 В следующем примере кода показана реализация метода <xref:System.ServiceModel.Description.IPolicyExportExtension> в <xref:System.ServiceModel.Channels.BindingElement>. В этом примере элемент настраиваемой привязки присоединяется к файлу WSDL на уровне привязки.  
  
 [!code-csharp[CustomPolicySample#14](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyexporter.cs#14)]
 [!code-vb[CustomPolicySample#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyexporter.vb#14)]  
  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType>, которая делает возможной загрузку предыдущего средства импорта политики из файла конфигурации приложения.  
  
 [!code-csharp[CustomPolicySample#15](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyexporter.cs#15)]
 [!code-vb[CustomPolicySample#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyexporter.vb#15)]  
  
 В следующем примере показан основной файл конфигурации, загружающий средство экспорта настраиваемой политики.  
  
 [!code-xml[CustomPolicySample#3](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/app.config#3)]   
  
 В следующем примере показано настраиваемое утверждение в файле WSDL.  
  
 [!code-xml[CustomPolicySample#16](~/samples/snippets/common/VS_Snippets_CFX/custompolicysample/common/tempuri.org.wsdl#16)]    
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
