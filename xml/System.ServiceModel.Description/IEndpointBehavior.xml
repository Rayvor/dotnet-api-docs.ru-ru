<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c8a65dcfec67e27f6c7d4724a93a280d05dfadfd" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70403650" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Реализует методы, которые могут использоваться для расширения поведения времени выполнения для конечной точки службы или клиентского приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализует интерфейс <xref:System.ServiceModel.Description.IEndpointBehavior> для изменения, проверки или расширения некоторого аспекта выполнения для всей конечной точки на уровне клиентских приложений или приложений службы.  
  
-   Метод <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> используется для предоставления элементов привязки с пользовательскими данными в среде выполнения для разрешения привязок для поддержки настраиваемых поведений.  
  
-   Метод <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> используется для изменения, проверки или вставки оснасток расширения в конечную точку в клиентском приложении.  
  
-   Метод <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> используется для изменения, проверки или вставки оснасток расширения в выполнение всей конечной точки в приложении службы.  
  
-   Можно использовать метод <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>, чтобы подтвердить соответствие <xref:System.ServiceModel.Description.ServiceEndpoint> конкретным требованиям. Метод может использоваться для проверки включения определенных настроек конфигурации конечной точки, поддержки конкретных функциональных возможностей и соответствия другим требованиям.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior>объекты могут использовать любой из этих методов, но часто важен только один из них. в таких случаях неиспользуемые методы могут возвращать, не выполняя никаких действий.  
  
> [!NOTE]
>  Все методы <xref:System.ServiceModel.Description.IEndpointBehavior> передают объект <xref:System.ServiceModel.Description.ServiceEndpoint> как параметр. Данный параметр используется только для изучения; при изменении объекта <xref:System.ServiceModel.Description.ServiceEndpoint> поведение выполнения не определено.  
  
 Объекты <xref:System.ServiceModel.Description.IEndpointBehavior> обычно используются для доступа к различным свойствам объектов <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> и <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> в приложении службы и  <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> и <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> в клиентском приложении. Кроме того, можно получить доступ к свойствам дуплексных клиентов и служб с помощью свойств <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> и <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> соответственно.  
  
 Описание различных доступных свойств и настроек см. в разделе [Расширение ServiceHost и уровня модели службы](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 После принятия решения по настройке (и интерфейса настройки, реализованного при необходимости), а <xref:System.ServiceModel.Description.IEndpointBehavior> решение является соответствующей областью настройки, настройка должна быть вставлена в Windows Communication Foundation (WCF) Runtime путем реализации <xref:System.ServiceModel.Description.IEndpointBehavior> и добавления поведения конечной точки в среду выполнения.  
  
 Существует два способа добавления поведений в среду выполнения:  
  
-   Программно добавить настраиваемые поведения конечной точки в свойство <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> перед открытием узла службы (в приложении службы) или заводской настройки канала (в клиентском приложении).  
  
-   Настроить поведение с помощью файла конфигурации приложения. Дополнительные сведения см. в разделе [ &lt;бехавиорекстенсионс&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Чтобы выполнить задачу настройки службы, для которой она предназначена, необходимо добавить объект <xref:System.ServiceModel.Description.IEndpointBehavior> в свойство <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> перед построением службы среды выполнения, что происходит, когда метод <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> вызывается на объекте <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Чтобы выполнить задачу настройки клиента, следует добавить объект <xref:System.ServiceModel.Description.IEndpointBehavior> в свойство <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> перед вызовом метода <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> или метода <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> на <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 В следующем примере кода показана реализация поведения конечной точки, которая добавляет объект <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> в приложение службы. В данном случае класс `EndpointBehaviorMessageInspector` реализует <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>, чтобы проверить входящие и исходящие сообщения, интерфейс<xref:System.ServiceModel.Description.IEndpointBehavior> для вставки класса инспектора в систему проверки всех конечных точек, к которым применимы поведения, а также <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, чтобы включить поддержку поведений инспектора сообщений, используя файл конфигурации приложения.  
  
 Сначала необходимо реализовать инспектор сообщений.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 В следующем примере кода показано использование метода <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> для добавления инспектора сообщений в свойство <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, чтобы разрешить использование поведения инспектора сообщений из файла конфигурации.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Наконец, в следующем файле конфигурации показано, как можно использовать предыдущий пример из конфигурации.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">Изменяемая конечная точка.</param>
        <param name="bindingParameters">Объекты, необходимые элементам привязки для поддержки этого режима.</param>
        <summary>Реализуйте для передачи данных привязкам во время выполнения в целях поддержки пользовательских режимов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализует метод <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> для предоставления элементов привязки с дополнительными объектами, которые им необходимы для поддержки поведения конечной точки. При добавлении параметров привязки привязка может размещать данные объекты во время создания прослушивателя канала или заводских настроек канала. Как правило, метод <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> реализуется для передачи сведений о конечной точке в настраиваемый элемент привязки для правильного построения вспомогательного канала. Не возвращает значение, если изменения не требуются.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Настраиваемая конечная точка.</param>
        <param name="clientRuntime">Настраиваемая клиентская среда выполнения.</param>
        <summary>Реализует изменение или расширение клиента по всей конечной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> реализуется для просмотра, изменения или добавления пользовательских оснасток расширения в клиентскую среду выполнения для всех сообщений, используемых с конечной точкой, или для конкретных операций. Сведения о том, какие настройки можно выполнить с объектом клиентской среды выполнения, см. в разделах <xref:System.ServiceModel.Dispatcher.ClientRuntime> и <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Рекомендуется, чтобы метод <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> вызвал исключение <xref:System.NotImplementedException>, если поведение предназначено для использования только в приложении службы.  
  
 Поскольку другие поведения, возможно, уже добавили или удалили некоторые операции из среды выполнения, нет никакой гарантии, что в описании имеется такое же количество операций, что и количество объектов <xref:System.ServiceModel.Dispatcher.DispatchOperation> в свойстве <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Конечная точка, предоставляющая контракт.</param>
        <param name="endpointDispatcher">Изменяемый или расширяемый диспетчер конечной точки.</param>
        <summary>Реализует изменение или расширение службы по всей конечной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> реализуется для просмотра, изменения или расширения среды выполнения службы для всех сообщений или для конкретных операций в конечной точке. Сведения о том, какие настройки можно выполнить в приложении службы, см. в разделах <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> и <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Рекомендуется, чтобы метод <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> вызвал исключение <xref:System.NotImplementedException>, если поведение предназначено для использования только в клиентском приложении.  
  
 Следует учесть, что при использовании контракта обратного вызова (один оператор на каждом направлениИ) в описании могут существовать две операции с одним именем. При выполнении итерации по операциям необходимо скоординировать направление сообщения между конечной точкой <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> и тем, что возвращает свойство <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>.  
  
 Кроме того, поскольку другие поведения, возможно, уже добавили или удалили некоторые операции из среды выполнения, нет никакой гарантии, что в описании имеется такое же количество операций, что и количество объектов <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> в свойстве <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере кода показана реализация поведения конечной точки, которая добавляет объект <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> в приложение службы. В данном случае класс `EndpointBehaviorMessageInspector` реализует <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>, чтобы проверить входящие и исходящие сообщения, интерфейс<xref:System.ServiceModel.Description.IEndpointBehavior> для вставки класса инспектора в систему проверки всех конечных точек, к которым применимы поведения, а также <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, чтобы включить поддержку поведений инспектора сообщений, используя файл конфигурации приложения.  
  
 Сначала необходимо реализовать инспектор сообщений.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 В следующем примере кода показано использование метода <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> для добавления инспектора сообщений в свойство <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 В следующем примере кода показана реализация <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, чтобы разрешить использование поведения инспектора сообщений из файла конфигурации.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Наконец, в следующем файле конфигурации показано, как можно использовать предыдущий пример из конфигурации.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Проверяемая конечная точка.</param>
        <summary>Реализуйте для подтверждения соответствия конечной точки намеченным критериям.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Рекомендуется реализовать метод <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>, чтобы изучить структуру для подтверждения любого набора критериев. Для использования этого метода необязательно выполнять какие-либо настройки в <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> или <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>. Если конечная точка прошла проверки, выполняется возврат; в противном случае вызывается исключение.  
  
 Например, метод <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> можно использовать для подтверждения того, что все конечные точки используют одобренные корпоративные привязки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
