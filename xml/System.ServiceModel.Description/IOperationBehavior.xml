<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2f195f38b2a9f71c444f7c1736f6ade9c35e8f8" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70403590" /></Metadata><TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Реализует методы, которые могут использоваться для поведения во время выполнения для операции в службе или клиентском приложении.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте интерфейс <xref:System.ServiceModel.Description.IOperationBehavior> для изменения, проверки или расширения некоторого аспекта выполнения для всей операции на уровне клиентских приложений или служб.  
  
-   Метод <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> используется для предоставления элементов привязки с пользовательскими данными в среде выполнения для разрешения привязок для поддержки настраиваемых поведений.  
  
-   Метод <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> используется для изменения, проверки или вставки расширений в диспетчер клиента в клиентском приложении.  
  
-   Метод <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> используется для изменения, проверки или вставки расширений в выполнение всей операции в службе.  
  
-   Можно использовать метод <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A>, чтобы подтвердить соответствие <xref:System.ServiceModel.Description.OperationDescription> конкретным требованиям. Метод может использоваться для проверки включения определенных параметров конфигурации для операции, поддержки конкретных возможностей и соответствия другим требованиям.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior>объекты могут использовать любой из этих методов, но часто важен только один из них. в таких случаях неиспользуемые методы могут возвращать, не выполняя никаких действий.  
  
> [!NOTE]
>  Все методы <xref:System.ServiceModel.Description.IOperationBehavior> передают в качестве параметра объект <xref:System.ServiceModel.Description.OperationDescription>. Данный параметр используется только для изучения; при изменении объекта <xref:System.ServiceModel.Description.OperationDescription> поведение выполнения не определено.  
  
 Объекты <xref:System.ServiceModel.Description.IOperationBehavior> обычно используются для доступа к различным свойствам объекта <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> в службе и свойствам объекта <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> в приложении клиента.  
  
 Обычно разработчик сначала проверяет точки расширения, чтобы определить какая настройка подходит для приложения, а затем реализует эту настройку в соответствующей области. Например, объекты <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> могут выполнять настройки для всех сообщений во всей службе, а объекты <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> могут выполнять настройки для всех сообщений определенного контракта и т. д. Описание различных доступных свойств и настроек см. в разделе [Расширение ServiceHost и уровня модели службы](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 После принятия решения по настройке (а также интерфейса настройки, реализованного при необходимости) и <xref:System.ServiceModel.Description.IOperationBehavior> является соответствующей областью настройки, настройка должна быть вставлена в среду выполнения Windows Communication Foundation (WCF). путем реализации <xref:System.ServiceModel.Description.IOperationBehavior> и добавления поведения операции в среду выполнения.  
  
 Существует два способа добавления <xref:System.ServiceModel.Description.IOperationBehavior> в среду выполнения:  
  
-   Программно добавить пользовательское поведение операции в свойство <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> перед открытием узла службы (в службе) или фабрики канала (в клиентском приложении).  
  
-   Добавить поведение с помощью пользовательского атрибута.  
  
 Чтобы выполнить задачу настройки службы, для которой она предназначена, необходимо добавить объект <xref:System.ServiceModel.Description.IOperationBehavior> в свойство <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> перед построением службы среды выполнения, что происходит, когда метод <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> вызывается на объекте <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Чтобы выполнить задачу настройки клиента, следует добавить объект <xref:System.ServiceModel.Description.IOperationBehavior> в свойство <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> перед вызовом метода <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> или метода <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> на <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Хотя поведение операции предназначено для обеспечения простого доступа к среде выполнения в области отдельной операции, можно получить доступ к среде выполнения в большей области, обратившись к родительскому объекту среды выполнения.  
  
   
  
## Examples  
 В следующем примере кода показана реализация интерфейса <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType>, который осуществляет запись в консоль при вызове инспектора в операции. Эта настройка может быть присоединена только к объекту <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> или объекту <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>, и поэтому обычно вставляется поведением операции.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 В следующем примере показано, как поведение операции присоединяет инспектор параметров к среде выполнения.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Проверяемая операция. Использовать только для проверки. Если изменяется описание операции, то результаты будут не определены.</param>
        <param name="bindingParameters">Коллекция объектов, необходимых элементам привязки для поддержки поведения.</param>
        <summary>Реализуйте для передачи данных привязкам во время выполнения в целях поддержки пользовательских режимов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте метод <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A>, чтобы предоставить элементам привязки дополнительные объекты, которые им необходимы для поддержки поведения операции. При добавлении параметров привязки привязка может размещать и обрабатывать данные объекты во время создания прослушивателя канала или фабрики канала. Как правило, метод <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> реализуется для передачи сведений об операции в пользовательский элемент привязки для правильного построения вспомогательного канала. Не возвращает значение, если изменения не требуются.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Проверяемая операция. Использовать только для проверки. Если изменяется описание операции, то результаты будут не определены.</param>
        <param name="clientOperation">Объект времени выполнения, предоставляющий свойства настройки для операции, описываемой объектом <paramref name="operationDescription" />.</param>
        <summary>Реализует изменение или расширение клиента во всей операции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> реализуется для просмотра, изменения или добавления пользовательского расширения в клиентскую среду выполнения для всех сообщений, используемых с конкретной операцией. Сведения о том, какие настройки можно выполнить с объектом клиентской среды выполнения, см. в разделах <xref:System.ServiceModel.Dispatcher.ClientRuntime> и <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Рекомендуется, чтобы метод <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> вызвал исключение <xref:System.NotImplementedException>, если поведение предназначено для использования только в приложении службы.  
  
   
  
## Examples  
 В следующем примере кода показана реализация интерфейса <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType>, который осуществляет запись в консоль при вызове инспектора в операции. Эта настройка может быть присоединена только к объекту <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> или объекту <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>, и поэтому обычно вставляется поведением операции.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 В следующем примере показано, как поведение операции присоединяет инспектор параметров к среде выполнения.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Проверяемая операция. Использовать только для проверки. Если изменяется описание операции, то результаты будут не определены.</param>
        <param name="dispatchOperation">Объект времени выполнения, предоставляющий свойства настройки для операции, описываемой объектом <paramref name="operationDescription" />.</param>
        <summary>Реализует изменение или расширение службы во всей операции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> реализуется для просмотра, изменения или расширения среды выполнения службы для всех сообщений или для конкретной операции. Сведения о том, какие настройки можно выполнить в приложении службы, см. в разделах <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> и <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Рекомендуется, чтобы метод <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> вызвал исключение <xref:System.NotImplementedException>, если поведение предназначено для использования только в клиентском приложении.  
  
   
  
## Examples  
 В следующем примере кода показана реализация интерфейса <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType>, который осуществляет запись в консоль при вызове инспектора в операции. Эта настройка может быть присоединена только к объекту <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> или объекту <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>, и поэтому обычно вставляется поведением операции.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 В следующем примере показано, как поведение операции присоединяет инспектор параметров к среде выполнения.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Проверяемая операция. Использовать только для проверки. Если изменяется описание операции, то результаты будут не определены.</param>
        <summary>Рекомендуется реализовать, чтобы подтвердить соответствие операции определенным критериям.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Рекомендуется реализовать метод <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A>, чтобы изучить структуру для подтверждения любого набора критериев. Для использования этого метода необязательно выполнять какие-либо настройки в <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> или <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A>. Если операция прошла проверку, выполняется возврат; в противном случае вызывается исключение.  
  
 Например, метод <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> можно использовать, чтобы гарантировать что операция авторизована.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
