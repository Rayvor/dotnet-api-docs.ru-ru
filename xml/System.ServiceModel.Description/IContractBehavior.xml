<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="486bd6b1f9a7dcc53c871dccf11df7892a4898a5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75063894" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Реализует методы, которые могут использоваться для расширения поведения времени выполнения для контракта приложения службы или клиентского приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализует интерфейс <xref:System.ServiceModel.Description.IContractBehavior> для изменения, проверки или расширения некоторых аспектов выполнения для всего контракта на уровне приложения. В отличие от объектов <xref:System.ServiceModel.Description.IServiceBehavior> и <xref:System.ServiceModel.Description.IEndpointBehavior>, объекты <xref:System.ServiceModel.Description.IContractBehavior> не могут добавляться в среду выполнения с помощью файла конфигурации приложения; они могут добавляться только программным способом или с использованием атрибута.  
  
 Дополнительные сведения о выборе между службами, конечной точкой и поведением контрактов см. [в разделе Настройка и расширение среды выполнения с помощью поведений](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Метод <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> используется для предоставления элементов привязки с пользовательскими данными для поддержки поведения.  
  
-   Метод <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> используется для изменения, проверки или вставки расширений в контракт в клиентском приложении.  
  
-   Метод <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> используется для изменения, проверки или вставки расширений в контракт в приложении службы.  
  
-   Метод <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> используется для обеспечения поддержки определенных возможностей контрактом.  
  
 Объекты <xref:System.ServiceModel.Description.IContractBehavior> могут использовать любые из этих методов, но часто важен только один; в таких случаях неиспользуемые методы могут не возвращать какого-либо значения.  
  
> [!NOTE]
>  Все методы <xref:System.ServiceModel.Description.IContractBehavior> в качестве параметров передают <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> и <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>. Эти параметры нужны для проверки; если производится изменение объектов, поведение выполнения является неопределенным.  
  
 типы <xref:System.ServiceModel.Description.IContractBehavior> могут использоваться либо в службе, либо на клиенте, либо в обоих случаях. Чтобы выполнить задачу настройки для службы, объект <xref:System.ServiceModel.Description.IContractBehavior> должен быть добавлен к свойству <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> до построения среды выполнения службы, которое происходит, когда вызывается метод <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> в объекте <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Это можно сделать двумя способами.  
  
 Первым способом является программное добавление пользовательского поведения контракта в свойство <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> перед вызовом метода <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> в объекте <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. В этом случае поведение применяется для всех сообщений, проходящих по этому контракту в любой конечной точке.  
  
> [!NOTE]
>  Поведение применяется ко всем контрактам одинакового типа. Например, если программно добавить один тип контракта к нескольким конечным точкам, поведение изменит все конечные точки, относящиеся к одному объекту контракта.  
  
 Вторым методом является создание пользовательского атрибута, который реализует <xref:System.ServiceModel.Description.IContractBehavior>, и применение его к следующим объектам:  
  
-   Интерфейс контракта. В этом случае поведение применяется ко всем контрактам этого типа в любой конечной точке.  
  
-   Класс службы.  В этом случае поведение применяется ко всем конечным точкам, независимо от контракта.  
  
-   Класс обратного вызова.  В этом случае поведение применяется к конечной точке дуплексного клиента.  
  
 Поведение во втором подходе немного отличается, если пользовательский атрибут также реализует <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. В этом случае поведение выглядит следующим образом.  
  
-   Интерфейс контракта. В этом случае поведение применяется ко всем контрактам этого типа в любой конечной точке, а Windows Communication Foundation (WCF) игнорирует значение свойства <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>.  
  
-   Класс службы.  В этом случае поведение применяется только к конечным точкам, контракт которых имеет значение, равное значению свойства <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>.  
  
-   Класс обратного вызова.  В этом случае поведение применяется к конечной точке дуплексного клиента, а WCF игнорирует значение свойства <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>.  
  
 Чтобы выполнить задачу настройки на клиенте, для которого она предназначена, объект <xref:System.ServiceModel.Description.IContractBehavior> должен быть добавлен к свойству <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> до построения клиентской среды выполнения, которое происходит при вызове <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>. Это можно сделать двумя способами.  
  
-   Программным способом добавить пользовательское поведение контракта в свойство <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> до вызова <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>.  
  
-   Создать пользовательский атрибут, который также реализует <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Дополнительные сведения о программном добавлении типов <xref:System.ServiceModel.Description.IContractBehavior> в клиент или приложение службы см. в разделе [Настройка и расширение среды выполнения с помощью поведений](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 В следующем примере кода предполагается наличие пользовательской реализации <xref:System.ServiceModel.Dispatcher.IInstanceProvider> с именем `ObjectProviderBehavior`, которая обеспечивает «одноэлементное» поведение; метод всегда возвращает один и тот же экземпляр службы и не использует его повторно.  
  
 Чтобы вставить настройку поставщика экземпляров, в этом примере показано, как реализовать пользовательский атрибут (`SingletonBehaviorAttribute`), который реализует <xref:System.ServiceModel.Description.IContractBehavior> для вставки пользовательского поставщика экземпляров службы. В нем также реализуется интерфейс <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с контрактом `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Изменяемое описание контракта.</param>
        <param name="endpoint">Изменяемая конечная точка.</param>
        <param name="bindingParameters">Объекты, необходимые элементам привязки для поддержки этого режима.</param>
        <summary>Настраивает элементы привязки для поддержки поведения контракта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализует метод <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> для предоставления элементам привязки дополнительных объектов, которые им необходимы для поддержки поведения контракта.  
  
 Этот метод вызывается один раз для каждой конечной точки, которая использует указанный контракт службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Описание контракта, для которого предназначено расширение.</param>
        <param name="endpoint">Конечная точка.</param>
        <param name="clientRuntime">Среда выполнения клиента.</param>
        <summary>Реализует изменение или расширение клиента для всего контракта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> реализуется для просмотра, изменения или добавления пользовательских расширений в клиентскую среду выполнения для всех сообщений или для одной конкретной операции. Сведения о том, какие настройки можно выполнить с объектом клиентской среды выполнения, см. в разделах <xref:System.ServiceModel.Dispatcher.ClientRuntime> и <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Метод <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> может вызывать исключение <xref:System.NotImplementedException>, если поведение предназначено для использования только в приложении службы.  
  
 Этот метод вызывается один раз для каждой конечной точки, которая использует указанный контракт службы.  
  
 Обратите внимание, что в описании могут быть две операции с одинаковым именем (одна в каждом направлении), поэтому если нужно выполнить перебор операций, в которых контракт является дуплексным, необходимо сопоставить направление сообщений между средой <xref:System.ServiceModel.Dispatcher.ClientRuntime> конечной точки и средой выполнения, возвращаемой свойством <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A>.  
  
 Поскольку другие поведения, возможно, уже добавили или удалили некоторые операции из среды выполнения, нет никакой гарантии, что в описании имеется такое же количество операций, что и количество объектов <xref:System.ServiceModel.Dispatcher.ClientOperation> в свойстве <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A>.  
  
   
  
## Examples  
 В следующем примере кода предполагается наличие пользовательской реализации <xref:System.ServiceModel.Dispatcher.IInstanceProvider> с именем `ObjectProviderBehavior`, которая обеспечивает «одноэлементное» поведение; метод всегда возвращает один и тот же экземпляр службы и не использует его повторно.  
  
 Чтобы вставить настройку поставщика экземпляров, в этом примере показано, как реализовать пользовательский атрибут (`SingletonBehaviorAttribute`), который реализует <xref:System.ServiceModel.Description.IContractBehavior> для вставки пользовательского поставщика экземпляров службы. В нем также реализуется интерфейс <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с контрактом `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Изменяемое описание контракта.</param>
        <param name="endpoint">Конечная точка, предоставляющая контракт.</param>
        <param name="dispatchRuntime">Среда выполнения распределения, которая контролирует выполнение службы.</param>
        <summary>Реализует изменение или расширение клиента для всего контракта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> реализуется для просмотра, изменения или добавления пользовательских расширений в среду выполнения служб для всех сообщений в конкретном контракте или для одной конкретной операции в этом контракте. Сведения о том, какие настройки можно выполнить в приложении службы, см. в разделах <xref:System.ServiceModel.Dispatcher.DispatchRuntime> и <xref:System.ServiceModel.Dispatcher.DispatchOperation>.  
  
 Метод <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> может вызывать исключение <xref:System.NotImplementedException>, если поведение предназначено для использования только в клиентском приложении.  
  
 Этот метод вызывается один раз для каждой конечной точки, которая использует указанный контракт службы.  
  
 Обратите внимание, что в описании могут быть две операции с одинаковым именем (одна в каждом направлении), поэтому если нужно выполнить перебор операций, в которых контракт является дуплексным, необходимо сопоставить направление сообщений между средой <xref:System.ServiceModel.Dispatcher.DispatchRuntime> конечной точки и средой выполнения, возвращаемой свойством <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A>.  
  
 Кроме того, поскольку другие поведения, возможно, уже добавили или удалили некоторые операции из среды выполнения, нет никакой гарантии, что в описании имеется такое же количество операций, что и количество объектов <xref:System.ServiceModel.Dispatcher.DispatchOperation> в свойстве <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
   
  
## Examples  
 В следующем примере кода предполагается наличие пользовательской реализации <xref:System.ServiceModel.Dispatcher.IInstanceProvider> с именем `ObjectProviderBehavior`, которая обеспечивает «одноэлементное» поведение; метод всегда возвращает один и тот же экземпляр службы и не использует его повторно.  
  
 Чтобы вставить настройку поставщика экземпляров, в этом примере показано, как реализовать пользовательский атрибут (`SingletonBehaviorAttribute`), который реализует <xref:System.ServiceModel.Description.IContractBehavior> для вставки пользовательского поставщика экземпляров службы. В нем также реализуется интерфейс <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, который связывает его использование с контрактом `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Контракт, который необходимо проверить.</param>
        <param name="endpoint">Проверяемая конечная точка.</param>
        <summary>Реализуется для подтверждения того, что контракт и конечная точка могут поддерживать поведение контракта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> реализуется для подтверждения того, что описание контракта достаточно для поддержки пользовательского поведения контракта. Реализации могут проверять описание и либо создать значение, либо не возвратить никакого значения.  
  
 Этот метод вызывается один раз для каждой конечной точки, которая использует указанный контракт службы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
