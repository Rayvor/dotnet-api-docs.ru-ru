<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d28bc33ed186a5405232df5935ab3c557665cf54" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69104769" /></Metadata><TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <TypeSignature Language="F#" Value="type IPolicyImportExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Определяет метод для объектов, которые импортируют утверждения настраиваемой политики о привязках.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте интерфейс <xref:System.ServiceModel.Description.IPolicyImportExtension> для поиска сведений языка WSDL, предоставленных определенной конечной точкой для утверждений пользовательской политики о возможностях и требованиях конечной точки. Обычно средство импорта политики производит поиск конкретного утверждения и вставляет элемент привязки, настраивает элемент привязки или изменяет контракт для поддержки требований утверждения.  
  
 В отличие от аналога, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> не требует реализации объектом <xref:System.ServiceModel.Channels.BindingElement>; его можно загрузить с помощью раздела конфигурации клиента, показанного в разделе «Пример», или программным образом путем добавления к конструктору <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType>.  
  
 Windows Communication Foundation (WCF) передает в <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> метод <xref:System.ServiceModel.Description.MetadataImporter> два объекта — и <xref:System.ServiceModel.Description.PolicyConversionContext>. Обычно в объекте <xref:System.ServiceModel.Description.PolicyConversionContext> уже содержатся утверждения политики для каждой области привязки.  
  
 Реализация <xref:System.ServiceModel.Description.IPolicyImportExtension> выполняет следующие действия:  
  
1.  Располагает утверждение настраиваемой политики, за которое она отвечает, путем вызова методов <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> или <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A>, в зависимости от области.  
  
2.  Удаляет утверждение политики из коллекции утверждений. Метод <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> располагает, возвращает и удаляет утверждение за один шаг.  
  
3.  Измените стек привязок или контракт путем добавления необходимого настраиваемого объекта <xref:System.ServiceModel.Channels.BindingElement> в свойство <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> или путем изменения свойства <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType>.  
  
 Шаг 2 является важным. После вызова всех средств импорта политик WCF проверяет существование любых утверждений политики, которые остаются. Если он существует, WCF предполагает, что импорт политики завершился неудачно и не импортировал связанную привязку.  
  
> [!IMPORTANT]
>  Поставщик вредоносных метаданных может попытаться отправить неправильно сформированное XML как часть метаданных в попытке воспользоваться средством импорта политики. Настоятельно рекомендуется, чтобы средства импорта настраиваемой политики были надежными для всех форм XML, передача которых возможна.  
  
 Настраиваемые реализации <xref:System.ServiceModel.Description.MetadataImporter> должны реализовать свой собственный объект <xref:System.ServiceModel.Description.PolicyConversionContext> для извлечения утверждений политики, прикрепленных к формату настраиваемых метаданных.  
  
 При необходимости в экспорте и импорте настраиваемых элементов WSDL, не являющихся утверждениями политики, см. разделы <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> и <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Вы можете использовать средства импорта и экспорта настраиваемой политики с помощью [служебной программы метаданных ServiceModel (Svcutil. exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) , используя те же элементы конфигурации в файле конфигурации и `/svcutilConfig:<configFile>` параметр.  
  
   
  
## Examples  
 В следующем примере кода показано применение метода <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> для расположения, возвращения и удаления утверждения за один шаг.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 В следующем примере кода показан файл конфигурации клиентского приложения для загрузки средства импорта настраиваемой политики при вызове <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType>.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 В следующем примере кода показано применение <xref:System.ServiceModel.Description.MetadataResolver> для загрузки и разрешения метаданных в объекты описания.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ImportPolicy : System.ServiceModel.Description.MetadataImporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="iPolicyImportExtension.ImportPolicy (importer, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="importer">Используемый объект <see cref="T:System.ServiceModel.Description.MetadataImporter" />.</param>
        <param name="context">Объект <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />, содержащий как утверждения политики, которые могут быть импортированы, так и коллекции элементов привязки, в которые могут быть добавлены реализующие элементы привязки.</param>
        <summary>Определяет метод, который может импортировать утверждения пользовательской политики и добавлять реализующие элементы привязки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализуйте метод `ImportPolicy`, чтобы получить утверждения политики и выполнить изменения импортированного контракта или привязки для поддержки утверждения. Обычно средство импорта политики отвечает на нахождение утверждения настраиваемой политики путем настройки или вставки элемента привязки в импортируемую привязку.  
  
 Windows Communication Foundation (WCF) передает в <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> метод <xref:System.ServiceModel.Description.MetadataImporter> два объекта — и <xref:System.ServiceModel.Description.PolicyConversionContext>. Обычно в объекте <xref:System.ServiceModel.Description.PolicyConversionContext> уже содержатся утверждения политики для каждой области привязки.  
  
 Реализация <xref:System.ServiceModel.Description.IPolicyImportExtension> выполняет следующие действия:  
  
1.  Располагает утверждение настраиваемой политики, за которое она отвечает, путем вызова методов <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> или <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A>, в зависимости от области.  
  
2.  Удаляет утверждение политики из коллекции утверждений. Метод <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> располагает, возвращает и удаляет утверждение за один шаг.  
  
3.  Изменяет стек привязок или контракт путем добавления необходимого настраиваемого объекта <xref:System.ServiceModel.Channels.BindingElement> в свойство <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> или путем изменения свойства <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType>.  
  
 Шаг 2 является важным. После вызова всех средств импорта политик WCF проверяет существование любых утверждений политики, которые остаются. Если он существует, WCF предполагает, что импорт политики завершился неудачно и не импортировал связанную привязку.  
  
   
  
## Examples  
 В следующем примере кода показано применение метода <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> для расположения, возвращения и удаления утверждения за один шаг.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 В следующем примере кода показан файл конфигурации клиентского приложения для загрузки средства импорта настраиваемой политики при вызове <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType>.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 В следующем примере кода показано применение <xref:System.ServiceModel.Description.MetadataResolver> для загрузки и разрешения метаданных в объекты описания.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
