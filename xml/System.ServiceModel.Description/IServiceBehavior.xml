<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f180c5c844145924ad16b66d821004bfbce2f07" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70496690" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="793cf-101">Предоставляет механизм для изменения или вставки настраиваемых расширений в целые службы, включая <see cref="T:System.ServiceModel.ServiceHostBase" />.</span><span class="sxs-lookup"><span data-stu-id="793cf-101">Provides a mechanism to modify or insert custom extensions across an entire service, including the <see cref="T:System.ServiceModel.ServiceHostBase" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="793cf-102">Реализует <xref:System.ServiceModel.Description.IServiceBehavior> для изменения, проверки или расширения определенного аспекта выполнения для всей службы на уровне приложения.</span><span class="sxs-lookup"><span data-stu-id="793cf-102">Implement <xref:System.ServiceModel.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level:</span></span>  
  
-   <span data-ttu-id="793cf-103">Можно использовать метод <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> для изменения значений свойства времени выполнения или для вставки объектов настраиваемых расширений, например, обработчиков ошибок, перехватчиков параметров или сообщений, а также других объектов настраиваемых расширений.</span><span class="sxs-lookup"><span data-stu-id="793cf-103">Use the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span>  
  
-   <span data-ttu-id="793cf-104"><xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> Используйте метод для проверки описания, прежде чем Windows Communication Foundation (WCF) конструирует выполняющуюся службу, чтобы убедиться, что она может быть выполнена правильно.</span><span class="sxs-lookup"><span data-stu-id="793cf-104">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to examine the description before Windows Communication Foundation (WCF) constructs the executing service to confirm that it can execute properly.</span></span>  
  
-   <span data-ttu-id="793cf-105">Метод <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> используется для передачи в элемент привязки настраиваемых сведений для службы, чтобы обеспечить ее работу.</span><span class="sxs-lookup"><span data-stu-id="793cf-105">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly.</span></span>  
  
 <span data-ttu-id="793cf-106">Объекты <xref:System.ServiceModel.Description.IServiceBehavior> могут использовать любые из этих методов, но часто важен только один; в таких случаях неиспользуемые методы могут не возвращать никакого значения.</span><span class="sxs-lookup"><span data-stu-id="793cf-106"><xref:System.ServiceModel.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="793cf-107">Все методы <xref:System.ServiceModel.Description.IServiceBehavior> передают в качестве параметра объекты <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> и <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="793cf-107">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="793cf-108">Этот параметр используется только для проверки; при изменении объекта <xref:System.ServiceModel.Description.ServiceDescription>, расширение функциональности выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="793cf-108">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="793cf-109">Чтобы выполнить настройку задачи, для которой предназначен этот параметр, необходимо добавить объект <xref:System.ServiceModel.Description.IServiceBehavior> в свойство <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> перед построением среды выполнения службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-109">To perform the customization task for which it is intended, the <xref:System.ServiceModel.Description.IServiceBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime.</span></span> <span data-ttu-id="793cf-110">Это можно сделать тремя способами:</span><span class="sxs-lookup"><span data-stu-id="793cf-110">There are three ways to do this:</span></span>  
  
-   <span data-ttu-id="793cf-111">Программно добавить пользовательское расширение функциональности настраиваемой службы в свойство <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> перед тем, как метод <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> вызывается на объекте <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="793cf-111">Programmatically add the custom service behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span>  
  
-   <span data-ttu-id="793cf-112">Создать настраиваемый атрибут, который реализует <xref:System.ServiceModel.Description.IServiceBehavior> и использует его для маркировки классов службы, которые следует изменить.</span><span class="sxs-lookup"><span data-stu-id="793cf-112">Create a custom attribute that implements <xref:System.ServiceModel.Description.IServiceBehavior> and use it to mark service classes that are to be modified.</span></span> <span data-ttu-id="793cf-113">При создании <xref:System.ServiceModel.ServiceHost> объекта WCF использует отражение для обнаружения атрибутов типа службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-113">When a <xref:System.ServiceModel.ServiceHost> object is constructed, WCF uses reflection to discover the attributes on the service type.</span></span> <span data-ttu-id="793cf-114">Любые атрибуты, реализующие <xref:System.ServiceModel.Description.IServiceBehavior>, добавляются в коллекцию расширений функциональности в <xref:System.ServiceModel.Description.ServiceDescription>.</span><span class="sxs-lookup"><span data-stu-id="793cf-114">If any attributes implement <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>.</span></span>  
  
-   <span data-ttu-id="793cf-115">Примените расширение для класса <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, чтобы включить поддержку спецификаций расширений функциональности в приложении или файле конфигурации.</span><span class="sxs-lookup"><span data-stu-id="793cf-115">Extend the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file.</span></span> <span data-ttu-id="793cf-116">Дополнительные сведения см. в разделе «Пример».</span><span class="sxs-lookup"><span data-stu-id="793cf-116">See the Example section for more information.</span></span>  
  
 <span data-ttu-id="793cf-117">Примерами поведения службы в WCF <xref:System.ServiceModel.ServiceBehaviorAttribute> являются атрибут <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>,, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> и <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> поведение.</span><span class="sxs-lookup"><span data-stu-id="793cf-117">Examples of service behaviors in WCF include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="793cf-118">В следующем образце кода показано использование расширений функциональности службы, заданных в файле конфигурации, для вставки настраиваемого обработчика ошибок в приложение службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-118">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="793cf-119">В данном примере обработчик ошибок выполняет перехват всех исключений и преобразование их в настраиваемые ошибки SOAP `GreetingFault`, которые затем возвращаются клиенту.</span><span class="sxs-lookup"><span data-stu-id="793cf-119">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="793cf-120">Следующая реализация <xref:System.ServiceModel.Description.IServiceBehavior> не добавляет объекты параметра привязки, но добавляет настраиваемый объект <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> в каждое свойство <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> и проверяет наличие для каждой операции службы, к которой применяются расширения функциональности службы, <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> типа `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="793cf-120">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="793cf-121">В данном примере класс расширений функциональности также реализует <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, который включает расширения функциональности службы для вставки путем их использования в файле конфигурации приложения, как показано в следующем примере кода.</span><span class="sxs-lookup"><span data-stu-id="793cf-121">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="793cf-122">Описание службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-122">The service description of the service.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="793cf-123">Ведущее приложение службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-123">The host of the service.</span></span></param>
        <param name="endpoints"><span data-ttu-id="793cf-124">Конечные точки службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-124">The service endpoints.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="793cf-125">Настраиваемые объекты, к которым имеют доступ элементы привязки.</span><span class="sxs-lookup"><span data-stu-id="793cf-125">Custom objects to which binding elements have access.</span></span></param>
        <summary><span data-ttu-id="793cf-126">Предоставляет возможности передачи настраиваемых данных в элементы привязки для предоставления поддержки реализации контракта.</span><span class="sxs-lookup"><span data-stu-id="793cf-126">Provides the ability to pass custom data to binding elements to support the contract implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="793cf-127">Метод <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> можно использовать для добавления объектов настраиваемых данных в коллекцию `parameters`, которая может использоваться элементами привязки для получения дополнительных сведений, что обеспечивает поддержку контракта в данных элементах.</span><span class="sxs-lookup"><span data-stu-id="793cf-127">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to add custom data objects to the `parameters` collection that binding elements can use to acquire extra information to enable them to support the contract.</span></span>  
  
 <span data-ttu-id="793cf-128">Данный метод вызывается один раз для каждого универсального кода ресурса (URI) ожидания передачи данных.</span><span class="sxs-lookup"><span data-stu-id="793cf-128">This method is called once for each listen URI.</span></span> <span data-ttu-id="793cf-129">Например, если служба содержит четыре конечных точки, и две из них имеют одинаковый универсальный код ресурса (URI) ожидания передачи данных, этот метод вызывается трижды.</span><span class="sxs-lookup"><span data-stu-id="793cf-129">For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</span></span> <span data-ttu-id="793cf-130">Это обусловлено тем, что `bindingParameters` использует в качестве конечного объекта каждый стек канала, при этом для каждого универсального кода ресурса (URI) ожидания передачи данных существует один стек канала.</span><span class="sxs-lookup"><span data-stu-id="793cf-130">The reason is that the `bindingParameters` target each channel stack and there is one channel stack for each listen URI.</span></span> <span data-ttu-id="793cf-131">Поскольку каждый вызов получает данные конечные точки на этом универсальном коде ресурса (URI) ожидания передачи данных, один из двух вызовов получает один <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, а второй вызов получает коллекцию из двух объектов <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="793cf-131">Because each call receives those endpoints at that listen URI, two calls each get a single <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, and one call gets a collection of two <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="793cf-132">Все методы <xref:System.ServiceModel.Description.IServiceBehavior> передают в качестве параметра объекты <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> и <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="793cf-132">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="793cf-133">Этот параметр используется только для проверки и вставки настроек; при изменении объекта <xref:System.ServiceModel.Description.ServiceDescription>, расширение функциональности выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="793cf-133">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="793cf-134">Описание службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-134">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="793cf-135">Ведущее приложение, построение которого выполняется в настоящее время.</span><span class="sxs-lookup"><span data-stu-id="793cf-135">The host that is currently being built.</span></span></param>
        <summary><span data-ttu-id="793cf-136">Предоставляет возможности для изменения значений свойства времени выполнения или для вставки объектов настраиваемых расширений, например, обработчиков ошибок, перехватчиков параметров или сообщений, а также других объектов настраиваемых расширений.</span><span class="sxs-lookup"><span data-stu-id="793cf-136">Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="793cf-137">Реализует метод <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> для проверки или изменения объекта <xref:System.ServiceModel.ServiceHostBase>, который создается для обеспечения поддержки определенных настраиваемых сценариев выполнения.</span><span class="sxs-lookup"><span data-stu-id="793cf-137">Implement the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to inspect or modify the <xref:System.ServiceModel.ServiceHostBase> object that is being constructed in order to support some custom execution scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="793cf-138">Все методы <xref:System.ServiceModel.Description.IServiceBehavior> передают в качестве параметра объекты <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> и <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="793cf-138">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="793cf-139">Этот параметр используется только для проверки и вставки настроек; при изменении объекта <xref:System.ServiceModel.Description.ServiceDescription>, расширение функциональности выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="793cf-139">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="793cf-140">В следующем образце кода показано использование расширений функциональности службы, заданных в файле конфигурации, для вставки настраиваемого обработчика ошибок в приложение службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-140">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="793cf-141">В данном примере обработчик ошибок выполняет перехват всех исключений и преобразование их в настраиваемые ошибки SOAP `GreetingFault`, которые затем возвращаются клиенту.</span><span class="sxs-lookup"><span data-stu-id="793cf-141">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="793cf-142">Следующая реализация <xref:System.ServiceModel.Description.IServiceBehavior> не добавляет объекты параметра привязки, но добавляет настраиваемый объект <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> в каждое свойство <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> и проверяет наличие для каждой операции службы, к которой применяются расширения функциональности службы, <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> типа `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="793cf-142">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="793cf-143">В данном примере класс расширений функциональности также реализует <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, который включает расширения функциональности службы для вставки путем их использования в файле конфигурации приложения, как показано в следующем примере кода.</span><span class="sxs-lookup"><span data-stu-id="793cf-143">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="793cf-144">Описание службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-144">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="793cf-145">Ведущее приложение службы, которое создается в настоящий момент.</span><span class="sxs-lookup"><span data-stu-id="793cf-145">The service host that is currently being constructed.</span></span></param>
        <summary><span data-ttu-id="793cf-146">Предоставляет возможности проверки ведущего приложения и описания службы, чтобы подтвердить готовность службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-146">Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="793cf-147">Можно использовать метод <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> для подтверждения готовности текущей службы к выполнению в соответствии с заданным сценарием.</span><span class="sxs-lookup"><span data-stu-id="793cf-147">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to confirm whether the current service can execute properly according to your scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="793cf-148">Все методы <xref:System.ServiceModel.Description.IServiceBehavior> передают в качестве параметра объекты <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> и <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="793cf-148">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="793cf-149">Этот параметр используется только для проверки и вставки настроек; при изменении объекта <xref:System.ServiceModel.Description.ServiceDescription>, расширение функциональности выполнения не определено.</span><span class="sxs-lookup"><span data-stu-id="793cf-149">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="793cf-150">В следующем образце кода показано использование расширений функциональности службы, заданных в файле конфигурации, для вставки настраиваемого обработчика ошибок в приложение службы.</span><span class="sxs-lookup"><span data-stu-id="793cf-150">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="793cf-151">В данном примере обработчик ошибок выполняет перехват всех исключений и преобразование их в настраиваемые ошибки SOAP `GreetingFault`, которые затем возвращаются клиенту.</span><span class="sxs-lookup"><span data-stu-id="793cf-151">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="793cf-152">Следующая реализация <xref:System.ServiceModel.Description.IServiceBehavior> не добавляет объекты параметра привязки, но добавляет настраиваемый объект <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> в каждое свойство <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> и проверяет наличие для каждой операции службы, к которой применяются расширения функциональности службы, <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> типа `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="793cf-152">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="793cf-153">В данном примере класс расширений функциональности также реализует <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, который включает расширения функциональности службы для вставки путем их использования в файле конфигурации приложения, как показано в следующем примере кода.</span><span class="sxs-lookup"><span data-stu-id="793cf-153">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
