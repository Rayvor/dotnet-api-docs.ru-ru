<Type Name="MetadataResolver" FullName="System.ServiceModel.Description.MetadataResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e73d59ea52f83adccf032114fdb8598f2c160d6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69152334" /></Metadata><TypeSignature Language="C#" Value="public static class MetadataResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MetadataResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.MetadataResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class MetadataResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataResolver abstract sealed" />
  <TypeSignature Language="F#" Value="type MetadataResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Извлекает и импортирует метаданные как объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте класс <xref:System.ServiceModel.Description.MetadataResolver>, чтобы быстро импортировать конечные точки для службы из метаданных. Этот класс загружает и преобразовывает метаданные в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>. Чтобы загрузить метаданные и обработать эти сведения как <xref:System.ServiceModel.Description.MetadataSet?displayProperty=nameWithType>, см. раздел <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере кода показано применение класса <xref:System.ServiceModel.Description.MetadataResolver> для возвращения метаданных как коллекции объектов <xref:System.ServiceModel.Description.ServiceEndpoint>, которые затем используются для подключения к экземпляру службы.  
  
 [!code-csharp[MetadataResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#1)]  
  
 В следующем примере кода показано применение <xref:System.ServiceModel.Description.MetadataResolver> для загрузки и возвращения метаданных как коллекции объектов <xref:System.ServiceModel.Description.ServiceEndpoint> с помощью запроса HTTP GET, а не WS-Transfer.  
  
 [!code-csharp[MetadataResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginResolve">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в коллекцию объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для этой службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эти методы начинают асинхронные версии методов <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="callback">Делегат асинхронного обратного вызова, который вызывается после завершения вызова.</param>
        <param name="asyncState">Состояние, связанное с асинхронным вызовом.</param>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов, с помощью заданного адреса и асинхронного состояния, и делегата.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию разрешения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных, а значением по умолчанию <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> является <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, контракт или обратный вызов имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение <see langword="null" /> или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (Type contract, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Type contract, class System.ServiceModel.EndpointAddress address, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contract As Type, address As EndpointAddress, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(Type ^ contract, System::ServiceModel::EndpointAddress ^ address, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : Type * System.ServiceModel.EndpointAddress * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contract, address, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contract">Контракт, для которого требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="callback">Делегат асинхронного обратного вызова, который вызывается после завершения вызова.</param>
        <param name="asyncState">Состояние, связанное с асинхронным вызовом.</param>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданного контракта, с помощью заданного адреса и асинхронного состояния, и делегата.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию разрешения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных, а значением по умолчанию <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> является <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 Этот метод требует указания типа контракта. Контракт можно указать, объявив интерфейс службы в клиентском коде или используя клиент WCF, созданный Svcutil. exe. При изменении интерфейса (например, при добавлении новой операции) необходимо обновить интерфейс в клиентском коде или создать новый клиент WCF. В противном случае возникает исключение. Например, в наличии имеется служба, реализующая контракт службы, называемый ICalculator и определяющий Add(), Sub(), Mult() и Div(). Вы создаете клиентское приложение и создаете клиент WCF. После чего к ICalculator добавляется метод Echo(). Если затем написать приложение, которое вызывает <xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29> без создания нового клиента WCF, вы получите следующее исключение.  
  
 `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, контракт или обратный вызов имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Description.MetadataExchangeClient client, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, client As MetadataExchangeClient, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Description::MetadataExchangeClient ^ client, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * System.ServiceModel.Description.MetadataExchangeClient * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, client, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="client"><see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> используется для извлечения метаданных.</param>
        <param name="callback">Делегат асинхронного обратного вызова, который вызывается после завершения вызова.</param>
        <param name="asyncState">Состояние, связанное с асинхронным вызовом.</param>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов, с помощью заданного адреса, <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />, асинхронного состояния и делегата.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию разрешения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значением по умолчанию <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> является <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, контракт, клиент или обратный вызов имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, mode, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="mode">Режим получения.</param>
        <param name="callback">Делегат асинхронного обратного вызова, который вызывается после завершения вызова.</param>
        <param name="asyncState">Состояние, связанное с асинхронным вызовом.</param>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов, с помощью заданного адреса, <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" />, асинхронного состояния и делегата.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию разрешения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, контракт или обратный вызов имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Type contract, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contract As Type, address As Uri, mode As MetadataExchangeClientMode, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(Type ^ contract, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : Type * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contract, address, mode, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contract">Контракт, для которого требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="mode">Режим получения.</param>
        <param name="callback">Делегат асинхронного обратного вызова, который вызывается после завершения вызова.</param>
        <param name="asyncState">Состояние, связанное с асинхронным вызовом.</param>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданного контракта, с помощью заданного адреса, <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" />, асинхронного состояния и делегата.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию разрешения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, контракт или обратный вызов имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.ServiceModel.Description.MetadataExchangeClient client, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, client As MetadataExchangeClient, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, System::ServiceModel::Description::MetadataExchangeClient ^ client, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * System.ServiceModel.Description.MetadataExchangeClient * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, mode, client, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="mode">Режим получения.</param>
        <param name="client"><see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> используется для извлечения метаданных.</param>
        <param name="callback">Делегат асинхронного обратного вызова, который вызывается после завершения вызова.</param>
        <param name="asyncState">Состояние, связанное с асинхронным вызовом.</param>
        <summary>Начинает асинхронный вызов, разрешающий адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов, с помощью заданного адреса <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /><see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" />, асинхронного состояния и делегата.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронную операцию разрешения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, контракт или обратный вызов имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndResolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection EndResolve (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection EndResolve(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndResolve (result As IAsyncResult) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ EndResolve(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="static member EndResolve : IAsyncResult -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.EndResolve result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Объект <see cref="T:System.IAsyncResult" />, полученный из вызова метода <see cref="Overload:System.ServiceModel.Description.MetadataResolver.BeginResolve" />.</param>
        <summary>Завершает асинхронный вызов для разрешения метаданных в коллекцию конечных точек.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для конечных точек, содержащихся в метаданных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Завершает асинхронный вызов для одного из методов <xref:System.ServiceModel.Description.MetadataResolver.BeginResolve%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resolve">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Загружает и разрешает адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
 Для всех синхронных и асинхронных методов `Resolve` возвращается пустая коллекция, если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <summary>Разрешает адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов с помощью заданного адреса метаданных.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для указанного контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных, а значением по умолчанию <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> является <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес или коллекция контрактов имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Type contract, class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contract As Type, address As EndpointAddress) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(Type ^ contract, System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member Resolve : Type * System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contract, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="contract">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <summary>Загружает и разрешает адрес метаданных в коллекцию объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданного контракта по заданному адресу.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для указанного контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A>, чтобы задать контракт и адрес метаданных для использования при загрузке и разрешении метаданных.  
  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных, а значением по умолчанию <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> является <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 Этот метод требует указания типа контракта. Контракт можно указать, объявив интерфейс службы в клиентском коде или используя клиент WCF, созданный Svcutil. exe. При изменении интерфейса (например, при добавлении новой операции) необходимо обновить интерфейс в клиентском коде или создать новый клиент WCF. В противном случае возникает исключение. Например, в наличии имеется служба, реализующая контракт службы, называемый ICalculator и определяющий Add(), Sub(), Mult() и Div(). Вы создаете клиентское приложение и создаете клиент WCF. После чего к ICalculator добавляется метод Echo(). Если затем написать приложение, которое вызывает <xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29> без создания нового клиента WCF, вы получите следующее исключение.  
  
 `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`.  
  
   
  
## Examples  
 В следующем примере кода показано применение класса <xref:System.ServiceModel.Description.MetadataResolver> для возвращения метаданных как коллекции объектов <xref:System.ServiceModel.Description.ServiceEndpoint>, которые затем используются для подключения к экземпляру службы.  
  
 [!code-csharp[MetadataResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес или контракт имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Description.MetadataExchangeClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, client As MetadataExchangeClient) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Description::MetadataExchangeClient ^ client);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * System.ServiceModel.Description.MetadataExchangeClient -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, client)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="client"><see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> используется для извлечения метаданных.</param>
        <summary>Разрешает адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов с помощью заданного адреса метаданных и <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для указанного контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значением по умолчанию <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> является <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, коллекция контрактов или клиент имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="mode">Режим получения.</param>
        <summary>Разрешает адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов с помощью заданного адреса и режима передачи.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для указанного контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес или коллекция контрактов имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Type contract, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contract As Type, address As Uri, mode As MetadataExchangeClientMode) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(Type ^ contract, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode);" />
      <MemberSignature Language="F#" Value="static member Resolve : Type * Uri * System.ServiceModel.Description.MetadataExchangeClientMode -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contract, address, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
      </Parameters>
      <Docs>
        <param name="contract">Контракт, для которого требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="mode">Режим получения.</param>
        <summary>Разрешает адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданного контракта с помощью заданного адреса и режима передачи.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для указанного контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A>, чтобы задать контракт, адрес и механизм загрузки для использования.  
  
 Параметры по умолчанию в <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> используются для извлечения метаданных.  
  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
   
  
## Examples  
 В следующем примере кода показано применение <xref:System.ServiceModel.Description.MetadataResolver> для загрузки и возвращения метаданных как коллекции объектов <xref:System.ServiceModel.Description.ServiceEndpoint> с помощью запроса HTTP GET, а не WS-Transfer.  
  
 [!code-csharp[MetadataResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес или контракт имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.ServiceModel.Description.MetadataExchangeClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, client As MetadataExchangeClient) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, System::ServiceModel::Description::MetadataExchangeClient ^ client);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * System.ServiceModel.Description.MetadataExchangeClient -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, mode, client)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
      </Parameters>
      <Docs>
        <param name="contracts">Контракты, для которых требуется загрузить и разрешить метаданные.</param>
        <param name="address">Адрес метаданных.</param>
        <param name="mode">Режим получения.</param>
        <param name="client"><see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> используется для извлечения метаданных.</param>
        <summary>Разрешает адрес метаданных в объекты <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для заданных контрактов с помощью заданного адреса, режима передачи и клиента передачи.</summary>
        <returns>Коллекция объектов <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> для указанного контракта.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы загрузить метаданные, не разрешая информацию в объекты <xref:System.ServiceModel.Description.ServiceEndpoint>, используйте <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> напрямую.  
  
> [!NOTE]
>  Если не была импортирована ни одна конечная точка или ни одна из конечных точек не соответствует контракту, возвращается пустая коллекция. Если возвращается пустая коллекция, записывается трассировка предупреждений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Адрес, коллекция контрактов или клиент имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="contracts" /> пуст, по крайней мере один член параметра <paramref name="contracts" /> имеет значение «null» или параметр <paramref name="contracts" /> содержит несколько контрактов с совпадающими именами и пространствами имен.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
