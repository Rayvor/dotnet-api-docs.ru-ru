<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8c0f60588168ba2ca37bd1927706f957d6bf332" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69276080" /></Metadata><TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Обеспечивает поддержку строго типизированных ресурсов. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, ресурсы разделяются кодом из содержимого в приложении. Создание и использование этих ресурсов упрощает разработку локализуемых приложений. В .NET Framework ресурсы обычно используются с помощью <xref:System.Resources.ResourceManager> класса, который содержит методы, обеспечивающие доступ к ресурсам, зависящим от языка и региональных параметров, во время выполнения. Дополнительные сведения о создании и использовании ресурсов см. в разделе [ресурсы в классических приложениях](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Поддержка строго типизированных ресурсов — это функция времени компиляции, которая инкапсулирует доступ к ресурсам путем создания классов, содержащих набор статических свойств, предназначенных только для чтения`get`(). Это предоставляет альтернативный способ использования ресурсов вместо вызова <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> методов и. <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType>  
  
 Базовая функциональность для поддержки строго типизированных ресурсов обеспечивается <xref:System.Resources.Tools.StronglyTypedResourceBuilder> классом (а также `/str` параметром командной строки в программе [Resgen. exe (генератор файлов ресурсов)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). Выходными данными <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> метода является класс, который содержит строго типизированные свойства, соответствующие ресурсам, на которые имеются ссылки в параметре input. Этот класс предоставляет доступ только для чтения к ресурсам, доступным в обработанном файле.  
  
   
  
## Examples  
 В следующем примере создается класс с именем `DemoResources` , написанный на C# или Visual Basic (в зависимости от исходного кода в примере). Этот класс находится в `DemoApp` пространстве имен и имеет свойства, возвращающие точечный рисунок эмблемы и имя приложения. В примере вызывается `CreateResourceFile` метод для создания необходимого RESW-файла и требуется, чтобы в текущем каталоге примера был найден файл точечного рисунка с именем Logo. bmp. В примере кода используется следующий файл ресурсов с именем Demo. resx:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Код приложения может затем использовать класс следующим образом:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам, заданным во входном параметре.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Коллекция <see cref="T:System.Collections.IDictionary" />, в которой каждая пара "ключ — значение" записи словаря является именем ресурса и значением ресурса.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="codeProvider">Класс <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив, который содержит имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам, на которые существует ссылка в указанной коллекции.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод для создания класса, предоставляющего строго типизированную обертку только для чтения для доступа к ресурсам, содержащимся `resourceList` в параметре. <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс пропускает любое имя ресурса, которое начинается с символов "$" или "> >". Имена ресурсов "Culture" и "ResourceManager" являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="resourceList" />, <paramref name="basename" /> или <paramref name="codeProvider" /> равно <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Имя узла ресурса не соответствует его ключу в <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Имя RESX-файла, используемого в качестве входных данных.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="codeProvider">Класс <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив <see cref="T:System.String" />, содержащий имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам в заданном RESX-файле.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод для создания класса, предоставляющего строго типизированный доступ только для чтения к ресурсам, содержащимся `resxFile` в параметре. <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс пропускает любое имя ресурса, которое начинается с символов "$" или "> >". Имена ресурсов "Culture" и "ResourceManager" являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="basename" /> или <paramref name="codeProvider" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Коллекция <see cref="T:System.Collections.IDictionary" />, в которой каждая пара "ключ — значение" записи словаря является именем ресурса и значением ресурса.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="resourcesNamespace">Пространство имен создаваемого ресурса.</param>
        <param name="codeProvider">Объект <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив <see cref="T:System.String" />, содержащий имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам, на которые существует ссылка в указанной коллекции.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка позволяет использовать `resourcesNamespace` параметр для указания пространства имен для создаваемых ресурсов. В этом случае созданный код выглядит следующим образом:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 В большинстве случаев вызывать этот метод из кода приложения не требуется.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс пропускает любое имя ресурса, которое начинается с символов "$" или "> >". Имена ресурсов "Culture" и "ResourceManager" являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="resourceList" />, <paramref name="basename" /> или <paramref name="codeProvider" /> равно <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Имя узла ресурса не соответствует его ключу в <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Имя RESX-файла, используемого в качестве входных данных.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="resourcesNamespace">Пространство имен создаваемого ресурса.</param>
        <param name="codeProvider">Класс <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив <see cref="T:System.String" />, содержащий имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам в заданном RESX-файле.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте метод для создания класса, предоставляющего строго типизированный доступ только для чтения к ресурсам, содержащимся `resxFile` в параметре. <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс пропускает любое имя ресурса, которое начинается с символов "$" или "> >". Имена ресурсов "Culture" и "ResourceManager" являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="basename" /> или <paramref name="codeProvider" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Строка для проверки и, если это необходимо, преобразования в допустимое имя ресурса.</param>
        <param name="provider">Объект <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, указывающий используемый целевой язык.</param>
        <summary>Создает допустимую строку ресурса на основе указанной входной строки и поставщика кода.</summary>
        <returns>Допустимое имя ресурса, производное от параметра <paramref name="key" />. Любые недопустимые токены заменяются на символ подчеркивания (_) или <see langword="null" />, если в полученной строке остаются недопустимые символы согласно языку, заданному в параметре <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `key` Если параметр является допустимой строкой символов, возвращается эта строка. Если параметр является недопустимой строкой или строкой, содержащей недопустимые символы <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> , метод пытается создать `key` допустимую строку на основе параметров `provider` и. `key` Если можно создать допустимую строку, возвращается эта строка. в противном случае возвращается значение.`null`  
  
 `key` Если параметр является пустой строкой (""), возвращается строка, состоящая из одного символа подчеркивания (_). Если параметр не является пустой строкой <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> , метод сравнивает каждый символ в строке с набором недопустимых токенов на основе языка, заданного `provider` параметром. `key` Любой недопустимый символ в строке заменяется символом подчеркивания. Символы, которые будут заменены символом подчеркивания, выглядят следующим образом:  
  
 "" (пробел), U + 00A0 (неразрывный пробел), "." (period), "," (запятая), ";" (точка с запятой)&#124;, "", "~", "@", "#", "%", "^", "&", "*", "+", "-", "/"\\\<, "", "", ">", "?", "[", "]", "(", ")", "{", "}", "" "(Quote)," "" (апостроф), ":" и "!".  
  
> [!NOTE]
>  Строго типизированные ресурсы не позволяют использовать ключевые слова языка (такие как `if`, `for`и т. д.) в качестве имен ключей ресурсов. Однако шаблон разработки позволяет использовать ключевые слова языка, предваряя ключевое слово символом подчеркивания. <xref:System.CodeDom> <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> Метод<xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> вызывает метод для обеспечения этой схемы. Например, если вы используете имя ресурса, совпадающее с ключевым словом языка, например `for`, имя будет выглядеть как `_for` в созданном классе ресурсов со строгой типизацией.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="key" /> или <paramref name="provider" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
