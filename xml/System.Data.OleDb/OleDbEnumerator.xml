<Type Name="OleDbEnumerator" FullName="System.Data.OleDb.OleDbEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f03f35fb6322f0a6f80f601f34842821ae94e1c5" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63891588" /></Metadata><TypeSignature Language="C#" Value="public sealed class OleDbEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbEnumerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OleDbEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class OleDbEnumerator sealed" />
  <TypeSignature Language="F#" Value="type OleDbEnumerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет механизм для перечисления всех доступных поставщиков OLE DB в локальной сети.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbEnumerator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Создает экземпляр класса <see cref="T:System.Data.OleDb.OleDbEnumerator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElements">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetElements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElements () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetElements();" />
      <MemberSignature Language="F#" Value="member this.GetElements : unit -&gt; System.Data.DataTable" Usage="oleDbEnumerator.GetElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Извлекает таблицу <see cref="T:System.Data.DataTable" />, в которой содержатся сведения о всех видимых поставщиках OLE DB.</summary>
        <returns>Таблица <see cref="T:System.Data.DataTable" />, в которой содержатся сведения о видимых поставщиках OLE DB.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таблица, возвращаемая этим методом содержит следующие столбцы, которые содержат строки:  
  
|Порядковый номер столбца|Столбец|Описание|  
|--------------------|------------|-----------------|  
|0|SOURCES_NAME|Неизменяемое имя источника данных OLEDB или перечислителя.|  
|1|SOURCES_PARSENAME|Понятное имя, которое можно преобразовать в моникер с помощью собственного интерфейса COM IParseDisplayName. Соответствует столбцу SOURCES_PARSENAME, возвращенный собственный набор строк источников OLE DB.|  
|2|SOURCES_DESCRIPTION|Описание источника данных OLE DB. Соответствует столбцу SOURCES_DESCRIPTION, возвращенный собственный набор строк источников OLE DB.|  
|3|SOURCES_TYPE|Один из следующих членов перечисления: Связыватель (0), (1), DataSource_MDP DataSource_TDP (2), перечислитель (3). Они соответствуют значениям, возвращаемым в столбце SOURCES_TYPE собственного набора строк источников OLE DB.|  
|4|SOURCES_ISPARENT|Применяется только к перечислителям. Если `true`, указывает, что операция применяется к тому же перечислителю, для которого был вызван вызывалась функция GetSourcesRowset, подразумевая, что он также содержится в подчиненное перечисление. Соответствует столбцу SOURCES_ISPARENT собственного набора строк источников OLE DB|  
|5|SOURCES_CLSID|Понятное имя, который может быть преобразован в моникер, используя собственный интерфейс COM IParseDisplayName. Соответствует столбцу SOURCES_CLSID, возвращенный собственный набор строк источников OLE DB.|  
  
   
  
## Examples  
 Следующее консольное приложение получает сведения обо всех видимых поставщиках OLE DB и отображает сведения в окне консоли.  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
Sub Main()  
  Dim enumerator As New OleDbEnumerator  
  Dim table As System.Data.DataTable = enumerator.GetElements()  
  
  DisplayData(table)  
  
   Console.WriteLine("Press any key to continue.")  
   Console.ReadKey()  
 End Sub  
  
 Private Sub DisplayData(ByVal table As DataTable)  
   For Each row As DataRow In table.Rows  
     For Each col As DataColumn In table.Columns  
       Console.WriteLine("{0} = {1}", col.ColumnName, row(col))  
     Next  
     Console.WriteLine("==================================")  
   Next  
 End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbEnumerator enumerator = new OleDbEnumerator();  
   DataTable table = enumerator.GetElements();  
  
   DisplayData(table);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(DataTable table)  
 {  
   foreach (DataRow row in table.Rows)  
   {  
     foreach (DataColumn col in table.Columns)  
     {  
       Console.WriteLine("{0} = {1}", col.ColumnName, row[col]);  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Поставщик не поддерживает ISourcesRowset.</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">Исключение возникло у основного поставщика.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public static System.Data.OleDb.OleDbDataReader GetEnumerator (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OleDb.OleDbDataReader GetEnumerator(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetEnumerator(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::OleDb::OleDbDataReader ^ GetEnumerator(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetEnumerator : Type -&gt; System.Data.OleDb.OleDbDataReader" Usage="System.Data.OleDb.OleDbEnumerator.GetEnumerator type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Объект <see cref="T:System.Type" />.</param>
        <summary>Использует конкретный перечислитель OLE DB для возврата объекта <see cref="T:System.Data.OleDb.OleDbDataReader" />, содержащего сведения об установленных в текущий момент поставщиках OLE DB, без требования экземпляра класса <see cref="T:System.Data.OleDb.OleDbEnumerator" />.</summary>
        <returns>Объект <see cref="T:System.Data.OleDb.OleDbDataReader" />, содержащий сведения о запрошенных поставщиках OLE DB с помощью заданного перечислителя OLE DB.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Средство чтения, который возвращается этим методом содержит следующие столбцы, которые содержат строки:  
  
|Порядковый номер столбца|Столбец|Описание|  
|--------------------|------------|-----------------|  
|0|SOURCES_NAME|Неизменяемое имя собственного источника данных OLE DB или перечислителя.|  
|1|SOURCES_PARSENAME|Понятное имя, которое можно преобразовать в моникер с помощью собственного интерфейса COM **IParseDisplayName**. Соответствует столбцу SOURCES_PARSENAME, возвращенный собственный набор строк источников OLE DB.|  
|2|SOURCES_DESCRIPTION|Описание источника данных OLE DB. Соответствует столбцу SOURCES_DESCRIPTION, возвращенный собственный набор строк источников OLE DB.|  
|3|SOURCES_TYPE|Один из следующих членов перечисления: Связыватель (0), (1), DataSource_MDP DataSource_TDP (2), перечислитель (3). Они соответствуют значениям, возвращаемым в столбце SOURCES_TYPE собственного набора строк источников OLE DB.|  
|4|SOURCES_ISPARENT|Применяется только к перечислителям. Если `true`, указывает, что операция применяется к тому же перечислителю, на котором **вызывалась функция GetSourcesRowset** был вызван, подразумевая, что он также содержится в подчиненное перечисление. Соответствует столбцу SOURCES_ISPARENT собственного набора строк источников OLE DB|  
  
 OLE DB предоставляет разные компоненты перечислителя, включая MSDAENUM, MSDASQL перечислителя, перечислитель SQLNCLI, перечислитель SQLOLEDB и пр. Дополнительные сведения о компонентах перечислителя и их использовании см. в разделе [Справочник программиста OLE DB по](https://go.microsoft.com/fwlink/?LinkId=45232).  
  
   
  
## Examples  
 Следующее консольное приложение использует компонент MSDAENUM для получения сведений о всех поставщиках OLE DB и отображает сведения в окне консоли.  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
  Sub Main()  
    Dim enumerator As New OleDbEnumerator  
    Dim reader As OleDbDataReader = _  
     OleDbEnumerator.GetEnumerator(Type.GetTypeFromProgID("MSDAENUM"))  
  
    DisplayData(reader)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal reader As OleDbDataReader)  
    While reader.Read()  
      For i As Integer = 0 To reader.FieldCount - 1  
        Console.WriteLine("{0} = {1}", _  
         reader.GetName(i), reader.GetValue(i))  
      Next  
      Console.WriteLine("==================================")  
    End While  
  
  End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbDataReader reader =   
     OleDbEnumerator.GetEnumerator(Type.GetTypeFromProgID("MSDAENUM"));  
  
   DisplayData(reader);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(OleDbDataReader reader)  
 {  
   while (reader.Read())  
   {  
     for (int i = 0; i < reader.FieldCount; i++)  
     {  
       Console.WriteLine("{0} = {1}",  
        reader.GetName(i), reader.GetValue(i));  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Поставщик не поддерживает **ISourcesRowset**.</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">Исключение возникло у основного поставщика.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRootEnumerator">
      <MemberSignature Language="C#" Value="public static System.Data.OleDb.OleDbDataReader GetRootEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OleDb.OleDbDataReader GetRootEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetRootEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRootEnumerator () As OleDbDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::OleDb::OleDbDataReader ^ GetRootEnumerator();" />
      <MemberSignature Language="F#" Value="static member GetRootEnumerator : unit -&gt; System.Data.OleDb.OleDbDataReader" Usage="System.Data.OleDb.OleDbEnumerator.GetRootEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Data.OleDb.OleDbDataReader" />, содержащий сведения об установленных в текущий момент поставщиках OLE DB, без требования экземпляра класса <see cref="T:System.Data.OleDb.OleDbEnumerator" />.</summary>
        <returns>Объект <see cref="T:System.Data.OleDb.OleDbDataReader" />, в котором содержатся сведения о видимых поставщиках OLE DB.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Средство чтения, возвращаемого этим методом содержит следующие столбцы, которые содержат строки:  
  
|Порядковый номер столбца|Столбец|Описание|  
|--------------------|------------|-----------------|  
|0|SOURCES_NAME|Неизменяемое имя источника данных OLEDB или перечислителя.|  
|1|SOURCES_PARSENAME|Понятное имя, которое можно преобразовать в моникер с помощью собственного интерфейса COM IParseDisplayName. Соответствует столбцу SOURCES_PARSENAME, возвращенный собственный набор строк источников OLE DB.|  
|2|SOURCES_DESCRIPTION|Описание источника данных OLE DB. Соответствует столбцу SOURCES_DESCRIPTION, возвращенный собственный набор строк источников OLE DB.|  
|3|SOURCES_TYPE|Один из следующих членов перечисления: Связыватель (0), (1), DataSource_MDP DataSource_TDP (2), перечислитель (3). Они соответствуют значениям, возвращаемым в столбце SOURCES_TYPE собственного набора строк источников OLE DB.|  
|4|SOURCES_ISPARENT|Применяется только к перечислителям. Если `true`, указывает, что операция применяется к тому же перечислителю, для которого был вызван вызывалась функция GetSourcesRowset, подразумевая, что он также содержится в подчиненное перечисление. Соответствует столбцу SOURCES_ISPARENT собственного набора строк источников OLE DB|  
|5|SOURCES_CLSID|Понятное имя, который может быть преобразован в моникер, используя собственный интерфейс COM IParseDisplayName. Соответствует столбцу SOURCES_CLSID, возвращенный собственный набор строк источников OLE DB.|  
  
   
  
## Examples  
 Следующее консольное приложение получает сведения обо всех видимых поставщиках OLE DB и отображает сведения в окне консоли.  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
  Sub Main()  
    Dim enumerator As New OleDbEnumerator  
    Dim reader As OleDbDataReader = OleDbEnumerator.GetRootEnumerator()  
  
    DisplayData(reader)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal reader As OleDbDataReader)  
    While reader.Read()  
      For i As Integer = 0 To reader.FieldCount - 1  
        Console.WriteLine("{0} = {1}", _  
         reader.GetName(i), reader.GetValue(i))  
      Next  
      Console.WriteLine("==================================")  
    End While  
  
  End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbDataReader reader = OleDbEnumerator.GetRootEnumerator();  
  
   DisplayData(reader);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(OleDbDataReader reader)  
 {  
   while (reader.Read())  
   {  
     for (int i = 0; i < reader.FieldCount; i++)  
     {  
       Console.WriteLine("{0} = {1}",  
        reader.GetName(i), reader.GetValue(i));  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Поставщик не поддерживает ISourcesRowset.</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">Исключение возникло у основного поставщика.</exception>
      </Docs>
    </Member>
  </Members>
</Type>