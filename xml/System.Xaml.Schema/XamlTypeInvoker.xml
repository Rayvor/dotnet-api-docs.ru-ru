<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cab8b4ba43d15f1dca4640d35056935ab7791fdb" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70623896" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет точку расширения, которая может осуществлять построение экземпляров типа XAML с использованием методик, отличных от отражения и конструкторов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Целью <xref:System.Xaml.Schema.XamlTypeInvoker> является включение расширяемой системы типов XAML, схемы и рабочего времени выполнения, которое не полагается полностью на функции CLR, такие как атрибуты CLR, сведения о отражении с помощью <xref:System.Type> и <xref:System.Reflection.MemberInfo>, и т. д. Подклассы <xref:System.Xaml.Schema.XamlTypeInvoker> класса используются в качестве входных параметров для альтернативных конструкторов классов схемы XAML, таких как <xref:System.Xaml.XamlType>. Вы поддаете <xref:System.Xaml.XamlType> подкласс <xref:System.Xaml.Schema.XamlTypeInvoker> и передаете его в базовый конструктор. Вместе с определением <xref:System.Xaml.Schema.XamlTypeInvoker> для конструктора необходимо также предоставить переопределения по крайней мере для некоторых `Lookup` методов <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker>имеет реализацию по умолчанию. Реализация по умолчанию соответствует аналогичной модели реализации типов <xref:System.Xaml.XamlType> схем XAML по умолчанию и <xref:System.Xaml.XamlMember>: система типов CLR используется для создания экземпляров, значений и поисков, <xref:System.Type> включая использование атрибутов CLR и <xref:System.Reflection.MemberInfo>и т. д.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker>предоставляет методы для базового создания (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) и методов, которые относятся к типам, где объект <xref:System.Xaml.XamlType> представляет коллекцию, словарь или массив (;<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A> <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию является пустой.  
  
 Этот конструктор вызывается внутренним образом для предоставления значения для <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Для подкласса предполагается, что вы <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> используете сигнатуру для создания или предписываете переопределение, которое <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> вызывает в качестве базового. <xref:System.Xaml.Schema.XamlTypeInvoker> <xref:System.Xaml.Schema.XamlTypeInvoker> При предоставлении реализуется шаблон по умолчанию, где является <xref:System.Xaml.XamlType>  неизменяемым.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">Значение <see cref="T:System.Xaml.XamlType" /> для определенного XAML-типа, соответствующего данному объекту <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Инициализирует новый экземпляр <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> на основе заданного <see cref="T:System.Xaml.XamlType" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор вызывается внутри на основе того, <xref:System.Xaml.XamlType> <xref:System.Xaml.Schema.XamlTypeInvoker> где используется для создания. Приведенные здесь сведения относятся ко всем другим вызовам методов  <xref:System.Xaml.Schema.XamlTypeInvoker> для.  `type`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Экземпляр типа, заданного объектом <see cref="T:System.Xaml.XamlType" />, который используется для построения данного объекта <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">Добавляемый элемент.</param>
        <summary>Добавляет указанный элемент в экземпляр типа, относящегося к этому объекту <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод следует вызывать только для <xref:System.Xaml.XamlType> коллекции, представляющей коллекцию.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Вызывает этот метод в объекте <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, основанном на неизвестном типе <see cref="T:System.Xaml.XamlType" />.  
  
 **-или-**  
  
Этот метод вызван для <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, где соответствующий тип не является коллекцией.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">Метод <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> для этого объекта <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> возвращает значение <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Базовая реализация включает вызов внутреннего вспомогательного <c>сровифункновн</c>. Этот вспомогательный метод всегда вызывается в <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> случаях, когда объект основан <see cref="T:System.Xaml.XamlType" />на неизвестном элементе, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> который включает <see cref="T:System.Xaml.XamlType" /> в <see langword="null" />себя случаи, когда параметр имеет значение.  
  
На внутреннем уровне вызывается <see cref="P:System.Xaml.XamlType.IsCollection" />Базовая реализация и вызывается, если результат имеет <see langword="false" />значение.  
  
Базовая реализация не обязательно использует собственную <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> реализацию. <paramref name="instance" /> Во-первых, предпринимается попытка приведение к <see cref="T:System.Collections.IList" /> . Если это будет выполнено, вызывается <see cref="M:System.Collections.IList.Add(System.Object)" /> метод, который возвращает. В противном случае базовая реализация использует <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> CLR для вызова базового <see langword="Add" /> метода, как <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> получено из вызова для этого  <paramref name="" /> .  <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />  
  
В базовой реализации исключение на этом уровне не возникает, если <paramref name="item" /> имеет значение. <see langword="null" /> По-прежнему возможно, что базовый <see langword="Add" /> метод вызовет исключение при вызове. Другие исключения времени выполнения возможны, <see cref="P:System.Xaml.XamlType.ItemType" /> если не возвращает допустимый результат.</para></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Экземпляр типа, указанного параметром <see cref="T:System.Xaml.XamlType" />, который используется для создания этого объекта <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Ключ словаря для добавления элемента.</param>
        <param name="item">Добавляемое значение элемента.</param>
        <summary>Добавляет предоставленный ключ и значение элемента в экземпляр типа, который относится к этому элементу <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод следует вызывать только для <xref:System.Xaml.XamlType> , который представляет словарь.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Вызывает этот метод в объекте <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, основанном на неизвестном типе <see cref="T:System.Xaml.XamlType" />.  
  
 **-или-**  
  
Этот метод вызван для <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, где соответствующий тип не является словарем.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">Метод <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> для этого объекта <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> возвращает значение <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Базовая реализация включает вызов внутреннего вспомогательного <c>сровифункновн</c>. Этот вспомогательный метод всегда вызывается в <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> случаях, когда объект основан <see cref="T:System.Xaml.XamlType" />на неизвестном элементе, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> который включает <see cref="T:System.Xaml.XamlType" /> в <see langword="null" />себя случаи, когда параметр имеет значение.  
  
На внутреннем уровне вызывается <see cref="P:System.Xaml.XamlType.IsDictionary" />Базовая реализация и вызывается, если результат имеет <see langword="false" />значение.  
  
Базовая реализация не обязательно использует собственную <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> реализацию. <paramref name="instance" /> Во-первых, предпринимается попытка приведение к <see cref="T:System.Collections.IDictionary" /> . Если это будет выполнено, вызывается <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> метод, который возвращает. В противном случае базовая реализация использует <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> CLR для вызова базового <see langword="Add" /> метода, как <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> получено из вызова для этого  <paramref name="" /> .  <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />  
  
В базовой реализации исключение на этом уровне не возникает, если <paramref name="item" /> или <paramref name="key" /> имеет <see langword="null" />значение. По-прежнему возможно, что базовый <see langword="Add" /> метод вызовет исключение при вызове. Другие исключения времени выполнения возможны, <see cref="P:System.Xaml.XamlType.ItemType" /> если не возвращает допустимый результат.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">Массив объектов, которые предоставляют аргументы <see langword="x:ConstructorArgs" /> для экземпляра. Может быть <see langword="null" /> для типов, не требующих использования <see langword="x:ConstructorArgs" />.</param>
        <summary>Создает экземпляр объекта на основе <see cref="T:System.Xaml.XamlType" />, инициируемого при конструкции для данного <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>Созданный экземпляр объекта на основе <see cref="T:System.Xaml.XamlType" />, инициируемого при конструкции для данного <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Не удалось разрешить конструктор.</exception>
        <block subset="none" type="overrides"><para>Базовая реализация включает вызов внутреннего вспомогательного <c>сровифункновн</c>. Этот вспомогательный метод всегда вызывается в <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> случаях, когда объект основан <see cref="T:System.Xaml.XamlType" />на неизвестном элементе, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> который включает <see cref="T:System.Xaml.XamlType" /> в <see langword="null" />себя случаи, когда параметр имеет значение.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><see cref="T:System.Xaml.XamlType" /> для типа элемента, используемого методом <see langword="Add" />.</param>
        <summary>Возвращает соответствующий метод <see langword="Add" /> для объекта <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, соответствующего коллекции или словарю.</summary>
        <returns>Сведения <see cref="T:System.Reflection.MethodInfo" /> в среде CLR для метода <see langword="Add" />, или null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод должен возвращать `null` для случаев, когда объект <xref:System.Xaml.Schema.XamlTypeInvoker> <xref:System.Xaml.XamlType> для этого не является записываемой коллекцией или словарем. В частности, должен `null` возвращаться для случаев <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> , `None`когда возвращает.  
  
> [!IMPORTANT]
>  Если вы не обращаетесь к полностью доверенной системе типов XAML, этот метод может сообщить ложные <xref:System.Reflection.MethodInfo> сведения вызывающим объектам.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="contentType" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Базовая <see langword="null" /> реализация возвращается для случаев <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> <see cref="T:System.Xaml.XamlType" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> , когда <see langword="null" /> объект основан на неизвестном элементе, который включает в себя случаи, когда объект имеет значение. <see cref="T:System.Xaml.XamlType" /> Он также возвращает <see langword="null" /> , <see cref="P:System.Xaml.XamlType.ItemType" /> если <see langword="null" />имеет значение.  
  
В коллекциях XAML потенциально имеется несколько <see langword="Add" /> методов, так как коллекция XAML может поддерживать более одного типа содержимого (см <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />. или см <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> . Дополнительные сведения об одной реализации этой концепции в WPF). Реализация по умолчанию использует внутреннюю логику для возврата наилучшего соответствия на основе сигнатур и типа предоставляемого <paramref name="contentType" />объекта.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект, представляющий метод, который может осуществлять перечисление по элементам.</summary>
        <returns><see cref="T:System.Reflection.MethodInfo" /> для метода перечислителя, или <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Должен возвращаться `null` для случаев, <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> когда `None`возвращает.  
  
> [!IMPORTANT]
>  Если вы не обращаетесь к полностью доверенной системе типов XAML, этот метод может сообщить ложные <xref:System.Reflection.MethodInfo> сведения вызывающим объектам.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Базовая реализация вызывает внутренний вспомогательный метод. Этот вспомогательный <see langword="null" /> метод возвращает для случаев <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> <see cref="T:System.Xaml.XamlType" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> , когда <see langword="null" /> объект основан на неизвестном элементе, который включает в себя случаи, когда объект имеет значение. <see cref="T:System.Xaml.XamlType" /> Он также возвращает <see langword="null" /> для случаев, <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> когда <see langword="None" />возвращает.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Экземпляр типа, указанного параметром <see cref="T:System.Xaml.XamlType" />, который используется для создания этого объекта <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, представляющий набор элементов.</summary>
        <returns>Объект <see cref="T:System.Collections.IEnumerator" /> или <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Вызывает этот метод в объекте <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, основанном на неизвестном типе <see cref="T:System.Xaml.XamlType" />.  
  
 **-или-**  
  
Этот метод вызван для <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />, где соответствующий тип не является коллекцией или словарем.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Базовая реализация включает вызов внутреннего вспомогательного <c>сровифункновн</c>. Этот вспомогательный метод всегда вызывается в <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> случаях, когда объект основан <see cref="T:System.Xaml.XamlType" />на неизвестном элементе, <see cref="P:System.Xaml.XamlType.UnderlyingType" /> который включает <see cref="T:System.Xaml.XamlType" /> в <see langword="null" />себя случаи, когда параметр имеет значение.  
  
Базовая реализация не обязательно использует собственную <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> реализацию. <paramref name="instance" /> Во-первых, предпринимается попытка приведение к <see cref="T:System.Collections.IEnumerable" /> . Если это будет выполнено, вызывается <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> метод, который возвращает возвращаемое значение. В противном случае базовая реализация использует <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> CLR для вызова базового <see langword="GetEnumerator" /> метода, как <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> получено из вызова для этого  <paramref name="" /> .  <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает обработчик, который необходимо использовать при вызове реализованного объекта <see cref="T:System.Xaml.XamlObjectWriter" /> объектом <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <value>Реализация обработчика, обрабатывающая такой случай.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработчик событий основан на <xref:System.EventHandler%601> ограничении <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> данных событий.  
  
 Возвращаемое значение вызывает <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> поведение <xref:System.Xaml.XamlType> объекта, на котором основан объект <xref:System.Xaml.Schema.XamlTypeInvoker> .  
  
 Возвращаемое значение `null` для объекта <xref:System.Xaml.Schema.XamlTypeInvoker> , основанного на неизвестном <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает обработчик, используемый, когда <see cref="T:System.Xaml.XamlObjectWriter" /> вызывает реализованный в среде CLR метод <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
        <value>Реализация обработчика, обрабатывающая такой случай.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обработчик событий основан на <xref:System.EventHandler%601> ограничении <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> данных событий.  
  
 Возвращаемое значение вызывает <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> поведение <xref:System.Xaml.XamlType> объекта, на котором основан объект <xref:System.Xaml.Schema.XamlTypeInvoker> .  
  
 Возвращаемое значение `null` для объекта <xref:System.Xaml.Schema.XamlTypeInvoker> , основанного на неизвестном <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Предоставляет статическое значение, представляющее неизвестный, не реализованный полностью <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <value>Статическое значение, представляющее неизвестный, не реализованный полностью <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Предоставление этого значения для <xref:System.Xaml.Schema.XamlTypeInvoker> параметра определенного API интерфейса System. XAML, как правило, приводит к созданию исключений вызываемым кодом.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
