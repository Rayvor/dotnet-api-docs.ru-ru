<Type Name="ExportAttribute" FullName="System.ComponentModel.Composition.ExportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc87c5584b3bf18910b971687df7c0502a45fe9f" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70338165" /></Metadata><TypeSignature Language="C#" Value="public class ExportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ExportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class ExportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type ExportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Field | System.AttributeTargets.Method | System.AttributeTargets.Property, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что типом, свойством, полем или методом предоставляется определенный экспорт.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В модели <xref:System.ComponentModel.Composition.ExportAttribute> атрибутивного программирования объявляет, экспортирует ли часть или предоставляет контейнеру композиции объект, выполняющий определенный контракт. Во время компоновки части с импортами, которые имеют соответствующие контракты, будут иметь эти зависимости, заданные экспортированным объектом.  
  
 Класс <xref:System.ComponentModel.Composition.ExportAttribute> может дополнить либо любой из классов, либо свойство, поле или метод класса. Если весь класс декорирован, экземпляр класса является экспортированным объектом. Если член класса декорирован, экспортируемым объектом будет значение декорированного элемента.  
  
 Определяется ли соответствие контракта в первую очередь именем контракта и типом контракта. Для получения дополнительной информации см. <xref:System.ComponentModel.Composition.ImportAttribute>.  
  
   
  
## Examples  
 В следующем примере показаны три класса <xref:System.ComponentModel.Composition.ExportAttribute>, снабженные, и три импортируемых импорта, которые соответствуют им.  
  
 [!code-csharp[ImportAndExport#1](~/samples/snippets/csharp/VS_Snippets_Misc/importandexport/cs/program.cs#1)]
 [!code-vb[ImportAndExport#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/importandexport/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Composition.ImportAttribute" />
    <related type="Article" href="https://msdn.microsoft.com/library/6c61b4ec-c6df-4651-80f1-4854f8b14dde">Общие сведения о модели атрибутивного программирования</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.ExportAttribute" />, экспортирующего тип или член, помеченный данным атрибутом, в рамках имени контракта по умолчанию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метода для типа свойства или поля или для типа, помеченного этим атрибутом.  
  
 Методы, отмеченные этим атрибутом, должны указывать имя контракта или тип с помощью <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor%28System.String%29> <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor%28System.Type%29>либо.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойства для выполнения нелингвистического сравнения без учета регистра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.ExportAttribute : string -&gt; System.ComponentModel.Composition.ExportAttribute" Usage="new System.ComponentModel.Composition.ExportAttribute contractName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractName">Имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом, либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.ExportAttribute" />, экспортирующего тип или член, помеченный данным атрибутом, в рамках заданного имени контракта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта по умолчанию — результат вызова <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метода для типа свойства или поля или для типа, помеченного этим атрибутом.  
  
 Методы, отмеченные этим атрибутом, должны указывать имя контракта или тип с помощью <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor%28System.String%29> <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor%28System.Type%29>либо.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойства для выполнения нелингвистического сравнения без учета регистра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.ExportAttribute : Type -&gt; System.ComponentModel.Composition.ExportAttribute" Usage="new System.ComponentModel.Composition.ExportAttribute contractType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractType">Тип, от которого наследуется имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом, или значение <see langword="null" /> для использования имени контракта по умолчанию.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.ExportAttribute" />, экспортирующего тип или член, помеченный данным атрибутом, в рамках имени контракта, производного от заданного типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя контракта является результатом вызова <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метода в. `contractType`  
  
 Имя контракта по умолчанию — результат вызова <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> метода для типа свойства или поля или для типа, помеченного этим атрибутом.  
  
 Методы, отмеченные этим атрибутом, должны указывать имя контракта или тип с помощью <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor%28System.String%29> <xref:System.ComponentModel.Composition.ExportAttribute.%23ctor%28System.Type%29>либо.  
  
 Имя контракта сравнивается с помощью <xref:System.StringComparer.Ordinal%2A> свойства для выполнения нелингвистического сравнения без учета регистра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string contractName, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String, contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportAttribute(System::String ^ contractName, Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.ExportAttribute : string * Type -&gt; System.ComponentModel.Composition.ExportAttribute" Usage="new System.ComponentModel.Composition.ExportAttribute (contractName, contractType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractName">Имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом, либо значение <see langword="null" /> или пустая строка ("") для использования имени контракта по умолчанию.</param>
        <param name="contractType">Экспортируемый тип.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.ExportAttribute" />, экспортирующего указанный тип в рамках заданного имени контракта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

Имя контракта по умолчанию — результат вызова метода <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)?displayProperty=nameWithType> для типа свойства или поля или для самого типа, помеченного этим атрибутом. 
                
Имя контракта сравнивается с учетом регистра и нелингвистического сравнения с помощью <xref:System.StringComparer.Ordinal?displayProperty=nameWithType>.
                    
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractName">
      <MemberSignature Language="C#" Value="public string ContractName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContractName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.ExportAttribute.ContractName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContractName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContractName : string" Usage="System.ComponentModel.Composition.ExportAttribute.ContractName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом.</summary>
        <value>Имя контракта, используемое для экспорта типа или члена, помеченного данным атрибутом. Значением по умолчанию является пустая строка ("").</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractType">
      <MemberSignature Language="C#" Value="public Type ContractType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContractType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.ExportAttribute.ContractType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ContractType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContractType : Type" Usage="System.ComponentModel.Composition.ExportAttribute.ContractType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип контракта, экспортируемый членом, к которому прикреплен данный атрибут.</summary>
        <value>Тип предоставляемого экспорта. Значение по умолчанию — <see langword="null" />, означающее, что тип будет получен путем определения типа члена, к которому прикреплен данный экспорт.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
