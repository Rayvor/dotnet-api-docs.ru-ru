<Type Name="ExportFactory&lt;T&gt;" FullName="System.ComponentModel.Composition.ExportFactory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2ed40bfc78e7b546194bdb0749ff94a6e5a29a7" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63905348" /></Metadata><TypeSignature Language="C#" Value="public class ExportFactory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportFactory`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ExportFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ExportFactory(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ExportFactory" />
  <TypeSignature Language="F#" Value="type ExportFactory&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">Тип экспорта.</typeparam>
    <summary>Фабрика, которая создает новые экземпляры части, предоставляющей указанный экспорт.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При указании косвенно к части с помощью <xref:System.Lazy%601> объекта, <xref:System.Lazy%601.Value%2A> свойство всегда возвращает ссылку на тот же объект. В некоторых случаях может возникнуть каждую ссылку, чтобы привести к созданию нового объекта. <xref:System.ComponentModel.Composition.ExportFactory%601> предназначен для этих сценариев.  
  
 <xref:System.ComponentModel.Composition.ExportFactory%601> может использоваться таким же образом, чтобы <xref:System.Lazy%601> при создании с атрибутами части. То есть Импорт контракта, определенный для <xref:System.ComponentModel.Composition.ExportFactory%601> для универсального параметра `T` будет соответствовать экспорта, который определен на `T`. Например выполните экспорт и импорт соответствия:  
  
```csharp  
[Export]  
public String myData = "Example Data.";  
  
[Import]  
public ExportFactory<String> theData { get; set; }  
```  
  
```vb  
<Export()>  
Public myData As String = "Example Data."  
  
<Import()>  
Public Property theData As ExportFactory(Of String)  
```  
  
 <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=nameWithType> Возвращает метод <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, который содержит две части. <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=nameWithType> Свойство предоставляет доступ к создаваемой части. Вызов <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> метод <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> объект очищает созданная часть и все его зависимости, тем самым позволяя части времени существования для управления без ссылки на контейнер, который его создал.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportFactory (Func&lt;Tuple&lt;T,Action&gt;&gt; exportLifetimeContextCreator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Tuple`2&lt;!T, class System.Action&gt;&gt; exportLifetimeContextCreator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exportLifetimeContextCreator As Func(Of Tuple(Of T, Action)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportFactory(Func&lt;Tuple&lt;T, Action ^&gt; ^&gt; ^ exportLifetimeContextCreator);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.ExportFactory&lt;'T&gt; : Func&lt;'T * Action&gt; -&gt; System.ComponentModel.Composition.ExportFactory&lt;'T&gt;" Usage="new System.ComponentModel.Composition.ExportFactory&lt;'T&gt; exportLifetimeContextCreator" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exportLifetimeContextCreator" Type="System.Func&lt;System.Tuple&lt;T,System.Action&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="exportLifetimeContextCreator">Функция, возвращающая экспортированное значение, и действие <see cref="T:System.Action" />, выполняющее освобождение.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExport">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt; CreateExport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.ExportLifetimeContext`1&lt;!T&gt; CreateExport() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateExport () As ExportLifetimeContext(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::ExportLifetimeContext&lt;T&gt; ^ CreateExport();" />
      <MemberSignature Language="F#" Value="member this.CreateExport : unit -&gt; System.ComponentModel.Composition.ExportLifetimeContext&lt;'T&gt;" Usage="exportFactory.CreateExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает экземпляр типа экспорта фабрики.</summary>
        <returns>Допустимый экземпляр экспортируемого типа фабрики.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFilterScopedCatalog">
      <MemberSignature Language="C#" Value="protected virtual bool OnFilterScopedCatalog (System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFilterScopedCatalog(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnFilterScopedCatalog(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ composablePartDefinition);" />
      <MemberSignature Language="F#" Value="abstract member OnFilterScopedCatalog : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; bool&#xA;override this.OnFilterScopedCatalog : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; bool" Usage="exportFactory.OnFilterScopedCatalog composablePartDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="composablePartDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="composablePartDefinition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>