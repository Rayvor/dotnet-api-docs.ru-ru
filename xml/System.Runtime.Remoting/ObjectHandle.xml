<Type Name="ObjectHandle" FullName="System.Runtime.Remoting.ObjectHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6a282044d6770903fbe85d7c304be1b9e45ddfc" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75084265" /></Metadata><TypeSignature Language="C#" Value="public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectHandle extends System.MarshalByRefObject implements class System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.ObjectHandle" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IObjectHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectHandle : MarshalByRefObject, System::Runtime::Remoting::IObjectHandle" />
  <TypeSignature Language="F#" Value="type ObjectHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IObjectHandle" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.IObjectHandle</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="80f2e-101">Сворачивает ссылки объектов, маршалированных по значениям, разрешая их возвращение через косвенное обращение.</span><span class="sxs-lookup"><span data-stu-id="80f2e-101">Wraps marshal-by-value object references, allowing them to be returned through an indirection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80f2e-102">Класс <xref:System.Runtime.Remoting.ObjectHandle> используется для передачи объекта (в упакованном состоянии) между несколькими доменами приложений, не загружая метаданные для упакованного объекта в каждом <xref:System.AppDomain>, с помощью которого <xref:System.Runtime.Remoting.ObjectHandle> перемещается.</span><span class="sxs-lookup"><span data-stu-id="80f2e-102">The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels.</span></span> <span data-ttu-id="80f2e-103">Таким образом, класс <xref:System.Runtime.Remoting.ObjectHandle> предоставляет вызывающему элементу управления, когда <xref:System.Type> удаленного объекта загружается в домен.</span><span class="sxs-lookup"><span data-stu-id="80f2e-103">Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80f2e-104">В следующем примере кода показано, как создать объект в другом <xref:System.AppDomain>и получить прокси-сервер для объекта из <xref:System.Runtime.Remoting.ObjectHandle>.</span><span class="sxs-lookup"><span data-stu-id="80f2e-104">The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a <xref:System.Runtime.Remoting.ObjectHandle>.</span></span> <span data-ttu-id="80f2e-105">В этом примере можно предположить, что код класса `MyType` компилируется в сборку с именем «Обжександлеассембли».</span><span class="sxs-lookup"><span data-stu-id="80f2e-105">In this example, you can assume that the code of the `MyType` class is compiled into an assembly called "ObjectHandleAssembly".</span></span>  
  
 [!code-cpp[ObjectHandle#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#1)]
 [!code-csharp[ObjectHandle#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#1)]
 [!code-vb[ObjectHandle#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (o As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.ObjectHandle : obj -&gt; System.Runtime.Remoting.ObjectHandle" Usage="new System.Runtime.Remoting.ObjectHandle o" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="80f2e-106">Объект, свернутый новым обработчиком <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span><span class="sxs-lookup"><span data-stu-id="80f2e-106">The object that is wrapped by the new <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span></span></param>
        <summary><span data-ttu-id="80f2e-107">Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Remoting.ObjectHandle" />, сворачивая данный объект <paramref name="o" />.</span><span class="sxs-lookup"><span data-stu-id="80f2e-107">Initializes an instance of the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> class, wrapping the given object <paramref name="o" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="objectHandle.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="80f2e-108">Инициализирует пожизненную аренду свернутого объекта.</span><span class="sxs-lookup"><span data-stu-id="80f2e-108">Initializes the lifetime lease of the wrapped object.</span></span></summary>
        <returns><span data-ttu-id="80f2e-109">Инициализированная <see cref="T:System.Runtime.Remoting.Lifetime.ILease" />, разрешающая контроль времени жизни свернутого объекта.</span><span class="sxs-lookup"><span data-stu-id="80f2e-109">An initialized <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> that allows you to control the lifetime of the wrapped object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public object Unwrap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Unwrap() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.Unwrap" />
      <MemberSignature Language="VB.NET" Value="Public Function Unwrap () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Unwrap();" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="member this.Unwrap : unit -&gt; obj" Usage="objectHandle.Unwrap " FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Unwrap() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Unwrap();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Unwrap : unit -&gt; obj&#xA;override this.Unwrap : unit -&gt; obj" Usage="objectHandle.Unwrap " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.IObjectHandle.Unwrap</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="80f2e-110">Возвращает свернутый объект.</span><span class="sxs-lookup"><span data-stu-id="80f2e-110">Returns the wrapped object.</span></span></summary>
        <returns><span data-ttu-id="80f2e-111">Инкапсулированный в обертку объект.</span><span class="sxs-lookup"><span data-stu-id="80f2e-111">The wrapped object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="80f2e-112">В следующем примере кода показано, как активировать объект в другом <xref:System.AppDomain>, получить прокси-сервер с помощью метода <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> и использовать прокси для доступа к удаленному объекту.</span><span class="sxs-lookup"><span data-stu-id="80f2e-112">The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> method, and use the proxy to access the remote object.</span></span>  
  
 [!code-cpp[ObjectHandle#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#2)]
 [!code-csharp[ObjectHandle#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#2)]
 [!code-vb[ObjectHandle#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="80f2e-113"><see cref="T:System.Runtime.Remoting.ObjectHandle" /> — это удаленная <see cref="T:System.MarshalByRefObject" />, которая следит за службой времени жизни удаленного взаимодействия.</span><span class="sxs-lookup"><span data-stu-id="80f2e-113">A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> is a remoted <see cref="T:System.MarshalByRefObject" /> that is tracked by the remoting lifetime service.</span></span> <span data-ttu-id="80f2e-114">Вызов текущего метода может завершиться ошибкой, если срок действия аренды <see cref="T:System.Runtime.Remoting.ObjectHandle" /> истекает.</span><span class="sxs-lookup"><span data-stu-id="80f2e-114">A call to the current method can fail if the lifetime lease on the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> expires.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
