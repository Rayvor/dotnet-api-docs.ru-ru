<Type Name="ActivatorUtilities" FullName="Microsoft.Extensions.DependencyInjection.ActivatorUtilities">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d27d3380eab6a98e501d44c9db1395abc25c105" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75125148" /></Metadata><TypeSignature Language="C#" Value="public static class ActivatorUtilities" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ActivatorUtilities extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.ActivatorUtilities" />
  <TypeSignature Language="VB.NET" Value="Public Class ActivatorUtilities" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActivatorUtilities abstract sealed" />
  <TypeSignature Language="F#" Value="type ActivatorUtilities = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="45e0e-101">Код вспомогательного приложения для различных служб активаторов.</span><span class="sxs-lookup"><span data-stu-id="45e0e-101">Helper code for the various activator services.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFactory">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.ObjectFactory CreateFactory (Type instanceType, Type[] argumentTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.ObjectFactory CreateFactory(class System.Type instanceType, class System.Type[] argumentTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFactory (instanceType As Type, argumentTypes As Type()) As ObjectFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::DependencyInjection::ObjectFactory ^ CreateFactory(Type ^ instanceType, cli::array &lt;Type ^&gt; ^ argumentTypes);" />
      <MemberSignature Language="F#" Value="static member CreateFactory : Type * Type[] -&gt; Microsoft.Extensions.DependencyInjection.ObjectFactory" Usage="Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory (instanceType, argumentTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.ObjectFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceType" Type="System.Type" />
        <Parameter Name="argumentTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="instanceType"><span data-ttu-id="45e0e-102">Активируемый тип</span><span class="sxs-lookup"><span data-stu-id="45e0e-102">The type to activate</span></span></param>
        <param name="argumentTypes"><span data-ttu-id="45e0e-103">Типы объектов (по порядку), которые будут переданы в возвращаемую функцию в качестве второго параметра.</span><span class="sxs-lookup"><span data-stu-id="45e0e-103">The types of objects, in order, that will be passed to the returned function as its second parameter</span></span></param>
        <summary><span data-ttu-id="45e0e-104">Создайте делегат, который будет создавать экземпляры типа с аргументами конструктора, предоставленными напрямую и (или) из <see cref="T:System.IServiceProvider" />.</span><span class="sxs-lookup"><span data-stu-id="45e0e-104">Create a delegate that will instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider" />.</span></span></summary>
        <returns><span data-ttu-id="45e0e-105">Фабрика, которая будет создавать экземпляры instanceType с помощью <see cref="T:System.IServiceProvider" /> и массива аргументов, содержащего объекты, которые соответствуют типам, определенным в argumentTypes.</span><span class="sxs-lookup"><span data-stu-id="45e0e-105">A factory that will instantiate instanceType using an <see cref="T:System.IServiceProvider" /> and an argument array containing objects matching the types defined in argumentTypes .</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static object CreateInstance (IServiceProvider provider, Type instanceType, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateInstance(class System.IServiceProvider provider, class System.Type instanceType, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (provider As IServiceProvider, instanceType As Type, ParamArray parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateInstance(IServiceProvider ^ provider, Type ^ instanceType, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : IServiceProvider * Type * obj[] -&gt; obj" Usage="Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance (provider, instanceType, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="instanceType" Type="System.Type" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-1.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="45e0e-106">Поставщик службы, используемый для разрешения зависимостей.</span><span class="sxs-lookup"><span data-stu-id="45e0e-106">The service provider used to resolve dependencies</span></span></param>
        <param name="instanceType"><span data-ttu-id="45e0e-107">Активируемый тип</span><span class="sxs-lookup"><span data-stu-id="45e0e-107">The type to activate</span></span></param>
        <param name="parameters"><span data-ttu-id="45e0e-108">Аргументы конструктора не предоставлены в <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="45e0e-108">Constructor arguments not provided by the <paramref name="provider" />.</span></span></param>
        <summary><span data-ttu-id="45e0e-109">Создает экземпляр типа с аргументами конструктора, предоставленными напрямую и (или) из <see cref="T:System.IServiceProvider" />.</span><span class="sxs-lookup"><span data-stu-id="45e0e-109">Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider" />.</span></span></summary>
        <returns><span data-ttu-id="45e0e-110">Активированный объект типа instanceType</span><span class="sxs-lookup"><span data-stu-id="45e0e-110">An activated object of type instanceType</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateInstance&lt;T&gt; (IServiceProvider provider, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateInstance&lt;T&gt;(class System.IServiceProvider provider, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance``1(System.IServiceProvider,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance(Of T) (provider As IServiceProvider, ParamArray parameters As Object()) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T CreateInstance(IServiceProvider ^ provider, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : IServiceProvider * obj[] -&gt; 'T" Usage="Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance (provider, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-1.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="45e0e-111">Активируемый тип</span><span class="sxs-lookup"><span data-stu-id="45e0e-111">The type to activate</span></span></typeparam>
        <param name="provider"><span data-ttu-id="45e0e-112">Поставщик службы, используемый для разрешения зависимостей.</span><span class="sxs-lookup"><span data-stu-id="45e0e-112">The service provider used to resolve dependencies</span></span></param>
        <param name="parameters"><span data-ttu-id="45e0e-113">Аргументы конструктора не предоставлены в <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="45e0e-113">Constructor arguments not provided by the <paramref name="provider" />.</span></span></param>
        <summary><span data-ttu-id="45e0e-114">Создает экземпляр типа с аргументами конструктора, предоставленными напрямую и (или) из <see cref="T:System.IServiceProvider" />.</span><span class="sxs-lookup"><span data-stu-id="45e0e-114">Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider" />.</span></span></summary>
        <returns><span data-ttu-id="45e0e-115">Активированный объект типа T</span><span class="sxs-lookup"><span data-stu-id="45e0e-115">An activated object of type T</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceOrCreateInstance">
      <MemberSignature Language="C#" Value="public static object GetServiceOrCreateInstance (IServiceProvider provider, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetServiceOrCreateInstance(class System.IServiceProvider provider, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetServiceOrCreateInstance(IServiceProvider ^ provider, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetServiceOrCreateInstance : IServiceProvider * Type -&gt; obj" Usage="Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance (provider, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="45e0e-116">Поставщик службы</span><span class="sxs-lookup"><span data-stu-id="45e0e-116">The service provider</span></span></param>
        <param name="type"><span data-ttu-id="45e0e-117">Тип службы</span><span class="sxs-lookup"><span data-stu-id="45e0e-117">The type of the service</span></span></param>
        <summary><span data-ttu-id="45e0e-118">Получает экземпляр данного типа из поставщика служб.</span><span class="sxs-lookup"><span data-stu-id="45e0e-118">Retrieve an instance of the given type from the service provider.</span></span> <span data-ttu-id="45e0e-119">Если таковой не найден, тогда экземпляр создается напрямую.</span><span class="sxs-lookup"><span data-stu-id="45e0e-119">If one is not found then instantiate it directly.</span></span></summary>
        <returns><span data-ttu-id="45e0e-120">Разрешенная служба или созданный экземпляр.</span><span class="sxs-lookup"><span data-stu-id="45e0e-120">The resolved service or created instance</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceOrCreateInstance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetServiceOrCreateInstance&lt;T&gt; (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetServiceOrCreateInstance&lt;T&gt;(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance``1(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetServiceOrCreateInstance(Of T) (provider As IServiceProvider) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T GetServiceOrCreateInstance(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member GetServiceOrCreateInstance : IServiceProvider -&gt; 'T" Usage="Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="45e0e-121">Тип службы</span><span class="sxs-lookup"><span data-stu-id="45e0e-121">The type of the service</span></span></typeparam>
        <param name="provider"><span data-ttu-id="45e0e-122">Поставщик службы, используемый для разрешения зависимостей.</span><span class="sxs-lookup"><span data-stu-id="45e0e-122">The service provider used to resolve dependencies</span></span></param>
        <summary><span data-ttu-id="45e0e-123">Получает экземпляр данного типа из поставщика служб.</span><span class="sxs-lookup"><span data-stu-id="45e0e-123">Retrieve an instance of the given type from the service provider.</span></span> <span data-ttu-id="45e0e-124">Если таковой не найден, тогда экземпляр создается напрямую.</span><span class="sxs-lookup"><span data-stu-id="45e0e-124">If one is not found then instantiate it directly.</span></span></summary>
        <returns><span data-ttu-id="45e0e-125">Разрешенная служба или созданный экземпляр.</span><span class="sxs-lookup"><span data-stu-id="45e0e-125">The resolved service or created instance</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
