<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b0ce02435dc004c4e56705667ede4b0e0844cb7" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70475320" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Определяет базовую реализацию диспетчера авторизации утверждений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> Класс предоставляет базовую реализацию для диспетчера авторизации утверждений. Диспетчер авторизации утверждений можно использовать в следующих двух сценариях:  
  
-   В веб-приложениях и службах Диспетчер авторизации утверждений можно добавить в конвейер обработки, чтобы предоставить точку расширения, из которой можно авторизовать доступ к ресурсу в соответствии со значением входящих утверждений перед кодом приложения. в действительности вызывается запрошенный ресурс.  
  
-   При использовании <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> класса <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> или класса для выполнения в коде принудительных или декларативных проверок доступа на основе утверждений Диспетчер авторизации утверждений, настроенный для приложения, вызывается системой для выполнения отмечен. Проверки доступа на основе утверждений можно выполнять как в веб-приложениях, так и в настольных приложениях.  
  
 Реализация по умолчанию, предоставляемая <xref:System.Security.Claims.ClaimsAuthorizationManager> классом, авторизует доступ для каждого представленного утверждения, однако вы можете наследовать от этого класса и <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> переопределить метод для предоставления собственной логики авторизации.  
  
 Использование диспетчера авторизации утверждений является необязательным. Вы можете настроить приложение для использования диспетчера авторизации утверждений либо программно с помощью <xref:System.IdentityModel.Configuration.IdentityConfiguration> класса, либо декларативно, [ &lt;указав элемент claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) , который является дочерний элемент [ &lt;элемента&gt; identityConfiguration](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) в файле конфигурации приложения. Если приложение является веб-сайтом или веб-приложением, размещенным в службы IIS (IIS), необходимо также добавить <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> в коллекцию ASP.NET HTTP modules.  
  
> [!IMPORTANT]
>  При использовании <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> класса <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> или класса Диспетчер авторизации утверждений, используемый для проверки доступа, — это тот, который указан в конфигурации удостоверений в <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> свойстве. В файле `<identityConfiguration>` конфигурации это раздел, на который ссылается элемент по умолчанию `<federationConfiguration>` . Это справедливо даже для служб Windows Communication Foundation (WCF) и классических приложений.  
  
 Базовый класс не принимает никаких дополнительных настроек, однако можно <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> переопределить в производных классах, чтобы обеспечить инициализацию диспетчера авторизации утверждений `<claimsAuthorizationElement>`из дочерних элементов объекта. <xref:System.Security.Claims.ClaimsAuthorizationManager> Типичный сценарий заключается в использовании этих дочерних элементов для указания политик авторизации, которые определяют, какие типы и значения утверждений необходимы для получения доступа к какому ресурсу. Это не является жестким требованием, хотя вы можете определить, какое использование и синтаксис будут осмысленными для вашей реализации.  
  
   
  
## Examples  
 Примеры кода, используемые в <xref:System.Security.Claims.ClaimsAuthorizationManager> подразделах, взяты `Claims Based Authorization` из примера. В этом примере представлен настраиваемый диспетчер авторизации утверждений, который может авторизовать субъекты на основе политики, указанной в конфигурации. Пользовательский диспетчер авторизации утверждений состоит из трех основных компонентов: класс, производный <xref:System.Security.Claims.ClaimsAuthorizationManager> от, который реализует диспетчер `ResourceAction` , класс, который объединяет ресурс и действие, а также средство чтения политики, которое считывает и компилирует политику, которая является задается в файле конфигурации. Эта скомпилированная политика затем может использоваться диспетчером авторизации утверждений для проверки субъекта с целью авторизации доступа к ресурсам. Для краткости показаны не все элементы. Сведения об этом образце и других примерах, доступных для WIF, и о месте их загрузки см. в разделе [индекс примера кода WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 В следующем коде показана реализация настраиваемого диспетчера авторизации утверждений. Метод считывает и компилирует политику из конфигурации с помощью вспомогательного класса чтения политики (не показано) <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> , и метод предоставляет или запрещает доступ на основе этой политики. <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 В следующем коде показан `ResourceAction` класс, используемый настраиваемым диспетчером утверждений.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 В следующем коде XML показано, как настроить диспетчер авторизации утверждений, показанный выше, для веб-приложения, размещенного в IIS 7,5. Отображаются только элементы, относящиеся к конфигурации диспетчера авторизации утверждений. Обратите внимание, что ссылка <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> на класс должна быть добавлена в конвейер `<system.Webserver>` под элементом. Для сайтов и приложений, размещенных в версиях IIS до IIS 7, модули можно добавить в конвейер под `<system.Web>` элементом. Эта конфигурация отображается, но в нее Добавлено Примечание.  
  
 Политика, используемая диспетчером авторизации утверждений, задается пользовательскими `<policy>` элементами [ &lt;в элементе claimsAuthorizationManager.&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) В первой политике участник должен обладать одним из указанных утверждений для выполнения указанного действия с указанным ресурсом. Во второй политике участник должен обладать обоими утверждениями, чтобы иметь возможность выполнить указанное действие с указанным ресурсом. Во всех остальных случаях субъекту автоматически предоставляется доступ независимо от того, какие заявки он владеет.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Контекст авторизации, который содержит тему, ресурс и действие, для которых необходимо проверить авторизацию.</param>
        <summary>При реализации в производном классе проверяет авторизацию для субъекта в указанном контексте, чтобы выполнить заданное действие в указанном ресурсе.</summary>
        <returns>Значение <see langword="true" />, если субъекту разрешено выполнение указанного действия с указанным ресурсом; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Базовая реализация всегда возвращает значение `true`, которое разрешает доступ. Этот метод можно переопределить в производном классе, чтобы авторизовать доступ на основе требований приложения RP. Если этот метод возвращает `false`значение, Windows Identity Foundation (WIF) возвращает вызывающему объекту ошибку с несанкционированным доступом; в противном случае выполнение передается приложению RP.  
  
   
  
## Examples  
 Примеры кода, используемые в <xref:System.Security.Claims.ClaimsAuthorizationManager> подразделах, взяты `Claims Based Authorization` из примера. В этом примере представлен настраиваемый диспетчер авторизации утверждений, который может авторизовать субъекты на основе политики, указанной в конфигурации. Пользовательский диспетчер авторизации утверждений состоит из трех основных компонентов: класс, производный <xref:System.Security.Claims.ClaimsAuthorizationManager> от, который реализует диспетчер `ResourceAction` , класс, который объединяет ресурс и действие, а также средство чтения политики, которое считывает и компилирует политику, которая является задается в файле конфигурации. Эта скомпилированная политика затем может использоваться диспетчером авторизации утверждений для проверки субъекта с целью авторизации доступа к ресурсам. Для краткости показаны не все элементы. Сведения об этом образце и других примерах, доступных для WIF, и о месте их загрузки см. в разделе [индекс примера кода WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 В следующем коде показано переопределение <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> метода. Этот метод предоставляет или запрещает доступ на основе политики, считанной и скомпилированной из файла конфигурации.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 В следующем коде показан `ResourceAction` класс, используемый настраиваемым диспетчером утверждений.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Политика, используемая диспетчером авторизации утверждений, задается пользовательскими `<policy>` элементами [ &lt;в элементе claimsAuthorizationManager.&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) Эта политика считывается и компилируется <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> методом. В первой политике участник должен обладать одним из указанных утверждений для выполнения указанного действия с указанным ресурсом. Во второй политике участник должен обладать обоими утверждениями, чтобы иметь возможность выполнить указанное действие с указанным ресурсом. Во всех остальных случаях субъекту автоматически предоставляется доступ независимо от того, какие заявки он владеет.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Пользовательские элементы конфигурации. Каждый узел в списке имеет тип <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>При переопределении в производном классе загружает пользовательскую конфигурацию из XML-кода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Метод вызывается инфраструктурой конфигурации. При вызове этого метода объект `nodelist` будет содержать дочерние элементы [ &lt;верхнего уровня элемента claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) из файла конфигурации. Каждый из этих элементов, в свою очередь, может содержать атрибуты или дочерние элементы в зависимости от схемы конфигурации, определяемой для производного класса. Если в `<claimsAuthorizationManager>` элементе файла конфигурации не отображаются дочерние элементы, этот метод не вызывается.  
  
 Реализация по умолчанию создает <xref:System.NotImplementedException>исключение. Переопределите этот метод в производном классе, чтобы включить инициализацию диспетчера авторизации утверждений из файла конфигурации. Как правило, элементы конфигурации используются для выражения политики авторизации. Однако можно определить элементы и использовать их любым способом, который имеет смысл в зависимости от требований приложения.  
  
   
  
## Examples  
 Примеры кода, используемые в <xref:System.Security.Claims.ClaimsAuthorizationManager> подразделах, взяты `Claims Based Authorization` из примера. В этом примере представлен настраиваемый диспетчер авторизации утверждений, который может авторизовать субъекты на основе политики, указанной в конфигурации. Пользовательский диспетчер авторизации утверждений состоит из трех основных компонентов: класс, производный <xref:System.Security.Claims.ClaimsAuthorizationManager> от, который реализует диспетчер `ResourceAction` , класс, который объединяет ресурс и действие, а также средство чтения политики, которое считывает и компилирует политику, которая является задается в файле конфигурации. Эта скомпилированная политика затем может использоваться диспетчером авторизации утверждений для проверки субъекта с целью авторизации доступа к ресурсам. Для краткости показаны не все элементы. Сведения об этом образце и других примерах, доступных для WIF, и о месте их загрузки см. в разделе [индекс примера кода WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 В следующем коде показано переопределение <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> метода. Этот метод использует класс модуля чтения вспомогательных политик (не показан) для чтения и компиляции политик авторизации, указанных в файле конфигурации. Политики добавляются в словарь и обращаются по `ResourceAction` ключевому объекту, созданному на основе ресурса и действия, для которых они предназначены.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 В следующем коде показан `ResourceAction` класс, используемый настраиваемым диспетчером утверждений.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Политика, используемая диспетчером авторизации утверждений, задается пользовательскими `<policy>` элементами [ &lt;в элементе claimsAuthorizationManager.&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) Эта политика считывается и компилируется <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> методом. В первой политике участник должен обладать одним из указанных утверждений для выполнения указанного действия с указанным ресурсом. Во второй политике участник должен обладать обоими утверждениями, чтобы иметь возможность выполнить указанное действие с указанным ресурсом. Во всех остальных случаях субъекту автоматически предоставляется доступ независимо от того, какие заявки он владеет.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
