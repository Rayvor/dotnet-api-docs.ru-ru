<Type Name="IQueryAmbient" FullName="System.Windows.Markup.IQueryAmbient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7412669d16ca6897e348def6cc8c79c20d146f1f" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64202294" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public interface class IQueryAmbient" />
  <TypeSignature Language="F#" Value="type IQueryAmbient = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Запрашивает, должно ли заданное свойство в текущей области обрабатываться как свойство окружения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цель внешнего свойства — сокращение времени синтаксического анализа путем информирования средство записи объектов XAML, чтобы избежать создания экземпляров определенных объектов, в случаях, когда известно, что объекты предназначены для значений, которые являются временными и не будет полезным для обычное время выполнения приложение. Как правило уточняющие запросы XAML или XAML обработку метод доступа get свойства должны создать такие объекты, чтобы заполнить представление графа объектов со значениями готовые к использованию.  
  
 <xref:System.Windows.Markup.IQueryAmbient> имеется один член: <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>.  
  
 <xref:System.Windows.Markup.IQueryAmbient> — Это механизм параллельного <xref:System.Windows.Markup.AmbientAttribute>. <xref:System.Windows.Markup.IQueryAmbient> — специализированный механизм, который позволяет избежать использования отражения для получения сведений, а также могут act situationally (данный объект может выбрать отчет `true` или `false` для <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>), тогда как атрибут является статическим Анализ). <xref:System.Windows.Markup.AmbientAttribute> — Универсальный механизм, который может использоваться средства записи объектов XAML, и, обычно связано с выделенные свойства системы типов XAML <xref:System.Xaml.XamlMember.IsAmbient%2A> и <xref:System.Xaml.XamlType.IsAmbient%2A>.  
  
## <a name="wpf-implementations-of-iqueryambient"></a>IQueryAmbient, реализованных в WPF  
 В WPF <xref:System.Windows.Markup.IQueryAmbient> используется для процесса поиска словаря ресурсов. Процесс поиска возвращает последовательные `Resources` значения в логическом дереве WPF, двигаясь от корня области видимости ресурса либо до ключ найден, или ключ определяется как не существует в области. Как правило, это потребует создания экземпляра <xref:System.Windows.ResourceDictionary> каждый раз для получения результатов. Объявление содержимого `Resources` как свойство окружения, поскольку при `Resources` существует оптимизирует данный процесс поиска. В WPF этот интерфейс реализуется в следующих случаях:  
  
-   <xref:System.Windows.FrameworkElement> реализует <xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A> для возврата `true` для всех имен свойств, если он содержит существующий <xref:System.Windows.ResourceDictionary> для <xref:System.Windows.FrameworkElement.Resources%2A>, и до тех пор, пока запрос не для <xref:System.Windows.FrameworkElement.Resources%2A> само свойство.  
  
-   <xref:System.Windows.Style> реализует тот же шаблон для его <xref:System.Windows.Style.Resources%2A>.  
  
-   <xref:System.Windows.Application> реализует тот же шаблон для его <xref:System.Windows.Application.Resources%2A>.  
  
-   <xref:System.Windows.FrameworkContentElement> реализует тот же шаблон для его <xref:System.Windows.FrameworkContentElement.Resources%2A>.  
  
-   <xref:System.Windows.FrameworkTemplate> реализует тот же шаблон для его <xref:System.Windows.FrameworkTemplate.Resources%2A>. В нем также указаны <xref:System.Windows.FrameworkTemplate.Template%2A> содержимого возвращает окружения но `false` при запросе для <xref:System.Windows.FrameworkTemplate.Template%2A> сам.  
  
-   В каждом из этих случаев, соответствующих `Resources` свойство (и <xref:System.Windows.FrameworkTemplate.Template%2A>) как <xref:System.Windows.Markup.AmbientAttribute>. Типичный сценарий использования — для обращения к свойству, которые не являются <xref:System.Windows.Markup.AmbientAttribute> с атрибутами свойства объекта, который определяет интерфейс. Другими словами до тех пор, пока словарь ресурсов существует для обеспечения потенциальное время выполнения при создании графа объектов, любое другое свойство, помимо контейнер свойств в словаре ресурсов может обрабатываться как свойство окружения.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
  </Docs>
  <Members>
    <Member MemberName="IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="public bool IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbientPropertyAvailable (propertyName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbientPropertyAvailable(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member IsAmbientPropertyAvailable : string -&gt; bool" Usage="iQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Имя свойства, состояние окружения которого необходимо проверить.</param>
        <summary>Запрашивает, можно ли считать заданное именованное свойство в текущей области свойством окружения.</summary>
        <returns>Значение <see langword="true" />, если запрашиваемое свойство можно считать свойством окружения; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>