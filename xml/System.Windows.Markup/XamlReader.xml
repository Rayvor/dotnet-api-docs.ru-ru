<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="35c41088e2d1020cd99f7570565c144f44b3e76c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70500270" /></Metadata><TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Считывает входные данные XAML и создает граф объекта с использованием средства чтения XAML по умолчанию в составе WPF и соответствующего средства записи объектов XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Синхронные <xref:System.Windows.Markup.XamlReader.Load%2A> методы являются статическими, но асинхронные <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> методы не являются статическими и <xref:System.Windows.Markup.XamlReader> нуждаются в использовании экземпляра класса.  
  
 Выходные данные `Load` методов представляют собой один объект, представляющий корневой объект созданного дерева объектов или графа объекта. Графы объектов, созданные с <xref:System.Windows.Markup.XamlReader> помощью, обычно добавляются в существующее дерево объектов приложения WPF во время выполнения. В противном случае новый граф объектов считается отключенным для модели приложения WPF. Это означает, что он не отображается, и к нему нельзя получить доступ с помощью любых методов дерева объектов, применяемых к главному дереву объектов приложения WPF (например, API <xref:System.Windows.FrameworkElement.FindName%2A>- <xref:System.Windows.LogicalTreeHelper>интерфейсы <xref:System.Windows.Media.VisualTreeHelper>,,). Дополнительные сведения об основных понятиях дерева объектов см. [в разделе деревья в WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader>поддерживает следующие основные сценарии.  
  
-   **Клонирование или фабрика объектов**. без дополнительных механизмов ссылочный тип обычно не может включаться в несколько позиций в дереве объектов WPF. (Примеры дополнительных механизмов, которые предлагают поддержку для совместного использования или повторного использования в WPF, включают объекты, <xref:System.Windows.Freezable>основанные на, или поддержку общих объектов, таких <xref:System.Windows.Media.Brush> как, на которые ссылаются <xref:System.Windows.ResourceDictionary>как на элемент из.) Одним из способов клонирования объекта, который уже находится в дереве объектов, является сериализация объекта с помощью <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Затем сериализованная строка используется в качестве входных данных для вызова <xref:System.Windows.Markup.XamlReader.Load%2A>с помощью потока или <xref:System.Xml.XmlReader> в качестве посредника.  
  
-   **Создание объектов на основе JIT-информации**. часто существуют другие способы, с помощью которых с поздним связыванием или входными данными пользователь изменяет состояние существующих объектов. Например, можно использовать одно и то же значение для задания более одного свойства или использовать привязку данных. Но если у вас есть сценарий, в котором даже тип создаваемого объекта определяется только во время выполнения или при взаимодействии с пользователем, создание такого объекта путем создания строки для <xref:System.Windows.Markup.XamlReader.Load%2A> ввода часто является полезной методикой.  
  
-   **Использование существующих методов использования ресурсов**. <xref:System.IO.Stream> тип часто используется в других платформах или технологиях для передачи данных или объектов по границам приложений или в подобных ситуациях. Затем можно использовать <xref:System.IO.Stream> методы для хранения или получения данных в формате XAML, которые в конечном итоге будут использоваться для создания объекта в составе приложения.  
  
-   **Фиксированные документы:** Приложение может загружать локальные или загруженные документы XPS для включения в дерево объектов приложения WPF и пользовательский интерфейс.  
  
> [!NOTE]
>  В этой документации иногда описывается граф объектов, а не дерево объектов. В отношении объектов времени выполнения приложения WPF времени выполнения не всегда существует иерархическая связь типа «родители-потомки», поэтому граф объектов — это более широко применяемая терминология. Однако, поскольку WPF также включает два различных API-интерфейса для концептуального <xref:System.Windows.Media.VisualTreeHelper>дерева (<xref:System.Windows.LogicalTreeHelper>,), метафора дерева по-прежнему применима к большинству реальных случаев в WPF. С точки зрения языка XAML, граф объектов часто является лучшим способом подумать о том, как объекты создаются из XAML, поскольку сам язык XAML не обязательно указывает методологии вспомогательного класса, которые предоставляют отношения более в снова древовидная структура.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Безопасность доступа к коду, свободный XAML и XamlReader  
 XAML — это язык разметки, непосредственно представляющий создание и выполнение объекта. Таким образом, элементы, созданные в XAML, имеют такие же возможности взаимодействия с системными ресурсами (например, сетевой доступ и операции ввода-вывода файловой системы), как и эквивалентный созданный код.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]поддерживает платформу [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]безопасности. Это означает, что содержимое [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], работающее в зоне Интернет, сократило разрешения исполнения. "Свободный XAML" (страницы некомпилированного XAML, интерпретируемые во время загрузки средства просмотра XAML) и [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] обычно выполняются в этой Интернет-зоне и используют один набор разрешений.  Однако XAML, загруженный в полностью доверенное приложение, имеет такой же доступ к системным ресурсам, как ведущее приложение. Дополнительные сведения см. в разделе [Безопасность частичного доверия в WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Влияние этих инструкций на <xref:System.Windows.Markup.XamlReader> то, что проект приложения должен принимать решения о доверии XAML, который вы решили загрузить. Если вы загружаете код XAML, который не является доверенным, рассмотрите возможность реализации собственного метода "песочницы" для загрузки результирующего графа объекта.  
  
 <xref:System.Windows.Markup.XamlReader>также может вызываться частично доверенным кодом. В этом случае зона безопасности Интернета применяется для управления доступом для кода. Если в зоне безопасности Интернета все данные в загруженном коде XAML недопустимы, возникает исключение синтаксического анализа XAML. В XBAP и других случаях с частичным доверием на уровне платформы, где <xref:System.Windows.Markup.XamlReader> является частью выполнения, возникает то же поведение исключения, что и при явном вызове частичного доверия.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>XAML WPF, средства чтения и записи XAML и управление версиями на языке XAML  
 XAML2009 включает такие языковые функции, как [x:Reference](~/docs/framework/xaml-services/x-reference-markup-extension.md) и [x:FactoryMethod](~/docs/framework/xaml-services/x-factorymethod-directive.md). Для загрузки XAML, использующего `Parse` эти функции, можно использовать сигнатуры `Load` или. Однако эти функции языка не поддерживаются для XAML, который должен быть скомпилирован в виде разметки (например, XAML для действия сборки **страницы** в приложении WPF или любого XAML, включающего в себя задачу компиляции разметки в действиях сборки).  
  
 Типы WPF и технология WPF в общих понятиях поддержки, основанных на доступе к внутренним компонентам WPF. Например, как WPF реализует свойства зависимостей, полагается на внутренние методы для эффективного уточняющего запроса типа-члена. Доступ к этим внутренним компонентам осуществляется с помощью API-интерфейсов чтения и <xref:System.Windows.Markup.XamlWriter> записи <xref:System.Windows.Markup.XamlReader> XAML, <xref:System.Windows.Markup> предоставляемых в и из пространства имен и сборки PresentationFramework. Однако средства чтения и записи XAML нижнего уровня из сборки System. XAML (классы, <xref:System.Xaml.XamlReader?displayProperty=nameWithType> <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>основанные на) не имеют доступа к внутренним компонентам WPF. Нет зависимости от System. XAML к какой-либо сборке, относящейся к WPF. Без доступа к внутренним компонентам WPF средства чтения и записи System. XAML не могут правильно загружать или сохранять все типы WPF или типы, основанные на типах WPF. В частности, средства чтения и записи System. XAML не понимают таких концепций, как хранилище свойств зависимостей WPF, или все особенности того, как WPF использует стили, словари ресурсов и шаблоны. Поэтому у вас есть возможность сделать следующее:  
  
-   Если вы загружаете типы WPF и (или) используете XAML в форме BAML, используйте средства чтения и записи XAML PresentationFramework.  
  
-   Если вы не полагаетесь на типы WPF или форму BAML XAML, а также не используете другую конкретную технологию чтения XAML или реализацию модуля записи XAML по причинам, относящимся к этой платформе, используйте средства чтения и записи XAML System. XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>Реализация резервного копирования System. XAML в .NET 4  
 <xref:System.Windows.Markup.XamlReader>— это вызываемая поверхность API для средства синтаксического анализа XAML на уровне платформы WPF. То же самое базовое средство синтаксического анализа XAML также выполняет загрузку и синтаксический анализ XAML во время выполнения для [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] приложений [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]WPF, предназначенных для и.  
  
 Если целевой платформой [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]является, внешний API будет одинаковым, но части реализации основаны [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] на общей реализации XAML в сборке System. XAML, что улучшает многие технические и отчетные аспекты синтаксического анализа XAML. Нацеливание [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] обязательно включает в себя System. XAML как ссылку, а подробные сведения о реализации, например о возникших исключениях, могут поступать из определенных типов System. XAML.  
  
## Examples  
 В следующем примере преобразуется <xref:System.Windows.Controls.Button> в строку <xref:System.Windows.Markup.XamlWriter> с помощью класса.  Затем строка загружается обратно в объект <xref:System.Windows.Controls.Button> , используя статический <xref:System.Windows.Markup.XamlReader.Load%2A> метод для <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Прерывает текущую операцию асинхронной загрузки, если имеется отложенная асинхронная операция загрузки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A>является асинхронной операцией; Поэтому может произойти некоторое количество загрузок до отмены операции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Xaml.XamlSchemaContext" />, который представляет параметры схемы контекста WPF для класса <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>Объект <see cref="T:System.Xaml.XamlSchemaContext" />, который представляет параметры контекста схемы WPF для класса <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает входные данные XAML и возвращает корень соответствующего дерева объектов.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XAML для загрузки в форме потока.</param>
        <summary>Считывает входные данные XAML в указанном пространстве имен <see cref="T:System.IO.Stream" /> и возвращает корневой объект <see cref="T:System.Object" /> соответствующего дерева объектов.</summary>
        <returns>Объект в корне созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере объект <xref:System.Windows.Controls.Button> сохраняется <xref:System.IO.MemoryStream> в с помощью <xref:System.Windows.Markup.XamlWriter> класса. Затем поток загружается обратно в объект <xref:System.Windows.Controls.Button> , используя статический <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Xaml.XamlReader" />. Ожидается, что он инициализируется входными данными XAML.</param>
        <summary>Считывает входные данные XAML через предоставленный класс <see cref="T:System.Xaml.XamlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Входные <xref:System.Xaml.XamlReader> данные могут <xref:System.Windows.Baml2006.Baml2006Reader>иметь значение. Таким способом можно загрузить BAML во время выполнения или для целей средства локализации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Класс <see cref="T:System.Xml.XmlReader" />, который уже загрузил входные данные XAML, чтобы загрузить в XML-форму.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.Xml.XmlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере преобразуется <xref:System.Windows.Controls.Button> в строку <xref:System.Windows.Markup.XamlWriter> с помощью класса.  Затем строка загружается обратно в объект <xref:System.Windows.Controls.Button> , используя статический <xref:System.Windows.Markup.XamlReader.Load%2A> метод для <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="reader" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий входные данные XAML для загрузки.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stream" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="parserContext" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает разметку XAML и возвращает объект, соответствующий корню указанной разметки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий загружаемые входные данные XAML.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML сначала возвращает объект, являющийся только корневым объектом. В асинхронном режиме синтаксический анализ XAML продолжится, а все дочерние объекты заполняются в корне. Это отличается от типичного поведения обработки XAML WPF и его взаимодействия с концепциями WPF времени существования объекта. В обычном (не асинхронном) взаимодействии все свойства объекта, включая все дочерние коллекции, заполняются перед возвратом элемента и передачей его как загруженного. Это поведение соответствует методологии снизу вверх для создания дерева, в котором корневой объект является последним объектом, который должен стать доступным.  
  
 Как правило, возвращаемый объект назначается определенному расположению в дереве объектов приложения WPF с учетом того, что содержимое может по-прежнему заполняться и может вызвать добавочное обновление макета, если все содержимое предоставляется как часть пользовательского интерфейса. По этой причине обычно выполняется изоляция или виртуализация любых асинхронно загруженных объектов из XAML и использование логики приложения или состояния приложения для уведомления об <xref:System.Windows.Markup.XamlReader.LoadCompleted> обработке.  
  
 Чтобы асинхронно загружать входные данные XAML, корневой элемент во входных данных XAML должен содержать атрибут и значение  `x:SynchronousMode="Async"` .  <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> Значение обрабатывается с учетом регистра. Если корневой вход XAML не содержит `x:SynchronousMode="Async"`, исключение не создается и вызов обрабатывается как синхронная Загрузка (см <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>.).  
  
 В каждый момент времени может выполняться только одна асинхронная операция загрузки для каждого экземпляра <xref:System.Windows.Markup.XamlReader> класса.  Если при попытке выполнить несколько асинхронных операций на одном и том же экземпляре <xref:System.Windows.Markup.XamlReader> <xref:System.InvalidOperationException> класса возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки с одним <see cref="T:System.Windows.Markup.XamlReader" /> параллельно поставлены в режим ожидания.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Существующий класс <see cref="T:System.Xml.XmlReader" />, который уже загрузил/прочитал входные данные XAML.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.Xml.XmlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML сначала возвращает объект, являющийся только корневым объектом. В асинхронном режиме синтаксический анализ XAML продолжится, а все дочерние объекты заполняются в корне. Это отличается от типичного поведения обработки XAML WPF и его взаимодействия с концепциями WPF времени существования объекта. В обычном (не асинхронном) взаимодействии все свойства объекта, включая все дочерние коллекции, заполняются перед возвратом элемента и передачей его как загруженного. Это поведение соответствует методологии снизу вверх для создания дерева, в котором корневой объект является последним объектом, который должен стать доступным.  
  
 Как правило, возвращаемый объект <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> назначается в каком-либо расположении в дереве объектов приложения с учетом того, что содержимое может заполняться и может вызвать добавочное обновление макета, если все содержимое предоставляется как часть элемента Интерфейса. По этой причине обычно выполняется изоляция или виртуализация любых асинхронно загруженных объектов из XAML и использование логики приложения или состояния приложения для уведомления об <xref:System.Windows.Markup.XamlReader.LoadCompleted> обработке.  
  
 Чтобы асинхронно загружать входные данные XAML, корневой элемент в разметке XAML должен содержать атрибут и значение  `x:SynchronousMode="Async"` .  <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> Значение обрабатывается с учетом регистра. Если корень разметки XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, а вызов обрабатывается как синхронная Загрузка (см <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>.).  
  
 В каждый момент времени может выполняться только одна асинхронная операция загрузки для каждого экземпляра <xref:System.Windows.Markup.XamlReader> класса.  Если при попытке выполнить несколько асинхронных операций на одном и том же экземпляре <xref:System.Windows.Markup.XamlReader> <xref:System.InvalidOperationException> класса возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки параллельно выполняется с одним <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий загружаемые входные данные XAML.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML сначала возвращает объект, являющийся только корневым объектом. В асинхронном режиме синтаксический анализ XAML продолжится, а все дочерние объекты заполняются в корне. Это отличается от типичного поведения обработки XAML WPF и его взаимодействия с концепциями WPF времени существования объекта. В обычном (не асинхронном) взаимодействии все свойства объекта, включая все дочерние коллекции, заполняются перед возвратом элемента и передачей его как загруженного. Это поведение соответствует методологии снизу вверх для создания дерева, в котором корневой объект является последним объектом, который должен стать доступным.  
  
 Как правило, возвращаемый объект назначается определенному расположению в дереве объектов вашего приложения, с учетом того, что содержимое может по-прежнему заполняться и может вызвать добавочное обновление макета, если все содержимое предоставляется как часть пользовательского интерфейса. По этой причине обычно выполняется изоляция или виртуализация любых асинхронно загруженных объектов из XAML и использование логики приложения или состояния приложения для уведомления об <xref:System.Windows.Markup.XamlReader.LoadCompleted> обработке.  
  
 Чтобы загрузить разметку асинхронно, корневой элемент в разметке XAML должен содержать атрибут и значение  `x:SynchronousMode="Async"` .  <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> Значение обрабатывается с учетом регистра. Если корень разметки XAML не содержит `x:SynchronousMode="Async"`, исключение не создается и вызов обрабатывается как синхронная Загрузка (см <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>.).  
  
 В каждый момент времени может выполняться только одна асинхронная операция загрузки для каждого экземпляра <xref:System.Windows.Markup.XamlReader> класса.  Если при попытке выполнить несколько асинхронных операций на одном и том же экземпляре <xref:System.Windows.Markup.XamlReader> <xref:System.InvalidOperationException> класса возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stream" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки параллельно выполняется с одним <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по завершении операции асинхронной загрузки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted>также вызывается при прерывании асинхронной операции загрузки.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает разметку в указанной текстовой строке и возвращает объект, соответствующий корню указанной разметки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Введенное значение XAML как единственная текстовая строка.</param>
        <summary>Считывает входные данные XAML в указанной текстовой строке и возвращает объект, соответствующий корню указанной разметки.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация вызывается <xref:System.Windows.Markup.XamlReader.Load%2A> внутренне после создания потока из строки. Дополнительные <xref:System.Windows.Markup.XamlReader.Load%2A> сведения, например возможные исключения, см. в разделе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Введенное значение XAML как единственная текстовая строка.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает разметку XAML в указанной текстовой строке (используя указанный класс <see cref="T:System.Windows.Markup.ParserContext" />) и возвращает объект, соответствующий корню указанной разметки.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация вызывается <xref:System.Windows.Markup.XamlReader.Load%2A> внутренне после создания потока из строки. Дополнительные <xref:System.Windows.Markup.XamlReader.Load%2A> сведения, например возможные исключения, см. в разделе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
