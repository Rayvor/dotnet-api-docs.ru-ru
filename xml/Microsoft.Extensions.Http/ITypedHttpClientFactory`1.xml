<Type Name="ITypedHttpClientFactory&lt;TClient&gt;" FullName="Microsoft.Extensions.Http.ITypedHttpClientFactory&lt;TClient&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07e3400a72020d63daefc86de541895289f22c39" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75155024" /></Metadata><TypeSignature Language="C#" Value="public interface ITypedHttpClientFactory&lt;TClient&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypedHttpClientFactory`1&lt;TClient&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypedHttpClientFactory(Of TClient)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TClient&gt;&#xA;public interface class ITypedHttpClientFactory" />
  <TypeSignature Language="F#" Value="type ITypedHttpClientFactory&lt;'Client&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TClient" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TClient"><span data-ttu-id="25d2c-101">Тип создаваемого типизированного клиента.</span><span class="sxs-lookup"><span data-stu-id="25d2c-101">The type of typed client to create.</span></span></typeparam>
    <summary><span data-ttu-id="25d2c-102">Абстракция фабрики для компонента, который может создавать типизированные экземпляры клиента с пользовательской конфигурацией для заданного логического имени.</span><span class="sxs-lookup"><span data-stu-id="25d2c-102">A factory abstraction for a component that can create typed client instances with custom configuration for a given logical name.</span></span></summary>
    <remarks><para>
<span data-ttu-id="25d2c-103"><see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> — это инфраструктура, которая поддерживает функции <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" /> и <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-103">The <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> is infrastructure that supports the <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" /> and <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" /> functionality.</span></span> <span data-ttu-id="25d2c-104">Этот тип следует редко использовать непосредственно в коде приложения, вместо этого следует использовать <see cref="M:System.IServiceProvider.GetService(System.Type)" /> для получения типизированных клиентов.</span><span class="sxs-lookup"><span data-stu-id="25d2c-104">This type should rarely be used directly in application code, use <see cref="M:System.IServiceProvider.GetService(System.Type)" /> instead to retrieve typed clients.</span></span>
             </para>
      <para>
<span data-ttu-id="25d2c-105"><see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> по умолчанию можно зарегистрировать в <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />, вызвав <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-105">A default <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> can be registered in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> by calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />.</span></span>
<span data-ttu-id="25d2c-106"><see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> по умолчанию будет зарегистрирована в коллекции служб как одноэлементная служба с открытым универсальным именем.</span><span class="sxs-lookup"><span data-stu-id="25d2c-106">The default <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> will be registered in the service collection as a singleton open-generic service.</span></span>
             </para>
      <para>
<span data-ttu-id="25d2c-107"><see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> по умолчанию использует активацию типа для создания типизированных экземпляров клиента.</span><span class="sxs-lookup"><span data-stu-id="25d2c-107">The default <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> uses type activation to create typed client instances.</span></span> <span data-ttu-id="25d2c-108">Типизированные типы клиентов не извлекаются непосредственно из <see cref="T:System.IServiceProvider" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-108">Typed client types are not retrieved directly from the <see cref="T:System.IServiceProvider" />.</span></span> <span data-ttu-id="25d2c-109">Подробные сведения см. в разделе <see cref="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-109">See <see cref="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])" /> for details.</span></span>
             </para></remarks>
    <example><span data-ttu-id="25d2c-110">В этом примере показан базовый шаблон для определения типизированного клиентского класса.</span><span class="sxs-lookup"><span data-stu-id="25d2c-110">This sample shows the basic pattern for defining a typed client class.</span></span>
             <code>
             class ExampleClient
             {
                 private readonly HttpClient _httpClient;
                 private readonly ILogger _logger;
            
                 // typed clients can use constructor injection to access additional services
                 public ExampleClient(HttpClient httpClient, ILogger&lt;ExampleClient&gt; logger)
                 {
                     _httpClient = httpClient;
                     _logger = logger;     
                 }
            
                 // typed clients can expose the HttpClient for application code to call directly
                 public HttpClient HttpClient =&gt; _httpClient;
            
                 // typed clients can also define methods that abstract usage of the HttpClient
                 public async Task SendHelloRequest()
                 {
                     var response = await _httpClient.GetAsync("/helloworld");
                     response.EnsureSuccessStatusCode();
                 }
             }
             </code></example>
    <example><span data-ttu-id="25d2c-111">В этом примере показано, как использовать типизированный клиент из по промежуточного слоя ASP.NET Core.</span><span class="sxs-lookup"><span data-stu-id="25d2c-111">This sample shows how to consume a typed client from an ASP.NET Core middleware.</span></span>
             <code>
             // in Startup.cs
             public void Configure(IApplicationBuilder app, ExampleClient exampleClient)
             {
                 app.Run(async (context) =&gt;
                 {
                     var response = await _exampleClient.GetAsync("/helloworld");
                     await context.Response.WriteAsync("Remote server said: ");
                     await response.Content.CopyToAsync(context.Response.Body);
                 });
             }
             </code></example>
    <example><span data-ttu-id="25d2c-112">В этом примере показано, как использовать типизированный клиент из контроллера ASP.NET Core MVC.</span><span class="sxs-lookup"><span data-stu-id="25d2c-112">This sample shows how to consume a typed client from an ASP.NET Core MVC Controller.</span></span>
             <code>
             // in Controllers/HomeController.cs
             public class HomeController : ControllerBase(IApplicationBuilder app, ExampleClient exampleClient)
             {
                 private readonly ExampleClient _exampleClient;
            
                 public HomeController(ExampleClient exampleClient)
                 {
                     _exampleClient = exampleClient;
                 }
            
                 public async Task&lt;IActionResult&gt; Index()
                 {
                     var response = await _exampleClient.GetAsync("/helloworld");
                     var text = await response.Content.ReadAsStringAsync();
                     return Content("Remote server said: " + text, "text/plain");
                 };
             }
             </code></example>
  </Docs>
  <Members>
    <Member MemberName="CreateClient">
      <MemberSignature Language="C#" Value="public TClient CreateClient (System.Net.Http.HttpClient httpClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TClient CreateClient(class System.Net.Http.HttpClient httpClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.ITypedHttpClientFactory`1.CreateClient(System.Net.Http.HttpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TClient CreateClient(System::Net::Http::HttpClient ^ httpClient);" />
      <MemberSignature Language="F#" Value="abstract member CreateClient : System.Net.Http.HttpClient -&gt; 'Client" Usage="iTypedHttpClientFactory.CreateClient httpClient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpClient" Type="System.Net.Http.HttpClient" />
      </Parameters>
      <Docs>
        <param name="httpClient"><span data-ttu-id="25d2c-113">Объект <see cref="T:System.Net.Http.HttpClient" />, создаваемый фабрикой <see cref="T:System.Net.Http.IHttpClientFactory" /> для именованного клиента, связанного с <typeparamref name="TClient" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-113">An <see cref="T:System.Net.Http.HttpClient" /> created by the <see cref="T:System.Net.Http.IHttpClientFactory" /> for the named client associated with <typeparamref name="TClient" />.</span></span></param>
        <summary><span data-ttu-id="25d2c-114">Создает типизированный клиент для связанного объекта <see cref="T:System.Net.Http.HttpClient" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-114">Creates a typed client given an associated <see cref="T:System.Net.Http.HttpClient" />.</span></span></summary>
        <returns><span data-ttu-id="25d2c-115">Экземпляр <typeparamref name="TClient" />.</span><span class="sxs-lookup"><span data-stu-id="25d2c-115">An instance of <typeparamref name="TClient" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
