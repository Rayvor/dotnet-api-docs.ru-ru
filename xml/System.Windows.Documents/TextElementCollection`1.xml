<Type Name="TextElementCollection&lt;TextElementType&gt;" FullName="System.Windows.Documents.TextElementCollection&lt;TextElementType&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b155806edc186ac15d11e97b1e4238052e9b0e7c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69207512" /></Metadata><TypeSignature Language="C#" Value="public class TextElementCollection&lt;TextElementType&gt; : System.Collections.Generic.ICollection&lt;TextElementType&gt;, System.Collections.Generic.IEnumerable&lt;TextElementType&gt;, System.Collections.IList where TextElementType : TextElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextElementCollection`1&lt;(class System.Windows.Documents.TextElement) TextElementType&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!TextElementType&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TextElementType&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextElementCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementCollection(Of TextElementType)&#xA;Implements ICollection(Of TextElementType), IEnumerable(Of TextElementType), IList" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TextElementType&gt;&#xA; where TextElementType : TextElementpublic ref class TextElementCollection : System::Collections::Generic::ICollection&lt;TextElementType&gt;, System::Collections::Generic::IEnumerable&lt;TextElementType&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TextElementCollection&lt;'extElementType (requires 'extElementType :&gt; TextElement)&gt; = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface ICollection&lt;'extElementType (requires 'extElementType :&gt; TextElement)&gt;&#xA;    interface seq&lt;'extElementType (requires 'extElementType :&gt; TextElement)&gt;" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TextElementType">
      <Constraints>
        <BaseTypeName>System.Windows.Documents.TextElement</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TextElementType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TextElementType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TextElementType"><span data-ttu-id="c784b-101">Описатель типа для универсальной коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-101">Type specifier for the generic collection.</span></span>  <span data-ttu-id="c784b-102">Допустимые типы ограничиваются типом <see cref="T:System.Windows.Documents.TextElement" /> или потомком <see cref="T:System.Windows.Documents.TextElement" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-102">Acceptable types are constrained to a type of <see cref="T:System.Windows.Documents.TextElement" /> or a descendant of <see cref="T:System.Windows.Documents.TextElement" />.</span></span></typeparam>
    <summary><span data-ttu-id="c784b-103">Предоставляет стандартные средства для создания типобезопасной упорядоченной коллекции объектов <see cref="T:System.Windows.Documents.TextElement" /> и управления ей.</span><span class="sxs-lookup"><span data-stu-id="c784b-103">Provides standard facilities for creating and managing a type-safe, ordered collection of <see cref="T:System.Windows.Documents.TextElement" /> objects.</span></span>  <span data-ttu-id="c784b-104">Это универсальная коллекция для работы с объектами заданного типа, являющаяся производной от <see cref="T:System.Windows.Documents.TextElement" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-104">This is a generic collection for working with objects of a specified type that derives from <see cref="T:System.Windows.Documents.TextElement" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c784b-105">Эта коллекция поддерживает индексацию, начинающуюся с нуля.</span><span class="sxs-lookup"><span data-stu-id="c784b-105">This collection supports zero-based indexing.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TableCellCollection" />
    <altmember cref="T:System.Windows.Documents.TableColumnCollection" />
    <altmember cref="T:System.Windows.Documents.TableRowCollection" />
    <altmember cref="T:System.Windows.Documents.TableRowGroupCollection" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TextElementType item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'extElementType -&gt; unit&#xA;override this.Add : 'extElementType -&gt; unit" Usage="textElementCollection.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="c784b-106">Элемент, который необходимо добавить в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-106">An item to append to the collection.</span></span></param>
        <summary><span data-ttu-id="c784b-107">Добавляет указанный элемент в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-107">Appends a specified item to the collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c784b-108">Возникает, если *item* уже принадлежит коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-108">Raised when *item* already belongs to a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c784b-109">Возникает, если *item* имеет значение **NULL**.</span><span class="sxs-lookup"><span data-stu-id="c784b-109">Raised when *item* is **null**.</span></span></exception>
        <altmember cref="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.IEnumerable range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.IEnumerable range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::IEnumerable ^ range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.IEnumerable -&gt; unit" Usage="textElementCollection.AddRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="c784b-110">Объект, который реализует интерфейс <see cref="T:System.Collections.IEnumerable" /> и задает диапазон элементов, добавляемых в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-110">An object that implements the <see cref="T:System.Collections.IEnumerable" /> interface, and that specifies a range of items to add to the collection.</span></span></param>
        <summary><span data-ttu-id="c784b-111">Добавляет заданный диапазон элементов в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-111">Appends a specified range of items to the collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c784b-112">Вызывается, когда диапазон *range* включает любые элементы со значением **NULL**.</span><span class="sxs-lookup"><span data-stu-id="c784b-112">Raised when *range* includes any **null** items.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c784b-113">Вызывается, когда диапазон *range* имеет значение **NULL**.</span><span class="sxs-lookup"><span data-stu-id="c784b-113">Raised when *range* is **null**.</span></span></exception>
        <altmember cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="textElementCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c784b-114">Удаляет все элементы из коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-114">Clears all items from the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As TextElementType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TextElementType item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'extElementType -&gt; bool&#xA;override this.Contains : 'extElementType -&gt; bool" Usage="textElementCollection.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="c784b-115">Элемент, по которому создается запрос на присутствие в коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-115">An item to query for the presence of in the collection.</span></span></param>
        <summary><span data-ttu-id="c784b-116">Запросы на присутствие заданного элемента в коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-116">Queries for the presence of a specified item in the collection.</span></span></summary>
        <returns><span data-ttu-id="c784b-117">Значение <see langword="true" />, если заданный *элемент* обнаружен в коллекции, иначе — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-117"><see langword="true" /> if the specified *item* is present in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TextElementType[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TextElementType[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TextElementType(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TextElementType&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'extElementType[] * int -&gt; unit&#xA;override this.CopyTo : 'extElementType[] * int -&gt; unit" Usage="textElementCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TextElementType[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="c784b-118">Одномерный массив, в который будет скопировано содержимое коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-118">A one-dimensional array to which the collection contents will be copied.</span></span>  <span data-ttu-id="c784b-119">Данный массив должен использовать индексирование с отсчетом от нуля.</span><span class="sxs-lookup"><span data-stu-id="c784b-119">This array must use zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="c784b-120">Начинающийся с нуля индекс в <paramref name="array" />, задающий позицию, с которой следует начинать вставку копируемых объектов коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-120">A zero-based index in <paramref name="array" /> specifying the position at which to begin inserting the copied collection objects.</span></span></param>
        <summary><span data-ttu-id="c784b-121">Копирование содержимого коллекции и вставка содержимого в заданный массив, начиная с указанной позиции индекса в массиве.</span><span class="sxs-lookup"><span data-stu-id="c784b-121">Copies the contents of the collection and inserts them into a specified array starting at a specified index position in the array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c784b-122">Вызывается, когда массив *array* содержит элементы, которые не совместимы с типом <see cref="T:System.Windows.Documents.TextElement" />, или если *arrayIndex* задает позицию, которая выходит за границы *array*.</span><span class="sxs-lookup"><span data-stu-id="c784b-122">Raised when *array* includes items that are not compatible with the type <see cref="T:System.Windows.Documents.TextElement" />, or if *arrayIndex* specifies a position that falls outside of the bounds of *array*.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c784b-123">Вызывается, когда *array* имеет значение **NULL**.</span><span class="sxs-lookup"><span data-stu-id="c784b-123">Raised when *array* is **null**.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c784b-124">Вызывается, когда *arrayIndex* меньше **0**.</span><span class="sxs-lookup"><span data-stu-id="c784b-124">Raised when *arrayIndex* is less than **0**.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Documents.TextElementCollection&lt;'extElementType (requires 'extElementType :&gt; System.Windows.Documents.TextElement)&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-125">Получает число элементов в коллекции на данный момент.</span><span class="sxs-lookup"><span data-stu-id="c784b-125">Gets the number of items currently in the collection.</span></span></summary>
        <value><span data-ttu-id="c784b-126">Число элементов в коллекции на данный момент.</span><span class="sxs-lookup"><span data-stu-id="c784b-126">The number of items currently in the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TextElementType&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TextElementType&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TextElementType&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'extElementType (requires 'extElementType :&gt; System.Windows.Documents.TextElement)&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'extElementType (requires 'extElementType :&gt; System.Windows.Documents.TextElement)&gt;" Usage="textElementCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TextElementType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c784b-127">Возвращает перечислитель для содержимого коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-127">Returns an enumerator for the contents of the collection.</span></span></summary>
        <returns><span data-ttu-id="c784b-128">Перечислитель для содержимого коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-128">An enumerator for the contents of the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public void InsertAfter (TextElementType previousSibling, TextElementType newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAfter(!TextElementType previousSibling, !TextElementType newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAfter (previousSibling As TextElementType, newItem As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAfter(TextElementType previousSibling, TextElementType newItem);" />
      <MemberSignature Language="F#" Value="member this.InsertAfter : 'extElementType * 'extElementType -&gt; unit" Usage="textElementCollection.InsertAfter (previousSibling, newItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousSibling" Type="TextElementType" />
        <Parameter Name="newItem" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="previousSibling"><span data-ttu-id="c784b-129">Элемент коллекции, после которого будет вставлен новый элемент.</span><span class="sxs-lookup"><span data-stu-id="c784b-129">An item in the collection after which the new item will be inserted.</span></span></param>
        <param name="newItem"><span data-ttu-id="c784b-130">Элемент, вставляемый в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-130">An item to insert into the collection.</span></span></param>
        <summary><span data-ttu-id="c784b-131">Вставка заданного элемента в коллекцию после указанного элемента коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-131">Inserts a specified item in the collection after a specified collection item.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c784b-132">Вызывается, когда *newItem* уже входит в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-132">Raised when *newItem* already belongs to a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c784b-133">Вызывается, когда *previousSibling* или *newItem* имеет значение **NULL**.</span><span class="sxs-lookup"><span data-stu-id="c784b-133">Raised when *previousSibling* or *newItem* is **null**.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c784b-134">Вызывается, когда *previousSibling* не входит в эту коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-134">Raised when *previousSibling* does not belong to this collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public void InsertBefore (TextElementType nextSibling, TextElementType newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertBefore(!TextElementType nextSibling, !TextElementType newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertBefore (nextSibling As TextElementType, newItem As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertBefore(TextElementType nextSibling, TextElementType newItem);" />
      <MemberSignature Language="F#" Value="member this.InsertBefore : 'extElementType * 'extElementType -&gt; unit" Usage="textElementCollection.InsertBefore (nextSibling, newItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextSibling" Type="TextElementType" />
        <Parameter Name="newItem" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="nextSibling"><span data-ttu-id="c784b-135">Элемент коллекции, перед которым будет вставлен новый элемент.</span><span class="sxs-lookup"><span data-stu-id="c784b-135">An item in the collection before which the new item will be inserted.</span></span></param>
        <param name="newItem"><span data-ttu-id="c784b-136">Элемент, вставляемый в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-136">An item to insert into the collection.</span></span></param>
        <summary><span data-ttu-id="c784b-137">Вставка заданного элемента в коллекцию перед указанным элементом коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-137">Inserts a specified item in the collection before a specified collection item.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c784b-138">Вызывается, когда *newItem* уже входит в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-138">Raised when *newItem* already belongs to a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c784b-139">Вызывается, когда *nextSibling* или *newItem* имеет значение **NULL**.</span><span class="sxs-lookup"><span data-stu-id="c784b-139">Raised when *nextSibling* or *newItem* is **null**.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c784b-140">Вызывается, когда *nextSibling* не входит в эту коллекцию.</span><span class="sxs-lookup"><span data-stu-id="c784b-140">Raised when *nextSibling* does not belong to this collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Documents.TextElementCollection&lt;'extElementType (requires 'extElementType :&gt; System.Windows.Documents.TextElement)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-141">Получает значение, которое определяет, доступна ли коллекция только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c784b-141">Gets a value that indicates whether or not the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="c784b-142">Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-142"><see langword="true" /> if the collection is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c784b-143">На данный момент это свойство всегда возвращает значение `false`.</span><span class="sxs-lookup"><span data-stu-id="c784b-143">Currently, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As TextElementType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TextElementType item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'extElementType -&gt; bool&#xA;override this.Remove : 'extElementType -&gt; bool" Usage="textElementCollection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="c784b-144">Подлежащий удалению из коллекции элемент.</span><span class="sxs-lookup"><span data-stu-id="c784b-144">An item to be removed fro the collection.</span></span></param>
        <summary><span data-ttu-id="c784b-145">Удаляет заданный элемент из коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-145">Removes a specified item from the collection.</span></span></summary>
        <returns><span data-ttu-id="c784b-146">Значение <see langword="true" />, если заданный элемент был найден и удален, иначе — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-146"><see langword="true" /> if the specified item was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c784b-147">Этот метод возвращает `false` , `item` если `null`имеет значение.</span><span class="sxs-lookup"><span data-stu-id="c784b-147">This method returns `false` if `item` is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="c784b-148">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из интерфейса <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-148">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="c784b-149">Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</span><span class="sxs-lookup"><span data-stu-id="c784b-149">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="c784b-150">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</span><span class="sxs-lookup"><span data-stu-id="c784b-150">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="c784b-151">Копирует элементы коллекции <see cref="T:System.Collections.ICollection" /> в массив <see cref="T:System.Array" />, начиная с указанного индекса массива <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-151">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span> <span data-ttu-id="c784b-152">Использовать вместо этого типобезопасный метод <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-152">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" /> method instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-153">Получает число элементов, содержащихся в интерфейсе <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-153">Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="c784b-154">Используйте вместо этого типобезопасное свойство <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-154">Use the type-safe <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" /> property instead.</span></span></summary>
        <value><span data-ttu-id="c784b-155">Число элементов, содержащихся в интерфейсе <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-155">The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-156">Получает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</span><span class="sxs-lookup"><span data-stu-id="c784b-156">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="c784b-157"><see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-157"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-158">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-158">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="c784b-159">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-159">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c784b-160">Возвращает перечислитель, который осуществляет итерацию по коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-160">Returns an enumerator that iterates through a collection.</span></span>  <span data-ttu-id="c784b-161">Использовать вместо этого типобезопасный метод <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-161">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" /> method instead.</span></span></summary>
        <returns><span data-ttu-id="c784b-162">Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</span><span class="sxs-lookup"><span data-stu-id="c784b-162">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c784b-163">Объект, добавляемый в коллекцию <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-163">The object to add to the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="c784b-164">Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-164">Adds an item to the <see cref="T:System.Collections.IList" />.</span></span>  <span data-ttu-id="c784b-165">Использовать вместо этого типобезопасный метод <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-165">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" /> method instead.</span></span></summary>
        <returns><span data-ttu-id="c784b-166">Позиция, на которую вставлен новый элемент.</span><span class="sxs-lookup"><span data-stu-id="c784b-166">The position into which the new element was inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c784b-167">Данный тип или член поддерживает инфраструктуру [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] и не предназначен для непосредственного использования из кода.</span><span class="sxs-lookup"><span data-stu-id="c784b-167">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span>  <span data-ttu-id="c784b-168">Использовать вместо этого типобезопасный метод <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-168">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" /> method instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c784b-169">Объект для поиска в <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-169">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="c784b-170">Определяет, содержит ли коллекция <see cref="T:System.Collections.IList" /> указанное значение.</span><span class="sxs-lookup"><span data-stu-id="c784b-170">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span></span> <span data-ttu-id="c784b-171">Использовать вместо этого типобезопасный метод <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-171">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" /> method instead.</span></span></summary>
        <returns><span data-ttu-id="c784b-172">Значение <see langword="true" />, если объект <see cref="T:System.Object" /> найден в <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-172"><see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c784b-173">Объект для поиска в <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-173">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="c784b-174">Определяет индекс заданного элемента коллекции <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-174">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="c784b-175">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</span><span class="sxs-lookup"><span data-stu-id="c784b-175">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="c784b-176">Индекс (с нуля), по которому следует вставить параметр <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-176">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="c784b-177">Объект, вставляемый в список <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-177">The object to insert into the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="c784b-178">Вставляет элемент в список <see cref="T:System.Collections.IList" /> по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="c784b-178">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span></span>  <span data-ttu-id="c784b-179">Вместо этого используйте типобезопасные методы <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> или <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /></span><span class="sxs-lookup"><span data-stu-id="c784b-179">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> or <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /> methods instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-180">Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="c784b-180">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="c784b-181">Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-181"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c784b-182">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.IList" /> доступным только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c784b-182">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="c784b-183">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.IList" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-183"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="c784b-184">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</span><span class="sxs-lookup"><span data-stu-id="c784b-184">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="c784b-185">Возвращает или задает элемент по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="c784b-185">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="c784b-186">Элемент, расположенный по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="c784b-186">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c784b-187">Объект, который необходимо удалить из коллекции <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-187">The object to remove from the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="c784b-188">Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-188">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span></span>  <span data-ttu-id="c784b-189">Использовать вместо этого типобезопасный метод <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" />.</span><span class="sxs-lookup"><span data-stu-id="c784b-189">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> method instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="c784b-190">Отсчитываемый от нуля индекс удаляемого элемента.</span><span class="sxs-lookup"><span data-stu-id="c784b-190">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="c784b-191">Удаляет элемент <see cref="T:System.Collections.IList" />, расположенный по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="c784b-191">Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
