<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="120a8998c6be46ba0852d22db9e1f0410b384da5" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73347070" /></Metadata><TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="a7fff-101">Тип данных в таблице.</span><span class="sxs-lookup"><span data-stu-id="a7fff-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="a7fff-102">Представляет таблицу для определенного типа в основной базе данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-103">Этот класс позволяет выполнять запросы к таблице, добавлять, удалять и присоединять объекты.</span><span class="sxs-lookup"><span data-stu-id="a7fff-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="a7fff-104">Приложение может получить доступ к экземпляру <xref:System.Data.Linq.Table%601> через <xref:System.Data.Linq.DataContext.GetTable%2A> или с помощью строго типизированного свойства для строго типизированного <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="a7fff-105">То есть, когда конструктор создает объект DataContext, он создает свойства для представления каждой таблицы.</span><span class="sxs-lookup"><span data-stu-id="a7fff-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="a7fff-106">Например:</span><span class="sxs-lookup"><span data-stu-id="a7fff-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="a7fff-107">Для этого строго типизированного DataContext можно получить доступ к свойству Users для получения `Table<User>`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a7fff-108">Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-109">Используйте `Attach` методы с сущностями, которые были созданы в одном <xref:System.Data.Linq.DataContext>, сериализованы в клиент и затем десериализованы обратно (с намерением выполнить операцию обновления или удаления).</span><span class="sxs-lookup"><span data-stu-id="a7fff-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="a7fff-110">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="a7fff-111">Не пытайтесь `Attach` сущность, которая не была отсоединена с помощью сериализации.</span><span class="sxs-lookup"><span data-stu-id="a7fff-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="a7fff-112">Сущности, которые не были сериализованы, по-прежнему поддерживают ассоциации с отложенными загрузчиками, которые могут привести к непредвиденным результатам, если сущность будет записана Вторым контекстом данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="a7fff-113">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-114">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-115">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="a7fff-116">`Attach` присоединяет все сущности в графе объекта предоставленного объекта.</span><span class="sxs-lookup"><span data-stu-id="a7fff-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="a7fff-117">Например, следующий C# код:</span><span class="sxs-lookup"><span data-stu-id="a7fff-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="a7fff-118">Эквивалентный код Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="a7fff-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="a7fff-119">Вызов `Attach` на `Employee` присоединяет сотрудника, главный и дочерний, так как `Employee` имеет связи с главным и дочерними.</span><span class="sxs-lookup"><span data-stu-id="a7fff-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="a7fff-120">Необходимо явно вызвать `InsertOnSubmit`, чтобы изменить состояние с "присоединено" на "вставлено".</span><span class="sxs-lookup"><span data-stu-id="a7fff-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Attach(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; unit&#xA;override this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-121">Исходные значения объекта, которые следует прикрепить.</span><span class="sxs-lookup"><span data-stu-id="a7fff-121">The original values of the entity to be attached.</span></span></param>
        <summary><span data-ttu-id="a7fff-122">Присоединяет отключенную или "отсоединенную" сущность к новому контексту <see cref="T:System.Data.Linq.DataContext" />, когда исходные значения необходимы для проверок оптимистичного параллелизма.</span><span class="sxs-lookup"><span data-stu-id="a7fff-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-123">Используйте `Attach` методы с сущностями, которые были созданы в одном <xref:System.Data.Linq.DataContext>, сериализованы в клиент, а затем десериализованы обратно для выполнения операции обновления или удаления.</span><span class="sxs-lookup"><span data-stu-id="a7fff-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="a7fff-124">Поскольку новый <xref:System.Data.Linq.DataContext> не имеет возможности отслеживания исходных значений для отключенной сущности, клиент несет ответственность за предоставление этих значений.</span><span class="sxs-lookup"><span data-stu-id="a7fff-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="a7fff-125">В этой версии <xref:System.Data.Linq.Table%601.Attach%2A>предполагается, что сущность находится в состоянии исходного значения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="a7fff-126">После вызова этого метода можно обновить его поля, например с дополнительными данными, отправленными с клиента.</span><span class="sxs-lookup"><span data-stu-id="a7fff-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="a7fff-127">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-128">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-129">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="a7fff-130">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="a7fff-131">Не пытайтесь `Attach` сущность, которая не была отсоединена с помощью сериализации.</span><span class="sxs-lookup"><span data-stu-id="a7fff-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="a7fff-132">Сущности, которые не были сериализованы, по-прежнему поддерживают ассоциации с отложенными загрузчиками, которые могут привести к непредвиденным результатам, если сущность будет записана Вторым контекстом данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-133">Сущность, которая будет прикреплена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-133">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="a7fff-134">Значение <see langword="true" />, чтобы вложить сущность как измененную; значение <see langword="false" />, чтобы вложить сущность как неизмененную.</span><span class="sxs-lookup"><span data-stu-id="a7fff-134"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="a7fff-135">Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-136">Если присоединение *изменено*, сущность должна либо объявить член версии, либо не должна участвовать в проверке конфликтов обновления.</span><span class="sxs-lookup"><span data-stu-id="a7fff-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="a7fff-137">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-138">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-139">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-140">Сущность, которая будет прикреплена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-140">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="a7fff-141">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-141">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="a7fff-142">Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</span><span class="sxs-lookup"><span data-stu-id="a7fff-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-143">В следующем примере объект `Customer` уже настроен правильно.</span><span class="sxs-lookup"><span data-stu-id="a7fff-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="a7fff-144">Вы можете вызвать `Attach` без необходимости воспроизведения обновлений.</span><span class="sxs-lookup"><span data-stu-id="a7fff-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="a7fff-145">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-146">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-147">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a7fff-148">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-149">Если присоединение изменено, сущность должна либо объявить член версии, либо не должна участвовать в проверке конфликтов обновления.</span><span class="sxs-lookup"><span data-stu-id="a7fff-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="a7fff-150">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-151">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-152">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="a7fff-153">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="a7fff-154">Тип прикрепляемых сущностей.</span><span class="sxs-lookup"><span data-stu-id="a7fff-154">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="a7fff-155">Коллекция сущностей.</span><span class="sxs-lookup"><span data-stu-id="a7fff-155">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="a7fff-156">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-157">Этот метод присоединяет все сущности коллекции к новой <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="a7fff-158">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-159">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-160">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="a7fff-161">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="a7fff-162">Тип прикрепляемых сущностей.</span><span class="sxs-lookup"><span data-stu-id="a7fff-162">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="a7fff-163">Коллекция сущностей.</span><span class="sxs-lookup"><span data-stu-id="a7fff-163">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="a7fff-164">Значение <see langword="true" />, если объект содержит метку времени или элемент RowVersion; значение <see langword="false" />, если исходные значения используются для проверки оптимистичного параллелизма.</span><span class="sxs-lookup"><span data-stu-id="a7fff-164"><see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span></span></param>
        <summary><span data-ttu-id="a7fff-165">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-166">Этот метод присоединяет все сущности коллекции к <xref:System.Data.Linq.DataContext> в *измененном* или *неизмененном* состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="a7fff-167">Если присоединение изменено, сущность должна либо объявить член версии, либо не должна участвовать в проверке конфликтов обновления.</span><span class="sxs-lookup"><span data-stu-id="a7fff-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="a7fff-168">Если присоединиться как неизмененное, предполагается, что сущность представляет исходное значение.</span><span class="sxs-lookup"><span data-stu-id="a7fff-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="a7fff-169">После вызова этого метода поля сущности могут быть изменены с помощью другой информации от клиента перед вызовом <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="a7fff-170">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="a7fff-171">Когда новая сущность присоединяется, инициализируются отложенные загрузчики для всех дочерних коллекций (например, `EntitySet` коллекции сущностей из связанных таблиц).</span><span class="sxs-lookup"><span data-stu-id="a7fff-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="a7fff-172">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A> члены дочерних коллекций помещаются в состояние `Unmodified`.</span><span class="sxs-lookup"><span data-stu-id="a7fff-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="a7fff-173">Чтобы обновить элементы дочерней коллекции, необходимо явно вызвать `Attach` и указать эту сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a7fff-174">В следующем примере показано, как можно обновить объект `Order` в другом экземпляре <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="a7fff-175">В этом примере предполагается, что имеется соединение с базой данных и для нее создан файл [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] (в нашем примере это учебная база данных Northwind).</span><span class="sxs-lookup"><span data-stu-id="a7fff-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="a7fff-176">В следующем примере объект сущности, который необходимо присоединить, имеет связь по внешнему ключу с другим объектом и хранится в кэше, но не присоединен.</span><span class="sxs-lookup"><span data-stu-id="a7fff-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="a7fff-177">При вызове <xref:System.Data.Linq.DataContext.SubmitChanges%2A>`ChangeProcessor` добавляет операцию `Insert` для всех объектов внешнего ключа.</span><span class="sxs-lookup"><span data-stu-id="a7fff-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="a7fff-178">Это побочный результат, когда экземпляр сущности повторно используется в другом экземпляре <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="a7fff-179">По этой причине [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] не поддерживает повторное использование объектов.</span><span class="sxs-lookup"><span data-stu-id="a7fff-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="a7fff-180">В следующем примере показан сценарий, в котором клиент A отменил все заказы, а клиент б стал его владельцем.</span><span class="sxs-lookup"><span data-stu-id="a7fff-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="a7fff-181">Можно одновременно присоединить все заказы клиента а.</span><span class="sxs-lookup"><span data-stu-id="a7fff-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7fff-182">Получает объект <see cref="T:System.Data.Linq.DataContext" />, который использовался для извлечения этого объекта <see cref="T:System.Data.Linq.Table`1" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <value><span data-ttu-id="a7fff-183">Контекст данных, который использовался для извлечения этой таблицы.</span><span class="sxs-lookup"><span data-stu-id="a7fff-183">The data context that has been used to retrieve this table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="a7fff-184">Тип элементов, которые следует удалить.</span><span class="sxs-lookup"><span data-stu-id="a7fff-184">The type of the elements to delete.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="a7fff-185">Удаляемые сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-185">The entities to delete.</span></span></param>
        <summary><span data-ttu-id="a7fff-186">Помещает все сущности из коллекции в состояние <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-187">Сущности, помещаемые в состояние ожидания удаления с помощью этого метода, не исчезают из результатов запроса до тех пор, пока не будет вызван <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="a7fff-188">Отключенные сущности должны быть присоединены, прежде чем их можно будет удалить.</span><span class="sxs-lookup"><span data-stu-id="a7fff-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="a7fff-189">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="a7fff-190">В следующем C# фрагменте кода показан один из способов использования этого метода:</span><span class="sxs-lookup"><span data-stu-id="a7fff-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="a7fff-191">В Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="a7fff-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteOnSubmit(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnSubmit : 'Entity -&gt; unit&#xA;override this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-192">Сущность, которая будет удалена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-192">The entity to be deleted.</span></span></param>
        <summary><span data-ttu-id="a7fff-193">Помещает сущность из таблицы в состояние <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-194">Удаленная сущность не исчезает из результатов запроса до тех пор, пока не будет вызвана <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="a7fff-195">Отключенные сущности необходимо сначала подключить, прежде чем их можно будет удалить.</span><span class="sxs-lookup"><span data-stu-id="a7fff-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="a7fff-196">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="a7fff-197">не поддерживает или не распознает операции каскадного удаления.</span><span class="sxs-lookup"><span data-stu-id="a7fff-197">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="a7fff-198">Если необходимо удалить строку в таблице с ограничениями, необходимо либо задать правило `ON DELETE CASCADE` в ограничении внешнего ключа в базе данных, либо использовать собственный код, чтобы сначала удалить дочерние объекты, препятствующие удалению родительского объекта.</span><span class="sxs-lookup"><span data-stu-id="a7fff-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="a7fff-199">В противном случае создается исключение.</span><span class="sxs-lookup"><span data-stu-id="a7fff-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7fff-200">Получает перечислитель, выполняющий итерацию элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="a7fff-200">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="a7fff-201">Перечислитель, который можно использовать для итерации по коллекции.</span><span class="sxs-lookup"><span data-stu-id="a7fff-201">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-202">Объект, из которого следует получить массив.</span><span class="sxs-lookup"><span data-stu-id="a7fff-202">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="a7fff-203">Возвращает массив измененных членов, содержащих их текущее и исходное значения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-203">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="a7fff-204">Массив измененных членов, содержащих их текущее и исходное значения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-204">An array of modified members that contain their current and original values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7fff-205">Создает новый список для привязки к источнику данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-205">Creates a new list for binding to a data source.</span></span></summary>
        <returns><span data-ttu-id="a7fff-206">Новый список <see cref="T:System.ComponentModel.IBindingList" /> для привязки к источнику данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-207">Возвращаемый список поддерживает стандартные операции, такие как добавление, удаление, вставка и обновление, но сохранение должно быть явно управляемым программистом.</span><span class="sxs-lookup"><span data-stu-id="a7fff-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-208">Сущность, исходное состояние которой возвращается.</span><span class="sxs-lookup"><span data-stu-id="a7fff-208">The entity whose original state is to be returned.</span></span></param>
        <summary><span data-ttu-id="a7fff-209">Возвращает экземпляр <see cref="T:System.Data.Linq.Table`1" />, содержащий исходное состояние сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></summary>
        <returns><span data-ttu-id="a7fff-210">Экземпляр <see cref="T:System.Data.Linq.Table`1" />, содержащий исходное состояние сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-211">Этот метод возвращает исходное состояние сущности, так как она была создана или присоединена к текущему <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="a7fff-212">Исходное состояние сущности, которое было сериализовано и десериализовано, должно предоставляться независимой механизмом отслеживания и предоставляться при присоединении сущности к новой <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="a7fff-213">Дополнительные сведения см. в статьях [Получение данных и операции CUD в N-уровневых приложениях (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="a7fff-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="a7fff-214">Тип элемента, который следует вставить.</span><span class="sxs-lookup"><span data-stu-id="a7fff-214">The type of the elements to insert.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="a7fff-215">Добавляемые сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-215">The entities to add.</span></span></param>
        <summary><span data-ttu-id="a7fff-216">Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в состояние <see langword="pending insert" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-217">Добавленные сущности не будут находиться в результатах запроса до тех пор, пока не будет вызван <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" FrameworkAlternate="netframework-3.5;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOnSubmit(!TEntity entity) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InsertOnSubmit(TEntity entity);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member InsertOnSubmit : 'Entity -&gt; unit&#xA;override this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-218">Добавляемая сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-218">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="a7fff-219">Добавляет сущность в состояние <see langword="pending insert" /> для этого <see cref="T:System.Data.Linq.Table`1" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-220">Добавленная сущность не появится в результатах запроса из этой таблицы, пока не будет вызвана <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7fff-221">Получает значение, указывающее, имеет ли первичный ключ тип сущностей, содержащихся в данном экземпляре <see cref="T:System.Data.Linq.Table`1" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="a7fff-222">Значение <see langword="true" />, если тип сущности не имеет первичный ключ; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-222"><see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7fff-223">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="a7fff-223">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="a7fff-224">Перечислитель, который можно использовать для итерации по коллекции.</span><span class="sxs-lookup"><span data-stu-id="a7fff-224">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7fff-225">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="a7fff-225">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="a7fff-226">Перечислитель, который можно использовать для итерации по коллекции.</span><span class="sxs-lookup"><span data-stu-id="a7fff-226">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-227">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-228">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7fff-229">Возвращает значение, показывающее, является ли данная коллекция коллекцией объектов <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span></span></summary>
        <value><span data-ttu-id="a7fff-230">Значение <see langword="true" />, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-230"><see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-231">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-232">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7fff-233">Возвращает объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных из объекта, самостоятельно не реализующего интерфейс <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span></span></summary>
        <returns><span data-ttu-id="a7fff-234">Объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-235">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-236">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a7fff-237">Позволяет связывать десериализованные сущности с новым экземпляром <see cref="T:System.Data.Linq.DataContext" /> таким образом, чтобы они могли быть обновлены или удалены из базы данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-238">Сущность, которая будет прикреплена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-238">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="a7fff-239">Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-240">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-241">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-242">Сущность, которая будет прикреплена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-242">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="a7fff-243">Значение <see langword="true" />, чтобы вложить сущность как измененную; значение <see langword="false" />, чтобы вложить сущность как неизмененную.</span><span class="sxs-lookup"><span data-stu-id="a7fff-243"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="a7fff-244">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-245">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-246">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-247">Сущность, которая будет прикреплена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-247">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="a7fff-248">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-248">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="a7fff-249">Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</span><span class="sxs-lookup"><span data-stu-id="a7fff-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-250">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-251">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a7fff-252">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="a7fff-253">Коллекция сущностей, которые должны быть вложены.</span><span class="sxs-lookup"><span data-stu-id="a7fff-253">The collection of entities to be attached.</span></span></param>
        <summary><span data-ttu-id="a7fff-254">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-255">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-256">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="a7fff-257">Коллекция сущностей, которые должны быть вложены.</span><span class="sxs-lookup"><span data-stu-id="a7fff-257">The collection of entities to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="a7fff-258">Значение <see langword="true" />, чтобы вложить сущности как измененные; значение <see langword="false" />, чтобы вложить сущности как неизмененные.</span><span class="sxs-lookup"><span data-stu-id="a7fff-258"><see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span></span></param>
        <summary><span data-ttu-id="a7fff-259">Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</span><span class="sxs-lookup"><span data-stu-id="a7fff-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-260">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-261">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="a7fff-262">Удаляемые сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-262">The entities being removed.</span></span></param>
        <summary><span data-ttu-id="a7fff-263">Помещает все сущности из коллекции в состояние <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-264">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-265">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-266">Сущность, которая будет удалена.</span><span class="sxs-lookup"><span data-stu-id="a7fff-266">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="a7fff-267">Помещает сущность из таблицы в состояние <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-268">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-269">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="a7fff-270">не поддерживает или не распознает операции каскадного удаления.</span><span class="sxs-lookup"><span data-stu-id="a7fff-270">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="a7fff-271">Если необходимо удалить строку в таблице с ограничениями, необходимо либо задать правило `ON DELETE CASCADE` в ограничении внешнего ключа в базе данных, либо использовать собственный код, чтобы сначала удалить дочерние объекты, препятствующие удалению родительского объекта.</span><span class="sxs-lookup"><span data-stu-id="a7fff-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="a7fff-272">В противном случае создается исключение.</span><span class="sxs-lookup"><span data-stu-id="a7fff-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-273">Сущность, из которой следует получать измененные элементы.</span><span class="sxs-lookup"><span data-stu-id="a7fff-273">The entity from which to obtain the modified members.</span></span></param>
        <summary><span data-ttu-id="a7fff-274">Возвращает массив измененных членов, содержащих их текущее и исходное значения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-274">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="a7fff-275">Массив измененных членов.</span><span class="sxs-lookup"><span data-stu-id="a7fff-275">An array of modified members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-276">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-277">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-278">Сущность, доступ к исходному состоянию которой будет осуществлен.</span><span class="sxs-lookup"><span data-stu-id="a7fff-278">The entity whose original state is to be accessed.</span></span></param>
        <summary><span data-ttu-id="a7fff-279">Извлекает исходные значения данной сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-279">Retrieves original values of a given entity.</span></span></summary>
        <returns><span data-ttu-id="a7fff-280">Копия исходной сущности.</span><span class="sxs-lookup"><span data-stu-id="a7fff-280">A copy of the original entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-281">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-282">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="a7fff-283">Коллекция сущностей, которые должны быть добавлены.</span><span class="sxs-lookup"><span data-stu-id="a7fff-283">The collection of entities to be added.</span></span></param>
        <summary><span data-ttu-id="a7fff-284">Добавляет все сущности коллекции в <see cref="T:System.Data.Linq.DataContext" /> в состоянии <see langword="pending insert" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-285">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-286">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="a7fff-287">Добавляемая сущность.</span><span class="sxs-lookup"><span data-stu-id="a7fff-287">The entity to add.</span></span></param>
        <summary><span data-ttu-id="a7fff-288">Добавляет сущность в состояние <see langword="pending insert" /> для этой таблицы.</span><span class="sxs-lookup"><span data-stu-id="a7fff-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-289">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-290">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Linq::IQueryable::ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7fff-291">Получает тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</span><span class="sxs-lookup"><span data-stu-id="a7fff-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></summary>
        <value><span data-ttu-id="a7fff-292">Тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</span><span class="sxs-lookup"><span data-stu-id="a7fff-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-293">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-294">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System::Linq::IQueryable::Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7fff-295">Получает дерево выражения, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <value><span data-ttu-id="a7fff-296">Выражение <see cref="T:System.Linq.Expressions.Expression" />, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</span><span class="sxs-lookup"><span data-stu-id="a7fff-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-297">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-298">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System::Linq::IQueryable::Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7fff-299">Возвращает объект поставщика запросов, связанного с указанным источником данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-299">Gets the query provider that is associated with this data source.</span></span></summary>
        <value><span data-ttu-id="a7fff-300">Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с указанным источником данных.</span><span class="sxs-lookup"><span data-stu-id="a7fff-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-301">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-302">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="a7fff-303">Выражение запроса, из которого выполняется вычисление.</span><span class="sxs-lookup"><span data-stu-id="a7fff-303">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="a7fff-304">Создает объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="a7fff-305">Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражений.</span><span class="sxs-lookup"><span data-stu-id="a7fff-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-306">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-307">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="a7fff-308">Тип данных в таблице.</span><span class="sxs-lookup"><span data-stu-id="a7fff-308">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="a7fff-309">Выражение запроса, из которого выполняется вычисление.</span><span class="sxs-lookup"><span data-stu-id="a7fff-309">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="a7fff-310">Создает объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="a7fff-311">Объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражений.</span><span class="sxs-lookup"><span data-stu-id="a7fff-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-312">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-313">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="a7fff-314">Выражение запроса для выполнения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-314">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="a7fff-315">Выполняет запрос, представленный заданным деревом выражения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-315">Executes the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="a7fff-316">Значение, получаемое в результате выполнения указанного запроса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-316">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-317">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-318">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="a7fff-319">Тип данных в таблице.</span><span class="sxs-lookup"><span data-stu-id="a7fff-319">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="a7fff-320">Выражение запроса для выполнения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-320">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="a7fff-321">Выполняет строго типизированный запрос, представленный заданным деревом выражения.</span><span class="sxs-lookup"><span data-stu-id="a7fff-321">Executes the strongly-typed query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="a7fff-322">Значение, получаемое в результате выполнения указанного запроса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-322">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7fff-323">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="a7fff-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a7fff-324">Он может использоваться, только если экземпляр <xref:System.Data.Linq.Table%601> приведен к типу интерфейса <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="a7fff-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7fff-325">Возвращает строку, представляющую таблицу.</span><span class="sxs-lookup"><span data-stu-id="a7fff-325">Returns a string that represents the table.</span></span></summary>
        <returns><span data-ttu-id="a7fff-326">Строковое представление таблицы.</span><span class="sxs-lookup"><span data-stu-id="a7fff-326">A string representation of the table.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
