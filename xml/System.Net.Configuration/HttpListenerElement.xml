<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bb649fa98399448f29bf4d71df1fde7531797b2" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70691266" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет элемент HttpListener в файле конфигурации. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс соответствует \<элементу конфигурации httpListener > (сетевые параметры). Этот класс предоставляет программный доступ к информации, которая может храниться в файлах конфигурации.  
  
 Свойство указывает, использует <xref:System.Net.HttpListener> ли необработанный неэкранированный универсальный код ресурса (URI) вместо преобразованного универсального кода ресурса (URI), в котором преобразуются все значения в процентах и выполняются другие действия нормализации. <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>  
  
 Когда экземпляр получает запрос `http.sys` через службу, он создает экземпляр строки URI `http.sys`, предоставленной, и предоставляет его в качестве <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> свойства. <xref:System.Net.HttpListener>  
  
 `http.sys` Служба предоставляет две строки URI запроса:  
  
-   Необработанный URI  
  
-   Преобразованный URI  
  
 Необработанный универсальный код <xref:System.Uri?displayProperty=nameWithType> ресурса (URI) указан в строке запроса HTTP-запроса:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 Необработанный URI, `http.sys` предоставленный для запроса, упомянутого выше, имеет значение "/Пас/". Представляет строку, следующую за HTTP-командой в том виде, в котором она была отправлена по сети.  
  
 `http.sys` Служба создает преобразованный универсальный код ресурса (URI) из информации, предоставленной в запросе, используя URI, указанный в строке запроса HTTP, и заголовок узла для определения сервера-источника, на который должен быть направлен запрос. Это делается путем сравнения информации из запроса с набором зарегистрированных префиксов URI. В документации по пакету SDK для HTTP-сервера этот преобразованный универсальный код ресурса (URI) называется структурой [HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108) .  
  
 Чтобы иметь возможность сравнить запрос с зарегистрированными префиксами URI, необходимо выполнить некоторую нормализацию запроса. Для примера выше преобразованный URI будет выглядеть следующим образом:  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` Служба объединяет значение свойства и строку в строке запроса для создания преобразованного универсального кода <xref:System.Uri.Host%2A?displayProperty=nameWithType>  ресурса (URI). Кроме того, `http.sys` <xref:System.Uri?displayProperty=nameWithType> класс также выполняет следующие действия:  
  
-   Отменяет экранирование всех закодированных в процентах значений.  
  
-   Преобразует символы, не входящие в набор ASCII, в кодировку UTF-16 в символьное представление. Обратите внимание, что символы UTF-8 и ANSI/DBCS поддерживаются, а также символы Юникода (Кодировка Юникода с использованием формата% Укскскскс).  
  
-   Выполняет другие шаги нормализации, например сжатие пути.  
  
 Поскольку запрос не содержит никаких сведений о кодировке, используемой для значений, закодированных в процентах, возможно, вам не удастся определить правильную кодировку путем анализа значений, закодированных в процентах.  
  
 Поэтому `http.sys` предоставляет два раздела реестра для изменения процесса:  
  
|Раздел реестра .|Значение по умолчанию|Описание|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Если значение равно `http.sys` нулю, принимает только URL-адреса в кодировке UTF-8.<br /><br /> Если значение не равно нулю `http.sys` , в запросах также принимается URL-адреса в кодировке ANSI или в кодировке DBCS.|  
|FavorUTF8|1|Если не равен нулю, `http.sys` всегда пытается декодировать URL-адрес как UTF-8. Если преобразование завершается неудачно и EnableNonUTF8 не равно нулю, то HTTP. sys пытается декодировать его как ANSI или DBCS.<br /><br /> Если ноль (и EnableNonUTF8 не равен нулю), `http.sys` попытается декодировать его как ANSI или DBCS; если это не удается, то пытается выполнить преобразование UTF-8.|  
  
 Когда <xref:System.Net.HttpListener> получает запрос, он использует преобразованный универсальный код ресурса `http.sys` (URI) из <xref:System.Net.HttpListenerRequest.Url%2A> в качестве входных данных свойства.  
  
 Есть необходимость в поддержке символов помимо символов и чисел в URI. Примером является следующий универсальный код ресурса (URI), который используется для получения сведений о клиенте для номера клиента «1/3812»:  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Обратите внимание на косую черту в формате URI (% 2F). Это необходимо, поскольку в данном случае символ косой черты представляет данные, а не разделитель пути.  
  
 Передача строки в конструктор URI приводит к следующему URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Разделение пути на сегменты приведет к следующим элементам:  
  
 `Customer('1`  
  
 `3812')`  
  
 Это не цель отправителя запроса.  
  
 Если свойство имеет значение false, то <xref:System.Net.HttpListener> при получении запроса он использует необработанный универсальный код ресурса (URI) вместо преобразованного универсального `http.sys` кода ресурса (URI <xref:System.Net.HttpListenerRequest.Url%2A> ) в качестве входных данных для свойства. <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">Схема параметров сети</related>
    <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;элемент&gt; httpListener (параметры сети)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Configuration.HttpListenerElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает Элементы времени ожидания по умолчанию, используемые для объекта <see cref="T:System.Net.HttpListener" />.</summary>
        <value>Элементы времени ожидания, используемые для объекта <see cref="T:System.Net.HttpListener" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, использует ли <see cref="T:System.Net.HttpListener" /> не преобразованный в escape-последовательность URI вместо преобразованного.</summary>
        <value>Логическое значение, определяющее, использует ли <see cref="T:System.Net.HttpListener" /> не преобразованный в escape-последовательность URI вместо преобразованного.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство указывает, использует <xref:System.Net.HttpListener> ли необработанный неэкранированный универсальный код ресурса (URI) вместо преобразованного универсального кода ресурса (URI), в котором преобразуются все значения в процентах и выполняются другие действия нормализации. <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>  
  
 Когда экземпляр получает запрос `http.sys` через службу, он создает экземпляр строки URI `http.sys`, предоставленной, и предоставляет его в качестве <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> свойства. <xref:System.Net.HttpListener>  
  
 `http.sys` Служба предоставляет две строки URI запроса:  
  
-   Необработанный URI  
  
-   Преобразованный URI  
  
 Необработанный универсальный код <xref:System.Uri?displayProperty=nameWithType> ресурса (URI) указан в строке запроса HTTP-запроса:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 Необработанный URI, `http.sys` предоставленный для запроса, упомянутого выше, имеет значение "/Пас/". Представляет строку, следующую за HTTP-командой в том виде, в котором она была отправлена по сети.  
  
 `http.sys` Служба создает преобразованный универсальный код ресурса (URI) из информации, предоставленной в запросе, используя URI, указанный в строке запроса HTTP, и заголовок узла для определения сервера-источника, на который должен быть направлен запрос. Это делается путем сравнения информации из запроса с набором зарегистрированных префиксов URI. В документации по пакету SDK для HTTP-сервера этот преобразованный универсальный код ресурса (URI) называется структурой [HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108) .  
  
 Чтобы иметь возможность сравнить запрос с зарегистрированными префиксами URI, необходимо выполнить некоторую нормализацию запроса. Для примера выше преобразованный URI будет выглядеть следующим образом:  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` Служба объединяет значение свойства и строку в строке запроса для создания преобразованного универсального кода <xref:System.Uri.Host%2A?displayProperty=nameWithType>  ресурса (URI). Кроме того, `http.sys` <xref:System.Uri?displayProperty=nameWithType> класс также выполняет следующие действия:  
  
-   Отменяет экранирование всех закодированных в процентах значений.  
  
-   Преобразует символы, не входящие в набор ASCII, в кодировку UTF-16 в символьное представление. Обратите внимание, что символы UTF-8 и ANSI/DBCS поддерживаются, а также символы Юникода (Кодировка Юникода с использованием формата% Укскскскс).  
  
-   Выполняет другие шаги нормализации, например сжатие пути.  
  
 Поскольку запрос не содержит никаких сведений о кодировке, используемой для значений, закодированных в процентах, возможно, вам не удастся определить правильную кодировку путем анализа значений, закодированных в процентах.  
  
 Поэтому `http.sys` предоставляет два раздела реестра для изменения процесса:  
  
|Раздел реестра .|Значение по умолчанию|Описание|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Если значение равно `http.sys` нулю, принимает только URL-адреса в кодировке UTF-8.<br /><br /> Если значение не равно нулю `http.sys` , в запросах также принимается URL-адреса в кодировке ANSI или в кодировке DBCS.|  
|FavorUTF8|1|Если не равен нулю, `http.sys` всегда пытается декодировать URL-адрес как UTF-8. Если преобразование завершается неудачно и EnableNonUTF8 не равно нулю, то HTTP. sys пытается декодировать его как ANSI или DBCS.<br /><br /> Если ноль (и EnableNonUTF8 не равен нулю), `http.sys` попытается декодировать его как ANSI или DBCS; если это не удается, то пытается выполнить преобразование UTF-8.|  
  
 Когда <xref:System.Net.HttpListener> получает запрос, он использует преобразованный универсальный код ресурса `http.sys` (URI) из <xref:System.Net.HttpListenerRequest.Url%2A> в качестве входных данных свойства.  
  
 Есть необходимость в поддержке символов помимо символов и чисел в URI. Примером является следующий универсальный код ресурса (URI), который используется для получения сведений о клиенте для номера клиента «1/3812»:  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Обратите внимание на косую черту в формате URI (% 2F). Это необходимо, поскольку в данном случае символ косой черты представляет данные, а не разделитель пути.  
  
 Передача строки в конструктор URI приводит к следующему URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Разделение пути на сегменты приведет к следующим элементам:  
  
 `Customer('1`  
  
 `3812')`  
  
 Это не цель отправителя запроса.  
  
 Если свойство имеет значение false, то <xref:System.Net.HttpListener> при получении запроса он использует необработанный универсальный код ресурса (URI) вместо преобразованного универсального `http.sys` кода ресурса (URI <xref:System.Net.HttpListenerRequest.Url%2A> ) в качестве входных данных для свойства. <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">Схема параметров сети</related>
        <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;элемент&gt; httpListener (параметры сети)</related>
      </Docs>
    </Member>
  </Members>
</Type>
