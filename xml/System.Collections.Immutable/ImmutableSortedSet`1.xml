<Type Name="ImmutableSortedSet&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="82a2006fe172e3558bed599759dc231011cee3d3" /><Meta Name="ms.sourcegitcommit" Value="19810b7f44c3fa6cc5f0af0391e435c59897b089" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/07/2020" /><Meta Name="ms.locfileid" Value="75707111" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImmutableSortedSet&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.Generic.ISet&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableSet&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImmutableSortedSet`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.Generic.ISet`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableSortedSet`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableSortedSet(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IImmutableSet(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), ISet(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ImmutableSortedSet sealed : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::Generic::ISet&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableSet&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ImmutableSortedSet&lt;'T&gt; = class&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ISet&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableSet&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
    <AssemblyVersion>1.2.5.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ISet&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableSet&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Immutable.ImmutableSortedSetDebuggerProxy`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="2e1a0-101">Тип элементов в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-101">The type of elements in the set.</span></span></typeparam>
    <summary><span data-ttu-id="2e1a0-102">Представляет реализацию неизменяемого отсортированного набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-102">Represents an immutable sorted set implementation.</span></span>

<span data-ttu-id="2e1a0-103">**Пакет NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">сведения о неизменяемых коллекциях и способах их установки</see>)</span><span class="sxs-lookup"><span data-stu-id="2e1a0-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-104">Создайте новый неизменяемый отсортированный набор, который заполняется элементами с помощью метода <xref:System.Collections.Immutable.ImmutableSortedSet.CreateRange%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-104">Create a new immutable sorted set that is prepopulated with items by using the <xref:System.Collections.Immutable.ImmutableSortedSet.CreateRange%2A> method.</span></span> <span data-ttu-id="2e1a0-105">При управлении неизменяемым набором с помощью таких методов, как <xref:System.Collections.Immutable.ImmutableSortedSet%601.Add%2A>, <xref:System.Collections.Immutable.ImmutableSortedSet%601.Reverse%2A> или <xref:System.Collections.Immutable.ImmutableSortedSet%601.Remove%2A>, выполняется копия исходного отсортированного набора, применяются манипуляции и возвращается новый неизменяемый отсортированный набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-105">When you manipulate an immutable set with methods such as <xref:System.Collections.Immutable.ImmutableSortedSet%601.Add%2A>, <xref:System.Collections.Immutable.ImmutableSortedSet%601.Reverse%2A> or <xref:System.Collections.Immutable.ImmutableSortedSet%601.Remove%2A>, a copy of the original sorted set is made, manipulations applied and a new immutable sorted set is returned.</span></span>

<span data-ttu-id="2e1a0-106">Если необходимо выполнить несколько операций с неизменяемой коллекцией, чтобы повысить эффективность, можно скопировать <xref:System.Collections.Immutable.ImmutableSortedSet%601> в <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, используя метод <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A>, управлять набором и сделать его неизменяемым снова с помощью метода <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-106">If you need to perform multiple operations on an immutable collection, to increase efficiency you can copy the <xref:System.Collections.Immutable.ImmutableSortedSet%601> to a <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> method, manipulate the set and make it immutable again using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> method.</span></span> <span data-ttu-id="2e1a0-107">При этом исходный неизменяемый отсортированный набор не изменится.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-107">This will not change the original immutable sorted set.</span></span>

 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="2e1a0-108">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-108">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-109">Значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-109">The value to add.</span></span></param>
        <summary><span data-ttu-id="2e1a0-110">Добавляет в неизменяемый отсортированный набор указанное значение.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-110">Adds the specified value to this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-111">Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-111">A new set with the element added, or this set if the element is already in this set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-112">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-112">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-113">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-113">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-114">Удаляет все элементы из неизменяемого отсортированного набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-114">Removes all elements from the immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-115">Пустой набор, из которого удалены элементы.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-115">An empty set with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-116">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-116">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-117">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-117">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableSortedSet.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-118">Проверяемое значение.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-118">The value to check for.</span></span></param>
        <summary><span data-ttu-id="2e1a0-119">Определяет, содержит ли неизменяемый отсортированный набор указанное значение.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-119">Determines whether this immutable sorted set contains the specified value.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-120">Значение <see langword="true" />, если набор содержит указанное значение, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-120"><see langword="true" /> if the set contains the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-121">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-121">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-122">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-122">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-123">Возвращает количество элементов в неизменяемом отсортированном наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-123">Gets the number of elements in the immutable sorted set.</span></span></summary>
        <value><span data-ttu-id="2e1a0-124">Количество элементов в неизменяемом отсортированном наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-124">The number of elements in the immutable sorted set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-125">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-125">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-126">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-126">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableSortedSet(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-127">Возвращает пустой неизменяемый отсортированный набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-127">Gets an empty immutable sorted set.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Except : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Except other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-128">Элементы, которые нужно удалить из набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-128">The items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-129">Удаляет из неизменяемого отсортированного набора указанный набор элементов.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-129">Removes a specified set of items from this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-130">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-130">A new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-131">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-131">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-132">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-132">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Collections.Immutable.ImmutableSortedSet`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableSortedSet(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Enumerator GetEnumerator();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator" Usage="immutableSortedSet.GetEnumerator " FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableSortedSet`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Enumerator GetEnumerator();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator" Usage="immutableSortedSet.GetEnumerator " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-133">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-133">Returns an enumerator that iterates through the immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-134">Перечислитель, который можно использовать для перечисления элементов набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-134">An enumerator that can be used to iterate through the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!CAUTION]
>  <span data-ttu-id="2e1a0-135">Если этот перечислитель используется в качестве типа значения (то есть если он не упакован), не копируйте его, назначив второй переменной или передав его другому методу.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-135">When you  use this enumerator as a value type (that is, when it isn't boxed), do not copy it by assigning it to a second variable or by passing it to another method.</span></span> <span data-ttu-id="2e1a0-136">Когда этот перечислитель удаляется из, он возвращает в пул ресурсов изменяемый стек ссылочного типа и, если копируется перечислитель типа значения (что может легко произойти непреднамеренно, если передать значение), существует риск того, что стек уже был возвращенные в пул ресурсов могут по-прежнему использоваться одной из копий перечислителя, что приведет к повреждению данных и исключениям.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-136">When this enumerator is disposed of, it returns a mutable reference type stack to a resource pool, and if the value type enumerator is copied (which can easily happen unintentionally if you pass the value around), there is a risk that a stack that has already been returned to the resource pool may still be in use by one of the enumerator copies, leading to data corruption and exceptions.</span></span>

[<span data-ttu-id="2e1a0-137">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-137">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-138">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-138">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableSortedSet.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2e1a0-139">Значение, позицию которого нужно определить.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-139">The value whose position is being sought.</span></span></param>
        <summary><span data-ttu-id="2e1a0-140">Возвращает позицию указанного значения в неизменяемом отсортированном наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-140">Gets the position within this immutable sorted set that the specified value appears in.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-141">Индекс указанного <paramref name="item" /> в отсортированном наборе, если этот <paramref name="item" /> найден.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-141">The index of the specified <paramref name="item" /> in the sorted set, if <paramref name="item" /> is found.</span></span> <span data-ttu-id="2e1a0-142">Если элемент <paramref name="item" /> не найден и его значение меньше одного или нескольких элементов набора, метод возвращает отрицательное число, которое является побитовым дополнением индекса первого элемента, превышающего по значению указанный элемент.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-142">If <paramref name="item" /> is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value.</span></span> <span data-ttu-id="2e1a0-143">Если элемент <paramref name="item" /> не найден и его значение больше любого из элементов набора, метод возвращает отрицательное число, которое является побитовым дополнением индекса последнего элемента плюс 1.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-143">If <paramref name="item" /> is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-144">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-144">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-145">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-145">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Intersect : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Intersect other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-146">Набор для пересечения с исходным набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-146">The set to intersect with this one.</span></span></param>
        <summary><span data-ttu-id="2e1a0-147">Создает неизменяемый отсортированный набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-147">Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-148">Новый неизменяемый отсортированный набор, который содержит все элементы, существующие в обоих наборах.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-148">A new immutable sorted set that contains any elements that exist in both sets.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-149">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-149">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-150">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-150">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-151">Возвращает значение, указывающее, является ли пустым этот неизменяемый отсортированный набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-151">Gets a value that indicates whether this immutable sorted set is empty.</span></span></summary>
        <value><span data-ttu-id="2e1a0-152">Значение <see langword="true" />, если набор пуст; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-152"><see langword="true" /> if this set is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-153">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-153">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-154">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-154">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsProperSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsProperSubsetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-155">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-155">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-156">Определяет, является ли текущий неизменяемый отсортированный набор должным (строгим) подмножеством заданной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-156">Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-157">Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-157"><see langword="true" /> if the current set is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="2e1a0-158">Пустой набор является соответствующим подмножеством любой другой коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-158">An empty set is a proper subset of any other collection.</span></span> <span data-ttu-id="2e1a0-159">Поэтому этот метод возвращает `true`, если текущий набор пуст, если только `other` коллекция не пуста.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-159">Therefore, this method returns `true` if the current set is empty, unless the `other` collection is also empty.</span></span>

[<span data-ttu-id="2e1a0-160">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-160">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-161">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-161">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsProperSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsProperSupersetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-162">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-162">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-163">Определяет, является ли текущий неизменяемый отсортированный набор должным надмножеством заданной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-163">Determines whether the current immutable sorted set is a proper superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-164">Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-164"><see langword="true" /> if the current set is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-165">Пустой набор является правильным надмножеством любой другой коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-165">An empty set is a proper superset of any other collection.</span></span> <span data-ttu-id="2e1a0-166">Поэтому этот метод возвращает `true`, если коллекция, представленная параметром `other`, пуста, если текущий набор также не пуст.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-166">Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, unless the current set is also empty.</span></span>

[<span data-ttu-id="2e1a0-167">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-167">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-168">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-168">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsSubsetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-169">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-169">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-170">Определяет, является ли текущий неизменяемый отсортированный набор подмножеством заданной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-170">Determines whether the current immutable sorted set is a subset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-171">Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-171"><see langword="true" /> if the current set is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-172">Пустой набор является подмножеством любого другого набора, включая еще один пустой набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-172">An empty set is a subset of any other set, including another empty set.</span></span> <span data-ttu-id="2e1a0-173">Поэтому этот метод возвращает `true`, если текущий набор пуст, даже если коллекция `other` также пуста.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-173">Therefore, this method returns `true` if the current set is empty, even if the `other` collection is also empty.</span></span>

[<span data-ttu-id="2e1a0-174">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-174">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-175">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-175">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSupersetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsSupersetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-176">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-176">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-177">Определяет, является ли текущий неизменяемый отсортированный набор надмножеством заданной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-177">Determines whether the current immutable sorted set is a superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-178">Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-178"><see langword="true" /> if the current set is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-179">Все коллекции, включая пустые наборы, являются подмножествами пустого набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-179">All collections, including empty sets, are supersets of an empty set.</span></span> <span data-ttu-id="2e1a0-180">Поэтому этот метод возвращает `true`, если коллекция, представленная параметром `other`, пуста, даже если текущий отсортированный набор пуст.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-180">Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, even if the current sorted set is empty.</span></span>

[<span data-ttu-id="2e1a0-181">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-181">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-182">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-182">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-183">Индекс элемента, который нужно извлечь из отсортированного набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-183">The index of the element to retrieve from the sorted set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-184">Возвращает элемент с указанным индексом из неизменяемого отсортированного набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-184">Gets the element of the immutable sorted set at the given index.</span></span></summary>
        <value><span data-ttu-id="2e1a0-185">Элемент с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-185">The element at the given index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-186">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-186">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-187">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-187">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public ref readonly T ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; 'T" Usage="immutableSortedSet.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-188">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-188">The 0-based index of the element in the set to return.</span></span></param>
        <summary><span data-ttu-id="2e1a0-189">Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-189">Gets a read-only reference of the element of the set at the given <paramref name="index" />.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-190">Доступная только для чтения ссылка на элемент в заданной позиции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-190">A read-only reference of the element at the given position.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;T&gt; KeyComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;!T&gt; KeyComparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyComparer As IComparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;T&gt; ^ KeyComparer { System::Collections::Generic::IComparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyComparer : System.Collections.Generic.IComparer&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.KeyComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-191">Возвращает функцию сравнения, которая используется для сортировки ключей в неизменяемом отсортированном наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-191">Gets the comparer used to sort keys in the immutable sorted set.</span></span></summary>
        <value><span data-ttu-id="2e1a0-192">Функция сравнения, которая используется для сортировки ключей.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-192">The comparer used to sort keys.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-193">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-193">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-194">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-194">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public T Max { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Max" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Max" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Max As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Max { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Max : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Max" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-195">Возвращает максимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-195">Gets the maximum value in the immutable sorted set, as defined by the comparer.</span></span></summary>
        <value><span data-ttu-id="2e1a0-196">Максимальное значение в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-196">The maximum value in the set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-197">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-197">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-198">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-198">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public T Min { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Min" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Min" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Min As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Min { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Min : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Min" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-199">Возвращает минимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-199">Gets the minimum value in the immutable sorted set, as defined by the comparer.</span></span></summary>
        <value><span data-ttu-id="2e1a0-200">Минимальное значение в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-200">The minimum value in the set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-201">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-201">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-202">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-202">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps">
      <MemberSignature Language="C#" Value="public bool Overlaps (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Overlaps(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Overlaps (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Overlaps(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Overlaps : seq&lt;'T&gt; -&gt; bool&#xA;override this.Overlaps : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.Overlaps other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-203">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-203">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-204">Определяет, есть ли общие элементы в текущем неизменяемом отсортированном наборе и в указанной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-204">Determines whether the current immutable sorted set and a specified collection share common elements.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-205">Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-205"><see langword="true" /> if the current set and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-206">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-206">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-207">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-207">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Remove(T value);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-208">Подлежащий удалению элемент.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-208">The element to remove.</span></span></param>
        <summary><span data-ttu-id="2e1a0-209">Удаляет из неизменяемого отсортированного набора указанное значение.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-209">Removes the specified value from this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-210">Новый неизменяемый отсортированный набор, из которого удален указанный элемент, или исходный набор, если элемент в нем не найден.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-210">A new immutable sorted set with the element removed, or this set if the element was not found in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-211">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-211">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-212">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-212">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!T&gt; Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; seq&lt;'T&gt;" Usage="immutableSortedSet.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-213">Возвращает объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-213">Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that iterates over this immutable sorted set in reverse order.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-214">Перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-214">An enumerator that iterates over the immutable sorted set in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-215">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-215">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-216">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-216">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEquals">
      <MemberSignature Language="C#" Value="public bool SetEquals (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetEquals(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEquals (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetEquals(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member SetEquals : seq&lt;'T&gt; -&gt; bool&#xA;override this.SetEquals : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.SetEquals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-217">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-217">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-218">Определяет, содержат ли текущий неизменяемый отсортированный набор и указанная коллекция одни и те же элементы.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-218">Determines whether the current immutable sorted set and the specified collection contain the same elements.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-219">Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-219"><see langword="true" /> if the sets are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-220">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-220">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-221">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-221">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymmetricExcept">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SymmetricExcept (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.SymmetricExcept : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.SymmetricExcept other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-222">Другая последовательность элементов.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-222">The other sequence of items.</span></span></param>
        <summary><span data-ttu-id="2e1a0-223">Создает неизменяемый отсортированный набор, который содержит элементы, существующие либо в исходном наборе, либо в указанной последовательности, но не там и там одновременно.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-223">Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-224">Новый неизменяемый отсортированный словарь.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-224">The new immutable sorted set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-225">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-225">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-226">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-226">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2e1a0-227">Значение для сложения.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-227">The value to add.</span></span></param>
        <summary><span data-ttu-id="2e1a0-228">Добавляет в коллекцию указанное значение.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-228">Adds the specified value to the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-229">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-229">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-230">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-230">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="2e1a0-231">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-231">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-232">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-232">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-233">Удаляет из коллекции все элементы.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-233">Removes all the items from the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-234">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-234">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-235">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-235">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="2e1a0-236">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-236">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-237">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-237">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;T&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2e1a0-238">Одномерный массив, куда копируются элементы из коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-238">The one-dimensional array that is the destination of the elements copied from collection.</span></span> <span data-ttu-id="2e1a0-239">Индекс в массиве должен начинаться с нуля.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-239">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="2e1a0-240">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-240">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="2e1a0-241">Копирует элементы коллекции в массив начиная с определенного индекса в массиве.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-241">Copies the elements of the collection to an array, starting at a particular array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-242">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-242">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-243">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-243">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="2e1a0-244">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-244">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-245">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-245">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-246">См. интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-246">See the <see cref="T:System.Collections.Generic.ICollection`1" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2e1a0-247">Объект, который должен быть удален из коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-247">The object to remove from the collection.</span></span></param>
        <summary><span data-ttu-id="2e1a0-248">Удаляет первое вхождение конкретного объекта из коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-248">Removes the first occurrence of a specific object from the collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-249">Значение <see langword="true" />, если элемент <paramref name="item" /> был успешно удален из коллекции; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-249"><see langword="true" /> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-250">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-251">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-251">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>

[<span data-ttu-id="2e1a0-252">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-252">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-253">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-253">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-254">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-254">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-255">Перечислитель, который можно использовать для итерации по коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-255">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-256">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-256">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-257">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-257">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>

[<span data-ttu-id="2e1a0-258">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-258">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-259">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-259">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-260">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-260">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="2e1a0-261">Объект, который нужно вставить в набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-261">The object to insert into the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-262">Вставляет элемент в набор по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-262">Inserts an item in the set at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-263">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-263">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-264">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.IList%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-264">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

[<span data-ttu-id="2e1a0-265">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-265">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-266">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-266">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IList&lt;T&gt;::Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="2e1a0-267">См. интерфейс <see cref="T:System.Collections.Generic.IList`1" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-267">See the <see cref="T:System.Collections.Generic.IList`1" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-268">Отсчитываемый от нуля индекс удаляемого элемента.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-268">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="2e1a0-269">Удаляет элемент с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-269">Removes the  item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-270">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-270">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-271">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.IList%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-271">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

[<span data-ttu-id="2e1a0-272">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-272">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-273">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-273">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="bool ISet&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ISet&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As T) As Boolean Implements ISet(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ISet&lt;T&gt;.Add(T item) = System::Collections::Generic::ISet&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2e1a0-274">Элемент, добавляемый в набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-274">The element to add to the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-275">Добавляет элемент в текущий набор и возвращает значение, указывающее, что элемент был добавлен успешно.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-275">Adds an element to the current set and returns a value to indicate if the element was successfully added.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-276">Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-276"><see langword="true" /> if the element is added to the set; <see langword="false" /> if the element is already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-277">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-277">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-278">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ISet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-278">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-279">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-279">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-280">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-280">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.ExceptWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.ExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.ExceptWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#ExceptWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub ExceptWith (other As IEnumerable(Of T)) Implements ISet(Of T).ExceptWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.ExceptWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::ExceptWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-281">Коллекция элементов, удаляемых из набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-281">The collection of items to remove from the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-282">Удаляет все элементы указанной коллекции из текущего набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-282">Removes all elements in the specified collection from the current set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-283">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-283">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-284">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ISet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-284">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-285">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-285">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-286">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-286">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.IntersectWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.IntersectWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.IntersectWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#IntersectWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub IntersectWith (other As IEnumerable(Of T)) Implements ISet(Of T).IntersectWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.IntersectWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::IntersectWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-287">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-287">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-288">Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-288">Modifies the current set so that it contains only elements that are also in a specified collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-289">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-290">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ISet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-290">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-291">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-291">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-292">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-292">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.SymmetricExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub SymmetricExceptWith (other As IEnumerable(Of T)) Implements ISet(Of T).SymmetricExceptWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::SymmetricExceptWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-293">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-293">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-294">Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-294">Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-295">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-295">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-296">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ISet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-296">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-297">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-297">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-298">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-298">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.UnionWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.UnionWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.UnionWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#UnionWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub UnionWith (other As IEnumerable(Of T)) Implements ISet(Of T).UnionWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.UnionWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::UnionWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-299">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-299">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-300">Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть либо в нем, либо в указанной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-300">Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-301">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-302">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Generic.ISet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-302">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-303">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-303">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-304">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-304">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2e1a0-305">Одномерный массив, в который копируются элементы из набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-305">The one-dimensional array that is the destination of the elements copied from the set.</span></span> <span data-ttu-id="2e1a0-306">Индекс в массиве должен начинаться с нуля.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-306">The array must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="2e1a0-307">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-307">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="2e1a0-308">Копирует элементы из набора в массив начиная с определенного индекса массива.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-308">Copies the elements of the set to an array, starting at a particular array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-309">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-309">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-310">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-310">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>

[<span data-ttu-id="2e1a0-311">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-311">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-312">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-312">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-313">См. интерфейс <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-313">See the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-314">См. раздел <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-314">See <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-315">Возвращает перечислитель, который осуществляет итерацию по коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-315">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-316">Объект перечислителя, который можно использовать для перечисления элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-316">An enumerator object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-317">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-318">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-318">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>

[<span data-ttu-id="2e1a0-319">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-319">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-320">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-320">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-321">Объект, который нужно добавить в набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-321">The object to add to the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-322">Добавляет элемент в набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-322">Adds an item to the set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-323">Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-323">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-324">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-324">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-325">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-325">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-326">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-326">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-327">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-327">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2e1a0-328">Набор доступен только для чтения или имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-328">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-329">Удаляет все элементы из набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-329">Removes all items from the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-330">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-330">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-331">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-331">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-332">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-332">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-333">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-333">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2e1a0-334">Создается во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-334">Thrown in all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-335">Объект, который нужно найти в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-335">The object to locate in the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-336">Определяет, содержит ли набор указанное значение.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-336">Determines whether the set contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-337">Значение <see langword="true" />, если объект найден в наборе; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-337"><see langword="true" /> if the object is found in the set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-338">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-338">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-339">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-339">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-340">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-340">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-341">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-341">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-342">Объект, который нужно найти в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-342">The object to locate in the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-343">Определяет индекс указанного элемента в наборе.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-343">Determines the index of a specific item in the set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-344">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-344">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-345">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-345">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-346">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-346">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-347">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-347">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-348">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-348">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-349">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-349">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="2e1a0-350">Объект, который нужно вставить в набор.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-350">The object to insert into the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-351">Вставляет элемент в набор по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-351">Inserts an item into the set at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-352">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-352">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-353">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-353">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-354">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-354">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-355">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-355">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2e1a0-356">Набор доступен только для чтения или имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-356">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-357">Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IList" /> фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-357">Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="2e1a0-358">Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-358"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e1a0-359">Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-359">Gets a value that indicates whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="2e1a0-360">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-360"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-361">Индекс.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-361">The index.</span></span></param>
        <summary><span data-ttu-id="2e1a0-362">Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-362">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span></span></summary>
        <value><span data-ttu-id="2e1a0-363"><see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-363">The <see cref="T:System.Object" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-364">Объект, который нужно удалить из набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-364">The object to remove from the set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-365">Удаляет из набора первый экземпляр указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-365">Removes the first occurrence of a specific object from the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-366">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-366">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-367">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-367">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-368">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-368">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-369">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-369">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2e1a0-370">Набор доступен только для чтения или имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-370">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2e1a0-371">Отсчитываемый от нуля индекс удаляемого элемента.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-371">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="2e1a0-372">Удаляет из набора элемент по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-372">Removes the item at the specified index of the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-373">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-373">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-374">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-374">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>

[<span data-ttu-id="2e1a0-375">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-375">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-376">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-376">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2e1a0-377">Набор доступен только для чтения или имеет фиксированный размер.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-377">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-378">Добавляемый элемент.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-378">The element to add.</span></span></param>
        <summary><span data-ttu-id="2e1a0-379">Добавляет в неизменяемый набор указанный элемент.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-379">Adds the specified element to this immutable set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-380">Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-380">A new set with the element added, or this set if the element is already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-381">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-381">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-382">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-382">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-383">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-383">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-384">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-384">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableSet(Of T) Implements IImmutableSet(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-385">Возвращает пустой неизменяемый набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-385">Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-386">Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-386">An empty set that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-387">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-387">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-388">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-388">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-389">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-389">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-390">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-390">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Except (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Except" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Except;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-391">Элементы, которые нужно удалить из набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-391">The items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-392">Удаляет из текущего неизменяемого набора все элементы указанной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-392">Removes the elements in the specified collection from the current immutable set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-393">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-393">The new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-394">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-394">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-395">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-395">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-396">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-396">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-397">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-397">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Intersect (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Intersect" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Intersect;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-398">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-398">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-399">Создает неизменяемый набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-399">Creates an immutable set that contains elements that exist in both this set and the specified set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-400">Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-400">A new immutable set that contains any elements that exist in both sets.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-401">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-401">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-402">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-402">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-403">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-403">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-404">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-404">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove(T value) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2e1a0-405">Подлежащий удалению элемент.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-405">The element to remove.</span></span></param>
        <summary><span data-ttu-id="2e1a0-406">Удаляет указанный элемент из неизменяемого набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-406">Removes the specified element from this immutable set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-407">Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-407">A new set with the specified element removed, or the current set if the element cannot be found in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-408">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-408">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-409">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-409">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-410">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-410">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-411">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-411">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function SymmetricExcept (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).SymmetricExcept" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::SymmetricExcept;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-412">Коллекция для сравнения с текущим набором.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-412">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="2e1a0-413">Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-413">Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-414">Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-414">A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-415">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-415">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-416">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-416">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-417">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-417">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-418">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-418">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Union (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Union" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Union;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-419">Коллекция, из которой нужно добавить элементы.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-419">The collection to add elements from.</span></span></param>
        <summary><span data-ttu-id="2e1a0-420">Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-420">Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-421">Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-421">A new immutable set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-422">Этот член представляет собой явную реализацию члена интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-422">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2e1a0-423">Он может использоваться, только если экземпляр <xref:System.Collections.Immutable.ImmutableSortedSet%601> приведен к типу интерфейса <xref:System.Collections.Immutable.IImmutableSet%601>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-423">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>

[<span data-ttu-id="2e1a0-424">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-424">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-425">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-425">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableSortedSet(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Builder" Usage="immutableSortedSet.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e1a0-426">Создает коллекцию, которая содержит те же объекты, что и неизменяемый отсортированный словарь, и с которой можно эффективно выполнять операции с использованием стандартных изменяемых интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-426">Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-427">Построитель отсортированного набора.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-427">The sorted set builder.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-428">Если необходимо выполнить несколько операций с неизменяемой коллекцией, чтобы повысить эффективность, можно скопировать <xref:System.Collections.Immutable.ImmutableSortedSet%601> в <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, используя метод <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A>, управлять набором и сделать его неизменяемым снова с помощью метода <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-428">If you need to perform multiple operations on an immutable collection, to increase efficiency you can copy the <xref:System.Collections.Immutable.ImmutableSortedSet%601> to a <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> method, manipulate the set and make it immutable again using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> method.</span></span> <span data-ttu-id="2e1a0-429">При этом исходный неизменяемый отсортированный набор не изменится.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-429">This will not change the original immutable sorted set.</span></span>

 <span data-ttu-id="2e1a0-430">Это операция O (1), которая приводит к возникновению только одного (небольшого) выделения памяти.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-430">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="2e1a0-431">Возвращаемая изменяемая коллекция не является потокобезопасной.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-431">The mutable collection that is returned is not thread safe.</span></span>

[<span data-ttu-id="2e1a0-432">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-432">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-433">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-433">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (T equalValue, out T actualValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!T equalValue, [out] !T&amp; actualValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (equalValue As T, ByRef actualValue As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(T equalValue, [Runtime::InteropServices::Out] T % actualValue);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'T * 'T -&gt; bool&#xA;override this.TryGetValue : 'T * 'T -&gt; bool" Usage="immutableSortedSet.TryGetValue (equalValue, actualValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equalValue" Type="T" />
        <Parameter Name="actualValue" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="equalValue"><span data-ttu-id="2e1a0-434">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-434">The value to search for.</span></span></param>
        <param name="actualValue"><span data-ttu-id="2e1a0-435">Значение, найденное в наборе, либо исходное значение, если поиск не вернул результатов.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-435">The value from the set that the search found, or the original value if the search yielded no match.</span></span></param>
        <summary><span data-ttu-id="2e1a0-436">Выполняет поиск указанного значения в наборе и возвращает равное ему значение, если его удалось найти.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-436">Searches the set for a given value and returns the equal value it finds, if any.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-437">Значение, указывающее, успешно ли был выполнен поиск.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-437">A value indicating whether the search was successful.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2e1a0-438">Это может быть полезно, если необходимо повторно использовать ранее сохраненную ссылку вместо вновь созданной (чтобы можно было получить больше общего доступа к ссылкам) или найти значение, имеющее более полные данные по сравнению с текущим значением, хотя функции сравнения Укажите, что они равны.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-438">This can be useful when you want to reuse a previously stored reference instead of a newly constructed one (so that more sharing of references can occur) or to look up a value that has more complete data than the value you currently have, although their comparer functions indicate they are equal.</span></span>

[<span data-ttu-id="2e1a0-439">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-439">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-440">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-440">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Union : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Union other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="2e1a0-441">Добавляемые элементы.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-441">The items to add.</span></span></param>
        <summary><span data-ttu-id="2e1a0-442">Добавляет в неизменяемый отсортированный набор указанный набор элементов.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-442">Adds a given set of items to this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-443">Новый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-443">The new set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-444">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-444">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-445">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-445">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; WithComparer (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; WithComparer(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithComparer (comparer As IComparer(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ WithComparer(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.WithComparer : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.WithComparer comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="2e1a0-446">Функция сравнения ключей, которую нужно проверить.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-446">The comparer to check for.</span></span></param>
        <summary><span data-ttu-id="2e1a0-447">Возвращает неизменяемый отсортированный набор с указанной функцией сравнения ключей.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-447">Returns the immutable sorted set that has the specified key comparer.</span></span></summary>
        <returns><span data-ttu-id="2e1a0-448">Неизменяемый отсортированный набор с указанной функцией сравнения ключей.</span><span class="sxs-lookup"><span data-stu-id="2e1a0-448">The immutable sorted set that has the specified key comparer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[<span data-ttu-id="2e1a0-449">System. Collections. неизменяемый пакет NuGet</span><span class="sxs-lookup"><span data-stu-id="2e1a0-449">System.Collections.Immutable NuGet package</span></span>](https://www.nuget.org/packages/System.Collections.Immutable/)

[<span data-ttu-id="2e1a0-450">О неизменяемых коллекциях и о том, как установить</span><span class="sxs-lookup"><span data-stu-id="2e1a0-450">About immutable collections and how to install</span></span>](https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
