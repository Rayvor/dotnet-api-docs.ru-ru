<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5b9a5038bf91b4a4732cbaceb896f11fa483fd83" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75151241" /></Metadata><TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableInterlocked = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
    <AssemblyVersion>1.2.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="db755-101">Содержит механизмы обмена с взаимоблокировкой для неизменяемых коллекций.</span><span class="sxs-lookup"><span data-stu-id="db755-101">Contains interlocked exchange mechanisms for immutable collections.</span></span>  
  
 <span data-ttu-id="db755-102">**Пакет NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">сведения о неизменяемых коллекциях и способах их установки</see>)</span><span class="sxs-lookup"><span data-stu-id="db755-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
    <threadsafe><span data-ttu-id="db755-103">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="db755-103">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate : ImmutableDictionary * 'Key * Func&lt;'Key, 'Value&gt; * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValueFactory, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-104">Тип ключа, хранящегося в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-104">The type of key stored by the dictionary.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-105">Тип значения, хранящегося в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-105">The type of value stored by the dictionary.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-106">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-106">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="db755-107">Ключ для значения, которое нужно добавить или обновить.</span><span class="sxs-lookup"><span data-stu-id="db755-107">The key for the value to add or update.</span></span></param>
        <param name="addValueFactory"><span data-ttu-id="db755-108">Функция, получающая ключ и возвращающая новое значение, которое нужно добавить в словарь, если такого значения в нем нет.</span><span class="sxs-lookup"><span data-stu-id="db755-108">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="db755-109">Функция, получающая ключ и предыдущее значение и возвращающая новое значение, которым нужно обновить словарь.</span><span class="sxs-lookup"><span data-stu-id="db755-109">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="db755-110">Возвращает значение из словаря после добавления или изменения существующей записи.</span><span class="sxs-lookup"><span data-stu-id="db755-110">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="db755-111">Добавленное или обновленное значение.</span><span class="sxs-lookup"><span data-stu-id="db755-111">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate : ImmutableDictionary * 'Key * 'Value * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValue, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-112">Тип ключа, хранящегося в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-112">The type of key stored by the dictionary.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-113">Тип значения, хранящегося в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-113">The type of value stored by the dictionary.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-114">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-114">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="db755-115">Ключ для значения, которое нужно добавить или обновить.</span><span class="sxs-lookup"><span data-stu-id="db755-115">The key for the value to add or update.</span></span></param>
        <param name="addValue"><span data-ttu-id="db755-116">Значение, которое нужно использовать, если предыдущего значения не существует.</span><span class="sxs-lookup"><span data-stu-id="db755-116">The value to use if no previous value exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="db755-117">Функция, получающая ключ и предыдущее значение и возвращающая новое значение, которым нужно обновить словарь.</span><span class="sxs-lookup"><span data-stu-id="db755-117">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="db755-118">Возвращает значение из словаря после добавления или изменения существующей записи.</span><span class="sxs-lookup"><span data-stu-id="db755-118">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="db755-119">Добавленное или обновленное значение.</span><span class="sxs-lookup"><span data-stu-id="db755-119">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Enqueue : ImmutableQueue * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Enqueue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-120">Тип элементов коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-120">The type of items contained in the collection</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-121">Переменная или поле, которые нужно обновить атомарным образом.</span><span class="sxs-lookup"><span data-stu-id="db755-121">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="db755-122">Значение, которое нужно добавить в очередь.</span><span class="sxs-lookup"><span data-stu-id="db755-122">The value to enqueue.</span></span></param>
        <summary><span data-ttu-id="db755-123">Атомарным образом добавляет элемент в конец очереди.</span><span class="sxs-lookup"><span data-stu-id="db755-123">Atomically enqueues an element to the end of a queue.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd : ImmutableDictionary * 'Key * Func&lt;'Key, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-124">Тип ключей в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-124">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-125">Тип значений в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-125">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-126">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-126">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="db755-127">Ключ значения, которое нужно получить или добавить.</span><span class="sxs-lookup"><span data-stu-id="db755-127">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="db755-128">Функция, выполняемая для получения значения, которое нужно вставить в словарь, если ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-128">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span> <span data-ttu-id="db755-129">Этот делегат будет вызван не больше одного раза.</span><span class="sxs-lookup"><span data-stu-id="db755-129">This delegate will not be invoked more than once.</span></span></param>
        <summary><span data-ttu-id="db755-130">Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-130">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="db755-131">Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-131">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd : ImmutableDictionary * 'Key * 'Value -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-132">Тип ключей в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-132">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-133">Тип значений в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-133">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-134">Переменная или поле, которые нужно обновить атомарным образом, если указанного ключа нет в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-134">The variable or field to atomically update if the specified key is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="db755-135">Ключ для значения, которое нужно получить или добавить.</span><span class="sxs-lookup"><span data-stu-id="db755-135">The key for the value to get or add.</span></span></param>
        <param name="value"><span data-ttu-id="db755-136">Значение, которое нужно добавить в словарь, если ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-136">The value to add to the dictionary the key is not found.</span></span></param>
        <summary><span data-ttu-id="db755-137">Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-137">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="db755-138">Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-138">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd : ImmutableDictionary * 'Key * Func&lt;'Key, 'Arg, 'Value&gt; * 'Arg -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory, factoryArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-139">Тип ключей в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-139">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-140">Тип значений в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-140">The type of the values contained in the collection.</span></span></typeparam>
        <typeparam name="TArg"><span data-ttu-id="db755-141">Тип аргумента, переданного в фабрику значений.</span><span class="sxs-lookup"><span data-stu-id="db755-141">The type of the argument supplied to the value factory.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-142">Переменная или поле, которые нужно обновить, если указанного элемента нет в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-142">The variable or field to update if the specified is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="db755-143">Ключ значения, которое нужно получить или добавить.</span><span class="sxs-lookup"><span data-stu-id="db755-143">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="db755-144">Функция, выполняемая для получения значения, которое нужно вставить в словарь, если ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-144">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span></param>
        <param name="factoryArgument"><span data-ttu-id="db755-145">Аргумент, передаваемый фабрике значений.</span><span class="sxs-lookup"><span data-stu-id="db755-145">The argument to pass to the value factory.</span></span></param>
        <summary><span data-ttu-id="db755-146">Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-146">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="db755-147">Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</span><span class="sxs-lookup"><span data-stu-id="db755-147">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="F#" Value="static member InterlockedCompareExchange : ImmutableArray * System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange (location, value, comparand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-148">Тип элементов, которые хранятся в массиве.</span><span class="sxs-lookup"><span data-stu-id="db755-148">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-149">Целевой объект, который нужно сравнить с объектом <paramref name="comparand" /> и, возможно, заменить.</span><span class="sxs-lookup"><span data-stu-id="db755-149">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="db755-150">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</span><span class="sxs-lookup"><span data-stu-id="db755-150">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="db755-151">Значение, которое сравнивается со значением в позиции <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="db755-151">The value that is compared to the value at <paramref name="location" />.</span></span></param>
        <summary><span data-ttu-id="db755-152">Проверяет два неизменяемых массива на равенство и, если они равны, заменяет один из них.</span><span class="sxs-lookup"><span data-stu-id="db755-152">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span></span></summary>
        <returns><span data-ttu-id="db755-153">Исходное значение в позиции <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="db755-153">The original value in <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedExchange : ImmutableArray * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-154">Тип элементов, которые хранятся в массиве.</span><span class="sxs-lookup"><span data-stu-id="db755-154">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-155">Массив, для которого нужно задать указанное значение.</span><span class="sxs-lookup"><span data-stu-id="db755-155">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="db755-156">Значение, которое задается для параметра <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="db755-156">The value to which the <paramref name="location" /> parameter is set.</span></span></param>
        <summary><span data-ttu-id="db755-157">Задает для массива значение указанного массива и возвращает ссылку на исходный массив (вся операция выполняется атомарным образом).</span><span class="sxs-lookup"><span data-stu-id="db755-157">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="db755-158">Исходное значение <paramref name="location" />.</span><span class="sxs-lookup"><span data-stu-id="db755-158">The original value of <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedInitialize : ImmutableArray * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-159">Тип элементов, которые хранятся в массиве.</span><span class="sxs-lookup"><span data-stu-id="db755-159">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-160">Массив, для которого нужно задать указанное значение.</span><span class="sxs-lookup"><span data-stu-id="db755-160">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="db755-161">Значение, которое задается для параметра <paramref name="location" />, если он не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="db755-161">The value to which the <paramref name="location" /> parameter is set, if it's not initialized.</span></span></param>
        <summary><span data-ttu-id="db755-162">Задает для массива значение указанного массива, если он не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="db755-162">Sets an array to the specified array if the array has not been initialized.</span></span></summary>
        <returns><span data-ttu-id="db755-163">Значение <see langword="true" />, если массиву было присвоено указанное значение; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="db755-163"><see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Push : ImmutableStack * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Push (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-164">Тип элементов стека.</span><span class="sxs-lookup"><span data-stu-id="db755-164">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-165">Стек, в который вносятся изменения.</span><span class="sxs-lookup"><span data-stu-id="db755-165">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="db755-166">Значение, которое нужно поместить в стек.</span><span class="sxs-lookup"><span data-stu-id="db755-166">The value to push on the stack.</span></span></param>
        <summary><span data-ttu-id="db755-167">Помещает в стек новый элемент.</span><span class="sxs-lookup"><span data-stu-id="db755-167">Pushes a new element onto the stack.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member TryAdd : ImmutableDictionary * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-168">Тип ключей в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-168">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-169">Тип значений в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-169">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-170">Словарь, который нужно обновить с использованием указанных ключа и значения.</span><span class="sxs-lookup"><span data-stu-id="db755-170">The dictionary to update with the specified key and value.</span></span></param>
        <param name="key"><span data-ttu-id="db755-171">Ключ, который нужно добавить, если он еще не определен в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-171">The key to add, if is not already defined in the dictionary.</span></span></param>
        <param name="value"><span data-ttu-id="db755-172">Добавляемое значение.</span><span class="sxs-lookup"><span data-stu-id="db755-172">The value to add.</span></span></param>
        <summary><span data-ttu-id="db755-173">Добавляет в словарь указанные ключ и значение, если такого ключа нет в словаре.</span><span class="sxs-lookup"><span data-stu-id="db755-173">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span></span></summary>
        <returns><span data-ttu-id="db755-174">Значение <see langword="true" />, если ключа нет в словаре; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="db755-174"><see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryDequeue : ImmutableQueue * 'T -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryDequeue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-175">Тип элементов очереди.</span><span class="sxs-lookup"><span data-stu-id="db755-175">The type of items in the queue.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-176">Переменная или поле, которые нужно обновить атомарным образом.</span><span class="sxs-lookup"><span data-stu-id="db755-176">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="db755-177">Устанавливает значение в голове очереди, если она не пуста.</span><span class="sxs-lookup"><span data-stu-id="db755-177">Set to the value from the head of the queue, if the queue not empty.</span></span></param>
        <summary><span data-ttu-id="db755-178">Атомарным образом удаляет и возвращает указанный элемент в голове очереди, если она не пуста.</span><span class="sxs-lookup"><span data-stu-id="db755-178">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span></span></summary>
        <returns><span data-ttu-id="db755-179">Значение <see langword="true" />, если очередь не пуста и из ее головы удален элемент; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="db755-179"><see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryPop : ImmutableStack * 'T -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryPop (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-180">Тип элементов стека.</span><span class="sxs-lookup"><span data-stu-id="db755-180">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-181">Стек, в который вносятся изменения.</span><span class="sxs-lookup"><span data-stu-id="db755-181">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="db755-182">Получает значение, удаленное из стека, если стек не пуст.</span><span class="sxs-lookup"><span data-stu-id="db755-182">Receives the value removed from the stack, if the stack is not empty.</span></span></param>
        <summary><span data-ttu-id="db755-183">Удаляет верхний элемент стека, если в нем есть элементы для удаления.</span><span class="sxs-lookup"><span data-stu-id="db755-183">Removes an element from the top of the stack, if there is an element to remove.</span></span></summary>
        <returns><span data-ttu-id="db755-184">Значение <see langword="true" />, если элемент удален из стека; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="db755-184"><see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="static member TryRemove : ImmutableDictionary * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryRemove (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-185">Тип ключей в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-185">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-186">Тип значений в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-186">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-187">Обновляемый словарь.</span><span class="sxs-lookup"><span data-stu-id="db755-187">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="db755-188">Удаляемый ключ.</span><span class="sxs-lookup"><span data-stu-id="db755-188">The key to remove.</span></span></param>
        <param name="value"><span data-ttu-id="db755-189">Получает значение удаленного элемента, если словарь не пуст.</span><span class="sxs-lookup"><span data-stu-id="db755-189">Receives the value of the removed item, if the dictionary is not empty.</span></span></param>
        <summary><span data-ttu-id="db755-190">Удаляет элемент с указанным ключом, если такой ключ существует.</span><span class="sxs-lookup"><span data-stu-id="db755-190">Removes the element with the specified key, if the key exists.</span></span></summary>
        <returns><span data-ttu-id="db755-191">Значение <see langword="true" />, если ключ найден и удален; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="db755-191"><see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="F#" Value="static member TryUpdate : ImmutableDictionary * 'Key * 'Value * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryUpdate (location, key, newValue, comparisonValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="db755-192">Тип ключей в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-192">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="db755-193">Тип значений в коллекции.</span><span class="sxs-lookup"><span data-stu-id="db755-193">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-194">Обновляемый словарь.</span><span class="sxs-lookup"><span data-stu-id="db755-194">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="db755-195">Обновляемый ключ.</span><span class="sxs-lookup"><span data-stu-id="db755-195">The key to update.</span></span></param>
        <param name="newValue"><span data-ttu-id="db755-196">Устанавливаемое новое значение.</span><span class="sxs-lookup"><span data-stu-id="db755-196">The new value to set.</span></span></param>
        <param name="comparisonValue"><span data-ttu-id="db755-197">Текущее значение для ключа <paramref name="key" />, чтобы операция была успешно выполнена.</span><span class="sxs-lookup"><span data-stu-id="db755-197">The current value for <paramref name="key" /> in order for the update to succeed.</span></span></param>
        <summary><span data-ttu-id="db755-198">Устанавливает для указанного ключа заданное значение, если для него еще не установлено определенное значение.</span><span class="sxs-lookup"><span data-stu-id="db755-198">Sets the specified key to the specified value if the specified key already is set to a specific value.</span></span></summary>
        <returns><span data-ttu-id="db755-199">Значение <see langword="true" />, если в словаре есть ключ <paramref name="key" /> и значение <paramref name="comparisonValue" /> и для него было задано новое значение <paramref name="newValue" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="db755-199"><see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberSignature Language="F#" Value="static member Update : 'T * Func&lt;'T, 'T (requires 'T : null and 'T : null)&gt; -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-200">Тип данных.</span><span class="sxs-lookup"><span data-stu-id="db755-200">The type of data.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-201">Переменная или изменяемое поле, к которым могут обращаться сразу несколько потоков.</span><span class="sxs-lookup"><span data-stu-id="db755-201">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="db755-202">Функция, изменяющая значение.</span><span class="sxs-lookup"><span data-stu-id="db755-202">A function that mutates the value.</span></span> <span data-ttu-id="db755-203">Эта функция не должна иметь никаких побочных эффектов, поскольку может выполняться сразу несколько раз при конфликтах с другими потоками.</span><span class="sxs-lookup"><span data-stu-id="db755-203">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <summary><span data-ttu-id="db755-204">Изменяет текущее значение на семантику транзакции оптимистической блокировки, используя указанную функцию трансформации.</span><span class="sxs-lookup"><span data-stu-id="db755-204">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="db755-205">Преобразование извлекается столько раз, сколько требуется для устранения конфликта оптимистической блокировки.</span><span class="sxs-lookup"><span data-stu-id="db755-205">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns><span data-ttu-id="db755-206"><see langword="true" />, если значение расположения изменилось после применения результата функции <paramref name="transformer" />; <see langword="false" />, если значение расположения осталось неизменным, поскольку последний вызов <paramref name="transformer" /> вернул существующее значение.</span><span class="sxs-lookup"><span data-stu-id="db755-206"><see langword="true" /> if the location's value is changed by applying the result of the <paramref name="transformer" /> function; <see langword="false" /> if the location's value remained the same because the last invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberSignature Language="F#" Value="static member Update : 'T * Func&lt;'T, 'Arg, 'T (requires 'T : null and 'T : null)&gt; * 'Arg -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer, transformerArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
        <AssemblyVersion>1.2.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="db755-207">Тип данных.</span><span class="sxs-lookup"><span data-stu-id="db755-207">The type of data.</span></span></typeparam>
        <typeparam name="TArg"><span data-ttu-id="db755-208">Тип аргумента, переданного в <paramref name="transformer" />.</span><span class="sxs-lookup"><span data-stu-id="db755-208">The type of argument passed to the <paramref name="transformer" />.</span></span></typeparam>
        <param name="location"><span data-ttu-id="db755-209">Переменная или изменяемое поле, к которым могут обращаться сразу несколько потоков.</span><span class="sxs-lookup"><span data-stu-id="db755-209">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="db755-210">Функция, изменяющая значение.</span><span class="sxs-lookup"><span data-stu-id="db755-210">A function that mutates the value.</span></span> <span data-ttu-id="db755-211">Эта функция не должна иметь никаких побочных эффектов, поскольку может выполняться сразу несколько раз при конфликтах с другими потоками.</span><span class="sxs-lookup"><span data-stu-id="db755-211">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <param name="transformerArgument"><span data-ttu-id="db755-212">Аргумент, передаваемый в <paramref name="transformer" />.</span><span class="sxs-lookup"><span data-stu-id="db755-212">The argument to pass to <paramref name="transformer" />.</span></span></param>
        <summary><span data-ttu-id="db755-213">Изменяет текущее значение на семантику транзакции оптимистической блокировки, используя указанную функцию трансформации.</span><span class="sxs-lookup"><span data-stu-id="db755-213">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="db755-214">Преобразование извлекается столько раз, сколько требуется для устранения конфликта оптимистической блокировки.</span><span class="sxs-lookup"><span data-stu-id="db755-214">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns><span data-ttu-id="db755-215"><see langword="true" />, если значение расположения изменилось после применения результата функции <paramref name="transformer" />; <see langword="false" />, если значение расположения осталось неизменным, поскольку последний вызов <paramref name="transformer" /> вернул существующее значение.</span><span class="sxs-lookup"><span data-stu-id="db755-215"><see langword="true" /> if the location's value is changed by applying the result of the <paramref name="transformer" /> function; <see langword="false" /> if the location's value remained the same because the last invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
