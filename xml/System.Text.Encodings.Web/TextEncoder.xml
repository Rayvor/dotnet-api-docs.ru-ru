<Type Name="TextEncoder" FullName="System.Text.Encodings.Web.TextEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f256bd19406943d7fd918001a1b94eff3e71302" /><Meta Name="ms.sourcegitcommit" Value="96c669ea9a8f9e1197bf570e5eb51a3c7a913f39" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/10/2019" /><Meta Name="ms.locfileid" Value="70875190" /></Metadata><TypeSignature Language="C#" Value="public abstract class TextEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Encodings.Web.TextEncoder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextEncoder abstract" />
  <TypeSignature Language="F#" Value="type TextEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encodings.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Базовый класс веб-кодировщиков.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[ 

## Remarks  
 Подклассы Текстенкодер можно использовать для кодирования HTML, кодирования URI и кодирования JavaScript. Доступ к экземплярам таких подклассов можно получить с <xref:System.Text.Encodings.Web.HtmlEncoder.Default?displayProperty=nameWithType>помощью <xref:System.Text.Encodings.Web.UrlEncoder.Default?displayProperty=nameWithType>свойств, <xref:System.Text.Encodings.Web.JavaScriptEncoder.Default?displayProperty=nameWithType> и.   

 Исходный код для этого типа доступен в [проекте System. Text. encodings. Web](https://github.com/dotnet/corefx/tree/master/src/System.Text.Encodings.Web) в GitHub. Модульные тесты, которые также могут использоваться в качестве примеров кода, находятся в папке [System. Text. encodings. Web/Tests](https://github.com/dotnet/corefx/tree/master/src/System.Text.Encodings.Web/tests) на сайте GitHub.  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.Encodings.Web.TextEncoder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public virtual string Encode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Encode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.Encode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Encode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Encode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Encode : string -&gt; string&#xA;override this.Encode : string -&gt; string" Usage="textEncoder.Encode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Кодируемая строка.</param>
        <summary>Кодирует указанную строку и возвращает кодированный текст в виде новой строки.</summary>
        <returns>Закодированная строка.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Метод <see cref="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" /> завершился сбоем. Кодировщик не реализует <see cref="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" /> правильно.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public void Encode (System.IO.TextWriter output, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Encode(class System.IO.TextWriter output, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.Encode(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Encode (output As TextWriter, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Encode(System::IO::TextWriter ^ output, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Encode : System.IO.TextWriter * string -&gt; unit" Usage="textEncoder.Encode (output, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="output">Поток для записи кодированного текста.</param>
        <param name="value">Кодируемая строка.</param>
        <summary>Кодирует указанную строку в объект <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public virtual void Encode (System.IO.TextWriter output, char[] value, int startIndex, int characterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Encode(class System.IO.TextWriter output, char[] value, int32 startIndex, int32 characterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.Encode(System.IO.TextWriter,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Encode (output As TextWriter, value As Char(), startIndex As Integer, characterCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Encode(System::IO::TextWriter ^ output, cli::array &lt;char&gt; ^ value, int startIndex, int characterCount);" />
      <MemberSignature Language="F#" Value="abstract member Encode : System.IO.TextWriter * char[] * int * int -&gt; unit&#xA;override this.Encode : System.IO.TextWriter * char[] * int * int -&gt; unit" Usage="textEncoder.Encode (output, value, startIndex, characterCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="characterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="output">Поток для записи кодированного текста.</param>
        <param name="value">Массив символов для кодирования.</param>
        <param name="startIndex">Индекс массива первого кодируемого символа.</param>
        <param name="characterCount">Количество символов в массиве, которое необходимо кодировать.</param>
        <summary>Кодирует символы из массива и записывает их в объект <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="output" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Метод <see cref="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" /> завершился сбоем. Кодировщик не реализует <see cref="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" /> правильно.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> выходит за пределы допустимого диапазона.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="characterCount" /> выходит за пределы допустимого диапазона.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public virtual void Encode (System.IO.TextWriter output, string value, int startIndex, int characterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Encode(class System.IO.TextWriter output, string value, int32 startIndex, int32 characterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.Encode(System.IO.TextWriter,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Encode (output As TextWriter, value As String, startIndex As Integer, characterCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Encode(System::IO::TextWriter ^ output, System::String ^ value, int startIndex, int characterCount);" />
      <MemberSignature Language="F#" Value="abstract member Encode : System.IO.TextWriter * string * int * int -&gt; unit&#xA;override this.Encode : System.IO.TextWriter * string * int * int -&gt; unit" Usage="textEncoder.Encode (output, value, startIndex, characterCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="characterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="output">Поток для записи кодированного текста.</param>
        <param name="value">Строка, подстроку которой необходимо кодировать.</param>
        <param name="startIndex">Индекс, в котором начинается подстрока.</param>
        <param name="characterCount">Число символов в подстроке.</param>
        <summary>Кодирует подстроку и записывает ее в объект <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="output" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Метод <see cref="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" /> завершился сбоем. Кодировщик не реализует <see cref="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" /> правильно.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> выходит за пределы допустимого диапазона.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="characterCount" /> выходит за пределы допустимого диапазона.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public virtual System.Buffers.OperationStatus Encode (ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, out int charsConsumed, out int charsWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Buffers.OperationStatus Encode(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsConsumed, [out] int32&amp; charsWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.Encode(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Encode (source As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsConsumed As Integer, ByRef charsWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="abstract member Encode : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * int * int * bool -&gt; System.Buffers.OperationStatus&#xA;override this.Encode : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * int * int * bool -&gt; System.Buffers.OperationStatus" Usage="textEncoder.Encode (source, destination, charsConsumed, charsWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="source">Исходный буфер, содержащий символы для кодирования.</param>
        <param name="destination">Буфер назначения, в который будет записана закодированная форма <paramref name="source" />.</param>
        <param name="charsConsumed">Количество символов, использованных из буфера <paramref name="source" />.</param>
        <param name="charsWritten">Количество символов, записанных в буфер <paramref name="destination" />.</param>
        <param name="isFinalBlock">Значение <see langword="true" />, если нет дополнительных исходных данных для кодирования, иначе — <see langword="false" />.</param>
        <summary>Кодирует указанные символы.</summary>
        <returns>Значение перечисления, описывающее результат операции кодирования.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Буферы `source` и `destination` не должны перекрываться.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeUtf8">
      <MemberSignature Language="C#" Value="public virtual System.Buffers.OperationStatus EncodeUtf8 (ReadOnlySpan&lt;byte&gt; utf8Source, Span&lt;byte&gt; utf8Destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Buffers.OperationStatus EncodeUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Source, valuetype System.Span`1&lt;unsigned int8&gt; utf8Destination, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.EncodeUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EncodeUtf8 (utf8Source As ReadOnlySpan(Of Byte), utf8Destination As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="abstract member EncodeUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int * int * bool -&gt; System.Buffers.OperationStatus&#xA;override this.EncodeUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int * int * bool -&gt; System.Buffers.OperationStatus" Usage="textEncoder.EncodeUtf8 (utf8Source, utf8Destination, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="utf8Destination" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="utf8Source">Исходный буфер, содержащий текст в кодировке UTF-8 для кодирования.</param>
        <param name="utf8Destination">Буфер назначения, в который будет записана закодированная форма <paramref name="utf8Source" />.</param>
        <param name="bytesConsumed">Количество байтов, использованных из буфера <paramref name="utf8Source" />.</param>
        <param name="bytesWritten">Количество байтов, записанных в буфер <paramref name="utf8Destination" />.</param>
        <param name="isFinalBlock">Значение <see langword="true" />, если нет дополнительных исходных данных для кодирования, иначе — <see langword="false" />.</param>
        <summary>Кодирует указанный текст в кодировке UTF-8.</summary>
        <returns>Код состояния, описывающий результат операции кодирования.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Буферы `utf8Destination` и не должны пересекаться. `utf8Source`

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFirstCharacterToEncode">
      <MemberSignature Language="C#" Value="public abstract int FindFirstCharacterToEncode (char* text, int textLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 FindFirstCharacterToEncode(char* text, int32 textLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.FindFirstCharacterToEncode(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int FindFirstCharacterToEncode(char* text, int textLength);" />
      <MemberSignature Language="F#" Value="abstract member FindFirstCharacterToEncode : nativeptr&lt;char&gt; * int -&gt; int" Usage="textEncoder.FindFirstCharacterToEncode (text, textLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Char*" />
        <Parameter Name="textLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Текстовый буфер для поиска.</param>
        <param name="textLength">Количество символов в <paramref name="text" />.</param>
        <summary>Находит индекс первого кодируемого символа.</summary>
        <returns>Индекс первого кодируемого символа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks  
 Этот вспомогательный метод редко вызывается напрямую.
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFirstCharacterToEncodeUtf8">
      <MemberSignature Language="C#" Value="public virtual int FindFirstCharacterToEncodeUtf8 (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 FindFirstCharacterToEncodeUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.FindFirstCharacterToEncodeUtf8(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindFirstCharacterToEncodeUtf8 (utf8Text As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int FindFirstCharacterToEncodeUtf8(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="abstract member FindFirstCharacterToEncodeUtf8 : ReadOnlySpan&lt;byte&gt; -&gt; int&#xA;override this.FindFirstCharacterToEncodeUtf8 : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="textEncoder.FindFirstCharacterToEncodeUtf8 utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="utf8Text">Входной буфер текста UTF-8 для поиска.</param>
        <summary>Находит первый элемент в буфере ввода текста UTF-8, который будет экранирован текущим экземпляром кодировщика.</summary>
        <returns>Индекс первого элемента в <paramref name="utf8Text" />, который будет экранирован текущим экземпляром кодировщика, или –1, если данные в <paramref name="utf8Text" /> не требуют экранирования.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxOutputCharactersPerInputCharacter">
      <MemberSignature Language="C#" Value="public abstract int MaxOutputCharactersPerInputCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxOutputCharactersPerInputCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MaxOutputCharactersPerInputCharacter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int MaxOutputCharactersPerInputCharacter { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxOutputCharactersPerInputCharacter : int" Usage="System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает максимальное количество символов, которое данный кодировщик может создать для каждой кодовой точки ввода.</summary>
        <value>Максимальное число символов.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeUnicodeScalar">
      <MemberSignature Language="C#" Value="public abstract bool TryEncodeUnicodeScalar (int unicodeScalar, char* buffer, int bufferLength, out int numberOfCharactersWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryEncodeUnicodeScalar(int32 unicodeScalar, char* buffer, int32 bufferLength, [out] int32&amp; numberOfCharactersWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryEncodeUnicodeScalar(int unicodeScalar, char* buffer, int bufferLength, [Runtime::InteropServices::Out] int % numberOfCharactersWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryEncodeUnicodeScalar : int * nativeptr&lt;char&gt; * int * int -&gt; bool" Usage="textEncoder.TryEncodeUnicodeScalar (unicodeScalar, buffer, bufferLength, numberOfCharactersWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicodeScalar" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Char*" />
        <Parameter Name="bufferLength" Type="System.Int32" />
        <Parameter Name="numberOfCharactersWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="unicodeScalar">Скалярное значение Юникод.</param>
        <param name="buffer">Указатель на буфер для записи кодированного текста.</param>
        <param name="bufferLength">Длина целевого объекта в символах <paramref name="buffer" />.</param>
        <param name="numberOfCharactersWritten">При возврате метода показывает количество символов, записанных в <paramref name="buffer" />.</param>
        <summary>Кодирует скалярное значение Юникод и записывает его в буфер.</summary>
        <returns><see langword="false" />, если размер <paramref name="bufferLength" /> слишком мал для кодированного текста; в противном случае возвращается значение <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks  
 Этот метод редко вызывается напрямую. Вместо этого следует <xref:System.Text.Encodings.Web.TextEncoder.Encode%2A> использовать одну из перегрузок. <xref:System.Text.Encodings.Web.TextEncoder> Реализации класса должны быть потокобезопасными и без отслеживания состояния.  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillEncode">
      <MemberSignature Language="C#" Value="public abstract bool WillEncode (int unicodeScalar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WillEncode(int32 unicodeScalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encodings.Web.TextEncoder.WillEncode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WillEncode (unicodeScalar As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool WillEncode(int unicodeScalar);" />
      <MemberSignature Language="F#" Value="abstract member WillEncode : int -&gt; bool" Usage="textEncoder.WillEncode unicodeScalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encodings.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicodeScalar" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicodeScalar">Скалярное значение Юникод.</param>
        <summary>Определяет, будет ли кодироваться заданное скалярное значение Юникод.</summary>
        <returns><see langword="true" />, если данный кодировщик будет кодировать значение <paramref name="unicodeScalar" />; в противном случае возвращается значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
