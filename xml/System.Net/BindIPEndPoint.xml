<Type Name="BindIPEndPoint" FullName="System.Net.BindIPEndPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="194f35650a2b685d1b47e38f54a46a2d8f17ac56" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75170299" /></Metadata><TypeSignature Language="C#" Value="public delegate System.Net.IPEndPoint BindIPEndPoint(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed BindIPEndPoint extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Net.BindIPEndPoint" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function BindIPEndPoint(servicePoint As ServicePoint, remoteEndPoint As IPEndPoint, retryCount As Integer) As IPEndPoint " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Net::IPEndPoint ^ BindIPEndPoint(ServicePoint ^ servicePoint, IPEndPoint ^ remoteEndPoint, int retryCount);" />
  <TypeSignature Language="F#" Value="type BindIPEndPoint = delegate of ServicePoint * IPEndPoint * int -&gt; IPEndPoint" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.ServicePoint</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="servicePoint" Type="System.Net.ServicePoint" />
    <Parameter Name="remoteEndPoint" Type="System.Net.IPEndPoint" />
    <Parameter Name="retryCount" Type="System.Int32" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Net.IPEndPoint</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="servicePoint">Точка обслуживания <see cref="T:System.Net.ServicePoint" />, связанная с создаваемым подключением.</param>
    <param name="remoteEndPoint">Удаленная точка <see cref="T:System.Net.IPEndPoint" />, указывающая удаленный узел.</param>
    <param name="retryCount">Количество вызовов этого делегата для определенного подключения.</param>
    <summary>Представляет метод, указывающий локальный IP-адрес и номер порта для точки обслуживания <see cref="T:System.Net.ServicePoint" />.</summary>
    <returns>Локальная точка <see cref="T:System.Net.IPEndPoint" />, с которой связана точка обслуживания <see cref="T:System.Net.ServicePoint" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Укажите, что <xref:System.Net.BindIPEndPoint> делегат используется <xref:System.Net.ServicePoint>, установив свойство <xref:System.Net.ServicePoint.BindIPEndPointDelegate%2A?displayProperty=nameWithType> с делегатом в качестве аргумента. Этот делегат должен указать локальный IP-адрес и номер порта в возвращенном <xref:System.Net.IPEndPoint>.  
  
 Если .NET Framework не удается привязать возвращенные <xref:System.Net.IPEndPoint> к <xref:System.Net.ServicePoint> после попыток <xref:System.Int32.MaxValue?displayProperty=nameWithType>, создается исключение <xref:System.OverflowException>.  
  
 Если необходимо, чтобы делегат предоставил управление точкой обслуживания для привязки соединения, делегат должен возвращать `null`. Если вы хотите прервать соединение, делегат должен создать исключение.  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.OverflowException"><paramref name="retryCount" /> равно <see cref="F:System.Int32.MaxValue" />.</exception>
  </Docs>
</Type>
