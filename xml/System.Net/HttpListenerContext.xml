<Type Name="HttpListenerContext" FullName="System.Net.HttpListenerContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a29716996c2d5ef66223fc19cd35e395b8079b87" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75109550" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListenerContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerContext sealed" />
  <TypeSignature Language="F#" Value="type HttpListenerContext = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет доступ к объектам запросов и ответов, используемых классом <see cref="T:System.Net.HttpListener" />. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс предоставляет сведения, относящиеся к HTTP-запросу клиента, обрабатываемого объектом <xref:System.Net.HttpListener>. Этот класс также содержит методы, которые позволяют объекту <xref:System.Net.HttpListener> принимать соединение WebSocket.  
  
 Метод <xref:System.Net.HttpListener.GetContext%2A> возвращает экземпляры класса <xref:System.Net.HttpListenerContext>. Чтобы получить объект, представляющий клиентский запрос, используйте свойство <xref:System.Net.HttpListenerContext.Request%2A>. Чтобы получить объект, представляющий ответ, который будет отправлен клиенту <xref:System.Net.HttpListener>, используйте свойство <xref:System.Net.HttpListenerContext.Response%2A>. Чтобы получить сведения о клиенте, отправляющем запрос, например имя для входа и то, прошло ли оно проверку подлинности, можно запросить свойства в <xref:System.Security.Principal.IPrincipal> объекте, возвращаемом свойством <xref:System.Net.HttpListenerContext.User%2A>.  
  
 При закрытии объекта <xref:System.Net.HttpListenerContext> отправляется ответ клиенту и освобождаются все ресурсы, используемые <xref:System.Net.HttpListenerContext>. Прерывание <xref:System.Net.HttpListenerContext> объекта отклоняет ответ клиенту, если он еще не отправлен, и освобождает все ресурсы, используемые <xref:System.Net.HttpListenerContext>. После закрытия или прерывания <xref:System.Net.HttpListenerContext> объекта нельзя ссылаться на его методы или свойства. В этом случае вы получите исключение <xref:System.ObjectDisposedException>.  
  
   
  
## Examples  
 В следующем примере кода отображаются сведения о пользователе для запроса клиента.  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
 [!code-vb[Net_Listener_Basic#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#8)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
    <altmember cref="T:System.Net.HttpListenerResponse" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AcceptWebSocketAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Принять подключение WebSocket как асинхронную операцию.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync subProtocol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Поддерживаемый подпротокол WebSocket.</param>
        <summary>Принять подключение WebSocket как асинхронную операцию.</summary>
        <returns>Объект задачи, представляющий асинхронную операцию. Свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> объекта задачи возвращает объект <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта операция не будет блокироваться. Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после принятия подключения WebSocket.  
  
 Размер буфера приема составляет 16 385 байт. Для интервала проверки соединения WebSocket задано значение по умолчанию 30 000 (30 секунд).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="subProtocol" /> является пустой строкой. 
-или- 
 <paramref name="subProtocol" /> содержит недопустимые знаки.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Произошла ошибка при отправке ответа для завершения установки соединения WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, keepAliveInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Поддерживаемый подпротокол WebSocket.</param>
        <param name="keepAliveInterval">Интервал проверки активности протокола WebSocket в миллисекундах.</param>
        <summary>Принять подключение WebSocket, задав поддерживаемый подпротокол WebSocket и интервал проверки активности WebSocket как асинхронную операцию.</summary>
        <returns>Объект задачи, представляющий асинхронную операцию. Свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> объекта задачи возвращает объект <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта операция не будет блокироваться. Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после принятия подключения WebSocket.  
  
 Размер буфера приема составляет 16 385 байт.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="subProtocol" /> является пустой строкой. 
-или- 
 <paramref name="subProtocol" /> содержит недопустимые знаки.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keepAliveInterval" /> слишком мал.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Произошла ошибка при отправке ответа для завершения установки соединения WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * int * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, receiveBufferSize, keepAliveInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Поддерживаемый подпротокол WebSocket.</param>
        <param name="receiveBufferSize">Размер буфера приема в байтах.</param>
        <param name="keepAliveInterval">Интервал проверки активности протокола WebSocket в миллисекундах.</param>
        <summary>Принять подключение WebSocket, задав поддерживаемый подпротокол WebSocket, размер буфера получения и интервал проверки активности WebSocket как асинхронную операцию.</summary>
        <returns>Объект задачи, представляющий асинхронную операцию. Свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> объекта задачи возвращает объект <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта операция не будет блокироваться. Возвращенный объект <xref:System.Threading.Tasks.Task%601> > будет завершен после принятия подключения WebSocket.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="subProtocol" /> является пустой строкой. 
-или- 
 <paramref name="subProtocol" /> содержит недопустимые знаки.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keepAliveInterval" /> слишком мал.  
  
-или- 
 <paramref name="receiveBufferSize" /> меньше 16 байт. 
-или- 
 <paramref name="receiveBufferSize" /> больше 64К байт.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Произошла ошибка при отправке ответа для завершения установки соединения WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;byte&gt; internalBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval, valuetype System.ArraySegment`1&lt;unsigned int8&gt; internalBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan, internalBuffer As ArraySegment(Of Byte)) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;System::Byte&gt; internalBuffer);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * int * TimeSpan * ArraySegment&lt;byte&gt; -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, receiveBufferSize, keepAliveInterval, internalBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="internalBuffer" Type="System.ArraySegment&lt;System.Byte&gt;" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="subProtocol">Поддерживаемый подпротокол WebSocket.</param>
        <param name="receiveBufferSize">Размер буфера приема в байтах.</param>
        <param name="keepAliveInterval">Интервал проверки активности протокола WebSocket в миллисекундах.</param>
        <param name="internalBuffer">Внутренний буфер, используемый для этой операции.</param>
        <summary>Принять подключение WebSocket, задав поддерживаемый подпротокол WebSocket, размер буфера получения и интервал проверки активности WebSocket и внутренний буфер как асинхронную операцию.</summary>
        <returns>Объект задачи, представляющий асинхронную операцию. Свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> объекта задачи возвращает объект <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта операция не будет блокироваться. Возвращенный объект <xref:System.Threading.Tasks.Task%601> будет завершен после принятия подключения WebSocket.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="subProtocol" /> является пустой строкой. 
-или- 
 <paramref name="subProtocol" /> содержит недопустимые знаки.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keepAliveInterval" /> слишком мал.  
  
-или- 
 <paramref name="receiveBufferSize" /> меньше 16 байт. 
-или- 
 <paramref name="receiveBufferSize" /> больше 64К байт.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">Произошла ошибка при отправке ответа для завершения установки соединения WebSocket.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerRequest Request" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Request" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Request As HttpListenerRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerRequest ^ Request { System::Net::HttpListenerRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.Net.HttpListenerRequest" Usage="System.Net.HttpListenerContext.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Net.HttpListenerRequest" />, который представляет клиентский запрос ресурса.</summary>
        <value>Объект <see cref="T:System.Net.HttpListenerRequest" />, представляющий клиентский запрос.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если закрыть этот <xref:System.Net.HttpListenerContext>, будет отправлен ответ клиенту, закрыть <xref:System.Net.HttpListenerResponse>, содержащий ответ, и закрыть объект <xref:System.Net.HttpListenerRequest>, возвращенный этим свойством.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого метода. Переменная `listener` содержит объект <xref:System.Net.HttpListener>.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
 [!code-vb[Net_Listener_Basic#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Response">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerResponse Response { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerResponse Response" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Response" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Response As HttpListenerResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerResponse ^ Response { System::Net::HttpListenerResponse ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Response : System.Net.HttpListenerResponse" Usage="System.Net.HttpListenerContext.Response" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Net.HttpListenerResponse" />, который будет отправлен клиенту в ответ на клиентский запрос.</summary>
        <value>Объект <see cref="T:System.Net.HttpListenerResponse" />, используемый для отправки ответа клиенту.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение настраивает ответ, задавая свойства в объекте <xref:System.Net.HttpListenerResponse>, возвращаемом этим свойством. После настройки ответа его необходимо отправить клиенту, закрыв ответ или закрыв объект <xref:System.Net.HttpListenerContext>.  
  
   
  
## Examples  
 В следующем примере кода показано получение ответа на запрос клиента и добавление текста ответа.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
 [!code-vb[Net_Listener_Basic#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Примечание. Этот элемент выводит данные трассировки при включении трассировки сети в приложении. Дополнительные сведения см. [в разделе Сетевая трассировка в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para></block>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.User : System.Security.Principal.IPrincipal" Usage="System.Net.HttpListenerContext.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект, используемый для получения идентификации, сведений проверки подлинности и ролей безопасности для клиента, запрос которого представлен этим объектом <see cref="T:System.Net.HttpListenerContext" />.</summary>
        <value>Объект <see cref="T:System.Security.Principal.IPrincipal" />, который описывает клиента, или значение <see langword="null" />, если объект <see cref="T:System.Net.HttpListener" />, предоставивший этот объект <see cref="T:System.Net.HttpListenerContext" />, не требует проверки подлинности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener> указывает, что требуется проверка подлинности с помощью свойства <xref:System.Net.HttpListener.AuthenticationSchemes%2A> или делегата <xref:System.Net.AuthenticationSchemeSelector> с помощью свойства <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>.  
  
 Чтобы определить имя входа клиента и сведения для проверки подлинности, проверьте свойство <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType> в объекте, возвращаемом этим свойством.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется доступ к сведениям об удостоверениях и проверке подлинности клиента, а также его возврат клиенту в ответе.  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
 [!code-vb[Net_Listener_Basic#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
