<Type Name="IPAddress" FullName="System.Net.IPAddress">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2407f7a79ca3f24969b817981839f0bf3a746a8f" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75026473" /></Metadata><TypeSignature Language="C#" Value="public class IPAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit IPAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.IPAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class IPAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class IPAddress" />
  <TypeSignature Language="F#" Value="type IPAddress = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6fae8-101">Предоставляет IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-101">Provides an Internet Protocol (IP) address.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-102">Класс <xref:System.Net.IPAddress> содержит адрес компьютера в IP-сети.</span><span class="sxs-lookup"><span data-stu-id="6fae8-102">The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-103">В следующем примере кода показано, как запросить сервер для получения семейств и IP-адресов, которые он поддерживает.</span><span class="sxs-lookup"><span data-stu-id="6fae8-103">The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#1)]
 [!code-csharp[System.Net.IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#1)]
 [!code-vb[System.Net.IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6fae8-104">Инициализирует новый экземпляр класса <see cref="T:System.Net.IPAddress" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-104">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberSignature Language="F#" Value="new System.Net.IPAddress : byte[] -&gt; System.Net.IPAddress" Usage="new System.Net.IPAddress address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="6fae8-105">Значение байтового массива IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-105">The byte array value of the IP address.</span></span></param>
        <summary><span data-ttu-id="6fae8-106">Инициализирует новый экземпляр класса <see cref="T:System.Net.IPAddress" /> с указанным адресом, заданным в виде массива <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-106">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-107"><xref:System.Net.IPAddress> создается со свойством <xref:System.Net.IPAddress.Address%2A>, для которого задано значение `address`.</span><span class="sxs-lookup"><span data-stu-id="6fae8-107">The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`.</span></span>  
  
 <span data-ttu-id="6fae8-108">Если длина `address` равна 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> конструирует IPv4-адрес; в противном случае создается IPv6-адрес с областью 0.</span><span class="sxs-lookup"><span data-stu-id="6fae8-108">If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</span></span>  
  
 <span data-ttu-id="6fae8-109">Предполагается, что массив <xref:System.Byte> находится в сетевой последовательности байтов с наиболее значимым байтом, первым в позиции индекса 0.</span><span class="sxs-lookup"><span data-stu-id="6fae8-109">The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fae8-110">Свойство <paramref name="address" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-110"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6fae8-111"><paramref name="address" /> содержит недопустимый IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-111"><paramref name="address" /> contains a bad IP address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (long newAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 newAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (newAddress As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(long newAddress);" />
      <MemberSignature Language="F#" Value="new System.Net.IPAddress : int64 -&gt; System.Net.IPAddress" Usage="new System.Net.IPAddress newAddress" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="newAddress" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newAddress"><span data-ttu-id="6fae8-112">Длинное целое значение IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-112">The long value of the IP address.</span></span> <span data-ttu-id="6fae8-113">Например, значение 0x2414188f в формате обратного порядка байтов будет являться IP-адресом 143.24.20.36.</span><span class="sxs-lookup"><span data-stu-id="6fae8-113">For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</span></span></param>
        <summary><span data-ttu-id="6fae8-114">Инициализирует новый экземпляр класса <see cref="T:System.Net.IPAddress" /> с указанным адресом, заданным в виде массива <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-114">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as an <see cref="T:System.Int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-115">Экземпляр <xref:System.Net.IPAddress> создается со свойством <xref:System.Net.IPAddress.Address%2A>, для которого задано значение `newAddress`.</span><span class="sxs-lookup"><span data-stu-id="6fae8-115">The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`.</span></span>  
  
 <span data-ttu-id="6fae8-116">Предполагается, что <xref:System.Int64> значение в сетевом байтном порядке.</span><span class="sxs-lookup"><span data-stu-id="6fae8-116">The <xref:System.Int64> value is assumed to be in network byte order.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6fae8-117"><paramref name="newAddress" /> &lt; 0 или</span><span class="sxs-lookup"><span data-stu-id="6fae8-117"><paramref name="newAddress" /> &lt; 0 or</span></span> 
 <span data-ttu-id="6fae8-118"><paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="6fae8-118"><paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (ReadOnlySpan&lt;byte&gt; address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(ReadOnlySpan&lt;System::Byte&gt; address);" />
      <MemberSignature Language="F#" Value="new System.Net.IPAddress : ReadOnlySpan&lt;byte&gt; -&gt; System.Net.IPAddress" Usage="new System.Net.IPAddress address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="6fae8-119">Байтовое представление IP-адреса в сетевом порядке байтов с наиболее значимым байтом, идущим первым в позиции индекса 0.</span><span class="sxs-lookup"><span data-stu-id="6fae8-119">The byte representation of the IP address, in network byte order, with the most significant byte first in index position 0.</span></span></param>
        <summary><span data-ttu-id="6fae8-120">Инициализирует новый экземпляр класса <see cref="T:System.Net.IPAddress" /> с адресом, заданным в виде диапазона байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-120">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a byte span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-121"><xref:System.Net.IPAddress> создается со свойством <xref:System.Net.IPAddress.Address>, для которого задано значение `address`.</span><span class="sxs-lookup"><span data-stu-id="6fae8-121">The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address> property set to `address`.</span></span>  
  
 <span data-ttu-id="6fae8-122">Если длина `address` равна 4, этот метод конструирует IPv4-адрес. в противном случае создается IPv6-адрес с областью 0.</span><span class="sxs-lookup"><span data-stu-id="6fae8-122">If the length of `address` is 4, this method constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6fae8-123"><paramref name="address" /> содержит недопустимый IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-123"><paramref name="address" /> contains a bad IP address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (byte[] address, long scopeid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address, int64 scopeid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte(), scopeid As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(cli::array &lt;System::Byte&gt; ^ address, long scopeid);" />
      <MemberSignature Language="F#" Value="new System.Net.IPAddress : byte[] * int64 -&gt; System.Net.IPAddress" Usage="new System.Net.IPAddress (address, scopeid)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
        <Parameter Name="scopeid" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="6fae8-124">Значение байтового массива IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-124">The byte array value of the IP address.</span></span></param>
        <param name="scopeid"><span data-ttu-id="6fae8-125">Длинное целое значение идентификатора области.</span><span class="sxs-lookup"><span data-stu-id="6fae8-125">The long value of the scope identifier.</span></span></param>
        <summary><span data-ttu-id="6fae8-126">Инициализирует новый экземпляр класса <see cref="T:System.Net.IPAddress" /> с адресом, указанным в виде массива <see cref="T:System.Byte" />, и указанным идентификатором области.</span><span class="sxs-lookup"><span data-stu-id="6fae8-126">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array and the specified scope identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-127">Этот конструктор создает экземпляр IPv6-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-127">This constructor instantiates an IPv6 address.</span></span> <span data-ttu-id="6fae8-128">`scopeid` определяет сетевой интерфейс в случае адреса локальной связи.</span><span class="sxs-lookup"><span data-stu-id="6fae8-128">The `scopeid` identifies a network interface in the case of a link-local address.</span></span> <span data-ttu-id="6fae8-129">Область действия допустима только для локальных адресов канала и локального сайта.</span><span class="sxs-lookup"><span data-stu-id="6fae8-129">The scope is valid only for link-local and site-local addresses.</span></span>  
  
 <span data-ttu-id="6fae8-130">Предполагается, что массив <xref:System.Byte> находится в сетевой последовательности байтов с наиболее значимым байтом, первым в позиции индекса 0.</span><span class="sxs-lookup"><span data-stu-id="6fae8-130">The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fae8-131">Свойство <paramref name="address" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-131"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6fae8-132"><paramref name="address" /> содержит недопустимый IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-132"><paramref name="address" /> contains a bad IP address.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6fae8-133"><paramref name="scopeid" /> &lt; 0 или</span><span class="sxs-lookup"><span data-stu-id="6fae8-133"><paramref name="scopeid" /> &lt; 0 or</span></span> 
 <span data-ttu-id="6fae8-134"><paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="6fae8-134"><paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (ReadOnlySpan&lt;byte&gt; address, long scopeid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; address, int64 scopeid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As ReadOnlySpan(Of Byte), scopeid As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(ReadOnlySpan&lt;System::Byte&gt; address, long scopeid);" />
      <MemberSignature Language="F#" Value="new System.Net.IPAddress : ReadOnlySpan&lt;byte&gt; * int64 -&gt; System.Net.IPAddress" Usage="new System.Net.IPAddress (address, scopeid)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="scopeid" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="6fae8-135">Значение IP-адреса в виде диапазона байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-135">The byte span value of the IP address.</span></span></param>
        <param name="scopeid"><span data-ttu-id="6fae8-136">Длинное целое значение идентификатора области.</span><span class="sxs-lookup"><span data-stu-id="6fae8-136">The long value of the scope identifier.</span></span></param>
        <summary><span data-ttu-id="6fae8-137">Инициализирует новый экземпляр класса <see cref="T:System.Net.IPAddress" /> с адресом, указанным в виде диапазона байтов, и заданным идентификатором области.</span><span class="sxs-lookup"><span data-stu-id="6fae8-137">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a byte span and the specified scope identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-138">Этот конструктор создает экземпляр IPv6-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-138">This constructor instantiates an IPv6 address.</span></span> <span data-ttu-id="6fae8-139">`scopeid` определяет сетевой интерфейс в случае адреса локальной связи.</span><span class="sxs-lookup"><span data-stu-id="6fae8-139">The `scopeid` identifies a network interface in the case of a link-local address.</span></span> <span data-ttu-id="6fae8-140">Область действия допустима только для локальных адресов канала и локального сайта.</span><span class="sxs-lookup"><span data-stu-id="6fae8-140">The scope is valid only for link-local and site-local addresses.</span></span>  
  
 <span data-ttu-id="6fae8-141">Предполагается, что диапазон байтов находится в сетевой последовательности байтов с наиболее значимым байтом, первым в позиции индекса 0.</span><span class="sxs-lookup"><span data-stu-id="6fae8-141">The byte span is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6fae8-142"><paramref name="address" /> содержит недопустимый IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-142"><paramref name="address" /> contains a bad IP address.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6fae8-143"><paramref name="scopeid" /> &lt; 0</span><span class="sxs-lookup"><span data-stu-id="6fae8-143"><paramref name="scopeid" /> &lt; 0</span></span>

<span data-ttu-id="6fae8-144">- или -</span><span class="sxs-lookup"><span data-stu-id="6fae8-144">-or-</span></span>

<span data-ttu-id="6fae8-145"><paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="6fae8-145"><paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public long Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.Address" />
      <MemberSignature Language="VB.NET" Value="Public Property Address As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Address { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Address : int64 with get, set" Usage="System.Net.IPAddress.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("IPAddress.Address is address family dependant, use Equals method for comparison.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-146">IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-146">An Internet Protocol (IP) address.</span></span></summary>
        <value><span data-ttu-id="6fae8-147">Длинное целое значение IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-147">The long value of the IP address.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-148">Это свойство устарело.</span><span class="sxs-lookup"><span data-stu-id="6fae8-148">This property is obsolete.</span></span> <span data-ttu-id="6fae8-149">Используйте ключевое слово <xref:System.Net.IPAddress.GetAddressBytes%2A>.</span><span class="sxs-lookup"><span data-stu-id="6fae8-149">Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.</span></span>  
  
 <span data-ttu-id="6fae8-150">Чтобы преобразовать <xref:System.Net.IPAddress.Address%2A> в точечно-точечную нотацию, используйте метод <xref:System.Net.IPAddress.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="6fae8-150">To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="6fae8-151">Семья адресов является <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-151">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberSignature Language="F#" Value="member this.AddressFamily : System.Net.Sockets.AddressFamily" Usage="System.Net.IPAddress.AddressFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-152">Возвращает семейство адресов для IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-152">Gets the address family of the IP address.</span></span></summary>
        <value><span data-ttu-id="6fae8-153">Возвращает <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> для протокола IPv4 или <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> для протокола IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-153">Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> for IPv6.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6fae8-154">См. пример в разделе <xref:System.Net.IPAddress> Class.</span><span class="sxs-lookup"><span data-stu-id="6fae8-154">Refer to the example in the <xref:System.Net.IPAddress> class topic.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
 [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
 [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Any" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Any As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Any : System.Net.IPAddress" Usage="System.Net.IPAddress.Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-155">Предоставляет IP-адрес, указывающий, что сервер должен контролировать действия клиентов на всех сетевых интерфейсах.</span><span class="sxs-lookup"><span data-stu-id="6fae8-155">Provides an IP address that indicates that the server must listen for client activity on all network interfaces.</span></span> <span data-ttu-id="6fae8-156">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6fae8-156">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-157">Метод <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> использует поле <xref:System.Net.IPAddress.Any>, чтобы указать, что экземпляр <xref:System.Net.Sockets.Socket> должен прослушивать активность клиентов во всех сетевых интерфейсах.</span><span class="sxs-lookup"><span data-stu-id="6fae8-157">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.</span></span>  
  
 <span data-ttu-id="6fae8-158"><xref:System.Net.IPAddress.Any> поле эквивалентно 0.0.0.0 в точечно-десятичной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-158">The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Broadcast">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Broadcast;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Broadcast" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Broadcast" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Broadcast As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Broadcast;" />
      <MemberSignature Language="F#" Value=" staticval mutable Broadcast : System.Net.IPAddress" Usage="System.Net.IPAddress.Broadcast" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-159">Предоставляет широковещательный IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-159">Provides the IP broadcast address.</span></span> <span data-ttu-id="6fae8-160">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6fae8-160">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-161"><xref:System.Net.IPAddress.Broadcast> поле эквивалентно 255.255.255.255 в точечно-десятичной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-161">The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-162">Следующий пример выводит на консоль <xref:System.Net.IPAddress.Broadcast> адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-162">The following example prints the <xref:System.Net.IPAddress.Broadcast> address to the console.</span></span>  
  
 [!code-cpp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#2)]
 [!code-csharp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#2)]
 [!code-vb[IPAddress_Broadcast_Loopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="iPAddress.Equals comparand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand"><span data-ttu-id="6fae8-163">Экземпляр класса <see cref="T:System.Net.IPAddress" />, используемый для сравнения с текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="6fae8-163">An <see cref="T:System.Net.IPAddress" /> instance to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="6fae8-164">Сравнивает два IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-164">Compares two IP addresses.</span></span></summary>
        <returns><span data-ttu-id="6fae8-165">Значение <see langword="true" />, если два адреса совпадают; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-165"><see langword="true" /> if the two addresses are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-166">Метод <xref:System.Net.IPAddress.Equals%2A> Сравнивает текущий экземпляр <xref:System.Net.IPAddress> с параметром `comparand` и возвращает значение `true`, если два экземпляра содержат один и тот же IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-166">The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberSignature Language="F#" Value="member this.GetAddressBytes : unit -&gt; byte[]" Usage="iPAddress.GetAddressBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6fae8-167">Предоставляет копию <see cref="T:System.Net.IPAddress" /> в виде массива байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-167">Provides a copy of the <see cref="T:System.Net.IPAddress" /> as an array of bytes.</span></span></summary>
        <returns><span data-ttu-id="6fae8-168">Массив <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-168">A <see cref="T:System.Byte" /> array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6fae8-169">В следующем примере кода показано, как получить IP-адрес сервера в формате Byte.</span><span class="sxs-lookup"><span data-stu-id="6fae8-169">The following code example shows how to get a server IP address in byte format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#2)]
 [!code-csharp[System.Net.IPAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#2)]
 [!code-vb[System.Net.IPAddress#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="iPAddress.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6fae8-170">Возвращает значение хэш-функции для IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-170">Returns a hash value for an IP address.</span></span></summary>
        <returns><span data-ttu-id="6fae8-171">Целочисленное хэш-значение.</span><span class="sxs-lookup"><span data-stu-id="6fae8-171">An integer hash value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-172">Метод <xref:System.Net.IPAddress.GetHashCode%2A> Возвращает хэш-код IP.</span><span class="sxs-lookup"><span data-stu-id="6fae8-172">The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address.</span></span> <span data-ttu-id="6fae8-173">Это значение можно использовать в качестве ключа в хэш-таблицах.</span><span class="sxs-lookup"><span data-stu-id="6fae8-173">This value can be used as a key in hash tables.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HostToNetworkOrder">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6fae8-174">Преобразует значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-174">Converts a value from host byte order to network byte order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static short HostToNetworkOrder (short host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 HostToNetworkOrder(int16 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short HostToNetworkOrder(short host);" />
      <MemberSignature Language="F#" Value="static member HostToNetworkOrder : int16 -&gt; int16" Usage="System.Net.IPAddress.HostToNetworkOrder host" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="6fae8-175">Преобразуемое число, представленное в байтовом формате узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-175">The number to convert, expressed in host byte order.</span></span></param>
        <summary><span data-ttu-id="6fae8-176">Преобразует короткое значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-176">Converts a short value from host byte order to network byte order.</span></span></summary>
        <returns><span data-ttu-id="6fae8-177">Короткое значение, представленное в сетевом байтовом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-177">A short value, expressed in network byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-178">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целочисленных значениях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-178">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="6fae8-179">Некоторые компьютеры сначала помещают наиболее значимый байт (т. е. порядок с обратным порядком байтов), а другие — сначала помещают минимальный значащий байт (порядок с прямым порядком байтов).</span><span class="sxs-lookup"><span data-stu-id="6fae8-179">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="6fae8-180">Для работы с компьютерами, использующими разный порядок байтов, все целочисленные значения, передаваемые по сети, отправляются в порядке байтов в сети, который сначала имеет наиболее значимый байт.</span><span class="sxs-lookup"><span data-stu-id="6fae8-180">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="6fae8-181">Метод <xref:System.Net.IPAddress.HostToNetworkOrder%2A> преобразует многобайтовые целочисленные значения, хранящиеся в главной системе, из порядка байтов, используемого узлом, в байтовый порядок, используемый сетью.</span><span class="sxs-lookup"><span data-stu-id="6fae8-181">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static int HostToNetworkOrder (int host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 HostToNetworkOrder(int32 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int HostToNetworkOrder(int host);" />
      <MemberSignature Language="F#" Value="static member HostToNetworkOrder : int -&gt; int" Usage="System.Net.IPAddress.HostToNetworkOrder host" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="6fae8-182">Преобразуемое число, представленное в байтовом формате узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-182">The number to convert, expressed in host byte order.</span></span></param>
        <summary><span data-ttu-id="6fae8-183">Преобразует целое значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-183">Converts an integer value from host byte order to network byte order.</span></span></summary>
        <returns><span data-ttu-id="6fae8-184">Целое значение, представленное в сетевом байтовом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-184">An integer value, expressed in network byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-185">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целочисленных значениях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-185">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="6fae8-186">Некоторые компьютеры сначала помещают наиболее значимый байт (т. е. порядок с обратным порядком байтов), а другие — сначала помещают минимальный значащий байт (порядок с прямым порядком байтов).</span><span class="sxs-lookup"><span data-stu-id="6fae8-186">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="6fae8-187">Для работы с компьютерами, использующими разный порядок байтов, все целочисленные значения, передаваемые по сети, отправляются в порядке байтов в сети, который сначала имеет наиболее значимый байт.</span><span class="sxs-lookup"><span data-stu-id="6fae8-187">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="6fae8-188">Метод <xref:System.Net.IPAddress.HostToNetworkOrder%2A> преобразует многобайтовые целочисленные значения, хранящиеся в главной системе, из порядка байтов, используемого узлом, в байтовый порядок, используемый сетью.</span><span class="sxs-lookup"><span data-stu-id="6fae8-188">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static long HostToNetworkOrder (long host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 HostToNetworkOrder(int64 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long HostToNetworkOrder(long host);" />
      <MemberSignature Language="F#" Value="static member HostToNetworkOrder : int64 -&gt; int64" Usage="System.Net.IPAddress.HostToNetworkOrder host" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="6fae8-189">Преобразуемое число, представленное в байтовом формате узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-189">The number to convert, expressed in host byte order.</span></span></param>
        <summary><span data-ttu-id="6fae8-190">Преобразует длинное целое значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-190">Converts a long value from host byte order to network byte order.</span></span></summary>
        <returns><span data-ttu-id="6fae8-191">Длинное целое значение, представленное в сетевом байтовом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-191">A long value, expressed in network byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-192">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целочисленных значениях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-192">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="6fae8-193">Некоторые компьютеры сначала помещают наиболее значимый байт (т. е. порядок с обратным порядком байтов), а другие — сначала помещают минимальный значащий байт (порядок с прямым порядком байтов).</span><span class="sxs-lookup"><span data-stu-id="6fae8-193">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="6fae8-194">Для работы с компьютерами, использующими разный порядок байтов, все целочисленные значения, передаваемые по сети, отправляются в порядке байтов в сети, который сначала имеет наиболее значимый байт.</span><span class="sxs-lookup"><span data-stu-id="6fae8-194">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="6fae8-195">Метод <xref:System.Net.IPAddress.HostToNetworkOrder%2A> преобразует многобайтовые целочисленные значения, хранящиеся в главной системе, из порядка байтов, используемого узлом, в байтовый порядок, используемый сетью.</span><span class="sxs-lookup"><span data-stu-id="6fae8-195">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="IPv6Any">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6Any" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6Any As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable IPv6Any : System.Net.IPAddress" Usage="System.Net.IPAddress.IPv6Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-196">Метод <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> использует поле <see cref="F:System.Net.IPAddress.IPv6Any" /> для указания того, что экземпляр класса <see cref="T:System.Net.Sockets.Socket" /> должен контролировать действия клиентов на всех сетевых интерфейсах.</span><span class="sxs-lookup"><span data-stu-id="6fae8-196">The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> method uses the <see cref="F:System.Net.IPAddress.IPv6Any" /> field to indicate that a <see cref="T:System.Net.Sockets.Socket" /> must listen for client activity on all network interfaces.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-197"><xref:System.Net.IPAddress.IPv6Any> поле эквивалентно 0:0:0:0:0:0:0:0 в шестнадцатеричной нотации с запятой или to:: в Compact Notation.</span><span class="sxs-lookup"><span data-stu-id="6fae8-197">The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-198">В следующем примере кода отображается значение любого адреса текущего узла в стандартном сжатом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-198">The following code example displays the value of the current host's Any address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#2)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#2)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPv6Loopback">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6Loopback;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6Loopback" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6Loopback" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6Loopback As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6Loopback;" />
      <MemberSignature Language="F#" Value=" staticval mutable IPv6Loopback : System.Net.IPAddress" Usage="System.Net.IPAddress.IPv6Loopback" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-199">Предоставляет IP-адрес замыкания на себя.</span><span class="sxs-lookup"><span data-stu-id="6fae8-199">Provides the IP loopback address.</span></span> <span data-ttu-id="6fae8-200">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6fae8-200">This property is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-201"><xref:System.Net.IPAddress.IPv6Loopback> поле эквивалентно значению 0:0:0:0:0:0:0:1 в шестнадцатеричной нотации с запятой или to:: 1 в компактной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-201">The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-202">В следующем примере кода отображается значение адреса замыкания текущего узла в стандартном сжатом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-202">The following code example displays the value of the current host's loopback address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#1)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#1)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPv6None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6None" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6None As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6None;" />
      <MemberSignature Language="F#" Value=" staticval mutable IPv6None : System.Net.IPAddress" Usage="System.Net.IPAddress.IPv6None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-203">Предоставляет IP-адрес, указывающий, что сетевой интерфейс не должен использоваться.</span><span class="sxs-lookup"><span data-stu-id="6fae8-203">Provides an IP address that indicates that no network interface should be used.</span></span> <span data-ttu-id="6fae8-204">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6fae8-204">This property is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-205">Метод <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> использует поле <xref:System.Net.IPAddress.IPv6None>, чтобы указать, что <xref:System.Net.Sockets.Socket> не должен ожидать активности клиента.</span><span class="sxs-lookup"><span data-stu-id="6fae8-205">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity.</span></span> <span data-ttu-id="6fae8-206"><xref:System.Net.IPAddress.IPv6None> поле эквивалентно 0:0:0:0:0:0:0:0 в шестнадцатеричной нотации с запятой или:: 0 в компактной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-206">The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-207">В следующем примере кода отображается значение адреса текущего узла None в стандартном сжатом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-207">The following code example displays the value of the current host's None address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#3)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#3)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv4MappedToIPv6">
      <MemberSignature Language="C#" Value="public bool IsIPv4MappedToIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv4MappedToIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv4MappedToIPv6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv4MappedToIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv4MappedToIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIPv4MappedToIPv6 : bool" Usage="System.Net.IPAddress.IsIPv4MappedToIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-208">Возвращает сведения о том, является ли IP-адрес адресом IPv6, сопоставленным с IPv4.</span><span class="sxs-lookup"><span data-stu-id="6fae8-208">Gets whether the IP address is an IPv4-mapped IPv6 address.</span></span></summary>
        <value><span data-ttu-id="6fae8-209">Возвращает <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-209">Returns <see cref="T:System.Boolean" />.</span></span>  
  
 <span data-ttu-id="6fae8-210">Значение <see langword="true" />, если IP-адрес является сопоставленным в IPv4 адресом IPv6; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-210"><see langword="true" /> if the IP address is an IPv4-mapped IPv6 address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-211">Для сокетов с двумя стеками всегда требуется IPv6-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-211">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="6fae8-212">Возможность взаимодействия с IPv4-адресом требует использования формата IPv4, сопоставленного с IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-212">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="6fae8-213">Все адреса IPv4 должны быть представлены в формате IPv6-адресов, сопоставленном с IPv4, что позволяет приложению только для IPv6 взаимодействовать с узлом IPv4.</span><span class="sxs-lookup"><span data-stu-id="6fae8-213">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="6fae8-214">Формат IPv6-адресов, сопоставленный с IPv4, позволяет представить адрес IPv4 узла IPv4 в качестве адреса IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-214">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="6fae8-215">Адрес IPv4 кодируется в младшие биты 32 IPv6-адреса, а старшие биты 96 содержат фиксированный префикс 0:0: 0:0: 0: FFFF.</span><span class="sxs-lookup"><span data-stu-id="6fae8-215">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="6fae8-216">Формат IPv6-адреса, сопоставленный с IPv4, указан в RFC 4291.</span><span class="sxs-lookup"><span data-stu-id="6fae8-216">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="6fae8-217">Дополнительные сведения см. в разделе [www.IETF.org/RFC/rfc4291.txt](https://go.microsoft.com/fwlink/?LinkID=92231).</span><span class="sxs-lookup"><span data-stu-id="6fae8-217">For more information, see [www.ietf.org/rfc/rfc4291.txt](https://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6LinkLocal">
      <MemberSignature Language="C#" Value="public bool IsIPv6LinkLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6LinkLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6LinkLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6LinkLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6LinkLocal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIPv6LinkLocal : bool" Usage="System.Net.IPAddress.IsIPv6LinkLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-218">Возвращает сведения о том, является ли адрес локальным IPv6-адресом для канала связи.</span><span class="sxs-lookup"><span data-stu-id="6fae8-218">Gets whether the address is an IPv6 link local address.</span></span></summary>
        <value><span data-ttu-id="6fae8-219">Значение <see langword="true" />, если IP-адрес является локальным IPv6 –адресом для канала связи; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-219"><see langword="true" /> if the IP address is an IPv6 link local address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6Multicast">
      <MemberSignature Language="C#" Value="public bool IsIPv6Multicast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6Multicast" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6Multicast" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6Multicast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6Multicast { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIPv6Multicast : bool" Usage="System.Net.IPAddress.IsIPv6Multicast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-220">Возвращает сведения о том, является ли IPv6-адрес многоадресным глобальным адресом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-220">Gets whether the address is an IPv6 multicast global address.</span></span></summary>
        <value><span data-ttu-id="6fae8-221">Значение <see langword="true" />, если IP-адрес является многоадресным глобальным IPv6-адресом; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-221"><see langword="true" /> if the IP address is an IPv6 multicast global address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6SiteLocal">
      <MemberSignature Language="C#" Value="public bool IsIPv6SiteLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6SiteLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6SiteLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6SiteLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6SiteLocal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIPv6SiteLocal : bool" Usage="System.Net.IPAddress.IsIPv6SiteLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-222">Возвращает сведения о том, является ли адрес локальным IPv6-адресом для веб-узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-222">Gets whether the address is an IPv6 site local address.</span></span></summary>
        <value><span data-ttu-id="6fae8-223">Значение <see langword="true" />, если IP-адрес является локальным Ipv6-адресом веб-узла; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-223"><see langword="true" /> if the IP address is an IPv6 site local address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6Teredo">
      <MemberSignature Language="C#" Value="public bool IsIPv6Teredo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6Teredo" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6Teredo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6Teredo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6Teredo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIPv6Teredo : bool" Usage="System.Net.IPAddress.IsIPv6Teredo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-224">Получает сведения о том, является ли адрес IPv6-адресом Teredo.</span><span class="sxs-lookup"><span data-stu-id="6fae8-224">Gets whether the address is an IPv6 Teredo address.</span></span></summary>
        <value><span data-ttu-id="6fae8-225">Значение <see langword="true" />, если IP-адрес является IPv6-адресом Teredo; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-225"><see langword="true" /> if the IP address is an IPv6 Teredo address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-226">Адрес Teredo — это IPv6-адрес с префиксом 2001::/32.</span><span class="sxs-lookup"><span data-stu-id="6fae8-226">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="6fae8-227">Адреса Teredo можно вернуть с помощью обычного разрешения DNS-имен или перечислить как IPv6-адрес, назначенный локальному интерфейсу.</span><span class="sxs-lookup"><span data-stu-id="6fae8-227">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)" />
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsLoopback">
      <MemberSignature Language="C#" Value="public static bool IsLoopback (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLoopback(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLoopback (address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLoopback(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member IsLoopback : System.Net.IPAddress -&gt; bool" Usage="System.Net.IPAddress.IsLoopback address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="6fae8-228">IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-228">An IP address.</span></span></param>
        <summary><span data-ttu-id="6fae8-229">Показывает, является ли IP-адрес адресом замыкания на себя.</span><span class="sxs-lookup"><span data-stu-id="6fae8-229">Indicates whether the specified IP address is the loopback address.</span></span></summary>
        <returns><span data-ttu-id="6fae8-230">Значение <see langword="true" />, если <paramref name="address" /> является адресом замыкания на себя; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-230"><see langword="true" /> if <paramref name="address" /> is the loopback address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-231">Метод <xref:System.Net.IPAddress.IsLoopback%2A> сравнивает `address` с <xref:System.Net.IPAddress.Loopback> и возвращает `true`, если два IP-адреса одинаковы.</span><span class="sxs-lookup"><span data-stu-id="6fae8-231">The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same.</span></span>  
  
 <span data-ttu-id="6fae8-232">В случае с протоколом IPv4 <xref:System.Net.IPAddress.IsLoopback%2A> метод возвращает `true` для любого IP-адреса в форме 127. X. Y. Z (где X, Y и Z находятся в диапазоне 0-255), а не только <xref:System.Net.IPAddress.Loopback> (127.0.0.1).</span><span class="sxs-lookup"><span data-stu-id="6fae8-232">In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-233">В следующем примере кода используется метод <xref:System.Net.IPAddress.IsLoopback%2A>, чтобы определить, является ли указанный адрес адресом замыкания на себя.</span><span class="sxs-lookup"><span data-stu-id="6fae8-233">The following code example uses the <xref:System.Net.IPAddress.IsLoopback%2A> method to determine whether the specified address is a loopback address.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CPP/isloopback.cpp#1)]
 [!code-csharp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CS/isloopback.cs#1)]
 [!code-vb[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/VB/isloopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loopback">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Loopback;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Loopback" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Loopback" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Loopback As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Loopback;" />
      <MemberSignature Language="F#" Value=" staticval mutable Loopback : System.Net.IPAddress" Usage="System.Net.IPAddress.Loopback" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-234">Предоставляет IP-адрес замыкания на себя.</span><span class="sxs-lookup"><span data-stu-id="6fae8-234">Provides the IP loopback address.</span></span> <span data-ttu-id="6fae8-235">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6fae8-235">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-236"><xref:System.Net.IPAddress.Loopback> поле эквивалентно 127.0.0.1 в точечно-десятичной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-236">The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-237">Следующий пример выводит на консоль <xref:System.Net.IPAddress.Loopback> адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-237">The following example prints the <xref:System.Net.IPAddress.Loopback> address to the console.</span></span>  
  
 [!code-cpp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#1)]
 [!code-csharp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#1)]
 [!code-vb[IPAddress_Broadcast_Loopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToIPv4">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress MapToIPv4 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.IPAddress MapToIPv4() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.MapToIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToIPv4 () As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::IPAddress ^ MapToIPv4();" />
      <MemberSignature Language="F#" Value="member this.MapToIPv4 : unit -&gt; System.Net.IPAddress" Usage="iPAddress.MapToIPv4 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6fae8-238">Сопоставляет объект <see cref="T:System.Net.IPAddress" /> с IPv4-адресом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-238">Maps the <see cref="T:System.Net.IPAddress" /> object to an IPv4 address.</span></span></summary>
        <returns><span data-ttu-id="6fae8-239">Возвращает <see cref="T:System.Net.IPAddress" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-239">Returns <see cref="T:System.Net.IPAddress" />.</span></span>  
  
<span data-ttu-id="6fae8-240">IPv4-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-240">An IPv4 address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-241">Для сокетов с двумя стеками всегда требуется IPv6-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-241">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="6fae8-242">Возможность взаимодействия с IPv4-адресом требует использования формата IPv4, сопоставленного с IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-242">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="6fae8-243">Все адреса IPv4 должны быть представлены в формате IPv6-адресов, сопоставленном с IPv4, что позволяет приложению только для IPv6 взаимодействовать с узлом IPv4.</span><span class="sxs-lookup"><span data-stu-id="6fae8-243">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="6fae8-244">Формат IPv6-адресов, сопоставленный с IPv4, позволяет представить адрес IPv4 узла IPv4 в качестве адреса IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-244">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="6fae8-245">Адрес IPv4 кодируется в младшие биты 32 IPv6-адреса, а старшие биты 96 содержат фиксированный префикс 0:0: 0:0: 0: FFFF.</span><span class="sxs-lookup"><span data-stu-id="6fae8-245">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="6fae8-246">Формат IPv6-адреса, сопоставленный с IPv4, указан в RFC 4291.</span><span class="sxs-lookup"><span data-stu-id="6fae8-246">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="6fae8-247">Дополнительные сведения см. в разделе [www.IETF.org/RFC/rfc4291.txt](https://go.microsoft.com/fwlink/?LinkID=92231).</span><span class="sxs-lookup"><span data-stu-id="6fae8-247">For more information, see [www.ietf.org/rfc/rfc4291.txt](https://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 <span data-ttu-id="6fae8-248">Если вы хотите использовать <xref:System.Net.IPAddress.MapToIPv4%2A> для преобразования IPv4-адреса из формата IPv6 в формат IPv4, необходимо сначала убедиться, что у вас есть IPv4-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-248">If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.</span></span> <span data-ttu-id="6fae8-249">Вызовите <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, который будет возвращать `true`, если IP-адрес изначально был записан как IPv6, или `false` в противном случае.</span><span class="sxs-lookup"><span data-stu-id="6fae8-249">Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise.</span></span> <span data-ttu-id="6fae8-250">Если <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> возвращает `true`, используйте <xref:System.Net.IPAddress.MapToIPv4%2A>, чтобы выполнить преобразование.</span><span class="sxs-lookup"><span data-stu-id="6fae8-250">If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToIPv6">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress MapToIPv6 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.IPAddress MapToIPv6() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.MapToIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToIPv6 () As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::IPAddress ^ MapToIPv6();" />
      <MemberSignature Language="F#" Value="member this.MapToIPv6 : unit -&gt; System.Net.IPAddress" Usage="iPAddress.MapToIPv6 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6fae8-251">Сопоставляет объект <see cref="T:System.Net.IPAddress" /> с адресом IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-251">Maps the <see cref="T:System.Net.IPAddress" /> object to an IPv6 address.</span></span></summary>
        <returns><span data-ttu-id="6fae8-252">Возвращает <see cref="T:System.Net.IPAddress" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-252">Returns <see cref="T:System.Net.IPAddress" />.</span></span>  
  
<span data-ttu-id="6fae8-253">Адрес IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-253">An IPv6 address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-254">Для сокетов с двумя стеками всегда требуется IPv6-адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-254">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="6fae8-255">Возможность взаимодействия с IPv4-адресом требует использования формата IPv4, сопоставленного с IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-255">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="6fae8-256">Все адреса IPv4 должны быть представлены в формате IPv6-адресов, сопоставленном с IPv4, что позволяет приложению только для IPv6 взаимодействовать с узлом IPv4.</span><span class="sxs-lookup"><span data-stu-id="6fae8-256">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="6fae8-257">Формат IPv6-адресов, сопоставленный с IPv4, позволяет представить адрес IPv4 узла IPv4 в качестве адреса IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-257">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="6fae8-258">Адрес IPv4 кодируется в младшие биты 32 IPv6-адреса, а старшие биты 96 содержат фиксированный префикс 0:0: 0:0: 0: FFFF.</span><span class="sxs-lookup"><span data-stu-id="6fae8-258">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="6fae8-259">Формат IPv6-адреса, сопоставленный с IPv4, указан в RFC 4291.</span><span class="sxs-lookup"><span data-stu-id="6fae8-259">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="6fae8-260">Дополнительные сведения см. в разделе [www.IETF.org/RFC/rfc4291.txt](https://go.microsoft.com/fwlink/?LinkID=92231).</span><span class="sxs-lookup"><span data-stu-id="6fae8-260">For more information, see [www.ietf.org/rfc/rfc4291.txt](https://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NetworkToHostOrder">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6fae8-261">Преобразует число из сетевого байтового формата в байтовый формат узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-261">Converts a number from network byte order to host byte order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static short NetworkToHostOrder (short network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 NetworkToHostOrder(int16 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short NetworkToHostOrder(short network);" />
      <MemberSignature Language="F#" Value="static member NetworkToHostOrder : int16 -&gt; int16" Usage="System.Net.IPAddress.NetworkToHostOrder network" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="network"><span data-ttu-id="6fae8-262">Преобразуемое число, представленное в сетевом байтовом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-262">The number to convert, expressed in network byte order.</span></span></param>
        <summary><span data-ttu-id="6fae8-263">Преобразует короткое значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-263">Converts a short value from network byte order to host byte order.</span></span></summary>
        <returns><span data-ttu-id="6fae8-264">Короткое значение, представленное в байтовом формате узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-264">A short value, expressed in host byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-265">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целочисленных значениях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-265">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="6fae8-266">Некоторые компьютеры сначала помещают наиболее значимый байт (т. е. порядок с обратным порядком байтов), а другие — сначала помещают минимальный значащий байт (порядок с прямым порядком байтов).</span><span class="sxs-lookup"><span data-stu-id="6fae8-266">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="6fae8-267">Для работы с компьютерами, использующими разный порядок байтов, все целочисленные значения, передаваемые по сети, отправляются в порядке байтов в сети, который сначала имеет наиболее значимый байт.</span><span class="sxs-lookup"><span data-stu-id="6fae8-267">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="6fae8-268">Метод <xref:System.Net.IPAddress.NetworkToHostOrder%2A> преобразует многобайтовые целочисленные значения, хранящиеся в системе размещения, из порядка байтов, используемого сетью, в байтовый порядок, используемый узлом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-268">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-269">В следующем примере используется метод <xref:System.Net.IPAddress.NetworkToHostOrder%2A> для преобразования короткого значения из порядкового байта сети в порядок размещения байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-269">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a short value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#1)]
 [!code-csharp[IPAddress_NetworkToHost#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#1)]
 [!code-vb[IPAddress_NetworkToHost#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static int NetworkToHostOrder (int network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NetworkToHostOrder(int32 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int NetworkToHostOrder(int network);" />
      <MemberSignature Language="F#" Value="static member NetworkToHostOrder : int -&gt; int" Usage="System.Net.IPAddress.NetworkToHostOrder network" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="network"><span data-ttu-id="6fae8-270">Преобразуемое число, представленное в сетевом байтовом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-270">The number to convert, expressed in network byte order.</span></span></param>
        <summary><span data-ttu-id="6fae8-271">Преобразует целое значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-271">Converts an integer value from network byte order to host byte order.</span></span></summary>
        <returns><span data-ttu-id="6fae8-272">Целое значение, представленное в байтовом формате узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-272">An integer value, expressed in host byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-273">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целочисленных значениях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-273">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="6fae8-274">Некоторые компьютеры сначала помещают наиболее значимый байт (т. е. порядок с обратным порядком байтов), а другие — сначала помещают минимальный значащий байт (порядок с прямым порядком байтов).</span><span class="sxs-lookup"><span data-stu-id="6fae8-274">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="6fae8-275">Для работы с компьютерами, использующими разный порядок байтов, все целочисленные значения, передаваемые по сети, отправляются в порядке байтов в сети, который сначала имеет наиболее значимый байт.</span><span class="sxs-lookup"><span data-stu-id="6fae8-275">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="6fae8-276">Метод <xref:System.Net.IPAddress.NetworkToHostOrder%2A> преобразует многобайтовые целочисленные значения, хранящиеся в системе размещения, из порядка байтов, используемого сетью, в байтовый порядок, используемый узлом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-276">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-277">В следующем примере метод <xref:System.Net.IPAddress.NetworkToHostOrder%2A> используется для преобразования целочисленного значения из порядка байтов сети в порядковый номер узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-277">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert an integer value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#2)]
 [!code-csharp[IPAddress_NetworkToHost#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#2)]
 [!code-vb[IPAddress_NetworkToHost#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static long NetworkToHostOrder (long network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 NetworkToHostOrder(int64 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long NetworkToHostOrder(long network);" />
      <MemberSignature Language="F#" Value="static member NetworkToHostOrder : int64 -&gt; int64" Usage="System.Net.IPAddress.NetworkToHostOrder network" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="network"><span data-ttu-id="6fae8-278">Преобразуемое число, представленное в сетевом байтовом формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-278">The number to convert, expressed in network byte order.</span></span></param>
        <summary><span data-ttu-id="6fae8-279">Преобразует длинное целое значение из байтового формата узла в сетевой байтовый формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-279">Converts a long value from network byte order to host byte order.</span></span></summary>
        <returns><span data-ttu-id="6fae8-280">Длинное целое значение, представленное в байтовом формате узла.</span><span class="sxs-lookup"><span data-stu-id="6fae8-280">A long value, expressed in host byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-281">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целочисленных значениях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-281">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="6fae8-282">Некоторые компьютеры сначала помещают наиболее значимый байт (т. е. порядок с обратным порядком байтов), а другие — сначала помещают минимальный значащий байт (порядок с прямым порядком байтов).</span><span class="sxs-lookup"><span data-stu-id="6fae8-282">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="6fae8-283">Для работы с компьютерами, использующими разный порядок байтов, все целочисленные значения, передаваемые по сети, отправляются в порядке байтов в сети, который сначала имеет наиболее значимый байт.</span><span class="sxs-lookup"><span data-stu-id="6fae8-283">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="6fae8-284">Метод <xref:System.Net.IPAddress.NetworkToHostOrder%2A> преобразует многобайтовые целочисленные значения, хранящиеся в системе размещения, из порядка байтов, используемого сетью, в байтовый порядок, используемый узлом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-284">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-285">В следующем примере метод <xref:System.Net.IPAddress.NetworkToHostOrder%2A> используется для преобразования длинного значения из байтового формата сети в порядок размещения байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-285">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a long value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#3](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#3)]
 [!code-csharp[IPAddress_NetworkToHost#3](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#3)]
 [!code-vb[IPAddress_NetworkToHost#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ None;" />
      <MemberSignature Language="F#" Value=" staticval mutable None : System.Net.IPAddress" Usage="System.Net.IPAddress.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-286">Предоставляет IP-адрес, указывающий, что сетевой интерфейс не должен использоваться.</span><span class="sxs-lookup"><span data-stu-id="6fae8-286">Provides an IP address that indicates that no network interface should be used.</span></span> <span data-ttu-id="6fae8-287">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="6fae8-287">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-288">Метод <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> использует поле <xref:System.Net.IPAddress.None>, чтобы указать, что <xref:System.Net.Sockets.Socket> не должен ожидать активности клиента.</span><span class="sxs-lookup"><span data-stu-id="6fae8-288">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity.</span></span> <span data-ttu-id="6fae8-289"><xref:System.Net.IPAddress.None> поле эквивалентно 255.255.255.255 в точечно-десятичной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-289">The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-290">В следующем примере используется свойство <xref:System.Net.IPAddress.None>, указывающее, что не следует использовать сетевой интерфейс.</span><span class="sxs-lookup"><span data-stu-id="6fae8-290">The following example uses the <xref:System.Net.IPAddress.None> property to indicate that no network interface should be used.</span></span>  
  
 [!code-cpp[IPAddress_None#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_None/CPP/ipaddress_none.cpp#1)]
 [!code-csharp[IPAddress_None#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_None/CS/ipaddress_none.cs#1)]
 [!code-vb[IPAddress_None#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_None/VB/ipaddress_none.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress Parse (ReadOnlySpan&lt;char&gt; ipString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; ipString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ipString As ReadOnlySpan(Of Char)) As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPAddress ^ Parse(ReadOnlySpan&lt;char&gt; ipString);" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; -&gt; System.Net.IPAddress" Usage="System.Net.IPAddress.Parse ipString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ipString"><span data-ttu-id="6fae8-291">Диапазон байтов, содержащий IP-адрес, выраженный в случае протокола IPv4 в виде четырех чисел, разделенных точками, или представленный в системе записи "двоеточие — шестнадцатеричное число" в случае протокола IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-291">A character span that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span></span></param>
        <summary><span data-ttu-id="6fae8-292">Преобразует IP-адрес, представленный в виде диапазона символов, в экземпляр <see cref="T:System.Net.IPAddress" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-292">Converts an IP address represented as a character span to an <see cref="T:System.Net.IPAddress" /> instance.</span></span></summary>
        <returns><span data-ttu-id="6fae8-293">Преобразованный IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-293">The converted IP address.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="6fae8-294"><paramref name="ipString" /> не является допустимым IP-адресом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-294"><paramref name="ipString" /> is not a valid IP address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress Parse (string ipString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress Parse(string ipString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ipString As String) As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPAddress ^ Parse(System::String ^ ipString);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Net.IPAddress" Usage="System.Net.IPAddress.Parse ipString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ipString"><span data-ttu-id="6fae8-295">Строка, содержащая IP-адрес, выраженный в случае протокола IPv4 в виде четырех чисел, разделенных точками, или представленный в системе записи "двоеточие-шестнадцатиричное число" в случае протокола IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-295">A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span></span></param>
        <summary><span data-ttu-id="6fae8-296">Преобразует строку IP-адреса в экземпляр класса <see cref="T:System.Net.IPAddress" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-296">Converts an IP address string to an <see cref="T:System.Net.IPAddress" /> instance.</span></span></summary>
        <returns><span data-ttu-id="6fae8-297">Экземпляр <see cref="T:System.Net.IPAddress" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-297">An <see cref="T:System.Net.IPAddress" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-298">Статический <xref:System.Net.IPAddress.Parse%2A> метод создает экземпляр <xref:System.Net.IPAddress> из IP-адреса, выраженного в точечно-десятичной нотации для IPv4 и в шестнадцатеричной нотации для IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-298">The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span></span>  
  
 <span data-ttu-id="6fae8-299">Количество частей (каждая часть отделяется точкой) в `ipString` определяет, как создается IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-299">The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed.</span></span> <span data-ttu-id="6fae8-300">Адрес одной части хранится непосредственно в сетевом адресе.</span><span class="sxs-lookup"><span data-stu-id="6fae8-300">A one part address is stored directly in the network address.</span></span> <span data-ttu-id="6fae8-301">Адрес с двумя частями, удобно для указания адреса класса A, помещает начальную часть в первый байт и завершающую часть в правой-трех байтах сетевого адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-301">A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</span></span> <span data-ttu-id="6fae8-302">Адрес из трех частей, удобно для указания адреса класса B, помещает первую часть в первый байт, вторую часть второго байта и последнюю часть в правой части двух байтов сетевого адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-302">A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</span></span> <span data-ttu-id="6fae8-303">Например:</span><span class="sxs-lookup"><span data-stu-id="6fae8-303">For example:</span></span>  
  
|<span data-ttu-id="6fae8-304">Число частей и пример `ipString`</span><span class="sxs-lookup"><span data-stu-id="6fae8-304">Number of parts and example `ipString`</span></span>|<span data-ttu-id="6fae8-305">IPv4-адрес для IPAddress</span><span class="sxs-lookup"><span data-stu-id="6fae8-305">IPv4 address for IPAddress</span></span>|  
|--------------------------------------------|--------------------------------|  
|<span data-ttu-id="6fae8-306">1 — "65535"</span><span class="sxs-lookup"><span data-stu-id="6fae8-306">1 -- "65535"</span></span>|<span data-ttu-id="6fae8-307">0.0.255.255</span><span class="sxs-lookup"><span data-stu-id="6fae8-307">0.0.255.255</span></span>|  
|<span data-ttu-id="6fae8-308">2 -- "20.2"</span><span class="sxs-lookup"><span data-stu-id="6fae8-308">2 -- "20.2"</span></span>|<span data-ttu-id="6fae8-309">20.0.0.2</span><span class="sxs-lookup"><span data-stu-id="6fae8-309">20.0.0.2</span></span>|  
|<span data-ttu-id="6fae8-310">2 -- "20.65535"</span><span class="sxs-lookup"><span data-stu-id="6fae8-310">2 -- "20.65535"</span></span>|<span data-ttu-id="6fae8-311">20.0.255.255</span><span class="sxs-lookup"><span data-stu-id="6fae8-311">20.0.255.255</span></span>|  
|<span data-ttu-id="6fae8-312">3 -- "128.1.2"</span><span class="sxs-lookup"><span data-stu-id="6fae8-312">3 -- "128.1.2"</span></span>|<span data-ttu-id="6fae8-313">128.1.0.2</span><span class="sxs-lookup"><span data-stu-id="6fae8-313">128.1.0.2</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6fae8-314">Следующий код преобразует строку, содержащую IP-адрес, в точечно-десятичной нотации для IPv4 или в шестнадцатеричной нотации для IPv6 в экземпляр класса <xref:System.Net.IPAddress>.</span><span class="sxs-lookup"><span data-stu-id="6fae8-314">The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <xref:System.Net.IPAddress> class.</span></span> <span data-ttu-id="6fae8-315">Затем используется перегруженный метод <xref:System.Net.IPAddress.ToString%2A> для вывода адреса в стандартной нотации.</span><span class="sxs-lookup"><span data-stu-id="6fae8-315">Then it uses the overloaded <xref:System.Net.IPAddress.ToString%2A> method to display the address in standard notation.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.Parse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CPP/parse.cpp#1)]
 [!code-csharp[System.Net.IPAddress.Parse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CS/parse.cs#1)]
 [!code-vb[System.Net.IPAddress.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.Parse/VB/parse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fae8-316">Свойство <paramref name="ipString" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-316"><paramref name="ipString" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="6fae8-317"><paramref name="ipString" /> не является допустимым IP-адресом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-317"><paramref name="ipString" /> is not a valid IP address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ScopeId">
      <MemberSignature Language="C#" Value="public long ScopeId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ScopeId" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.ScopeId" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ScopeId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ScopeId : int64 with get, set" Usage="System.Net.IPAddress.ScopeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fae8-318">Возвращает или задает идентификатор области действия адреса, соответствующего протоколу IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-318">Gets or sets the IPv6 address scope identifier.</span></span></summary>
        <value><span data-ttu-id="6fae8-319">Длинное целое число, ограничивающее область действия адреса.</span><span class="sxs-lookup"><span data-stu-id="6fae8-319">A long integer that specifies the scope of the address.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-320">Значение <xref:System.Net.IPAddress.ScopeId%2A> меняется в зависимости от контекста, в котором он используется.</span><span class="sxs-lookup"><span data-stu-id="6fae8-320">The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.</span></span>  
  
-   <span data-ttu-id="6fae8-321">Адрес локальной связи.</span><span class="sxs-lookup"><span data-stu-id="6fae8-321">Link-local address.</span></span> <span data-ttu-id="6fae8-322">На узле с несколькими интерфейсами, подключенными к отдельным ссылкам, один и тот же адрес локальной связи может быть назначен нескольким интерфейсам.</span><span class="sxs-lookup"><span data-stu-id="6fae8-322">On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.</span></span> <span data-ttu-id="6fae8-323">Чтобы устранить неоднозначность, идентификатор области используется для указания интерфейса, через который осуществляется обмен сообщениями.</span><span class="sxs-lookup"><span data-stu-id="6fae8-323">To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6fae8-324">Адреса локальной связи, определяемые префиксом формата (FP) FE80, используются узлами при взаимодействии с соседними узлами на одной и той же связи.</span><span class="sxs-lookup"><span data-stu-id="6fae8-324">Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</span></span>  
  
-   <span data-ttu-id="6fae8-325">Локальные адреса сайта.</span><span class="sxs-lookup"><span data-stu-id="6fae8-325">Site-local addresses.</span></span> <span data-ttu-id="6fae8-326">Узел может быть подключен к нескольким сайтам.</span><span class="sxs-lookup"><span data-stu-id="6fae8-326">A host can be connected to multiple sites.</span></span> <span data-ttu-id="6fae8-327">В этом случае идентификатор области используется для указания конкретного сайта для взаимодействия.</span><span class="sxs-lookup"><span data-stu-id="6fae8-327">In this case, a scope identifier is used to indicate a specific site to communicate with.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6fae8-328">Адреса локальных сайтов, определяемые префиксом формата (FP) FEC0, используются узлами при обмене данными в частных интрасетях.</span><span class="sxs-lookup"><span data-stu-id="6fae8-328">Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</span></span>  
  
 <span data-ttu-id="6fae8-329">Нотация, используемая для указания `ScopeId` с адресом, — `Address%ScopeId`.</span><span class="sxs-lookup"><span data-stu-id="6fae8-329">The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`.</span></span> <span data-ttu-id="6fae8-330">Например: `FE80::5EFE:192.168.41.30%2.`</span><span class="sxs-lookup"><span data-stu-id="6fae8-330">For example, `FE80::5EFE:192.168.41.30%2.`</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
 [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
 [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="6fae8-331"><see langword="AddressFamily" /> = <see langword="InterNetwork" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-331"><see langword="AddressFamily" /> = <see langword="InterNetwork" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6fae8-332"><paramref name="scopeId" /> &lt; 0</span><span class="sxs-lookup"><span data-stu-id="6fae8-332"><paramref name="scopeId" /> &lt; 0</span></span> 
<span data-ttu-id="6fae8-333">- или -</span><span class="sxs-lookup"><span data-stu-id="6fae8-333">-or-</span></span> 
<span data-ttu-id="6fae8-334"><paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="6fae8-334"><paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="iPAddress.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6fae8-335">Преобразует адрес в Интернете в его стандартный формат.</span><span class="sxs-lookup"><span data-stu-id="6fae8-335">Converts an Internet address to its standard notation.</span></span></summary>
        <returns><span data-ttu-id="6fae8-336">Строка, содержащая IP-адрес, выраженный в формате четырех чисел, разделенных точками, согласно протоколу IPv4 или выраженный в системе "двоеточие-шестнадцатиричное число" согласно протоколу IPv6.</span><span class="sxs-lookup"><span data-stu-id="6fae8-336">A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-337">Метод <xref:System.Net.IPAddress.ToString%2A> преобразует IP-адрес, хранящийся в свойстве <xref:System.Net.IPAddress.Address%2A>, в шестнадцатеричную нотацию IPv4 или двоеточия.</span><span class="sxs-lookup"><span data-stu-id="6fae8-337">The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="6fae8-338">Семья адресов является <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />, используемый адрес недопустим.</span><span class="sxs-lookup"><span data-stu-id="6fae8-338">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> and the address is bad.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryFormat(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFormat(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int -&gt; bool" Usage="iPAddress.TryFormat (destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="6fae8-339">Когда этот метод возвращает управление, содержит IP-адрес в виде диапазона символов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-339">When this method returns, the IP address as a span of characters.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="6fae8-340">Этот метод возвращает количество символов, записанных в диапазон.</span><span class="sxs-lookup"><span data-stu-id="6fae8-340">When this method returns, the number of characters written into the span.</span></span></param>
        <summary><span data-ttu-id="6fae8-341">Пытается отформатировать текущий IP-адрес в указанный диапазон.</span><span class="sxs-lookup"><span data-stu-id="6fae8-341">Tries to format the current IP address into the provided span.</span></span></summary>
        <returns><span data-ttu-id="6fae8-342">Значение <see langword="true" />, если форматирование выполнено успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-342"><see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; ipString, out System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; ipString, [out] class System.Net.IPAddress&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryParse(System.ReadOnlySpan{System.Char},System.Net.IPAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (ipString As ReadOnlySpan(Of Char), ByRef address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; ipString, [Runtime::InteropServices::Out] System::Net::IPAddress ^ % address);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IPAddress -&gt; bool" Usage="System.Net.IPAddress.TryParse (ipString, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="address" Type="System.Net.IPAddress" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ipString"><span data-ttu-id="6fae8-343">Проверяемый диапазон байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-343">The byte span to validate.</span></span></param>
        <param name="address"><span data-ttu-id="6fae8-344">Когда этот метод возвращает управление, содержит версию <see cref="T:System.Net.IPAddress" /> диапазона байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-344">When this method returns, the <see cref="T:System.Net.IPAddress" /> version of the byte span.</span></span></param>
        <summary><span data-ttu-id="6fae8-345">Определяет, представляет ли указанный диапазон байтов допустимый IP-адрес.</span><span class="sxs-lookup"><span data-stu-id="6fae8-345">Determines whether the specified byte span represents a valid IP address.</span></span></summary>
        <returns><span data-ttu-id="6fae8-346">Значение <see langword="true" />, если <paramref name="ipString" /> мог быть проанализирован как IP-адрес; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-346"><see langword="true" /> if <paramref name="ipString" /> was able to be parsed as an IP address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string ipString, out System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string ipString, [out] class System.Net.IPAddress&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (ipString As String, ByRef address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ ipString, [Runtime::InteropServices::Out] System::Net::IPAddress ^ % address);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IPAddress -&gt; bool" Usage="System.Net.IPAddress.TryParse (ipString, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="address" Type="System.Net.IPAddress" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ipString"><span data-ttu-id="6fae8-347">Проверяемая строка.</span><span class="sxs-lookup"><span data-stu-id="6fae8-347">The string to validate.</span></span></param>
        <param name="address"><span data-ttu-id="6fae8-348">Версия <see cref="T:System.Net.IPAddress" /> строки.</span><span class="sxs-lookup"><span data-stu-id="6fae8-348">The <see cref="T:System.Net.IPAddress" /> version of the string.</span></span></param>
        <summary><span data-ttu-id="6fae8-349">Определяет, является ли строка допустимым IP-адресом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-349">Determines whether a string is a valid IP address.</span></span></summary>
        <returns><span data-ttu-id="6fae8-350">Значение <see langword="true" />, если <paramref name="ipString" /> мог быть проанализирован как IP-адрес; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-350"><see langword="true" /> if <paramref name="ipString" /> was able to be parsed as an IP address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fae8-351">Обратите внимание, что этот метод принимает в качестве допустимого значения Ипстринг, которое может быть проанализировано как <xref:System.Int64>, а затем обрабатывает его как длинное значение IP-адреса в сетевом порядке байтов, аналогично тому, как это делает конструктор <xref:System.Net.IPAddress.%23ctor%2A>.</span><span class="sxs-lookup"><span data-stu-id="6fae8-351">Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does.</span></span> <span data-ttu-id="6fae8-352">Это означает, что этот метод возвращает значение true, если Int64 анализируется успешно, даже если он представляет адрес, который не является допустимым IP-адресом.</span><span class="sxs-lookup"><span data-stu-id="6fae8-352">This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</span></span> <span data-ttu-id="6fae8-353">Например, если значение Ипстринг равно "1", этот метод возвращает значение true, даже если "1" (или 0.0.0.1) не является допустимым IP-адресом, и вы можете ожидать, что этот метод возвратит значение false.</span><span class="sxs-lookup"><span data-stu-id="6fae8-353">For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</span></span> <span data-ttu-id="6fae8-354">Устранение этой ошибки приведет к нарушению работы существующих приложений, поэтому текущее поведение не изменится.</span><span class="sxs-lookup"><span data-stu-id="6fae8-354">Fixing this bug would break existing apps, so the current behavior will not be changed.</span></span> <span data-ttu-id="6fae8-355">Код может избежать такого поведения, гарантируя, что он использует только этот метод для анализа IP-адресов в точечно-десятичном формате.</span><span class="sxs-lookup"><span data-stu-id="6fae8-355">Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fae8-356">Параметр <paramref name="ipString" /> имеет значение null.</span><span class="sxs-lookup"><span data-stu-id="6fae8-356"><paramref name="ipString" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryWriteBytes(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryWriteBytes(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryWriteBytes : Span&lt;byte&gt; * int -&gt; bool" Usage="iPAddress.TryWriteBytes (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="6fae8-357">Когда этот метод возвращает управление, содержит IP-адрес в виде диапазона байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-357">When this method returns, the IP address as a span of bytes.</span></span></param>
        <param name="bytesWritten"><span data-ttu-id="6fae8-358">Когда этот метод возвращает управление, содержит количество байтов, записанных в диапазон.</span><span class="sxs-lookup"><span data-stu-id="6fae8-358">When this method returns, the number of bytes written into the span.</span></span></param>
        <summary><span data-ttu-id="6fae8-359">Пытается записать текущий IP-адрес в диапазон байтов.</span><span class="sxs-lookup"><span data-stu-id="6fae8-359">Tries to write the current IP address into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="6fae8-360">Значение <see langword="true" />, если IP-адрес успешно записан в указанный диапазон; в противном случае значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fae8-360"><see langword="true" /> if the IP address is sucessfully written to the given span; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
