<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fc0bc7f4795e380e97f82eea143f43e349c98a7" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70502155" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет функциональные возможности для форматирования значения объекта в представление строки.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable> Интерфейс преобразует объект в его строковое представление на основе строки формата и поставщика формата.  
  
 Строка формата обычно определяет общий внешний вид объекта. Например, .NET Framework поддерживает следующее:  
  
-   Строки стандартного формата для форматирования значений перечисления (см. [строки формата перечисления](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Строки стандартных и пользовательских форматов для форматирования числовых значений (см. раздел [стандартные строки числовых форматов](~/docs/standard/base-types/standard-numeric-format-strings.md) и [строки настраиваемых числовых форматов](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Стандартные и настраиваемые строки формата для форматирования значений даты и времени (см. раздел [стандартные строки формата даты и времени](~/docs/standard/base-types/standard-date-and-time-format-strings.md) и [строки настраиваемых форматов даты и времени](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Стандартные и настраиваемые строки формата для форматирования интервалов времени (см. раздел [стандартные строки формата TimeSpan](~/docs/standard/base-types/standard-timespan-format-strings.md) и [строки настраиваемого формата TimeSpan](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 Можно также определить собственные строки формата для поддержки форматирования определяемых приложением типов.  
  
 Поставщик формата возвращает объект форматирования, который обычно определяет символы, используемые при преобразовании объекта в его строковое представление. Например, при преобразовании числа в денежное значение поставщик формата определяет символ валюты, который отображается в результирующей строке. .NET Framework определяет три поставщика формата:  
  
-   Класс, который возвращает <xref:System.Globalization.NumberFormatInfo> либо объект для форматирования <xref:System.Globalization.DateTimeFormatInfo> числовых значений, либо объект для форматирования значений даты и времени. <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> Класс, который возвращает экземпляр для форматирования числовых значений.  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> Класс, который возвращает экземпляр для форматирования значений даты и времени.  
  
 Кроме того, можно определить собственные поставщики настраиваемых форматов, чтобы предоставить сведения, зависящие от языка и региональных параметров, конкретные или отраслевые данные, используемые при форматировании. Дополнительные сведения о реализации пользовательского форматирования с помощью поставщика настраиваемого формата см. в <xref:System.ICustomFormatter>разделе.  
  
 Интерфейс определяет единственный метод, <xref:System.IFormattable.ToString%2A>который предоставляет службы форматирования для реализующего типа. <xref:System.IFormattable> <xref:System.IFormattable.ToString%2A> Метод можно вызывать напрямую. Кроме того, он вызывается автоматически <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> методами и <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> , а также методами, которые используют [функцию составного форматирования](~/docs/standard/base-types/composite-formatting.md) в .NET Framework. К таким методам <xref:System.String.Format%2A?displayProperty=nameWithType>относятся <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>и, среди прочих. <xref:System.IFormattable.ToString%2A> Метод вызывается для каждого элемента форматирования в строке формата метода.  
  
 <xref:System.IFormattable> Интерфейс реализуется базовыми типами данных.  
  
   
  
## Examples  
 В следующем примере определяется класс `Temperature` , реализующий интерфейс <xref:System.IFormattable> . Класс поддерживает четыре спецификатора формата: "G" и "C", которые указывают, что температура должна отображаться в Цельсия; "F", что означает, что температура должна отображаться в градусах Фаренгейта; и «K», что означает, что температура должна отображаться в градусах Кельвина. Кроме того, <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализация также может работать со строкой формата, которая `null` является или пустой. Другие два `ToString` метода, определяемые `Temperature` классом, просто создают <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> оболочку для вызова реализации.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 В следующем примере <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализация вызывается напрямую или с помощью строки составного формата.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Классы, которым требуется больший контроль над форматированием строк, <see cref="M:System.Object.ToString" /> чем предоставляет, <see cref="T:System.IFormattable" />должны реализовывать.  
  
Класс, реализующий <see cref="T:System.IFormattable" /> , должен поддерживать описатель формата "G" (General). Помимо спецификатора G, класс может определять список описателей формата, которые он поддерживает. Кроме того, класс должен быть готов к обработке описателя формата, который имеет значение <see langword="null" />. Дополнительные сведения о форматировании и кодах форматирования см. в разделе [Типы форматирования](~/docs/standard/base-types/formatting-types.md) .</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Используемый формат.  
  
- или - 
Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования формата по умолчанию, определенного для типа реализации<see cref="T:System.IFormattable" />.</param>
        <param name="formatProvider">Поставщик, используемый для форматирования значения.  
  
- или - 
Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для получения сведений о формате чисел из текущего установленного в операционной системе языкового стандарта.</param>
        <summary>Форматирует значение текущего экземпляра с использованием заданного формата.</summary>
        <returns>Значение текущего экземпляра в указанном формате.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A> Метод преобразует значение в строковое представление, которое может быть выражено несколькими способами. Его точный формат зависит от конкретных символов или определенного порядка, определенного в определенных культурах, профессиях или отраслях. Метод можно вызвать напрямую. Он также вызывается автоматически <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> методами и <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> и методами, которые используют функцию составного форматирования в .NET Framework, например <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>и <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Дополнительные сведения см. в разделе [составное форматирование](~/docs/standard/base-types/composite-formatting.md).)  
  
 Методы составного форматирования вызывают <xref:System.IFormattable.ToString%2A> метод один раз для каждого элемента форматирования в строке формата. Параметры, передаваемые в метод, зависят от конкретного метода форматирования, который вызывается и для содержимого элемента форматирования, следующим образом:  
  
-   Если элемент форматирования не включает строку формата (например, если элемент форматирования является просто `{0}`), он передается `null` <xref:System.String?displayProperty=nameWithType> как значение параметра.  
  
-   Если элемент форматирования содержит строку формата (например, `{0:G}`), эта строка формата передается как значение <xref:System.String?displayProperty=nameWithType> параметра.  
  
-   Если исходный вызов метода не включает <xref:System.IFormatProvider?displayProperty=nameWithType> параметр, <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> передается в <xref:System.IFormatProvider?displayProperty=nameWithType> качестве значения параметра.  
  
-   Если исходный вызов метода включает <xref:System.IFormatProvider?displayProperty=nameWithType> параметр, поставщик, предоставляемый в вызове метода, передается как значение <xref:System.IFormatProvider?displayProperty=nameWithType> параметра.  
  
> [!NOTE]
>  <xref:System.IFormattable.ToString%2A> Реализация объекта вызывается методами составного форматирования только в том случае, если они не <xref:System.ICustomFormatter> передаются <xref:System.ICustomFormatter.Format%2A> поставщику формата или если метод поставщика пользовательского формата возвращает `null`.  
  
 .NET Framework включает три поставщика формата, все из которых реализуют <xref:System.IFormatProvider> интерфейс:  
  
-   <xref:System.Globalization.NumberFormatInfo>предоставляет сведения о форматировании чисел, например символы, используемые для десятичных и групповых разделителей, а также написание и размещение символов валют в денежных значениях.  
  
-   <xref:System.Globalization.DateTimeFormatInfo>предоставляет сведения о форматировании, связанные с датой и временем, такие как расположение месяца, день и год в шаблоне даты.  
  
-   <xref:System.Globalization.CultureInfo>содержит сведения о форматировании по умолчанию для определенного языка и региональных параметров, включая сведения о форматировании чисел, а также сведения о форматировании, связанные с датами и временем.  
  
 Кроме того, можно определить собственный поставщик настраиваемого формата.  
  
   
  
## Examples  
 В следующем примере показан `Temperature` класс, <xref:System.IFormattable.ToString%2A> реализующий метод. Этот пример кода является частью большого примера, <xref:System.IFormattable> приведенного для класса.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> Метод должен поддерживать описатель формата "G" (General). Помимо спецификатора G, класс может определять список описателей формата, которые он поддерживает. Кроме того, класс должен быть готов к обработке описателя формата, который имеет значение <see langword="null" />. Дополнительные сведения о форматировании и кодах форматирования см. в разделе [Типы форматирования](~/docs/standard/base-types/formatting-types.md).</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
