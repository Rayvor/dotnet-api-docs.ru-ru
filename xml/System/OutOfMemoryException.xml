<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6c32903429f385af7be4195fc1a228c1e586615" /><Meta Name="ms.sourcegitcommit" Value="00194cfb0d5c4f2d3f620c0b561d50d547ce2f7f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/06/2019" /><Meta Name="ms.locfileid" Value="70388550" /></Metadata><TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Исключение, которое выбрасывается при недостаточном объеме памяти для выполнения программы.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.OutOfMemoryException>использует HRESULT `COR_E_OUTOFMEMORY`со значением 0x8007000E.  
  
Список начальных значений свойств для экземпляра <xref:System.OutOfMemoryException>, см. в разделе <xref:System.OutOfMemoryException.%23ctor%2A> конструкторы.  
  
> [!NOTE]
>  Значение унаследованного <xref:System.Exception.Data%2A> свойства всегда `null`равно.  
  
<xref:System.OutOfMemoryException> Исключение имеет две основные причины.  
  
-   Предпринимается попытка расширения <xref:System.Text.StringBuilder> объекта, длина которого превышает длину, определенную его <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> свойством.  
  
-   Среда CLR не может выделить достаточно непрерывной памяти для успешного выполнения операции. Это исключение может быть создано любым назначением свойства или вызовом метода, требующего выделения памяти. Дополнительные сведения о причине <xref:System.OutOfMemoryException> исключения см. в записи блога ["недостаточно памяти" не относится к физической памяти](https://blogs.msdn.microsoft.com/ericlippert/2009/06/08/out-of-memory-does-not-refer-to-physical-memory/).  
  
     Этот тип <xref:System.OutOfMemoryException> исключения представляет разрушительный сбой. Если решено решить эту ошибку, следует включить `catch` блок, <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> вызывающий метод, чтобы завершить работу приложения и добавить запись в журнал системных событий, как показано в следующем примере.  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 Некоторые условия, при которых создается исключение, и действия, которые можно предпринять для исключения, включают следующее:  
  
**Вызывается <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> метод.**  

Предпринимается попытка увеличить длину <xref:System.Text.StringBuilder> объекта, превышающего размер, указанный в его <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> свойстве. В следующем примере показано <xref:System.OutOfMemoryException> исключение, вызываемое вызовом <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> метода, когда в примере предпринимается попытка вставить строку, которая приведет к превышению максимального объема <xref:System.Text.StringBuilder.Length%2A> свойства объекта.  
  
[!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
[!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
Для устранения ошибки можно выполнить одно из следующих действий.  
  
-   Замените вызов <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> конструктора на вызов любой другой <xref:System.Text.StringBuilder> перегрузки конструктора. Максимальная емкость <xref:System.Text.StringBuilder> объекта будет равна значению по умолчанию, то есть <xref:System.Int32.MaxValue?displayProperty=nameWithType>.  

-   Вызовите `maxCapacity` <xref:System.Text.StringBuilder> конструктор со значением, которое достаточно велико для размещения всех расширений объекта. <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>  
  
**Приложение выполняется как 32-разрядный процесс.**

32-разрядные процессы могут выделять максимум 2 ГБ памяти виртуального режима пользователя на 32-разрядных системах и 4 ГБ виртуальной памяти в режиме пользователя на 64-разрядных системах. Это может усложнить для среды CLR выделение достаточного непрерывного объема памяти, если требуется большое выделение. В отличие от этого, 64-разрядные процессы могут выделить до 8 ТБ виртуальной памяти. Чтобы устранить это исключение, перекомпилируйте приложение, предназначенное для 64-разрядной платформы. Сведения о настройке для конкретных платформ в Visual Studio см. в [разделе как настроить целевые платформы в проектах](https://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76).  
  
**В приложении происходит утечка неуправляемых ресурсов** 

Несмотря на то, что сборщик мусора может освободить память, выделенную для управляемых типов, она не управляет памятью, выделенной для неуправляемых ресурсов, таких как дескрипторы операционной системы (включая дескрипторы файлов, сопоставленных в памяти файлов, каналов, разделов реестра и дескрипторов ожидания). и блоки памяти, выделенные непосредственно вызовами Windows API или вызовами функций выделения памяти, `malloc`таких как. Типы, использующие неуправляемые ресурсы, <xref:System.IDisposable> реализуют интерфейс.  

Если используется тип, использующий неуправляемые ресурсы, следует обязательно вызвать его <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> метод после завершения его использования. (Некоторые типы также реализуют `Close` метод, идентичный функции `Dispose` к методу.) Дополнительные сведения см. в разделе [использование объектов, реализующих интерфейс IDisposable](~/docs/standard/garbage-collection/using-objects.md) .  

Если вы создали тип, использующий неуправляемые ресурсы, убедитесь, что вы реализовали шаблон Dispose и при необходимости указали метод завершения. Дополнительные сведения см. [в разделе Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) и <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.  
  
**Вы пытаетесь создать большой массив в 64-разрядном процессе**

По умолчанию среда CLR в .NET Framework не допускает одиночных объектов, размер которых превышает 2 ГБ. Чтобы переопределить это значение по умолчанию, можно [ \<](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) использовать параметр файла конфигурации gcAllowVeryLargeObjects >, чтобы включить массивы, общий размер которых превышает 2 ГБ. В .NET Core поддержка массивов размером более 2 Гб включена по умолчанию. 
  
**Вы работаете с очень большими наборами данных (например, массивами, коллекциями или наборами данных базы данных) в памяти.**

Если структуры данных или наборы данных, находящиеся в памяти, становятся настолько большими, что среда CLR не может выделить для них достаточно непрерывной памяти <xref:System.OutOfMemoryException> , то результаты исключения.  

Чтобы предотвратить <xref:System.OutOfMemoryException> исключения, необходимо изменить приложение таким образом, чтобы меньше данных наделено в памяти, или данные разделены на сегменты, требующие меньшего выделения памяти. Например:  

-   Если вы получаете все данные из базы данных и затем фильтруете их в приложении, чтобы сократить количество обращений к серверу, следует изменить запросы, чтобы возвращалось только подмножество данных, необходимых приложению. При работе с большими таблицами несколько запросов практически всегда более эффективны, чем извлечение всех данных в одной таблице и последующее управление им.  

-   При выполнении запросов, создаваемых пользователями динамически, следует убедиться, что число записей, возвращаемых запросом, ограничено.  

-   Если вы используете большие массивы или другие объекты коллекции, размер которых приводит <xref:System.OutOfMemoryException> к исключению, следует изменить приложение для работы с данными в подмножествах, а не для совместной работы с ним.  
  
В следующем примере возвращается массив, состоящий из 200 000 000 значений с плавающей запятой, а затем вычисляется их среднее значение. В выходных данных примера показано, что, поскольку в примере сохраняется весь массив в памяти перед вычислением среднего, <xref:System.OutOfMemoryException> создается исключение.  

[!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
[!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
В следующем примере <xref:System.OutOfMemoryException> исключение устраняется путем обработки входящих данных без сохранения всего набора данных в памяти, при этом выполняется сериализация данных в файл, если это необходимо для дальнейшей обработки (эти строки записываются в комментарий в примере). Поскольку в этом случае они создают файл, размер которого больше 1 ГБ), и возвращает вычисленное среднее значение и количество вариантов в вызывающей подпрограммы.  

[!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
[!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
**Вы постоянно объединяете большие строки.** 

Так как строки являются неизменяемыми, каждая операция сцепления строк создает новую строку. Влияние на небольшие строки или небольшое количество операций объединения незначительно. Но для больших строк или очень большого числа операций сцепления объединение строк может привести к большому количеству выделений памяти и фрагментации памяти, низкой производительности и, возможно <xref:System.OutOfMemoryException> , исключений.  

При объединении больших строк или выполнении большого числа операций объединения следует использовать <xref:System.Text.StringBuilder> класс вместо <xref:System.String> класса. Завершив обработку строки, преобразуйте <xref:System.Text.StringBuilder> экземпляр в строку, <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> вызвав метод.  
  
**Закрепление большого количества объектов в памяти.**  
 
Закрепление большого количества объектов в памяти в течение длительных периодов может усложнить процесс выделения непрерывных блоков памяти сборщиком мусора. Если в памяти закреплено большое количество объектов `fixed` , например с помощью инструкции в C# <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> или путем вызова метода с типом <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>маркера, то для устранения <xref:System.OutOfMemoryException> исключения можно выполнить следующие действия.  
  
-   Оцените, нужно ли закреплять каждый объект,  

-   Убедитесь, что каждый объект отменяется закреплением как можно скорее.  

-   Убедитесь, что каждый вызов <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> метода для крепления памяти имеет соответствующий вызов <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> метода для открепления этой памяти.  

Следующие инструкции промежуточных инструкций (MSIL) Microsoft вызовут <xref:System.OutOfMemoryException> исключение:  
  
-   [Box](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
-   [неварр](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  

-   [newobj](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  


 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Обработка и создание исключений</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.OutOfMemoryException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.OutOfMemoryException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор инициализирует <xref:System.Exception.Message%2A> свойство нового экземпляра, сопоставляя с ним системное сообщение, описывающее ошибку, например "недостаточно памяти для продолжения выполнения программы". Это сообщение учитывает текущую культуру системы.  
  
 В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.OutOfMemoryException>.  
  
|Свойство.|Значение|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Строка локализованного сообщения об ошибке.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение, описывающее ошибку.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.OutOfMemoryException" /> с указанным сообщением об ошибке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Содержимое параметра `message` должно быть понятно пользователям. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.  
  
 В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.OutOfMemoryException>.  
  
|Свойство.|Значение|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Пустая ссылка (`Nothing` в Visual Basic).|  
|<xref:System.Exception.Message%2A>|Строка сообщения об ошибке.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Объект, содержащий сериализованные данные объекта.</param>
        <param name="context">Контекстные сведения об источнике или назначении.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.OutOfMemoryException" /> с сериализованными данными.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный конструктор вызывается в процессе десериализации для воссоздания объекта исключения, переданного в потоке. Дополнительные сведения см. в разделе [сериализация XML и SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Сериализация XML и SOAP</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
        <param name="innerException">Исключение, которое вызвало текущее исключение. Если параметр <paramref name="innerException" /> не является указателем null (<see langword="Nothing" /> в Visual Basic), то текущее исключение создается в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.OutOfMemoryException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исключение, созданное как прямой результат предыдущего исключения, может содержать в свойстве <xref:System.Exception.InnerException%2A> ссылку на предыдущее исключение. Свойство <xref:System.Exception.InnerException%2A> возвращает то же значение, которое передается конструктору, или пустую ссылку (`Nothing` в Visual Basic), если свойство <xref:System.Exception.InnerException%2A> не предоставляет конструктору значение внутреннего исключения.  
  
 В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.OutOfMemoryException>.  
  
|Свойство.|Значение|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ссылка на внутреннее исключение.|  
|<xref:System.Exception.Message%2A>|Строка сообщения об ошибке.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Обработка и создание исключений</related>
      </Docs>
    </Member>
  </Members>
</Type>
