<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df266a91358ad146e1c18d873159ac0475dd9b5d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75040702" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="99de1-101">Тип объекта с отложенной инициализацией.</span><span class="sxs-lookup"><span data-stu-id="99de1-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="99de1-102">Обеспечивает поддержку отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-103">Используйте отложенную инициализацию, чтобы отложить создание большого или ресурсоемкиго объекта или выполнение ресурсоемких задач, особенно если такое создание или выполнение может не произойти в течение всего времени существования программы.</span><span class="sxs-lookup"><span data-stu-id="99de1-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="99de1-104">Чтобы подготовиться к отложенной инициализации, создайте экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="99de1-105">Аргумент типа создаваемого объекта <xref:System.Lazy%601> указывает тип объекта, который требуется инициализировать отложенно.</span><span class="sxs-lookup"><span data-stu-id="99de1-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="99de1-106">Конструктор, используемый для создания объекта <xref:System.Lazy%601>, определяет характеристики инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="99de1-107">Отложенная инициализация производится при первом обращении к свойству <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="99de1-108">В большинстве случаев выбор конструктора зависит от ответов на два вопроса:</span><span class="sxs-lookup"><span data-stu-id="99de1-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="99de1-109">Будет ли доступ к объекту с отложенной инициализацией осуществляться из более чем одного потока?</span><span class="sxs-lookup"><span data-stu-id="99de1-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="99de1-110">В этом случае объект <xref:System.Lazy%601> может создать его в любом потоке.</span><span class="sxs-lookup"><span data-stu-id="99de1-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="99de1-111">Можно использовать один из простых конструкторов, поведение по умолчанию которого — создать потокобезопасный объект <xref:System.Lazy%601>, чтобы создавался только один экземпляр объекта с отложенным созданием экземпляров, независимо от того, сколько потоков пытается получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="99de1-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="99de1-112">Чтобы создать объект <xref:System.Lazy%601>, который не является потокобезопасным, необходимо использовать конструктор, который позволяет указать отсутствие потокобезопасности.</span><span class="sxs-lookup"><span data-stu-id="99de1-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="99de1-113">Обеспечение безопасного потокового объекта <xref:System.Lazy%601> не защищает объект с отложенной инициализацией.</span><span class="sxs-lookup"><span data-stu-id="99de1-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="99de1-114">Если несколько потоков могут получить доступ к объекту с отложенной инициализацией, необходимо сделать его свойства и методы надежными для многопоточного доступа.</span><span class="sxs-lookup"><span data-stu-id="99de1-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="99de1-115">Если отложенная инициализация требует большого объема кода или если у отложенно инициализированного объекта есть конструктор без параметров, который выполняет все необходимые действия и не создает исключения?</span><span class="sxs-lookup"><span data-stu-id="99de1-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a parameterless constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="99de1-116">Если необходимо написать код инициализации или необходимо обработать исключения, используйте один из конструкторов, которые принимают фабричный метод.</span><span class="sxs-lookup"><span data-stu-id="99de1-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="99de1-117">Напишите код инициализации в фабричном методе.</span><span class="sxs-lookup"><span data-stu-id="99de1-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="99de1-118">В следующей таблице показано, какой конструктор выбрать в зависимости от этих двух факторов.</span><span class="sxs-lookup"><span data-stu-id="99de1-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="99de1-119">Доступ к объекту будет осуществляться</span><span class="sxs-lookup"><span data-stu-id="99de1-119">Object will be accessed by</span></span>|<span data-ttu-id="99de1-120">Если код инициализации не требуется (конструктор без параметров), используйте</span><span class="sxs-lookup"><span data-stu-id="99de1-120">If no initialization code is required (parameterless constructor), use</span></span>|<span data-ttu-id="99de1-121">Если требуется код инициализации, используйте</span><span class="sxs-lookup"><span data-stu-id="99de1-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="99de1-122">Несколько потоков</span><span class="sxs-lookup"><span data-stu-id="99de1-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="99de1-123">Один поток</span><span class="sxs-lookup"><span data-stu-id="99de1-123">One thread</span></span>|<span data-ttu-id="99de1-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> `isThreadSafe` задано значение `false`.</span><span class="sxs-lookup"><span data-stu-id="99de1-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="99de1-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> `isThreadSafe` задано значение `false`.</span><span class="sxs-lookup"><span data-stu-id="99de1-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="99de1-126">Для указания фабричного метода можно использовать лямбда-выражение.</span><span class="sxs-lookup"><span data-stu-id="99de1-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="99de1-127">Это позволяет хранить весь код инициализации в одном месте.</span><span class="sxs-lookup"><span data-stu-id="99de1-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="99de1-128">Лямбда-выражение фиксирует контекст, включая любые аргументы, передаваемые в конструктор отложенно инициализированного объекта.</span><span class="sxs-lookup"><span data-stu-id="99de1-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="99de1-129">**Кэширование исключений** При использовании фабричных методов исключения кэшируются.</span><span class="sxs-lookup"><span data-stu-id="99de1-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="99de1-130">То есть, если метод фабрики создает исключение при первом попытке потока получить доступ к свойству <xref:System.Lazy%601.Value%2A> объекта <xref:System.Lazy%601>, то при каждой последующей попытке возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="99de1-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="99de1-131">Это гарантирует, что каждый вызов свойства <xref:System.Lazy%601.Value%2A> приведет к одному и тому же результату и избежать незначительных ошибок, которые могут возникать, если разные потоки получают разные результаты.</span><span class="sxs-lookup"><span data-stu-id="99de1-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="99de1-132"><xref:System.Lazy%601> означает фактическое `T`, которое в противном случае было бы инициализировано в более ранней точке, обычно во время запуска.</span><span class="sxs-lookup"><span data-stu-id="99de1-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="99de1-133">Сбой в более ранней точке обычно является неустранимой.</span><span class="sxs-lookup"><span data-stu-id="99de1-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="99de1-134">Если есть вероятность возможного сбоя, рекомендуется создать логику повторных попыток в подпрограммы инициализации (в данном случае — фабричном методе), точно так же, как если бы вы не использовали отложенную инициализацию.</span><span class="sxs-lookup"><span data-stu-id="99de1-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="99de1-135">**Альтернатива блокировке** В некоторых ситуациях может возникнуть необходимость избежать издержек, возникающих в работе блокировки по умолчанию для объекта <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="99de1-136">В редких ситуациях возможны взаимоблокировки.</span><span class="sxs-lookup"><span data-stu-id="99de1-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="99de1-137">В таких случаях можно использовать конструктор <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> или <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> и указать <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99de1-138">Это позволяет объекту <xref:System.Lazy%601> создавать копию объекта с отложенной инициализацией в каждом из нескольких потоков, если потоки вызывают свойство <xref:System.Lazy%601.Value%2A> одновременно.</span><span class="sxs-lookup"><span data-stu-id="99de1-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="99de1-139">Объект <xref:System.Lazy%601> гарантирует, что все потоки будут использовать один и тот же экземпляр объекта с отложенной инициализацией и отбрасывают неиспользуемые экземпляры.</span><span class="sxs-lookup"><span data-stu-id="99de1-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="99de1-140">Таким образом, стоимость снижения затрат на блокировку заключается в том, что программа может иногда создавать и удалять дополнительные копии дорогостоящего объекта.</span><span class="sxs-lookup"><span data-stu-id="99de1-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="99de1-141">В большинстве случаев это маловероятно.</span><span class="sxs-lookup"><span data-stu-id="99de1-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="99de1-142">Примеры для конструкторов <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> и <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> демонстрируют это поведение.</span><span class="sxs-lookup"><span data-stu-id="99de1-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="99de1-143">При указании <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>исключения никогда не кэшируются, даже если указан фабричный метод.</span><span class="sxs-lookup"><span data-stu-id="99de1-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="99de1-144">**Эквивалентные конструкторы** Помимо использования <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, конструкторы <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> и <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> могут дублировать функциональность других конструкторов.</span><span class="sxs-lookup"><span data-stu-id="99de1-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="99de1-145">В следующей таблице приведены значения параметров, которые создают эквивалентное поведение.</span><span class="sxs-lookup"><span data-stu-id="99de1-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="99de1-146">Создание объекта <xref:System.Lazy%601>, который</span><span class="sxs-lookup"><span data-stu-id="99de1-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="99de1-147">Для конструкторов, имеющих параметр `LazyThreadSafetyMode` `mode`, задайте для `mode` значение.</span><span class="sxs-lookup"><span data-stu-id="99de1-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="99de1-148">Для конструкторов, имеющих логический параметр `isThreadSafe`, установите `isThreadSafe` в значение</span><span class="sxs-lookup"><span data-stu-id="99de1-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="99de1-149">Для конструкторов без параметров безопасности потока</span><span class="sxs-lookup"><span data-stu-id="99de1-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="99de1-150">Полностью потокобезопасный; использует блокировку, чтобы гарантировать, что только один поток инициализирует значение.</span><span class="sxs-lookup"><span data-stu-id="99de1-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="99de1-151">Все такие конструкторы являются полностью потокобезопасными.</span><span class="sxs-lookup"><span data-stu-id="99de1-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="99de1-152">Не является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="99de1-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="99de1-153">Неприменимо.</span><span class="sxs-lookup"><span data-stu-id="99de1-153">Not applicable.</span></span>|  
|<span data-ttu-id="99de1-154">Полностью потокобезопасный; потоки, которые инициализируют значение.</span><span class="sxs-lookup"><span data-stu-id="99de1-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="99de1-155">Неприменимо.</span><span class="sxs-lookup"><span data-stu-id="99de1-155">Not applicable.</span></span>|<span data-ttu-id="99de1-156">Неприменимо.</span><span class="sxs-lookup"><span data-stu-id="99de1-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="99de1-157">**Другие возможности** Сведения об использовании <xref:System.Lazy%601> с полями static потока или в качестве резервного хранилища для свойств см. в разделе [Отложенная инициализация](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="99de1-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-158">В следующем примере показано использование класса <xref:System.Lazy%601> для обеспечения отложенной инициализации с доступом из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-159">В примере используется конструктор <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="99de1-160">Также демонстрируется использование конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> (указание `true` для `isThreadSafe`) и конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> (с указанием <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="99de1-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99de1-161">Чтобы переключиться на другой конструктор, просто измените конструкторы, которые заносятся в комментарий.</span><span class="sxs-lookup"><span data-stu-id="99de1-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="99de1-162">Пример, демонстрирующий кэширование исключений с помощью тех же конструкторов, см. в разделе Конструктор <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="99de1-163">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99de1-164">Четыре ключевых раздела кода иллюстрируют создание инициализатора, фабричный метод, фактическую инициализацию и конструктор класса `LargeObject`, который отображает сообщение при создании объекта.</span><span class="sxs-lookup"><span data-stu-id="99de1-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="99de1-165">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99de1-166">Метод Factory показывает создание объекта с заполнительом для дальнейшей инициализации:</span><span class="sxs-lookup"><span data-stu-id="99de1-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="99de1-167">Обратите внимание, что первые два раздела кода можно объединить с помощью лямбда-функции, как показано ниже:</span><span class="sxs-lookup"><span data-stu-id="99de1-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="99de1-168">В этом примере приостанавливается, чтобы указать, что неопределенный период может пройти до возникновения отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="99de1-169">При нажатии клавиши **Ввод** в примере создаются и запускаются три потока.</span><span class="sxs-lookup"><span data-stu-id="99de1-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="99de1-170">Метод `ThreadProc`, используемый всеми тремя потоками, вызывает свойство <xref:System.Lazy%601.Value%2A>.</span><span class="sxs-lookup"><span data-stu-id="99de1-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="99de1-171">В первый раз создается экземпляр `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99de1-172">Конструктор класса `LargeObject`, который включает последний ключевой раздел кода, отображает сообщение и записывает идентификатор инициализации потока.</span><span class="sxs-lookup"><span data-stu-id="99de1-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="99de1-173">Выходные данные программы отображаются в конце полного листинга кода.</span><span class="sxs-lookup"><span data-stu-id="99de1-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="99de1-174">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-175">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="99de1-176">По умолчанию все открытые и защищенные члены класса <see cref="T:System.Lazy`1" /> являются потокобезопасными и могут использоваться одновременно из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="99de1-177">Эти гарантии безопасности потоков могут быть удалены дополнительно и для каждого экземпляра с помощью параметров для конструкторов типа.</span><span class="sxs-lookup"><span data-stu-id="99de1-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-178">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="99de1-179">Инициализация нового экземпляра класса <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99de1-180">Инициализация нового экземпляра класса <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="99de1-181">При неактивной инициализации используется конструктор целевого типа без параметров.</span><span class="sxs-lookup"><span data-stu-id="99de1-181">When lazy initialization occurs, the parameterless constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-182">Экземпляр, созданный с помощью этого конструктора, может использоваться одновременно из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="99de1-183">Режим потокобезопасности экземпляра <xref:System.Lazy%601>, который инициализируется с помощью этого конструктора, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99de1-184">Режим безопасности потока описывает поведение, когда несколько потоков пытаются инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99de1-185">Экземпляр <xref:System.Lazy%601>, созданный с помощью этого конструктора, не кэширует исключения.</span><span class="sxs-lookup"><span data-stu-id="99de1-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="99de1-186">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-187">В следующем примере демонстрируется использование этого конструктора.</span><span class="sxs-lookup"><span data-stu-id="99de1-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="99de1-188">Также показано использование конструктора <xref:System.Lazy%601.%23ctor%28System.Boolean%29> (указание `true` для `isThreadSafe`) и конструктора <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> (с указанием <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="99de1-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99de1-189">Чтобы переключиться на другой конструктор, просто измените конструкторы, которые заносятся в комментарий.</span><span class="sxs-lookup"><span data-stu-id="99de1-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="99de1-190">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99de1-191">Двумя ключевыми строками кода в этом примере являются создание инициализатора и фактическая инициализация.</span><span class="sxs-lookup"><span data-stu-id="99de1-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="99de1-192">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99de1-193">В примере создаются и запускаются три потока, которые блокируют объект <xref:System.Threading.ManualResetEvent>, чтобы в примере можно было освободить все потоки одновременно.</span><span class="sxs-lookup"><span data-stu-id="99de1-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="99de1-194">Метод `ThreadProc`, используемый всеми тремя потоками, вызывает свойство <xref:System.Lazy%601.Value%2A> для получения экземпляра `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99de1-195">Класс <xref:System.Lazy%601> обеспечивает блокировку, поэтому только одному потоку разрешено создавать экземпляр `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="99de1-196">В примере показано, что все остальные потоки получают один и тот же экземпляр.</span><span class="sxs-lookup"><span data-stu-id="99de1-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-197">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-198">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-199">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="99de1-200">Значение <see langword="true" />, чтобы сделать этот экземпляр доступным для одновременного использования несколькими потоками; значение <see langword="false" />, чтобы экземпляр мог использоваться только одним потоком.</span><span class="sxs-lookup"><span data-stu-id="99de1-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="99de1-201">Инициализация нового экземпляра класса <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="99de1-202">При неактивной инициализации используются конструктор целевого типа без параметров и заданный режим инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-202">When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-203">Режим потокобезопасности экземпляра <xref:System.Lazy%601>, который инициализируется с помощью этого конструктора, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>, если `isThreadSafe` `true`. в противном случае режим — <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99de1-204">Режим безопасности потока описывает поведение, когда несколько потоков пытаются инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99de1-205">Чтобы указать режим <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, используйте конструктор <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> или <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="99de1-206">Экземпляр <xref:System.Lazy%601>, созданный с помощью этого конструктора, не кэширует исключения.</span><span class="sxs-lookup"><span data-stu-id="99de1-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="99de1-207">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-208">В следующем примере демонстрируется использование этого конструктора для создания отложенного инициализатора, который не является потокобезопасным, для сценариев, в которых весь доступ к объекту с отложенной инициализацией происходит в том же потоке.</span><span class="sxs-lookup"><span data-stu-id="99de1-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="99de1-209">Также демонстрируется использование конструктора <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> (с указанием <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`.</span><span class="sxs-lookup"><span data-stu-id="99de1-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="99de1-210">Чтобы переключиться на другой конструктор, просто измените конструктор с комментарием.</span><span class="sxs-lookup"><span data-stu-id="99de1-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-211">Код, демонстрирующий использование этого конструктора в многопоточных сценариях (с указанием `true` для `isThreadSafe`), см. в примере для конструктора <xref:System.Lazy%601.%23ctor>.</span><span class="sxs-lookup"><span data-stu-id="99de1-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="99de1-212">В примере определяется класс `LargeObject`, который будет инициализирован неактивно.</span><span class="sxs-lookup"><span data-stu-id="99de1-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="99de1-213">В методе `Main` в примере создается экземпляр <xref:System.Lazy%601>, а затем приостанавливается.</span><span class="sxs-lookup"><span data-stu-id="99de1-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="99de1-214">При нажатии клавиши **Ввод** в примере выполняется доступ к свойству <xref:System.Lazy%601.Value%2A> экземпляра <xref:System.Lazy%601>, что приводит к инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="99de1-215">Конструктор класса `LargeObject` отображает сообщение консоли.</span><span class="sxs-lookup"><span data-stu-id="99de1-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-216">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-217">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-218">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="99de1-219">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</span><span class="sxs-lookup"><span data-stu-id="99de1-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="99de1-220">Инициализация нового экземпляра класса <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="99de1-221">Когда происходит отложенная инициализация, используется заданная функция инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-222">Экземпляр, созданный с помощью этого конструктора, может использоваться одновременно из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="99de1-223">Режим потокобезопасности экземпляра <xref:System.Lazy%601>, который инициализируется с помощью этого конструктора, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99de1-224">Режим безопасности потока описывает поведение, когда несколько потоков пытаются инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99de1-225">Исключения, вызываемые `valueFactory`, кэшируются.</span><span class="sxs-lookup"><span data-stu-id="99de1-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="99de1-226">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-227">В следующем примере демонстрируется использование этого конструктора для обеспечения отложенной инициализации с кэшированием исключений.</span><span class="sxs-lookup"><span data-stu-id="99de1-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="99de1-228">Также демонстрируется использование конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> (указание `true` для `isThreadSafe`) и конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> (с указанием <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="99de1-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99de1-229">Чтобы переключиться на другой конструктор, просто измените конструкторы, которые заносятся в комментарий.</span><span class="sxs-lookup"><span data-stu-id="99de1-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="99de1-230">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99de1-231">Три ключевых раздела кода иллюстрируют создание инициализатора, фактическую инициализацию и конструктор класса `LargeObject`, который демонстрирует кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="99de1-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="99de1-232">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99de1-233">В примере создаются и запускаются три потока.</span><span class="sxs-lookup"><span data-stu-id="99de1-233">The example creates and starts three threads.</span></span> <span data-ttu-id="99de1-234">Метод `ThreadProc`, используемый всеми тремя потоками, вызывает свойство <xref:System.Lazy%601.Value%2A> для получения экземпляра `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99de1-235">В конструкторе класса `LargeObject` третий ключевой раздел кода создает исключение при первом создании экземпляра `LargeObject`, но затем позволяет создать экземпляр.</span><span class="sxs-lookup"><span data-stu-id="99de1-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="99de1-236">При выполнении этого примера первый поток, пытающийся создать экземпляр `LargeObject`, завершается ошибкой, и перехватывается исключение.</span><span class="sxs-lookup"><span data-stu-id="99de1-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="99de1-237">Вы можете ожидать, что следующий поток будет успешно создавать экземпляр, но объект <xref:System.Lazy%601> кэширует исключение.</span><span class="sxs-lookup"><span data-stu-id="99de1-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="99de1-238">Из-за этого все три потока создают исключение.</span><span class="sxs-lookup"><span data-stu-id="99de1-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-239">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-240">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="99de1-241">Свойство <paramref name="valueFactory" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-242">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="99de1-243">Одно из значений перечисления, задающее потокобезопасный режим.</span><span class="sxs-lookup"><span data-stu-id="99de1-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="99de1-244">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />, который использует конструктор <paramref name="T" /> без параметров и заданный потокобезопасный режим.</span><span class="sxs-lookup"><span data-stu-id="99de1-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-245">Режим безопасности потока <xref:System.Lazy%601> экземпляра описывает поведение, когда несколько потоков пытаются инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99de1-246">Экземпляр <xref:System.Lazy%601>, созданный с помощью этого конструктора, не кэширует исключения.</span><span class="sxs-lookup"><span data-stu-id="99de1-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="99de1-247">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-248">В следующем примере демонстрируется использование этого конструктора для создания отложенного инициализатора, который позволяет нескольким потокам неактивно создавать объект.</span><span class="sxs-lookup"><span data-stu-id="99de1-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="99de1-249">Несколько потоков могут успешно создавать экземпляры, но все потоки используют экземпляр, который был создан первым.</span><span class="sxs-lookup"><span data-stu-id="99de1-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-250">Пример, демонстрирующий использование этого конструктора в сценариях с одним потоком (с указанием <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`), см. в разделе Конструктор <xref:System.Lazy%601.%23ctor%28System.Boolean%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="99de1-251">Пример, демонстрирующий использование этого конструктора для предоставления блокировки вместо конкуренции в многопоточных сценариях (с указанием <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`), см. в разделе Конструктор <xref:System.Lazy%601.%23ctor>.</span><span class="sxs-lookup"><span data-stu-id="99de1-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="99de1-252">В примере определяется класс `LargeObject`, который будет инициализирован в пассивном режиме с помощью любого из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="99de1-253">Три ключевых раздела кода иллюстрируют создание инициализатора, фактическую инициализацию, а также конструктор и метод завершения класса `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="99de1-254">В начале метода `Main` в примере создается объект <xref:System.Lazy%601>, который выполняет отложенную инициализацию `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99de1-255">В примере создаются и запускаются три потока, которые блокируют объект <xref:System.Threading.ManualResetEvent>, чтобы в примере можно было освободить все потоки одновременно.</span><span class="sxs-lookup"><span data-stu-id="99de1-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="99de1-256">В методе `ThreadProc`, который используется всеми тремя потоками, вызов свойства <xref:System.Lazy%601.Value%2A> создает экземпляр `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99de1-257">Поскольку конструктор для экземпляра <xref:System.Lazy%601> указан <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, всем трем потокам разрешено создавать экземпляры `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="99de1-258">В этом примере показано, как отобразить сообщения консоли в конструкторе и в методе завершения класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="99de1-259">Однако объект <xref:System.Lazy%601> гарантирует, что все потоки используют только один экземпляр.</span><span class="sxs-lookup"><span data-stu-id="99de1-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="99de1-260">Выходные данные в примере показывают, что все три потока используют один и тот же экземпляр, а также показывают, что другие экземпляры могут быть освобождены при сборке мусора.</span><span class="sxs-lookup"><span data-stu-id="99de1-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-261">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-262">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99de1-263">Параметр <paramref name="mode" /> содержит недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="99de1-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-264">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="99de1-265">Предварительно инициализированное значение для использования.</span><span class="sxs-lookup"><span data-stu-id="99de1-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="99de1-266">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />, использующий предварительно инициализированное заданное значение.</span><span class="sxs-lookup"><span data-stu-id="99de1-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="99de1-267">Экземпляр, созданный с помощью этого конструктора, может использоваться несколькими потоками одновременно.</span><span class="sxs-lookup"><span data-stu-id="99de1-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="99de1-268">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</span><span class="sxs-lookup"><span data-stu-id="99de1-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="99de1-269">Значение <see langword="true" />, чтобы сделать этот экземпляр доступным для одновременного использования несколькими потоками; значение <see langword="false" />, чтобы этот экземпляр мог использоваться только одним потоком в каждый момент времени.</span><span class="sxs-lookup"><span data-stu-id="99de1-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="99de1-270">Инициализация нового экземпляра класса <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="99de1-271">Когда происходит отложенная инициализация, используются заданные функция инициализации и режим инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-272">Режим потокобезопасности экземпляра <xref:System.Lazy%601>, который инициализируется с помощью этого конструктора, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>, если `isThreadSafe` `true`. в противном случае режим — <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99de1-273">Режим безопасности потока описывает поведение, когда несколько потоков пытаются инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99de1-274">Чтобы указать режим <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, используйте конструктор <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> или <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="99de1-275">Исключения, вызываемые `valueFactory`, кэшируются.</span><span class="sxs-lookup"><span data-stu-id="99de1-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="99de1-276">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-277">В следующем примере демонстрируется использование этого конструктора для обеспечения отложенной инициализации с кэшированием исключений в сценарии с одним потоком.</span><span class="sxs-lookup"><span data-stu-id="99de1-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="99de1-278">Также демонстрируется использование конструктора <xref:System.Lazy%601.%23ctor%2A> (с указанием <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`).</span><span class="sxs-lookup"><span data-stu-id="99de1-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99de1-279">Чтобы переключиться на этот конструктор, просто измените конструктор с комментарием.</span><span class="sxs-lookup"><span data-stu-id="99de1-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-280">Код, демонстрирующий использование этого конструктора в многопоточных сценариях (с указанием `true` для `isThreadSafe`), см. в примере для конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="99de1-281">В этом примере определяется класс `LargeObject`, для которого будет выполняться отложенная инициализация одним из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99de1-282">Три ключевых раздела кода иллюстрируют создание инициализатора, фактическую инициализацию и конструктор класса `LargeObject`, который демонстрирует кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="99de1-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="99de1-283">В начале метода `Main` в этом примере создается потокобезопасный отложенный инициализатор для класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99de1-284">В вызове конструктора параметр `isThreadSafe` `false`, поэтому <xref:System.Lazy%601> не является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="99de1-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="99de1-285">Так как он не является потокобезопасным, пример вызывает свойство <xref:System.Lazy%601.Value%2A> три раза в одном потоке:</span><span class="sxs-lookup"><span data-stu-id="99de1-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99de1-286">В конструкторе класса `LargeObject` третий ключевой раздел кода создает исключение при первом создании экземпляра `LargeObject`, но затем позволяет создать экземпляр.</span><span class="sxs-lookup"><span data-stu-id="99de1-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="99de1-287">При выполнении примера первая попытка создания экземпляра `LargeObject` завершается ошибкой, а исключение перехватывается.</span><span class="sxs-lookup"><span data-stu-id="99de1-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="99de1-288">Можно ожидать, что следующая попытки будет выполнена успешно, но объект <xref:System.Lazy%601> кэширует исключение.</span><span class="sxs-lookup"><span data-stu-id="99de1-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="99de1-289">Из-за этого все три попытки вызовут исключение.</span><span class="sxs-lookup"><span data-stu-id="99de1-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-290">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-291">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="99de1-292">Свойство <paramref name="valueFactory" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-293">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="99de1-294">Делегат, вызываемый для создания значения с отложенной инициализацией при необходимости.</span><span class="sxs-lookup"><span data-stu-id="99de1-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="99de1-295">Одно из значений перечисления, задающее потокобезопасный режим.</span><span class="sxs-lookup"><span data-stu-id="99de1-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="99de1-296">Инициализирует новый экземпляр класса <see cref="T:System.Lazy`1" />, который использует заданную функцию инициализации и потокобезопасный режим.</span><span class="sxs-lookup"><span data-stu-id="99de1-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-297">Режим безопасности потока <xref:System.Lazy%601> экземпляра описывает поведение, когда несколько потоков пытаются инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99de1-298">Исключения, вызываемые `valueFactory`, кэшируются, если только `mode` не <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99de1-299">Дополнительные сведения см. в описании класса <xref:System.Lazy%601> или перечисления <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99de1-300">В следующем примере демонстрируется использование этого конструктора для создания отложенного инициализатора, который позволяет нескольким потокам неактивно создавать объект.</span><span class="sxs-lookup"><span data-stu-id="99de1-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="99de1-301">Несколько потоков могут успешно создавать экземпляры, но все потоки используют экземпляр, который был создан первым.</span><span class="sxs-lookup"><span data-stu-id="99de1-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="99de1-302">Кроме того, в примере показано, что исключения никогда не кэшируются при указании <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, даже если инициализация выполняется функцией, а не с помощью конструктора без параметров типа, созданного с отложенным созданием.</span><span class="sxs-lookup"><span data-stu-id="99de1-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the parameterless constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-303">Пример, демонстрирующий использование этого конструктора в сценариях с одним потоком (с указанием <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> для `mode`), см. в разделе Конструктор <xref:System.Lazy%601.%23ctor%28System.Boolean%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="99de1-304">Пример, демонстрирующий использование этого конструктора для предоставления блокировки вместо конкуренции в многопоточных сценариях (с указанием <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> для `mode`), см. в разделе Конструктор <xref:System.Lazy%601.%23ctor>.</span><span class="sxs-lookup"><span data-stu-id="99de1-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="99de1-305">В примере определяется класс `LargeObject`, который будет инициализирован в пассивном режиме с помощью любого из нескольких потоков.</span><span class="sxs-lookup"><span data-stu-id="99de1-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="99de1-306">Четыре ключевых раздела кода иллюстрируют создание инициализатора, фактическую инициализацию, функцию инициализации, а также конструктор и метод завершения класса `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="99de1-307">В начале метода `Main` в примере создается объект <xref:System.Lazy%601>, который выполняет отложенную инициализацию `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99de1-308">Для выполнения инициализации отложенный инициализатор использует функцию.</span><span class="sxs-lookup"><span data-stu-id="99de1-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="99de1-309">В этом случае требуется функция, поскольку отсутствует конструктор без параметров для класса `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-309">In this case, a function is required because there is no parameterless constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="99de1-310">В примере создаются и запускаются три потока, которые блокируют объект <xref:System.Threading.ManualResetEvent>, чтобы в примере можно было освободить все потоки одновременно.</span><span class="sxs-lookup"><span data-stu-id="99de1-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="99de1-311">В методе `ThreadProc`, который используется всеми тремя потоками, вызов свойства <xref:System.Lazy%601.Value%2A> создает экземпляр `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99de1-312">В третьем разделе кода вызывается функция отложенной инициализации для создания экземпляра `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="99de1-313">Функция создает исключение при первом вызове:</span><span class="sxs-lookup"><span data-stu-id="99de1-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="99de1-314">При любом другом параметре <xref:System.Threading.LazyThreadSafetyMode> будет кэшироваться необработанное исключение в функции инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="99de1-315">Однако <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> подавляет кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="99de1-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="99de1-316">В выходных данных примера показано, что последующая попытка инициализации объекта завершается с ошибкой.</span><span class="sxs-lookup"><span data-stu-id="99de1-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-317">Сообщение об исключении обычно появляется после сообщений о том, что другие потоки успешно инициализируют объект.</span><span class="sxs-lookup"><span data-stu-id="99de1-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="99de1-318">Это обусловлено задержкой, вызванной созданием и перехватом исключения.</span><span class="sxs-lookup"><span data-stu-id="99de1-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="99de1-319">Поскольку конструктор для экземпляра <xref:System.Lazy%601> указан <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, всем трем потокам разрешено создавать экземпляры `LargeObject`.</span><span class="sxs-lookup"><span data-stu-id="99de1-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="99de1-320">В этом примере показано, как отобразить сообщения консоли в конструкторе и в методе завершения класса `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99de1-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="99de1-321">Объект <xref:System.Lazy%601> гарантирует, что все потоки используют только один экземпляр (за исключением потока, в котором функция инициализации создает исключение).</span><span class="sxs-lookup"><span data-stu-id="99de1-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="99de1-322">Это показано в выходных данных примера.</span><span class="sxs-lookup"><span data-stu-id="99de1-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99de1-323">Для простоты в этом примере используется глобальный экземпляр класса <xref:System.Lazy%601>, а все методы объявлены как `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99de1-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99de1-324">Это не является обязательными требованиями для использования отложенной инициализации.</span><span class="sxs-lookup"><span data-stu-id="99de1-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99de1-325">Параметр <paramref name="mode" /> содержит недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="99de1-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="99de1-326">Свойство <paramref name="valueFactory" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-327">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99de1-328">Получает значение, которое показывает, создано ли значение для этого экземпляра <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="99de1-329">Значение <see langword="true" />, если значение создано для этого экземпляра <see cref="T:System.Lazy`1" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-330">Если отложенная инициализация выполняется для экземпляра <xref:System.Lazy%601>, это может привести к созданию либо значения, либо вызываемого исключения.</span><span class="sxs-lookup"><span data-stu-id="99de1-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="99de1-331">При возникновении исключения последующее поведение экземпляра <xref:System.Lazy%601> зависит от того, действует ли кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="99de1-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="99de1-332">Если экземпляр <xref:System.Lazy%601> был создан с помощью конструктора, не определяющего функцию инициализации, то кэширование исключений не действует.</span><span class="sxs-lookup"><span data-stu-id="99de1-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="99de1-333">Последующая попытка инициализации <xref:System.Lazy%601> может быть успешной, и после успешной инициализации свойство <xref:System.Lazy%601.IsValueCreated%2A> возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="99de1-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="99de1-334">Если <xref:System.Lazy%601> экземпляр был создан с помощью функции инициализации (заданной параметром `valueFactory` конструктора <xref:System.Lazy%601>), то кэширование исключений управляется режимом потокобезопасности.</span><span class="sxs-lookup"><span data-stu-id="99de1-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="99de1-335">Если режим — <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> или <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, то второй шанс инициализировать экземпляр <xref:System.Lazy%601> не существует.</span><span class="sxs-lookup"><span data-stu-id="99de1-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99de1-336">Если исключение возникает и не обработано в функции инициализации, это исключение кэшируется и вызывается повторно при последующих обращениях к свойству <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99de1-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="99de1-337">При возникновении исключения значение не создается, поэтому в таких случаях <xref:System.Lazy%601.IsValueCreated%2A> возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="99de1-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="99de1-338">Если режим <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, то первый поток, который завершил выполнение функции инициализации (или конструктора без параметров), создает значение для экземпляра <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the parameterless constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99de1-339">Если функция инициализации создает исключение в одном потоке, другие потоки по-прежнему могут пытаться инициализировать экземпляр <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="99de1-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99de1-340">Пока значение не будет создано, свойство <xref:System.Lazy%601.IsValueCreated%2A> возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="99de1-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-341">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99de1-342">Создает и возвращает строковое представление свойства <see cref="P:System.Lazy`1.Value" /> для данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="99de1-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="99de1-343">Результат вызова метода <see cref="M:System.Object.ToString" /> для свойства <see cref="P:System.Lazy`1.Value" /> данного экземпляра, если значение создано (то есть если свойство <see cref="P:System.Lazy`1.IsValueCreated" /> возвращает <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="99de1-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="99de1-344">В противном случае строка, указывающая, что значение не создано.</span><span class="sxs-lookup"><span data-stu-id="99de1-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-345">Вызов этого метода не вызывает инициализацию.</span><span class="sxs-lookup"><span data-stu-id="99de1-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="99de1-346">Свойство <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> может быть `null` после отложенной инициализации, если метод фабрики, указанный для параметра `valueFactory` <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>или конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>, возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="99de1-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="99de1-347">Значение свойства <see cref="P:System.Lazy`1.Value" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99de1-348">Получает значение с отложенной инициализацией текущего экземпляра <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="99de1-349">Значение с отложенной инициализацией текущего экземпляра <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="99de1-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99de1-350">Если свойство <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> `false`, то доступ к свойству <xref:System.Lazy%601.Value%2A> вызывает принудительную инициализацию.</span><span class="sxs-lookup"><span data-stu-id="99de1-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="99de1-351">В дополнение к перечисленным исключениям свойство <xref:System.Lazy%601.Value%2A> может вызывать любое необработанное исключение, выдаваемое методом фабрики, который был передан в параметр `valueFactory` конструктора <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>или <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>.</span><span class="sxs-lookup"><span data-stu-id="99de1-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="99de1-352">Экземпляр <see cref="T:System.Lazy`1" /> инициализируется для использования конструктора без параметров, имеющего тип с отложенной инициализацией, а разрешения для доступа к конструктору отсутствуют.</span><span class="sxs-lookup"><span data-stu-id="99de1-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="99de1-353">Экземпляр <see cref="T:System.Lazy`1" /> инициализируется для использования конструктора без параметров, имеющего тип с отложенной инициализацией, и данный тип не имеет открытого конструктора без параметров.</span><span class="sxs-lookup"><span data-stu-id="99de1-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="99de1-354">Функция инициализации пытается получить доступ к <see cref="P:System.Lazy`1.Value" /> в данном экземпляре.</span><span class="sxs-lookup"><span data-stu-id="99de1-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="99de1-355">Отложенная инициализация</span><span class="sxs-lookup"><span data-stu-id="99de1-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
