<Type Name="Tuple&lt;T1,T2,T3,T4,T5&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2dd4e96e97c7097b2b0338379bf51e671f4655a" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172119" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`5&lt;T1, T2, T3, T4, T5&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`5" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">Тип первого компонента кортежа.</typeparam>
    <typeparam name="T2">Тип второго компонента кортежа.</typeparam>
    <typeparam name="T3">Тип третьего компонента кортежа.</typeparam>
    <typeparam name="T4">Тип четвертого компонента кортежа.</typeparam>
    <typeparam name="T5">Тип пятого компонента кортежа.</typeparam>
    <summary>Представляет кортеж из пяти компонентов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кортеж — это структура данных, которая имеет определенное число и последовательность значений. Класс <xref:System.Tuple%605> представляет пять кортежей, или пятиэлементные, который представляет собой кортеж из пяти компонентов.  
  
 Можно создать экземпляр объекта <xref:System.Tuple%605>, вызвав конструктор <xref:System.Tuple%605.%23ctor%2A> или статический метод <xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType>. Значения компонентов кортежа можно получить с помощью свойств экземпляра <xref:System.Tuple%605.Item1%2A>, <xref:System.Tuple%605.Item2%2A>, <xref:System.Tuple%605.Item3%2A>, <xref:System.Tuple%605.Item4%2A>и <xref:System.Tuple%605.Item5%2A>.  
  
 Кортежи обычно используются четырьмя разными способами:  
  
-   Для представления одного набора данных. Например, кортеж может представлять запись базы данных, а ее компоненты могут представлять отдельные поля записи.  
  
-   Для обеспечения простого доступа к набору данных и его манипуляции. В следующем примере определяется массив объектов <xref:System.Tuple%605>, которые содержат имена выполняемых резервных копий в американском футболе, число игр, в которых они воспроизводятся, а также количество выполнений, общий объем полученного объема и таучдовнс в течение этих игр. Массив передается методу `ComputeStatistics`, который вычисляет каждое выполняемое количество выполнений каждой игры, среднее число килограммов на каждую игру, средний объем для каждого выполнения и среднее количество таучдовнс на одну попытку.  
  
     [!code-csharp[System.Tuple\`5.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`5.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.class/vb/example1.vb#1)]  
  
-   Чтобы вернуть несколько значений из метода без использования параметров `out` (в C#) или `ByRef`ных параметров (в Visual Basic). Например, в предыдущем примере возвращается вычисленная статистика вместе с именем игрока в массиве объектов <xref:System.Tuple%605>.  
  
-   Передача нескольких значений в метод через один параметр. Например, метод <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> имеет один параметр, который позволяет указать одно значение для метода, который поток выполняет при запуске. Если в качестве аргумента метода указать <xref:System.Tuple%605> объект, можно указать подпрограммы запуска потока с пятью элементами данных.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; (item1, item2, item3, item4, item5)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
      </Parameters>
      <Docs>
        <param name="item1">Значение первого компонента кортежа.</param>
        <param name="item2">Значение второго компонента кортежа.</param>
        <param name="item3">Значение третьего компонента кортежа.</param>
        <param name="item4">Значение четвертого компонента кортежа.</param>
        <param name="item5">Значение пятого компонента кортежа.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Tuple`5" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также использовать статический метод <xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType> для создания экземпляра объекта с пятью кортежами без явного указания типов его компонентов. В следующем примере используется метод <xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType> для создания экземпляра 5-кортежа, первый компонент которого имеет тип <xref:System.String> и остальные четыре компонента имеют тип <xref:System.Int32>.  
  
 [!code-csharp[System.Tuple.Create#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#9)]
 [!code-vb[System.Tuple.Create#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#9)]  
  
 Это эквивалентно следующему вызову конструктора <xref:System.Tuple%605.%23ctor%2A> класса.  
  
 [!code-csharp[System.Tuple.Create#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#10)]
 [!code-vb[System.Tuple.Create#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, сравниваемый с данным экземпляром.</param>
        <summary>Возвращает значение, показывающее, равен ли текущий объект <see cref="T:System.Tuple`5" /> указанному объекту.</summary>
        <returns>Значение <see langword="true" />, если текущий экземпляр равен указанному объекту; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `obj` считается равным текущему экземпляру при следующих условиях.  
  
-   Это объект <xref:System.Tuple%605>.  
  
-   Его пять компонентов имеют те же типы, что и текущий экземпляр.  
  
-   Его пять компонентов равны значениям текущего экземпляра. Равенство определяется компаратором равенства объектов по умолчанию для каждого компонента.  
  
   
  
## Examples  
 В следующем примере определяется массив объектов из пяти кортежей, содержащих данные о температуре пациентов в двух тестовых группах. Первый компонент массива предоставляет номер тестовой группы, а второй через пятый компонент предоставляет температуру пациента через Почасовые интервалы. Метод <xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=nameWithType> вызывается для сравнения каждого объекта <xref:System.Tuple%605> с любым другим объектом <xref:System.Tuple%605>. Выходные данные показывают, что метод <xref:System.Tuple%605.Equals%2A> возвращает `true` только в том случае, если все пять компонентов <xref:System.Tuple%605>ных объектов имеют равные значения.  
  
 [!code-csharp[System.Tuple\`5.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`5.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код для текущего объекта <see cref="T:System.Tuple`5" />.</summary>
        <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение первого компонента текущего объекта <see cref="T:System.Tuple`5" />.</summary>
        <value>Значение первого компонента текущего объекта <see cref="T:System.Tuple`5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип компонента <xref:System.Tuple%605.Item1%2A> можно динамически определить одним из двух способов:  
  
-   Путем вызова метода `GetType` для значения, возвращаемого свойством <xref:System.Tuple%605.Item1%2A>.  
  
-   Путем получения объекта <xref:System.Type>, представляющего объект <xref:System.Tuple%605>, и получения первого элемента из массива, возвращаемого его методом <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере определяется массив объектов <xref:System.Tuple%605>, компоненты которых содержат имя состояния в США, его заполнение в 1990 и 2000, изменение его населения в течение 10 лет, а также процентное изменение его совокупности. Затем он выполняет итерацию по массиву и отображает значение каждого компонента в кортеже.  
  
 [!code-csharp[System.Tuple\`5.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`5.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение второго компонента текущего объекта <see cref="T:System.Tuple`5" />.</summary>
        <value>Значение второго компонента текущего объекта <see cref="T:System.Tuple`5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип компонента <xref:System.Tuple%604.Item2%2A> можно динамически определить одним из двух способов:  
  
-   Путем вызова метода `GetType` для значения, возвращаемого свойством <xref:System.Tuple%604.Item2%2A>.  
  
-   Путем получения объекта <xref:System.Type>, представляющего объект <xref:System.Tuple%604>, и получения второго элемента из массива, возвращенного его методом <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере определяется массив объектов <xref:System.Tuple%605>, компоненты которых содержат имя состояния в США, его заполнение в 1990 и 2000, изменение его населения в течение 10 лет, а также процентное изменение его совокупности. Затем он выполняет итерацию по массиву и отображает значение каждого компонента в кортеже.  
  
 [!code-csharp[System.Tuple\`5.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`5.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение третьего компонента текущего объекта <see cref="T:System.Tuple`5" />.</summary>
        <value>Значение третьего компонента текущего объекта <see cref="T:System.Tuple`5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип компонента <xref:System.Tuple%604.Item2%2A> можно динамически определить одним из двух способов:  
  
-   Путем вызова метода `GetType` для значения, возвращаемого свойством <xref:System.Tuple%604.Item2%2A>.  
  
-   Путем получения объекта <xref:System.Type>, представляющего объект <xref:System.Tuple%604>, и получения второго элемента из массива, возвращенного его методом <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере определяется массив объектов <xref:System.Tuple%605>, компоненты которых содержат имя состояния в США, его заполнение в 1990 и 2000, изменение его населения в течение 10 лет, а также процентное изменение его совокупности. Затем он выполняет итерацию по массиву и отображает значение каждого компонента в кортеже.  
  
 [!code-csharp[System.Tuple\`5.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`5.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение четвертого компонента текущего объекта <see cref="T:System.Tuple`5" />.</summary>
        <value>Значение четвертого компонента текущего объекта <see cref="T:System.Tuple`5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип компонента <xref:System.Tuple%604.Item2%2A> можно динамически определить одним из двух способов:  
  
-   Путем вызова метода `GetType` для значения, возвращаемого свойством <xref:System.Tuple%604.Item2%2A>.  
  
-   Путем получения объекта <xref:System.Type>, представляющего объект <xref:System.Tuple%604>, и получения второго элемента из массива, возвращенного его методом <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере определяется массив объектов <xref:System.Tuple%605>, компоненты которых содержат имя состояния в США, его заполнение в 1990 и 2000, изменение его населения в течение 10 лет, а также процентное изменение его совокупности. Затем он выполняет итерацию по массиву и отображает значение каждого компонента в кортеже.  
  
 [!code-csharp[System.Tuple\`5.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`5.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение пятого компонента текущего объекта <see cref="T:System.Tuple`5" />.</summary>
        <value>Значение пятого компонента текущего объекта <see cref="T:System.Tuple`5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип компонента <xref:System.Tuple%604.Item2%2A> можно динамически определить одним из двух способов:  
  
-   Путем вызова метода `GetType` для значения, возвращаемого свойством <xref:System.Tuple%604.Item2%2A>.  
  
-   Путем получения объекта <xref:System.Type>, представляющего объект <xref:System.Tuple%604>, и получения второго элемента из массива, возвращенного его методом <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере определяется массив объектов <xref:System.Tuple%605>, компоненты которых содержат имя штата в Соединенных датах, его заполнение в 1990 и 2000, изменение его населения в течение 10 лет, а также процентное изменение его совокупности. Затем он выполняет итерацию по массиву и отображает значение каждого компонента в кортеже.  
  
 [!code-csharp[System.Tuple\`5.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`5.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Объект для сравнения с текущим экземпляром.</param>
        <param name="comparer">Объект, предоставляющий настраиваемые правила для сравнения.</param>
        <summary>Сравнивает текущий объект <see cref="T:System.Tuple`5" /> с указанным объектом, используя заданный компаратор, и возвращает целое число, которое показывает положение текущего объекта относительно указанного объекта в порядке сортировки: перед объектом, после него или в той же позиции.</summary>
        <returns>Целое число со знаком, определяющее относительное положение экземпляра и параметра <paramref name="other" /> в порядке сортировки, как показано в следующей таблице.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Описание 
 </description></listheader><item><term> Отрицательное целое число 
 </term><description> Данный экземпляр предшествует параметру <paramref name="other" />.  
  
 </description></item><item><term> Нуль 
 </term><description> У этого экземпляра та же позиция в порядке сортировки, что и у <paramref name="other" />.  
  
 </description></item><item><term> Положительное целое число 
 </term><description> Данный экземпляр стоит после параметра <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Tuple%605> приведен к типу интерфейса <xref:System.Collections.IStructuralComparable>.  
  
 Несмотря на то, что этот метод можно вызывать напрямую, он чаще всего вызывается методами сортировки коллекций, которые включают <xref:System.Collections.IComparer> параметры для упорядочивания элементов коллекции. Например, он вызывается методом <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> и методом <xref:System.Collections.SortedList.Add%2A> объекта <xref:System.Collections.SortedList>, который создается с помощью конструктора <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType>.  
  
> [!CAUTION]
>  Метод <xref:System.Tuple%605.System%23Collections%23IStructuralComparable%23CompareTo%2A> предназначен для использования в операциях сортировки. Его не следует использовать, если основной целью сравнения является определение того, равны ли два объекта. Чтобы определить, равны ли два объекта, вызовите метод <xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29>.  
  
   
  
## Examples  
 В следующем примере создается массив объектов <xref:System.Tuple%605>, содержащих статистические данные карьеры для выполнения резервного копирования в американском футболе. Компоненты из пяти кортежей состоят из названия игрока, числа игр, в которых он воспроизводился, числа переданных или попыток, общего количества полученных водопоказатели и количества таучдовнс. В примере отображаются компоненты каждого кортежа в массиве без сортировки, выполняется сортировка массива, а затем вызывается <xref:System.Tuple%605.ToString%2A> для отображения каждого кортежа в отсортированном порядке. Чтобы отсортировать массив, в примере определяется универсальный `YardsGained` класс, который реализует интерфейс <xref:System.Collections.IComparer> и сортирует объекты <xref:System.Tuple%605> в порядке убывания по значению четвертого компонента (полученного в метрах), а не по первому компоненту. Обратите внимание, что в примере не вызывается метод <xref:System.Tuple%605.System%23Collections%23IStructuralComparable%23CompareTo%2A> напрямую. Этот метод вызывается неявно методом <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> для каждого элемента в массиве.  
  
 [!code-csharp[System.Tuple\`5.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`5.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="other" /> не является объектом <see cref="T:System.Tuple`5" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Объект, сравниваемый с данным экземпляром.</param>
        <param name="comparer">Объект, который определяет метод, используемый для вычисления равенства двух объектов.</param>
        <summary>Возвращает значение, показывающее, равен ли текущий атрибут <see cref="T:System.Tuple`5" /> указанному объекту при использовании заданного метода сравнения.</summary>
        <returns>Значение <see langword="true" />, если текущий экземпляр равен указанному объекту; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Tuple%605> приведен к типу интерфейса <xref:System.Collections.IStructuralEquatable>.  
  
 Реализация <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> вызывается только в том случае, если `other` не `null`, и если ее можно успешно привести ( C#в) или преобразовать (в Visual Basic) в объект <xref:System.Tuple%605>, компоненты которого имеют те же типы, что и текущий экземпляр. Метод <xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> сначала передает <xref:System.Tuple%605.Item1%2A> значения <xref:System.Tuple%605> объектов в сравнении с реализацией <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>. Если этот вызов метода возвращает `true`, метод вызывается снова и ему передаются <xref:System.Tuple%605.Item2%2A> значения двух <xref:System.Tuple%605>ых объектов. Это происходит до тех пор, пока вызов метода не возвратит `false` при сравнении определенной пары `Item` значений или в методе передаются два значения <xref:System.Tuple%605.Item5%2A>.  
  
   
  
## Examples  
 В следующем примере определяется класс `DoubleComparer` , реализующий интерфейс <xref:System.Collections.IEqualityComparer> . В примере создается два <xref:System.Tuple%605> объектов с помощью генератора случайных чисел для заполнения их второй через пятый компонент, приведен первый экземпляр к интерфейсу <xref:System.Collections.IStructuralEquatable>, а затем использует объект `DoubleComparer` для проверки двух объектов <xref:System.Tuple%605> для приблизительного равенства.  
  
 [!code-csharp[System.Tuple\`5.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`5.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Объект, метод <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> которого вычисляет хэш-код текущего объекта <see cref="T:System.Tuple`5" />.</param>
        <summary>Вычисляет хэш-код для текущего объекта <see cref="T:System.Tuple`5" />, используя заданный метод вычисления.</summary>
        <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Tuple%605> приведен к типу интерфейса <xref:System.Collections.IStructuralEquatable>.  
  
 Метод просто заключает вызов к реализации <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> объекта `comparer`.  
  
 Алгоритм, используемый для вычисления хэш-кода, должен возвращать один и тот же хэш-код для двух <xref:System.Tuple%605> объектов, которые считаются равными.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для сравнения с текущим экземпляром.</param>
        <summary>Сравнивает текущий объект <see cref="T:System.Tuple`5" /> с заданным объектом и возвращает целое число, указывающее, находится ли текущий объект в той же позиции, что и указанный объект, после него или перед ним в порядке сортировки.</summary>
        <returns>Целое число со знаком, определяющее относительное положение экземпляра и параметра <paramref name="obj" /> в порядке сортировки, как показано в следующей таблице.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Описание 
 </description></listheader><item><term> Отрицательное целое число 
 </term><description> Данный экземпляр предшествует параметру <paramref name="obj" />.  
  
 </description></item><item><term> Нуль 
 </term><description> У этого экземпляра та же позиция в порядке сортировки, что и у <paramref name="obj" />.  
  
 </description></item><item><term> Положительное целое число 
 </term><description> Данный экземпляр стоит после параметра <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Tuple%605> приведен к типу интерфейса <xref:System.IComparable>.  
  
 Этот метод обеспечивает реализацию <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> для класса <xref:System.Tuple%605>. Несмотря на то, что метод можно вызывать напрямую, он чаще всего вызывается перегрузками методов сортировки коллекции по умолчанию, таких как <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> и <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, для упорядочивания элементов коллекции.  
  
> [!CAUTION]
>  Метод <xref:System.Tuple%605.System%23IComparable%23CompareTo%2A> предназначен для использования в операциях сортировки. Его не следует использовать, если основной целью сравнения является определение того, равны ли два объекта. Чтобы определить, равны ли два объекта, вызовите метод <xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=nameWithType>.  
  
 Метод <xref:System.Tuple%605.System%23IComparable%23CompareTo%28System.Object%29> использует компаратор объектов по умолчанию для сравнения каждого компонента.  
  
   
  
## Examples  
 В следующем примере создается массив объектов <xref:System.Tuple%605>, содержащих статистику карьеры для выполнения резервного копирования в американском футболе. Пять компонентов состоят из названия игрока, числа игр, в которых он воспроизводился, числа переданных или попыток, общего количества полученного объема и количества таучдовнс. В примере отображаются компоненты каждого кортежа в массиве без сортировки, выполняется сортировка массива, а затем вызывается <xref:System.Tuple%605.ToString%2A> для отображения каждого кортежа в отсортированном порядке. Выходные данные показывают, что массив был отсортирован по имени, который является первым компонентом. Обратите внимание, что в примере не вызывается метод <xref:System.Tuple%605.System%23IComparable%23CompareTo%2A> напрямую. Этот метод вызывается неявно методом <xref:System.Array.Sort%28System.Array%29> для каждого элемента в массиве.  
  
 [!code-csharp[System.Tuple\`5.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`5.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> не является объектом <see cref="T:System.Tuple`5" />.</exception>
        <altmember cref="M:System.Tuple`5.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index">Индекс указанного элемента <see langword="Tuple" />. Значение <paramref name="index" /> может быть в диапазоне от 0 до 4.</param>
        <summary>Получает значение указанного элемента <see langword="Tuple" />.</summary>
        <value>Значение элемента <see langword="Tuple" /> в заданной позиции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Tuple%605.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> является явной реализацией интерфейса. Чтобы вызвать его, необходимо привести или преобразовать объект <xref:System.Tuple%605> в объект интерфейса <xref:System.Runtime.CompilerServices.ITuple>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">Параметр <paramref name="index" /> имеет значение меньше 0 или больше 4.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество элементов в <see langword="Tuple" />.</summary>
        <value>5, количество элементов в объекте <see cref="T:System.Tuple`5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.Tuple%605.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> является явной реализацией интерфейса. Чтобы вызвать его, необходимо привести или преобразовать объект <xref:System.Tuple%605> в объект интерфейса <xref:System.Runtime.CompilerServices.ITuple>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`5.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает строковое представление значения этого экземпляра <see cref="T:System.Tuple`5" />.</summary>
        <returns>Строковое представление конкретного объекта <see cref="T:System.Tuple`5" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка, возвращаемая этим методом, принимает форму (*Item1*, *Item2*, *Item3*, *Item4*, `Item5`), где *Item1*, *Item2*, *Item3*, *Item4*и `Item5` представляют значения свойств <xref:System.Tuple%605.Item1%2A>, <xref:System.Tuple%605.Item2%2A>, <xref:System.Tuple%605.Item3%2A>, <xref:System.Tuple%605.Item4%2A>и <xref:System.Tuple%605.Item5%2A> соответственно. Если какое-либо из значений свойств имеет значение `null`, оно представляется как <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере показан метод <xref:System.Tuple%605.ToString%2A>. Он отображает массив объектов из пяти кортежей, содержащих имя состояния в США, его заполнение в 1990 и 2000, изменение его населения в течение 10 лет и годовую ставку изменения совокупности.  
  
 [!code-csharp[System.Tuple\`5.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`5.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`5.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`5.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
