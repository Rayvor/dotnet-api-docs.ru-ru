<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e446f51bdbd0e5e4d0ecd465daedf974a1513386" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420382" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ae19a-101">Определяет метод, поддерживающий нестандартное форматирование значения объекта.</span><span class="sxs-lookup"><span data-stu-id="ae19a-101">Defines a method that supports custom formatting of the value of an object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae19a-102">Интерфейс включает один метод, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. <xref:System.ICustomFormatter></span><span class="sxs-lookup"><span data-stu-id="ae19a-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ae19a-103">Если этот интерфейс реализуется с помощью ссылки или типа значения, <xref:System.ICustomFormatter.Format%2A> метод возвращает строковое представление значения объекта в формате представления.</span><span class="sxs-lookup"><span data-stu-id="ae19a-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="ae19a-104">Как правило, <xref:System.ICustomFormatter> интерфейс реализуется <xref:System.IFormatProvider> с помощью интерфейса для настройки поведения двух .NET Framework методов <xref:System.IFormatProvider> форматирования составных строк, включающих параметр.</span><span class="sxs-lookup"><span data-stu-id="ae19a-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="ae19a-105">В <xref:System.ICustomFormatter> частности, интерфейс может предоставлять пользовательское форматирование значения объекта, передаваемого <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> методам и <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="ae19a-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="ae19a-106">Для предоставления пользовательского представления значения объекта необходимо выполнить следующие действия.</span><span class="sxs-lookup"><span data-stu-id="ae19a-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="ae19a-107">Определите класс, реализующий <xref:System.ICustomFormatter> интерфейс, и его единственный член <xref:System.ICustomFormatter.Format%2A> — метод.</span><span class="sxs-lookup"><span data-stu-id="ae19a-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="ae19a-108">Определите класс, реализующий <xref:System.IFormatProvider> интерфейс, и его единственный член <xref:System.IFormatProvider.GetFormat%2A> — метод.</span><span class="sxs-lookup"><span data-stu-id="ae19a-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="ae19a-109">Метод возвращает экземпляр <xref:System.ICustomFormatter>реализации. <xref:System.IFormatProvider.GetFormat%2A></span><span class="sxs-lookup"><span data-stu-id="ae19a-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="ae19a-110">Часто один класс реализует <xref:System.ICustomFormatter> и, и. <xref:System.IFormatProvider></span><span class="sxs-lookup"><span data-stu-id="ae19a-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="ae19a-111">В этом случае `GetFormat` реализация класса просто возвращает экземпляр самого себя.</span><span class="sxs-lookup"><span data-stu-id="ae19a-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="ae19a-112">Передайте `provider` <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> реализацию в качестве аргумента метода или сопоставимого метода. <xref:System.IFormatProvider></span><span class="sxs-lookup"><span data-stu-id="ae19a-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="ae19a-113">Затем метод .NET Framework будет использовать пользовательское форматирование вместо собственного.</span><span class="sxs-lookup"><span data-stu-id="ae19a-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae19a-114">В следующем примере реализуется <xref:System.ICustomFormatter> , чтобы разрешить двоичное, восьмеричное и шестнадцатеричное форматирование целочисленных значений.</span><span class="sxs-lookup"><span data-stu-id="ae19a-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="ae19a-115">В этом примере один класс `IBinaryFormatter`() <xref:System.ICustomFormatter> реализует и <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="ae19a-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="ae19a-116">Его <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> метод определяет, `formatType` представляет <xref:System.ICustomFormatter> ли параметр тип.</span><span class="sxs-lookup"><span data-stu-id="ae19a-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="ae19a-117">Если это так, `BinaryFormatter` возвращает экземпляр самого себя; в противном `null`случае возвращается значение.</span><span class="sxs-lookup"><span data-stu-id="ae19a-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="ae19a-118">Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализация определяет, является ли параметр format одной из трех поддерживаемых строк формата ("B" для двоичного, "O" для восьмеричного, а "H" — шестнадцатеричного) и `arg` соответствующим образом форматирует параметр.</span><span class="sxs-lookup"><span data-stu-id="ae19a-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="ae19a-119">В противном `arg` случае, `null`если не имеет значение `arg` , вызывается <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализация параметра, если таковая существует, или `ToString` его метод без параметров, если он не имеет значение.</span><span class="sxs-lookup"><span data-stu-id="ae19a-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="ae19a-120">Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ae19a-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="ae19a-121">`BinaryFormatter`затем может использоваться для предоставления пользовательского форматирования путем передачи `BinaryFormatter` объекта в `provider` качестве параметра <xref:System.String.Format%2A> метода, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="ae19a-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="ae19a-122">Среда CLR пытается использовать <see cref="T:System.ICustomFormatter" /> реализацию для каждого элемента форматирования в строке составного формата.</span><span class="sxs-lookup"><span data-stu-id="ae19a-122">The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string.</span></span> <span data-ttu-id="ae19a-123">В результате следует предполагать, что <see cref="T:System.ICustomFormatter" /> реализация будет вызываться для предоставления служб форматирования объектам или значениям, которые не предназначены для работы.</span><span class="sxs-lookup"><span data-stu-id="ae19a-123">As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</span></span> <span data-ttu-id="ae19a-124">В этих случаях <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод должен вызывать соответствующий метод форматирования для этого объекта или значения.</span><span class="sxs-lookup"><span data-stu-id="ae19a-124">In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.</span></span>  
  
<span data-ttu-id="ae19a-125">Существует два вида <see cref="T:System.ICustomFormatter" /> реализаций: встроенная функция и расширение.</span><span class="sxs-lookup"><span data-stu-id="ae19a-125">There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.</span></span>  
  
<span data-ttu-id="ae19a-126">Встроенные реализации — это реализации, которые обеспечивают пользовательское форматирование для объекта, определяемого приложением.</span><span class="sxs-lookup"><span data-stu-id="ae19a-126">Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</span></span> <span data-ttu-id="ae19a-127">В этом случае реализация должна включать следующее:</span><span class="sxs-lookup"><span data-stu-id="ae19a-127">In this case, your implementation should include the following:</span></span> 
<span data-ttu-id="ae19a-128">— Определение строк формата, определяющих форматирование объекта.</span><span class="sxs-lookup"><span data-stu-id="ae19a-128">-   A definition of format strings that define the formatting of the object.</span></span> <span data-ttu-id="ae19a-129">Строки формата являются необязательными.</span><span class="sxs-lookup"><span data-stu-id="ae19a-129">Format strings are optional.</span></span> <span data-ttu-id="ae19a-130">Как правило, строка формата G или g определяет общий (или наиболее часто используемый) формат.</span><span class="sxs-lookup"><span data-stu-id="ae19a-130">Typically, a "G" or "g" format string defines the general (or most commonly used) format.</span></span> <span data-ttu-id="ae19a-131">Тем не менее вы можете определить любые строки формата.</span><span class="sxs-lookup"><span data-stu-id="ae19a-131">However, you are free to define any format strings that you choose.</span></span> <span data-ttu-id="ae19a-132">Вы также можете решить, учитывается ли регистр или не учитывается регистр.</span><span class="sxs-lookup"><span data-stu-id="ae19a-132">You are also free to decide whether they are case-sensitive or case-insensitive.</span></span>  
  
<span data-ttu-id="ae19a-133">— Проверка того, что тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод, является типом, определяемым приложением.</span><span class="sxs-lookup"><span data-stu-id="ae19a-133">-   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type.</span></span> <span data-ttu-id="ae19a-134">Если это не так, следует вызвать <see cref="T:System.IFormattable" /> реализацию объекта, если он существует, или его <see cref="M:System.Object.ToString" /> метод, если он отсутствует.</span><span class="sxs-lookup"><span data-stu-id="ae19a-134">If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not.</span></span> <span data-ttu-id="ae19a-135">Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.</span><span class="sxs-lookup"><span data-stu-id="ae19a-135">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
<span data-ttu-id="ae19a-136">— Код для управления строкой формата со значением NULL, если реализация поддерживает строки формата.</span><span class="sxs-lookup"><span data-stu-id="ae19a-136">-   Code to handle a null format string, if your implementation supports format strings.</span></span> <span data-ttu-id="ae19a-137">Наиболее распространенным подходом является замена строки формата null спецификатором общего формата.</span><span class="sxs-lookup"><span data-stu-id="ae19a-137">The most common approach is to replace a null format string with the general format specifier.</span></span>  
  
<span data-ttu-id="ae19a-138">— Код для работы с любыми строками формата, поддерживаемых реализацией.</span><span class="sxs-lookup"><span data-stu-id="ae19a-138">-   Code to handle any format strings that your implementation supports.</span></span>  
  
<span data-ttu-id="ae19a-139">— Код для управления строками формата, которые не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="ae19a-139">-   Code to handle format strings that you do not support.</span></span> <span data-ttu-id="ae19a-140">Наиболее распространенным подходом является исключение <see cref="T:System.FormatException" />, хотя можно предоставить форматирование по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="ae19a-140">The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.</span></span>  
  
<span data-ttu-id="ae19a-141">Реализации расширения — это реализации, которые обеспечивают пользовательское форматирование для типа, который уже имеет поддержку форматирования.</span><span class="sxs-lookup"><span data-stu-id="ae19a-141">Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</span></span> <span data-ttu-id="ae19a-142">Например, можно определить <c>кустомернумберформаттер</c> , который форматирует целочисленный тип с дефисами между определенными цифрами.</span><span class="sxs-lookup"><span data-stu-id="ae19a-142">For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits.</span></span> <span data-ttu-id="ae19a-143">В этом случае реализация должна включать следующее:</span><span class="sxs-lookup"><span data-stu-id="ae19a-143">In this case, your implementation should include the following:</span></span> 
<span data-ttu-id="ae19a-144">— Определение строк формата, расширяющих форматирование объекта.</span><span class="sxs-lookup"><span data-stu-id="ae19a-144">-   A definition of format strings that extend the formatting of the object.</span></span> <span data-ttu-id="ae19a-145">Эти строки формата являются обязательными, но они не должны конфликтовать с существующими строками формата типа.</span><span class="sxs-lookup"><span data-stu-id="ae19a-145">These format strings are required, but they must not conflict with the type's existing format strings.</span></span> <span data-ttu-id="ae19a-146">Например, если вы расширяете форматирование для <see cref="T:System.Int32" /> типа, не следует реализовывать описатели формата "C", "D", "E", "F" и "G".</span><span class="sxs-lookup"><span data-stu-id="ae19a-146">For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</span></span>  
  
<span data-ttu-id="ae19a-147">— Проверка того, что тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод, является типом, форматирование которого поддерживается расширением.</span><span class="sxs-lookup"><span data-stu-id="ae19a-147">-   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports.</span></span> <span data-ttu-id="ae19a-148">Если это не так, вызовите <see cref="T:System.IFormattable" /> реализацию объекта, если таковая существует, или <see cref="M:System.Object.ToString" /> метод без параметров объекта, если он отсутствует.</span><span class="sxs-lookup"><span data-stu-id="ae19a-148">If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not.</span></span> <span data-ttu-id="ae19a-149">Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.</span><span class="sxs-lookup"><span data-stu-id="ae19a-149">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
<span data-ttu-id="ae19a-150">— Код для обработки любых строк формата, поддерживаемых расширением.</span><span class="sxs-lookup"><span data-stu-id="ae19a-150">-   Code to handle any format strings that your extension supports.</span></span>  
  
<span data-ttu-id="ae19a-151">— Код для обработки любых строк формата, которые не поддерживаются расширением.</span><span class="sxs-lookup"><span data-stu-id="ae19a-151">-   Code to handle any format strings that your extension does not support.</span></span> <span data-ttu-id="ae19a-152">Они должны передаваться в <see cref="T:System.IFormattable" /> реализацию типа.</span><span class="sxs-lookup"><span data-stu-id="ae19a-152">These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation.</span></span> <span data-ttu-id="ae19a-153">Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.</span><span class="sxs-lookup"><span data-stu-id="ae19a-153">You should be prepared to handle any exceptions these method calls might throw.</span></span></para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="ae19a-154">Строка формата, содержащая спецификации форматирования.</span><span class="sxs-lookup"><span data-stu-id="ae19a-154">A format string containing formatting specifications.</span></span></param>
        <param name="arg"><span data-ttu-id="ae19a-155">Объект для форматирования.</span><span class="sxs-lookup"><span data-stu-id="ae19a-155">An object to format.</span></span></param>
        <param name="formatProvider"><span data-ttu-id="ae19a-156">Объект, который предоставляет связанную с форматированием информацию о текущем экземпляре.</span><span class="sxs-lookup"><span data-stu-id="ae19a-156">An object that supplies format information about the current instance.</span></span></param>
        <summary><span data-ttu-id="ae19a-157">Преобразует значение указанного объекта в эквивалентное ему строковое представление, используя указанный формат и сведений об особенностях форматирования, связанных с языком и региональными параметрами.</span><span class="sxs-lookup"><span data-stu-id="ae19a-157">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="ae19a-158">Строковое представление значения <paramref name="arg" />, отформатированное с использованием параметров <paramref name="format" /> и <paramref name="formatProvider" />.</span><span class="sxs-lookup"><span data-stu-id="ae19a-158">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae19a-159">Метод<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> является методом обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="ae19a-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="ae19a-160">Он вызывается методом, поддерживающим пользовательское форматирование, например <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> или. <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ae19a-160">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ae19a-161">Реализация вызывается один раз для каждого элемента форматирования в [строке составного формата](~/docs/standard/base-types/composite-formatting.md).</span><span class="sxs-lookup"><span data-stu-id="ae19a-161">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="ae19a-162">Например, в следующей инструкции <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> метод вызывается три раза.</span><span class="sxs-lookup"><span data-stu-id="ae19a-162">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="ae19a-163">`arg` Параметр — это объект в списке объектов, позиция на котором отсчитывается с нуля, соответствует индексу определенного элемента форматирования.</span><span class="sxs-lookup"><span data-stu-id="ae19a-163">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="ae19a-164">Параметр содержит строку формата, которая `formatString` является компонентом элемента формата. `format`</span><span class="sxs-lookup"><span data-stu-id="ae19a-164">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="ae19a-165">Если у элемента формата нет `formatString` компонента, `format` значение равно `null`.</span><span class="sxs-lookup"><span data-stu-id="ae19a-165">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="ae19a-166">Если `format` имеет `null`значение, то, в `arg`зависимости от типа, вы можете использовать стандартную спецификацию формата по своему усмотрению.</span><span class="sxs-lookup"><span data-stu-id="ae19a-166">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="ae19a-167">Параметр — это реализация,`arg`которая обеспечивает форматирование для. <xref:System.IFormatProvider> `formatProvider`</span><span class="sxs-lookup"><span data-stu-id="ae19a-167">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="ae19a-168">Как правило, это экземпляр <xref:System.ICustomFormatter> реализации.</span><span class="sxs-lookup"><span data-stu-id="ae19a-168">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="ae19a-169">Если `formatProvider` имеет `null`значение, игнорируйте этот параметр.</span><span class="sxs-lookup"><span data-stu-id="ae19a-169">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="ae19a-170">Реализация <xref:System.ICustomFormatter.Format%2A> метода должна включать следующие функциональные возможности, чтобы .NET Framework можно было поддерживать форматирование, которое не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="ae19a-170">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="ae19a-171">Если метод формата не поддерживает формат, определите, будет ли отформатированный объект реализовывать <xref:System.IFormattable> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="ae19a-171">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="ae19a-172">Если это так, вызовите <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> метод этого интерфейса.</span><span class="sxs-lookup"><span data-stu-id="ae19a-172">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="ae19a-173">В противном случае вызовите метод по умолчанию <xref:System.Object.ToString%2A?displayProperty=nameWithType> базового объекта.</span><span class="sxs-lookup"><span data-stu-id="ae19a-173">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="ae19a-174">Этот шаблон показан в следующем коде.</span><span class="sxs-lookup"><span data-stu-id="ae19a-174">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="ae19a-175">В следующем примере реализуется <xref:System.ICustomFormatter> , чтобы разрешить двоичное, восьмеричное и шестнадцатеричное форматирование целочисленных значений.</span><span class="sxs-lookup"><span data-stu-id="ae19a-175">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="ae19a-176">Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализация определяет, является ли параметр format одной из трех поддерживаемых строк формата ("B" для двоичного, "O" для восьмеричного, а "H" — шестнадцатеричного) и `arg` соответствующим образом форматирует параметр.</span><span class="sxs-lookup"><span data-stu-id="ae19a-176">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="ae19a-177">В противном `arg` случае, `null`если не имеет значение `arg` , вызывается <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализация параметра, если таковая существует, или `ToString` его метод без параметров, если он не имеет значение.</span><span class="sxs-lookup"><span data-stu-id="ae19a-177">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="ae19a-178">Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ae19a-178">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="ae19a-179">`BinaryFormatter`затем может использоваться для предоставления пользовательского форматирования путем передачи `BinaryFormatter` объекта в `provider` качестве параметра <xref:System.String.Format%2A> метода, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="ae19a-179">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="ae19a-180">Типы форматирования в .NET</span><span class="sxs-lookup"><span data-stu-id="ae19a-180">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="ae19a-181">Составное форматирование</span><span class="sxs-lookup"><span data-stu-id="ae19a-181">Composite Formatting</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
