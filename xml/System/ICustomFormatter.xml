<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d49cf32248451109bfd83a0da3e2244c7634b58" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172834" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет метод, поддерживающий пользовательское форматирование значения объекта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интерфейс <xref:System.ICustomFormatter> включает один метод, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Если этот интерфейс реализуется с помощью типа ссылки или значения, метод <xref:System.ICustomFormatter.Format%2A> возвращает строковое представление значения объекта в формате, отформатированном пользователем.  
  
 Как правило, интерфейс <xref:System.ICustomFormatter> реализуется с помощью интерфейса <xref:System.IFormatProvider>, чтобы настроить поведение двух .NET Framework методов форматирования составных строк, включающих параметр <xref:System.IFormatProvider>. В частности, интерфейс <xref:System.ICustomFormatter> может предоставить пользовательское форматирование значения объекта, передаваемого методам <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> и <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Для предоставления пользовательского представления значения объекта необходимо выполнить следующие действия.  
  
1.  Определите класс, реализующий интерфейс <xref:System.ICustomFormatter> и его единственный элемент — метод <xref:System.ICustomFormatter.Format%2A>.  
  
2.  Определите класс, реализующий интерфейс <xref:System.IFormatProvider> и его единственный элемент — метод <xref:System.IFormatProvider.GetFormat%2A>. Метод <xref:System.IFormatProvider.GetFormat%2A> возвращает экземпляр реализации <xref:System.ICustomFormatter>. Часто один класс реализует как <xref:System.ICustomFormatter>, так и <xref:System.IFormatProvider>. В этом случае реализация `GetFormat` класса просто возвращает экземпляр самого себя.  
  
3.  Передайте <xref:System.IFormatProvider> реализацию в качестве аргумента `provider` метода <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> или сопоставимого метода.  
  
 Затем метод .NET Framework будет использовать пользовательское форматирование вместо собственного.  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> для разрешения двоичного, восьмеричного и шестнадцатеричного форматирования целочисленных значений. В этом примере один класс, `IBinaryFormatter`, реализует как <xref:System.ICustomFormatter>, так и <xref:System.IFormatProvider>. Его <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> метод определяет, представляет ли параметр `formatType` тип <xref:System.ICustomFormatter>. Если это так, `BinaryFormatter` возвращает экземпляр самого себя; в противном случае возвращается `null`. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>ная реализация определяет, является ли параметр формата одной из трех поддерживаемых строк формата ("B" для двоичного, "O" для восьмеричного, а "H" — шестнадцатеричного) и соответствующим образом форматирует параметр `arg`. В противном случае, если `arg` не `null`, он вызывает реализацию <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> `arg` параметра, если таковая существует, или его метод `ToString` без параметров, если таковой нет. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` можно использовать для предоставления пользовательского форматирования, передав `BinaryFormatter` объект в качестве параметра `provider` метода <xref:System.String.Format%2A>, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Среда CLR пытается использовать реализацию <see cref="T:System.ICustomFormatter" /> для каждого элемента форматирования в строке составного формата. В результате следует предполагать, что будет вызвана реализация <see cref="T:System.ICustomFormatter" /> для предоставления служб форматирования объектам или значениям, которые не предназначены для работы. В этих случаях метод <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> должен вызвать соответствующий метод форматирования для этого объекта или значения.  
  
Существует два вида реализаций <see cref="T:System.ICustomFormatter" />: встроенная функция и расширение.  
  
Встроенные реализации — это реализации, которые обеспечивают пользовательское форматирование для объекта, определяемого приложением. В этом случае реализация должна включать следующее: 
— Определение строк формата, определяющих форматирование объекта. Строки формата являются необязательными. Как правило, строка формата G или g определяет общий (или наиболее часто используемый) формат. Тем не менее вы можете определить любые строки формата. Вы также можете решить, учитывается ли регистр или не учитывается регистр.  
  
— Проверка того, что тип объекта, переданного в метод <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />, является типом, определяемым приложением. Если это не так, следует вызвать реализацию <see cref="T:System.IFormattable" /> объекта, если он существует, или его метод <see cref="M:System.Object.ToString" />, если он отсутствует. Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.  
  
— Код для управления строкой формата со значением NULL, если реализация поддерживает строки формата. Наиболее распространенным подходом является замена строки формата null спецификатором общего формата.  
  
— Код для работы с любыми строками формата, поддерживаемых реализацией.  
  
— Код для управления строками формата, которые не поддерживаются. Наиболее распространенным подходом является создание <see cref="T:System.FormatException" />, хотя можно предоставить форматирование по умолчанию.  
  
Реализации расширения — это реализации, которые обеспечивают пользовательское форматирование для типа, который уже имеет поддержку форматирования. Например, можно определить <c>кустомернумберформаттер</c> , который форматирует целочисленный тип с дефисами между определенными цифрами. В этом случае реализация должна включать следующее: 
— Определение строк формата, расширяющих форматирование объекта. Эти строки формата являются обязательными, но они не должны конфликтовать с существующими строками формата типа. Например, если вы расширяете форматирование для типа <see cref="T:System.Int32" />, не следует реализовывать описатели формата "C", "D", "E", "F" и "G".  
  
— Проверка того, что тип объекта, переданного в метод <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />, является типом, для которого поддерживается форматирование расширения. Если это не так, вызовите реализацию <see cref="T:System.IFormattable" /> объекта, если он существует, или метод <see cref="M:System.Object.ToString" /> без параметров объекта, если он отсутствует. Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.  
  
— Код для обработки любых строк формата, поддерживаемых расширением.  
  
— Код для обработки любых строк формата, которые не поддерживаются расширением. Они должны передаваться в реализацию <see cref="T:System.IFormattable" /> типа. Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка формата, содержащая спецификации форматирования.</param>
        <param name="arg">Объект для форматирования.</param>
        <param name="formatProvider">Объект, предоставляющий сведения о формате для текущего экземпляра.</param>
        <summary>Преобразует значение указанного объекта в эквивалентное ему строковое представление с использованием указанного формата и сведений об особенностях форматирования для данного языка и региональных параметров.</summary>
        <returns>Строковое представление значения <paramref name="arg" />, отформатированного в соответствии с <paramref name="format" /> и <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> является методом обратного вызова. Он вызывается методом, поддерживающим пользовательское форматирование, например <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> или <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Реализация вызывается один раз для каждого элемента форматирования в [строке составного формата](~/docs/standard/base-types/composite-formatting.md). Например, в следующей инструкции метод <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> вызывается три раза.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 Параметр `arg` — это объект в списке объектов, позиция которого отсчитывается от нуля, соответствует индексу определенного элемента форматирования.  
  
 Параметр `format` содержит строку формата, которая является компонентом `formatString` элемента формата. Если элемент формата не имеет `formatString` компонента, значение `format` равно `null`. Если `format` `null`в зависимости от типа `arg`, вы можете использовать стандартную спецификацию формата по своему усмотрению.  
  
 Параметр `formatProvider` — это реализация <xref:System.IFormatProvider>, которая обеспечивает форматирование для `arg`. Как правило, это экземпляр реализации <xref:System.ICustomFormatter>. Если `formatProvider` `null`, пропустите этот параметр.  
  
 Реализация метода <xref:System.ICustomFormatter.Format%2A> должна включать следующие функции, чтобы .NET Framework можно было поддерживать форматирование, которое не поддерживается. Если метод формата не поддерживает формат, определите, реализует ли отформатированный объект интерфейс <xref:System.IFormattable>. Если это так, вызовите метод <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> этого интерфейса. В противном случае вызовите метод <xref:System.Object.ToString%2A?displayProperty=nameWithType> по умолчанию базового объекта. Этот шаблон показан в следующем коде.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> для разрешения двоичного, восьмеричного и шестнадцатеричного форматирования целочисленных значений. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>ная реализация определяет, является ли параметр формата одной из трех поддерживаемых строк формата ("B" для двоичного, "O" для восьмеричного, а "H" — шестнадцатеричного) и соответствующим образом форматирует параметр `arg`. В противном случае, если `arg` не `null`, он вызывает реализацию <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> `arg` параметра, если таковая существует, или его метод `ToString` без параметров, если таковой нет. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` можно использовать для предоставления пользовательского форматирования, передав `BinaryFormatter` объект в качестве параметра `provider` метода <xref:System.String.Format%2A>, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Составное форматирование</related>
      </Docs>
    </Member>
  </Members>
</Type>
