<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e446f51bdbd0e5e4d0ecd465daedf974a1513386" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420382" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет метод, поддерживающий нестандартное форматирование значения объекта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интерфейс включает один метод, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. <xref:System.ICustomFormatter> Если этот интерфейс реализуется с помощью ссылки или типа значения, <xref:System.ICustomFormatter.Format%2A> метод возвращает строковое представление значения объекта в формате представления.  
  
 Как правило, <xref:System.ICustomFormatter> интерфейс реализуется <xref:System.IFormatProvider> с помощью интерфейса для настройки поведения двух .NET Framework методов <xref:System.IFormatProvider> форматирования составных строк, включающих параметр. В <xref:System.ICustomFormatter> частности, интерфейс может предоставлять пользовательское форматирование значения объекта, передаваемого <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> методам и <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> .  
  
 Для предоставления пользовательского представления значения объекта необходимо выполнить следующие действия.  
  
1.  Определите класс, реализующий <xref:System.ICustomFormatter> интерфейс, и его единственный член <xref:System.ICustomFormatter.Format%2A> — метод.  
  
2.  Определите класс, реализующий <xref:System.IFormatProvider> интерфейс, и его единственный член <xref:System.IFormatProvider.GetFormat%2A> — метод. Метод возвращает экземпляр <xref:System.ICustomFormatter>реализации. <xref:System.IFormatProvider.GetFormat%2A> Часто один класс реализует <xref:System.ICustomFormatter> и, и. <xref:System.IFormatProvider> В этом случае `GetFormat` реализация класса просто возвращает экземпляр самого себя.  
  
3.  Передайте `provider` <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> реализацию в качестве аргумента метода или сопоставимого метода. <xref:System.IFormatProvider>  
  
 Затем метод .NET Framework будет использовать пользовательское форматирование вместо собственного.  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> , чтобы разрешить двоичное, восьмеричное и шестнадцатеричное форматирование целочисленных значений. В этом примере один класс `IBinaryFormatter`() <xref:System.ICustomFormatter> реализует и <xref:System.IFormatProvider>. Его <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> метод определяет, `formatType` представляет <xref:System.ICustomFormatter> ли параметр тип. Если это так, `BinaryFormatter` возвращает экземпляр самого себя; в противном `null`случае возвращается значение. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализация определяет, является ли параметр format одной из трех поддерживаемых строк формата ("B" для двоичного, "O" для восьмеричного, а "H" — шестнадцатеричного) и `arg` соответствующим образом форматирует параметр. В противном `arg` случае, `null`если не имеет значение `arg` , вызывается <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализация параметра, если таковая существует, или `ToString` его метод без параметров, если он не имеет значение. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`затем может использоваться для предоставления пользовательского форматирования путем передачи `BinaryFormatter` объекта в `provider` качестве параметра <xref:System.String.Format%2A> метода, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Среда CLR пытается использовать <see cref="T:System.ICustomFormatter" /> реализацию для каждого элемента форматирования в строке составного формата. В результате следует предполагать, что <see cref="T:System.ICustomFormatter" /> реализация будет вызываться для предоставления служб форматирования объектам или значениям, которые не предназначены для работы. В этих случаях <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод должен вызывать соответствующий метод форматирования для этого объекта или значения.  
  
Существует два вида <see cref="T:System.ICustomFormatter" /> реализаций: встроенная функция и расширение.  
  
Встроенные реализации — это реализации, которые обеспечивают пользовательское форматирование для объекта, определяемого приложением. В этом случае реализация должна включать следующее: 
— Определение строк формата, определяющих форматирование объекта. Строки формата являются необязательными. Как правило, строка формата G или g определяет общий (или наиболее часто используемый) формат. Тем не менее вы можете определить любые строки формата. Вы также можете решить, учитывается ли регистр или не учитывается регистр.  
  
— Проверка того, что тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод, является типом, определяемым приложением. Если это не так, следует вызвать <see cref="T:System.IFormattable" /> реализацию объекта, если он существует, или его <see cref="M:System.Object.ToString" /> метод, если он отсутствует. Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.  
  
— Код для управления строкой формата со значением NULL, если реализация поддерживает строки формата. Наиболее распространенным подходом является замена строки формата null спецификатором общего формата.  
  
— Код для работы с любыми строками формата, поддерживаемых реализацией.  
  
— Код для управления строками формата, которые не поддерживаются. Наиболее распространенным подходом является исключение <see cref="T:System.FormatException" />, хотя можно предоставить форматирование по умолчанию.  
  
Реализации расширения — это реализации, которые обеспечивают пользовательское форматирование для типа, который уже имеет поддержку форматирования. Например, можно определить <c>кустомернумберформаттер</c> , который форматирует целочисленный тип с дефисами между определенными цифрами. В этом случае реализация должна включать следующее: 
— Определение строк формата, расширяющих форматирование объекта. Эти строки формата являются обязательными, но они не должны конфликтовать с существующими строками формата типа. Например, если вы расширяете форматирование для <see cref="T:System.Int32" /> типа, не следует реализовывать описатели формата "C", "D", "E", "F" и "G".  
  
— Проверка того, что тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод, является типом, форматирование которого поддерживается расширением. Если это не так, вызовите <see cref="T:System.IFormattable" /> реализацию объекта, если таковая существует, или <see cref="M:System.Object.ToString" /> метод без параметров объекта, если он отсутствует. Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.  
  
— Код для обработки любых строк формата, поддерживаемых расширением.  
  
— Код для обработки любых строк формата, которые не поддерживаются расширением. Они должны передаваться в <see cref="T:System.IFormattable" /> реализацию типа. Вы должны быть готовы обрабатывать любые исключения, которые могут вызываться этими вызовами методов.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка формата, содержащая спецификации форматирования.</param>
        <param name="arg">Объект для форматирования.</param>
        <param name="formatProvider">Объект, который предоставляет связанную с форматированием информацию о текущем экземпляре.</param>
        <summary>Преобразует значение указанного объекта в эквивалентное ему строковое представление, используя указанный формат и сведений об особенностях форматирования, связанных с языком и региональными параметрами.</summary>
        <returns>Строковое представление значения <paramref name="arg" />, отформатированное с использованием параметров <paramref name="format" /> и <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> является методом обратного вызова. Он вызывается методом, поддерживающим пользовательское форматирование, например <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> или. <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Реализация вызывается один раз для каждого элемента форматирования в [строке составного формата](~/docs/standard/base-types/composite-formatting.md). Например, в следующей инструкции <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> метод вызывается три раза.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` Параметр — это объект в списке объектов, позиция на котором отсчитывается с нуля, соответствует индексу определенного элемента форматирования.  
  
 Параметр содержит строку формата, которая `formatString` является компонентом элемента формата. `format` Если у элемента формата нет `formatString` компонента, `format` значение равно `null`. Если `format` имеет `null`значение, то, в `arg`зависимости от типа, вы можете использовать стандартную спецификацию формата по своему усмотрению.  
  
 Параметр — это реализация,`arg`которая обеспечивает форматирование для. <xref:System.IFormatProvider> `formatProvider` Как правило, это экземпляр <xref:System.ICustomFormatter> реализации. Если `formatProvider` имеет `null`значение, игнорируйте этот параметр.  
  
 Реализация <xref:System.ICustomFormatter.Format%2A> метода должна включать следующие функциональные возможности, чтобы .NET Framework можно было поддерживать форматирование, которое не поддерживается. Если метод формата не поддерживает формат, определите, будет ли отформатированный объект реализовывать <xref:System.IFormattable> интерфейс. Если это так, вызовите <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> метод этого интерфейса. В противном случае вызовите метод по умолчанию <xref:System.Object.ToString%2A?displayProperty=nameWithType> базового объекта. Этот шаблон показан в следующем коде.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> , чтобы разрешить двоичное, восьмеричное и шестнадцатеричное форматирование целочисленных значений. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализация определяет, является ли параметр format одной из трех поддерживаемых строк формата ("B" для двоичного, "O" для восьмеричного, а "H" — шестнадцатеричного) и `arg` соответствующим образом форматирует параметр. В противном `arg` случае, `null`если не имеет значение `arg` , вызывается <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализация параметра, если таковая существует, или `ToString` его метод без параметров, если он не имеет значение. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`затем может использоваться для предоставления пользовательского форматирования путем передачи `BinaryFormatter` объекта в `provider` качестве параметра <xref:System.String.Format%2A> метода, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Составное форматирование</related>
      </Docs>
    </Member>
  </Members>
</Type>
