<Type Name="Type" FullName="System.Type">
  <Metadata><Meta Name="ms.openlocfilehash" Value="436ffc4abbdaf99d1afde6b5f524d719511a0370" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66008785" /></Metadata><TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="92aaa-101">Представляет объявления типов для классов, интерфейсов, массивов, значений, перечислений параметров, определений универсальных типов и открытых или закрытых сконструированных универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-102">`Type` является корневым элементом <xref:System.Reflection> функциональные возможности и является основным способом получить доступ к метаданным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="92aaa-103">Использовать члены <xref:System.Type> для получения сведений о объявление типа, о членах типа (например, конструкторы, методы, поля, свойства и события класса), а также модуль и сборки, в которой развернут этот класс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="92aaa-104">Разрешения не требуются для кода использовать отражение для получения сведений о типах и их члены, независимо от их уровней доступа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="92aaa-105">Разрешения не требуются для кода использовать отражение для доступа к открытым членам или другие члены, уровни доступа которых бы сделать их видимыми во время обычной компиляции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="92aaa-106">Тем не менее, чтобы код, чтобы использовать отражение для доступа к элементам, которые обычно были бы недоступны, например закрытые или внутренние методы или поля типа protected, ваш класс не наследуется, ваш код должен иметь <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="92aaa-107">См. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="92aaa-108">`Type` — Это абстрактный базовый класс, который поддерживает несколько реализаций.</span><span class="sxs-lookup"><span data-stu-id="92aaa-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="92aaa-109">Система будет всегда предоставлять производный класс `RuntimeType`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="92aaa-110">В отражении всех классов, начинающихся со слова среды выполнения создаются только один раз на объект в системе и поддерживают операции сравнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-111">В сценариях многопоточности, не блокируют <xref:System.Type> объекты для синхронизации доступа к `static` данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="92aaa-112">Другой код, вы можете не управляет, также могут привести к блокировке созданный тип класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="92aaa-113">Это может привести к взаимоблокировке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-113">This might result in a deadlock.</span></span> <span data-ttu-id="92aaa-114">Вместо этого следует синхронизировать доступ к статическим данным, заблокировав закрытый `static` объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-115">Производный класс может обращаться к защищенным членам базовых классов вызывающего кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="92aaa-116">Кроме того разрешен доступ к членам сборки вызывающего кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="92aaa-117">Как правило если доступ разрешен в коде с ранним связыванием вы разрешен и в коде с поздним связыванием.</span><span class="sxs-lookup"><span data-stu-id="92aaa-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-118">Интерфейсы, расширяющие другие интерфейсы не наследуют методы, определенные в расширенные интерфейсы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="92aaa-119">Содержание</span><span class="sxs-lookup"><span data-stu-id="92aaa-119">In this section:</span></span>  
  
 <span data-ttu-id="92aaa-120">[Какие типы представляют объект типа?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="92aaa-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="92aaa-121">[Получение объекта типа](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="92aaa-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="92aaa-122">Сравнение типов объектов на равенство</span><span class="sxs-lookup"><span data-stu-id="92aaa-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="92aaa-123">Какие типы представляют объект типа?</span><span class="sxs-lookup"><span data-stu-id="92aaa-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="92aaa-124">Этот класс является потокобезопасным; несколько потоков могут одновременно считывать из экземпляра этого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="92aaa-125">Экземпляр <xref:System.Type> класс может представлять любой из следующих типов:</span><span class="sxs-lookup"><span data-stu-id="92aaa-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="92aaa-126">Классы</span><span class="sxs-lookup"><span data-stu-id="92aaa-126">Classes</span></span>  
  
-   <span data-ttu-id="92aaa-127">Типы значений</span><span class="sxs-lookup"><span data-stu-id="92aaa-127">Value types</span></span>  
  
-   <span data-ttu-id="92aaa-128">Массивы</span><span class="sxs-lookup"><span data-stu-id="92aaa-128">Arrays</span></span>  
  
-   <span data-ttu-id="92aaa-129">интерфейсов,</span><span class="sxs-lookup"><span data-stu-id="92aaa-129">Interfaces</span></span>  
  
-   <span data-ttu-id="92aaa-130">Перечисления</span><span class="sxs-lookup"><span data-stu-id="92aaa-130">Enumerations</span></span>  
  
-   <span data-ttu-id="92aaa-131">Делегаты</span><span class="sxs-lookup"><span data-stu-id="92aaa-131">Delegates</span></span>  
  
-   <span data-ttu-id="92aaa-132">Сконструированных универсальных типов и определений универсальных типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="92aaa-133">Введите аргументы и параметры определения универсального метода, определений универсальных типов и сконструированных универсальных типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="92aaa-134">Получение объекта типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="92aaa-135"><xref:System.Type> Объект, связанный с определенным типом можно получить следующими способами:</span><span class="sxs-lookup"><span data-stu-id="92aaa-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="92aaa-136">Экземпляр <xref:System.Object.GetType%2A?displayProperty=nameWithType> возвращает <xref:System.Type> , представляющий тип экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="92aaa-137">Так как все управляемые типы являются производными от <xref:System.Object>, <xref:System.Object.GetType%2A> метод может вызываться в экземпляре любого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="92aaa-138">В следующем примере вызывается <xref:System.Object.GetType%2A?displayProperty=nameWithType> метод для определения типа среды выполнения каждого объекта в массиве объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="92aaa-139">Статический <xref:System.Type.GetType%2A?displayProperty=nameWithType> методы возвращают <xref:System.Type> объект, который представляет тип, указанный по его полному имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="92aaa-140"><xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, И <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> методы возвращают `Type` объекты, представляющие типы, определенные в модуле.</span><span class="sxs-lookup"><span data-stu-id="92aaa-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="92aaa-141">Первый метод может быть использован для получения массива <xref:System.Type> объекты для всех открытых и закрытых типов, определенных в модуле.</span><span class="sxs-lookup"><span data-stu-id="92aaa-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="92aaa-142">(Можно получить экземпляр `Module` через <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> или <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> метод, либо с помощью <xref:System.Type.Module%2A?displayProperty=nameWithType> свойство.)</span><span class="sxs-lookup"><span data-stu-id="92aaa-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="92aaa-143"><xref:System.Reflection.Assembly?displayProperty=nameWithType> Объект содержит ряд методов для получения классы, определенные в сборке, в том числе <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, и <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="92aaa-144"><xref:System.Type.FindInterfaces%2A> Метод возвращает отфильтрованный список типов интерфейсов, поддерживаемых типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="92aaa-145"><xref:System.Type.GetElementType%2A> Возвращает метод `Type` объект, представляющий элемент.</span><span class="sxs-lookup"><span data-stu-id="92aaa-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="92aaa-146"><xref:System.Type.GetInterfaces%2A> И <xref:System.Type.GetInterface%2A> методы возвращают <xref:System.Type> объекты, представляющие типы интерфейсов, поддерживаемых типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="92aaa-147"><xref:System.Type.GetTypeArray%2A> Метод возвращает массив <xref:System.Type> объекты, представляющие типы, заданные свойством произвольный набор объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="92aaa-148">Объекты, указанные с помощью массива типа <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="92aaa-149"><xref:System.Type.GetTypeFromProgID%2A> И <xref:System.Type.GetTypeFromCLSID%2A> предоставляются методы для COM-взаимодействия.</span><span class="sxs-lookup"><span data-stu-id="92aaa-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="92aaa-150">Они возвращают <xref:System.Type> , представляющий тип, указанный в `ProgID` или `CLSID`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="92aaa-151"><xref:System.Type.GetTypeFromHandle%2A> Метод предоставляется для обеспечения взаимодействия.</span><span class="sxs-lookup"><span data-stu-id="92aaa-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="92aaa-152">Он возвращает `Type` , представляющий тип, указанный с помощью дескриптора класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="92aaa-153">C# `typeof` оператор C++ `typeid` оператор и Visual Basic `GetType` оператор получения `Type` объекта для типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="92aaa-154"><xref:System.Type.MakeGenericType%2A> Возвращает <xref:System.Type> объект, представляющий сконструированный универсальный тип, который является открытым сконструированным типом, если его <xref:System.Type.ContainsGenericParameters%2A> возвращает `true`, и закрытого сконструированного типа в противном случае.</span><span class="sxs-lookup"><span data-stu-id="92aaa-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="92aaa-155">Можно создать экземпляр универсального типа, только в том случае, если он закрыт.</span><span class="sxs-lookup"><span data-stu-id="92aaa-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="92aaa-156"><xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, И <xref:System.Type.MakeByRefType%2A> методы возвращают <xref:System.Type> объекты, которые представляют, соответственно, массив указанного типа, указатель на указанный тип и тип ссылочного параметра (`ref` в C# `ByRef`в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="92aaa-157">Сравнение типов объектов на равенство</span><span class="sxs-lookup"><span data-stu-id="92aaa-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="92aaa-158">Объект <xref:System.Type> объекта, что представляет тип является уникальным, то есть два <xref:System.Type> объекта ссылаются на тот же объект только в том случае, если они принадлежат к одному типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="92aaa-159">Это позволяет сравнивать <xref:System.Type> объектов с помощью ссылочное равенство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="92aaa-160">В следующем примере сравниваются <xref:System.Type> объекты, представляющие количество целочисленных значений, чтобы определить, являются ли они того же типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-161">В следующем примере показано несколько репрезентативных признаков из <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-161">The following example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="92aaa-162">C# `typeof` Оператор (`GetType` оператор в Visual Basic) используется для получения <xref:System.Type> объект, представляющий <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-162">The C# `typeof` operator (`GetType` operator in Visual Basic) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="92aaa-163">Из этого <xref:System.Type> объекта, <xref:System.Type.GetMethod%2A> метод используется для получения <xref:System.Reflection.MethodInfo> представляющий <xref:System.String.Substring%2A?displayProperty=nameWithType> перегрузку, принимающую начальное положение и длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A?displayProperty=nameWithType> overload that takes a starting location and a length.</span></span>
  
 <span data-ttu-id="92aaa-164">Чтобы определить сигнатура перегрузки, в примере кода создается временный массив, содержащий два <xref:System.Type> объектов представляющий `int` (`Integer` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-165">Точнее, массив содержит две ссылки на экземпляр <xref:System.Type> , представляющий `int` в текущем домене приложения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="92aaa-166">Для любого типа имеется только один экземпляр <xref:System.Type> каждого домена приложения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="92aaa-167">В примере кода используется <xref:System.Reflection.MethodInfo> для вызова <xref:System.String.Substring%2A> метод в строке «Hello, World!» и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="92aaa-168">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-168">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="92aaa-169">При наследовании от <see langword="Type" />, необходимо переопределить следующие члены:</span><span class="sxs-lookup"><span data-stu-id="92aaa-169">When you inherit from <see langword="Type" />, you must override the following members:</span></span> 
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para></block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/viewing-type-information.md"><span data-ttu-id="92aaa-170">Просмотр сведений о типах</span><span class="sxs-lookup"><span data-stu-id="92aaa-170">Viewing Type Information</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-171">Инициализирует новый экземпляр класса <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-171">Initializes a new instance of the <see cref="T:System.Type" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-172">Этот конструктор вызывается производными классами, во время создания типа объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-172">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-173">Возвращает объект <see cref="T:System.Reflection.Assembly" />, в котором объявлен тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-173">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span></span> <span data-ttu-id="92aaa-174">Для универсальных типов возвращает объект сборки <see cref="T:System.Reflection.Assembly" />, в которой определен универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-174">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span></span></summary>
        <value><span data-ttu-id="92aaa-175">Экземпляр <see cref="T:System.Reflection.Assembly" />, описывающий сборку, которая содержит текущий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-175">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span></span> <span data-ttu-id="92aaa-176">Для универсальных типов экземпляр описывает сборку, содержащую определение универсального типа, а не сборку, которая создала и использует определенный сконструированный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-176">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-177">Если текущий <xref:System.Type> объект представляет сконструированный универсальный тип, это свойство возвращает сборку, содержащую определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-177">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="92aaa-178">Предположим, например, создать сборку с именем MyGenerics.dll, который содержит определение универсального типа `MyGenericStack<T>` (`MyGenericStack(Of T)` в Visual Basic, `generic<T> ref class MyGenericStack` в C++).</span><span class="sxs-lookup"><span data-stu-id="92aaa-178">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="92aaa-179">При создании экземпляра `MyGenericStack<int>` (`MyGenericStack(Of Integer)` в Visual Basic) в другой сборке, <xref:System.Type.Assembly%2A> свойство для сконструированного типа возвращает <xref:System.Reflection.Assembly> , представляющий MyGenerics.dll.</span><span class="sxs-lookup"><span data-stu-id="92aaa-179">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="92aaa-180">Аналогично Если текущий <xref:System.Type> неприсвоенный универсальный параметр представляет объект `T`, это свойство возвращает сборку, содержащую универсальный тип, который определяет `T`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-180">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="92aaa-181">Если <xref:System.Type.Assembly%2A?displayProperty=nameWithType> свойство недоступно в конкретной реализации .NET, таких как .NET Core и универсальной платформы Windows, используйте <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> свойство вместо этого.</span><span class="sxs-lookup"><span data-stu-id="92aaa-181">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="92aaa-182">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-182">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-183">Следующий пример отображает имя сборки, связанный с классом и полное имя типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-183">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-184">Возвращает имя типа с указанием сборки, включающее имя сборки, из которой был загружен объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-184">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span></span></summary>
        <value><span data-ttu-id="92aaa-185">Имя объекта <see cref="T:System.Type" /> с указанием сборки, включающее имя сборки, из которой был загружен объект <see cref="T:System.Type" />, или значение <see langword="null" />, если текущий экземпляр представляет параметр универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-185">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-186">Квалифицированное имя типа состоит из имени типа, включая пространство имен, следует запятая, а затем по отображаемому имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-186">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="92aaa-187">Отображаемое имя сборки, получается с помощью <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-187">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-188">В .NET Framework версии 2.0 архитектура процессора добавляется удостоверения сборки и может быть указан как часть строки имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-188">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="92aaa-189">Например «ProcessorArchitecture = msil».</span><span class="sxs-lookup"><span data-stu-id="92aaa-189">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="92aaa-190">Тем не менее, он не включен в строку, возвращаемую <xref:System.Type.AssemblyQualifiedName%2A> свойство, по соображениям совместимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-190">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="92aaa-191">См. раздел <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-191">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="92aaa-192">Все компиляторы, которые поддерживают среда CLR, выдают простое имя вложенного класса, а отражение создает искаженное имя при запросе, в соответствии со следующими соглашениями.</span><span class="sxs-lookup"><span data-stu-id="92aaa-192">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="92aaa-193">разделитель</span><span class="sxs-lookup"><span data-stu-id="92aaa-193">Delimiter</span></span>|<span data-ttu-id="92aaa-194">Значение</span><span class="sxs-lookup"><span data-stu-id="92aaa-194">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="92aaa-195">Обратная косая черта (\\)</span><span class="sxs-lookup"><span data-stu-id="92aaa-195">Backslash (\\)</span></span>|<span data-ttu-id="92aaa-196">Escape-символ.</span><span class="sxs-lookup"><span data-stu-id="92aaa-196">Escape character.</span></span>|  
|<span data-ttu-id="92aaa-197">Запятая ()</span><span class="sxs-lookup"><span data-stu-id="92aaa-197">Comma (,)</span></span>|<span data-ttu-id="92aaa-198">Предшествует имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-198">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="92aaa-199">Знак плюс (+)</span><span class="sxs-lookup"><span data-stu-id="92aaa-199">Plus sign (+)</span></span>|<span data-ttu-id="92aaa-200">Перед вложенным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-200">Precedes a nested class.</span></span>|  
|<span data-ttu-id="92aaa-201">Точка (.)</span><span class="sxs-lookup"><span data-stu-id="92aaa-201">Period (.)</span></span>|<span data-ttu-id="92aaa-202">Определяет идентификаторы пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-202">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="92aaa-203">Квадратные скобки ([])</span><span class="sxs-lookup"><span data-stu-id="92aaa-203">Brackets ([])</span></span>|<span data-ttu-id="92aaa-204">После имени типа обозначает массив этого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-204">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="92aaa-205">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-205">-or-</span></span><br /><br /> <span data-ttu-id="92aaa-206">Для универсального типа содержащего список аргументов универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-206">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="92aaa-207">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-207">-or-</span></span><br /><br /> <span data-ttu-id="92aaa-208">В список аргументов типа содержащего типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-208">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="92aaa-209">Например имя с указанием сборки для класса может выглядеть следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-209">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="92aaa-210">Если пространство имен содержится знак плюс, например TopNamespace.Sub+Namespace, а затем знак «плюс» (+) будет предшествовать escape-символ (\\) для предотвращения его обрабатывались как разделитель вложений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-210">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="92aaa-211">Эта строка будет порождение отражения следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-211">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="92aaa-212">Объект «++» становится "\\+\\+» и"\\«становится»\\\\«.</span><span class="sxs-lookup"><span data-stu-id="92aaa-212">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="92aaa-213">Это полное имя можно сохраняются и впоследствии использовать для загрузки <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-213">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="92aaa-214">Чтобы найти и загрузить <xref:System.Type>, использовать <xref:System.Type.GetType%2A> либо с типом имя, либо только имя типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-214">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="92aaa-215"><xref:System.Type.GetType%2A> с типом имя только будет искать <xref:System.Type> в сборке вызывающего, а затем в системную сборку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-215"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="92aaa-216"><xref:System.Type.GetType%2A> в сборке будет искать имя типа с указанием <xref:System.Type> в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-216"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="92aaa-217">Имена типов могут включать конечные символы, определяющие дополнительные сведения о типе, например, является ли тип ссылочным типом, тип указателя или тип массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-217">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="92aaa-218">Получить имя типа без этих конечных символов, с помощью `t.GetElementType().ToString()`, где `t` — это тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-218">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="92aaa-219">Пробелы учитываются во всех компонентах имени типа, за исключением имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-219">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="92aaa-220">В имени сборки пробелы перед разделителем «,» существенны, но пробелы после разделителя «,» игнорируются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-220">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="92aaa-221">Сами с именем сборки являются универсальные аргументы универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-221">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="92aaa-222">Например, в имя типа с указанием сборки для `MyGenericClass<int>` (`MyGenericClass(Of Integer)` в Visual Basic), `int` будет расширен, чтобы имя типа с указанием сборки для <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-222">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="92aaa-223">Если текущий <xref:System.Type> представляет универсальный параметр, это свойство возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-223">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-224">Следующий пример отображает имя сборки, связанный с классом и полное имя типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-224">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="92aaa-225">В следующем примере сравниваются строки, возвращаемые <xref:System.Type.ToString%2A> метод и `Name`, <xref:System.Type.FullName%2A>, и <xref:System.Type.AssemblyQualifiedName%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-225">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-226">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-226">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-227">Возвращает атрибуты, связанные с объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-227">Gets the attributes associated with the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-228">Объект <see cref="T:System.Reflection.TypeAttributes" />, представляющий набор атрибутов типа <see cref="T:System.Type" />, если <see cref="T:System.Type" /> не представляет параметр универсального типа. В противном случае это значение не определено.</span><span class="sxs-lookup"><span data-stu-id="92aaa-228">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-229">Некоторые из членов <xref:System.Reflection.TypeAttributes> перечисления являются маски, представляющие группы значений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-229">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="92aaa-230">Каждая группа содержит один элемент, чье базовое значение равно нулю.</span><span class="sxs-lookup"><span data-stu-id="92aaa-230">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="92aaa-231">Например, базовое значение <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> члена в <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> группы равен нулю, так как <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> члена в <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> группы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-231">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="92aaa-232">По этой причине необходимо использовать маску перед началом тестирования для этих значений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-232">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="92aaa-233">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-233">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="92aaa-234">Для большинства целей, например свойства <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, и <xref:System.Type.IsSpecialName%2A> проще в использовании, чем атрибуты типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-234">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="92aaa-235">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство возвращает атрибуты типа определения универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-235">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="92aaa-236">Например, атрибуты, возвращаемые для `MyGenericClass<int>` (`MyGenericClass(Of Integer)` в Visual Basic) являются атрибутами элемента `MyGenericClass<T>` (`MyGenericClass(Of T)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-236">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="92aaa-237">Если текущий <xref:System.Type> представляет параметр универсального типа — то есть, в том случае, если <xref:System.Type.IsGenericParameter%2A> возвращает `true` - <xref:System.Reflection.TypeAttributes> не указано значение, возвращаемое этим свойством.</span><span class="sxs-lookup"><span data-stu-id="92aaa-237">If the current <xref:System.Type> represents a generic type parameter - that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` - the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-238">В следующем примере используется <xref:System.Type.Attributes%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-238">The following example uses the <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-239">Возвращает тип, для которого текущий объект <see cref="T:System.Type" /> является непосредственным наследником.</span><span class="sxs-lookup"><span data-stu-id="92aaa-239">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span></span></summary>
        <value><span data-ttu-id="92aaa-240">Объект <see cref="T:System.Type" />, прямым наследником которого является текущий объект <see cref="T:System.Type" />, или <see langword="null" />, если текущий объект <see langword="Type" /> представляет класс <see cref="T:System.Object" /> или интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-240">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-241">Базовый тип является типом, от которого непосредственно наследуется текущий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-241">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="92aaa-242"><xref:System.Object> Это единственный тип, который не имеет базового типа, поэтому `null` возвращается как базовый тип <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-242"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="92aaa-243">Интерфейсы наследуются из нуля или более базовых интерфейсов. Таким образом, это свойство возвращает `null` Если `Type` объект представляет интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-243">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="92aaa-244">Базовые интерфейсы можно определить с помощью <xref:System.Type.GetInterfaces%2A> или <xref:System.Type.FindInterfaces%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-244">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="92aaa-245">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, базовый тип отражает универсальные аргументы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-245">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="92aaa-246">В качестве примера рассмотрим следующие объявления:</span><span class="sxs-lookup"><span data-stu-id="92aaa-246">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="92aaa-247">Для сконструированного типа `C<int>` (`C(Of Integer)` в Visual Basic), <xref:System.Type.BaseType%2A> возвращает `B<int>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-247">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="92aaa-248">Если текущий <xref:System.Type> представляет параметр типа определения универсального типа, <xref:System.Type.BaseType%2A> возвращает ограничение для класса, то есть параметр типа должен наследовать класс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-248">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="92aaa-249">Если имеется без ограничения класса <xref:System.Type.BaseType%2A> возвращает <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-249">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="92aaa-250">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-250">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-251">В следующем примере показано использование <xref:System.Type.BaseType%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-251">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="92aaa-252">Следующий пример использует рекурсию для списка полная иерархия наследования каждого класса, найденный в сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-252">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="92aaa-253">В примере определяется класс с именем `C` , производный от класса с именем `B`, который, в свою очередь, является производным от класса с именем `A`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-253">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-254">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-254">Reflection and Generic Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-255">Возвращает значение, позволяющее определить, имеются ли у текущего объекта <see cref="T:System.Type" /> параметры типа, которые не были замещены указанными типами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-255">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span></span></summary>
        <value><span data-ttu-id="92aaa-256">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> сам является параметром универсального типа или если для его параметров типа не предоставлены определенные типы; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-256"><see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-257">Чтобы создать экземпляр типа, должен быть не определения универсального типа или открытых сконструированных типов в аргументах самого типа, в любой включающих их универсальных типов или в какие-либо элементы типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-257">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="92aaa-258">— Другими словами, при рекурсивном, тип должен содержать без параметров универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-258">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="92aaa-259">Так как типы могут иметь произвольную сложность, дело обстоит является сложной задачей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-259">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="92aaa-260">Для удобства и уменьшить вероятность ошибок <xref:System.Type.ContainsGenericParameters%2A> свойство обеспечивает стандартный способ для различения закрытые сконструированные типы, которые могут быть созданы, и открыть созданных типов, которые нельзя.</span><span class="sxs-lookup"><span data-stu-id="92aaa-260">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="92aaa-261">Если <xref:System.Type.ContainsGenericParameters%2A> возвращает `true`, тип не может быть создан.</span><span class="sxs-lookup"><span data-stu-id="92aaa-261">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="92aaa-262"><xref:System.Type.ContainsGenericParameters%2A> Свойство осуществляет рекурсивно для параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-262">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="92aaa-263">Например, он возвращает `true` для массива, элементы которого являются типом `A<T>` (`A(Of T)` в Visual Basic), несмотря на то, что массив не является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-263">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="92aaa-264">Сравните это с поведением <xref:System.Type.IsGenericType%2A> свойство, которое возвращает `false` для массивов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-264">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="92aaa-265">Набор примеров классов и таблица, показывающая значения <xref:System.Type.ContainsGenericParameters%2A> свойство, см. в разделе <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-265">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-266">В следующем примере определяется универсальный класс с двумя параметрами типа и затем определяет второй универсальный класс, производный от первого класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-266">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="92aaa-267">Базовый класс для производного класса имеет два аргумента типа: во-первых, <xref:System.Int32> , а второй — параметр типа производного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-267">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="92aaa-268">В примере отображаются сведения об этих универсальных классов, включая должности сообщил <xref:System.Type.GenericParameterPosition%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-268">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-269">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-269">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-270">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-270">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-271">Возвращает метод <see cref="T:System.Reflection.MethodBase" />, который представляет объявляемый метод, если текущий <see cref="T:System.Type" /> представляет параметр типа универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-271">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span></span></summary>
        <value><span data-ttu-id="92aaa-272">Если текущий объект <see cref="T:System.Type" /> представляет параметр типа универсального метода, класс <see cref="T:System.Reflection.MethodBase" />, представляющий объявляемый метод; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-272">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-273">Объявляемый метод является определением универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-273">The declaring method is a generic method definition.</span></span> <span data-ttu-id="92aaa-274">То есть если <xref:System.Type.DeclaringMethod%2A> не возвращает `null`, затем `DeclaringMethod.IsGenericMethodDefinition` возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-274">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="92aaa-275"><xref:System.Type.DeclaringType%2A> И <xref:System.Type.DeclaringMethod%2A> свойства определяют определение универсального типа или определение универсального метода, в котором изначально был определен параметр универсального типа:</span><span class="sxs-lookup"><span data-stu-id="92aaa-275">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="92aaa-276">Если <xref:System.Type.DeclaringMethod%2A> возвращает <xref:System.Reflection.MethodInfo>, в котором <xref:System.Reflection.MethodInfo> представляет определение универсального метода и текущий <xref:System.Type> представляет параметр типа определения универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-276">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="92aaa-277">Если <xref:System.Type.DeclaringMethod%2A> возвращает `null`, а затем <xref:System.Type.DeclaringType%2A> свойство всегда возвращает <xref:System.Type> объект, представляющий определение универсального типа и текущий <xref:System.Type> представляет параметр типа универсального типа Определение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-277">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="92aaa-278">Начало <xref:System.Type.DeclaringMethod%2A> свойства в типе которого <xref:System.Type.IsGenericParameter%2A> свойство `false` вызывает <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-278">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="92aaa-279"><xref:System.Reflection.MethodBase> , Возвращаемый <xref:System.Type.DeclaringMethod%2A> свойство <xref:System.Reflection.MethodInfo> в случае универсального метода, или <xref:System.Reflection.ConstructorInfo> в случае общих конструкторов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-279">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-280">Универсальные конструкторы в платформе .NET Framework версии 2.0 не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-280">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="92aaa-281">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-281">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-282">В следующем примере кода определяется класс, с универсального метода, который присваивает аргумент типа для метода и вызывает итоговый сконструированный универсальный метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-282">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="92aaa-283">Она также отображает сведения о определение универсального метода и сконструированный метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-283">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="92aaa-284">При отображении сведения о параметры типа определения универсального метода, в `DisplayGenericMethodInfo` метод, в примере кода показано значение <xref:System.Type.DeclaringMethod%2A> свойство для параметра универсального типа метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-284">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-285">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-285">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-286">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-286">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-287">Возвращает тип, объявивший текущий вложенный тип или параметр универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-287">Gets the type that declares the current nested type or generic type parameter.</span></span></summary>
        <value><span data-ttu-id="92aaa-288">Объект <see cref="T:System.Type" />, представляющий включающий тип, если текущий тип является вложенным, или определение универсального типа, если текущий тип является параметром универсального типа, или тип, объявивший этот универсальный метод, если текущий тип является параметром типа универсального метода; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-288">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-289">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство возвращает определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-289">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="92aaa-290">Если текущий <xref:System.Type> представляет параметр типа универсального метода, это свойство возвращает тип, который содержит определение универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-290">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="92aaa-291">Если тип универсален, возвращается определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-291">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="92aaa-292">То есть следующий код возвращает определение универсального типа <xref:System.Collections.Generic.List%601> универсальный класс, который содержит <xref:System.Collections.Generic.List%601.ConvertAll%2A> универсальный метод:</span><span class="sxs-lookup"><span data-stu-id="92aaa-292">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="92aaa-293">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, <xref:System.Type.DeclaringType%2A> и <xref:System.Type.DeclaringMethod%2A> свойства определяют определение универсального типа или определение универсального метода, где параметр универсального типа была изначально определена:</span><span class="sxs-lookup"><span data-stu-id="92aaa-293">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="92aaa-294">Если <xref:System.Type.DeclaringMethod%2A> возвращает <xref:System.Reflection.MethodInfo>, в котором <xref:System.Reflection.MethodInfo> представляет определение универсального метода и текущий <xref:System.Type> представляет параметр типа определения универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-294">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="92aaa-295">Если <xref:System.Type.DeclaringMethod%2A> возвращает `null`, а затем <xref:System.Type.DeclaringType%2A> свойство всегда возвращает <xref:System.Type> объект, представляющий определение универсального типа и текущий <xref:System.Type> представляет параметр типа универсального типа Определение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-295">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="92aaa-296">Начало <xref:System.Type.DeclaringType%2A> свойства в типе которого <xref:System.Type.IsGenericParameter%2A> свойство `false` вызывает <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-296">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-297">Этот пример отображает объявляющий тип метода в производном классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-297">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-298">Возвращает ссылку на связыватель по умолчанию, который реализует внутренние правила выбора соответствующих членов, вызываемых методом <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-298">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-299">Ссылка на связыватель, используемый в системе по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-299">A reference to the default binder used by the system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-300">Связыватель по умолчанию, предоставляемый среда подходит для всех, кроме очень специфических ситуаций.</span><span class="sxs-lookup"><span data-stu-id="92aaa-300">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="92aaa-301">Если вам нужна binder, следующим правила, которые отличаются от методов связывателя по умолчанию, определяют тип, производный от <xref:System.Reflection.Binder> класса и передавало экземпляр этого типа с помощью `binder` параметр одного из <xref:System.Type.InvokeMember%2A> перегрузки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-301">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="92aaa-302">Отражение моделирует правила доступности система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-302">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="92aaa-303">Например если вызывающий объект находится в той же сборке, вызывающему объекту не требуется специальных разрешений для внутренних членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-303">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="92aaa-304">В противном случае вызывающий объект должен <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-304">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="92aaa-305">Это согласуется с поиск членов, которые защищены, частных и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-305">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="92aaa-306">Общий принцип является то, что <xref:System.Reflection.Binder.ChangeType%2A> должен выполнять только расширяющие преобразования, которые никогда не потерять данные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-306">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="92aaa-307">Пример расширяющего преобразования преобразует значение 32-разрядное целое число со знаком длиной 64-разрядное целое число со знаком.</span><span class="sxs-lookup"><span data-stu-id="92aaa-307">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="92aaa-308">Этим оно отличается от сужающее преобразование, которое может произойти потеря данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-308">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="92aaa-309">Примером сужающего преобразования преобразование 64-разрядное знаковое целое число 32-битовое целое число со знаком.</span><span class="sxs-lookup"><span data-stu-id="92aaa-309">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="92aaa-310">В следующей таблице перечислены преобразования, поддерживаемые классом связыватель по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-310">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="92aaa-311">Тип источника</span><span class="sxs-lookup"><span data-stu-id="92aaa-311">Source Type</span></span>|<span data-ttu-id="92aaa-312">Тип целевого объекта</span><span class="sxs-lookup"><span data-stu-id="92aaa-312">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="92aaa-313">Любой тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-313">Any type</span></span>|<span data-ttu-id="92aaa-314">Его базовый тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-314">Its base type.</span></span>|  
|<span data-ttu-id="92aaa-315">Любой тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-315">Any type</span></span>|<span data-ttu-id="92aaa-316">Интерфейс, который он реализует.</span><span class="sxs-lookup"><span data-stu-id="92aaa-316">The interface it implements.</span></span>|  
|<span data-ttu-id="92aaa-317">Char</span><span class="sxs-lookup"><span data-stu-id="92aaa-317">Char</span></span>|<span data-ttu-id="92aaa-318">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-318">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-319">Byte</span><span class="sxs-lookup"><span data-stu-id="92aaa-319">Byte</span></span>|<span data-ttu-id="92aaa-320">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-320">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-321">SByte</span><span class="sxs-lookup"><span data-stu-id="92aaa-321">SByte</span></span>|<span data-ttu-id="92aaa-322">Int16, Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-322">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-323">UInt16</span><span class="sxs-lookup"><span data-stu-id="92aaa-323">UInt16</span></span>|<span data-ttu-id="92aaa-324">UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-324">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-325">Int16</span><span class="sxs-lookup"><span data-stu-id="92aaa-325">Int16</span></span>|<span data-ttu-id="92aaa-326">Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-326">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-327">UInt32</span><span class="sxs-lookup"><span data-stu-id="92aaa-327">UInt32</span></span>|<span data-ttu-id="92aaa-328">UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-328">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-329">Int32</span><span class="sxs-lookup"><span data-stu-id="92aaa-329">Int32</span></span>|<span data-ttu-id="92aaa-330">Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-330">Int64, Single, Double</span></span>|  
|<span data-ttu-id="92aaa-331">UInt64</span><span class="sxs-lookup"><span data-stu-id="92aaa-331">UInt64</span></span>|<span data-ttu-id="92aaa-332">Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-332">Single, Double</span></span>|  
|<span data-ttu-id="92aaa-333">Int64</span><span class="sxs-lookup"><span data-stu-id="92aaa-333">Int64</span></span>|<span data-ttu-id="92aaa-334">Single, Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-334">Single, Double</span></span>|  
|<span data-ttu-id="92aaa-335">Single</span><span class="sxs-lookup"><span data-stu-id="92aaa-335">Single</span></span>|<span data-ttu-id="92aaa-336">Double</span><span class="sxs-lookup"><span data-stu-id="92aaa-336">Double</span></span>|  
|<span data-ttu-id="92aaa-337">Non-reference</span><span class="sxs-lookup"><span data-stu-id="92aaa-337">Non-reference</span></span>|<span data-ttu-id="92aaa-338">По ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-338">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-339">В следующем примере возвращается связыватель по умолчанию из `DefaultBinder` свойство и вызывает член класса MyClass, передав `DefaultBinder` значение в качестве параметра <xref:System.Type.InvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-339">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-340">Разделяет имена в пространстве имен класса <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-340">Separates names in the namespace of the <see cref="T:System.Type" />.</span></span> <span data-ttu-id="92aaa-341">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-341">This field is read-only.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-342">Представляет пустой массив типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-342">Represents an empty array of type <see cref="T:System.Type" />.</span></span> <span data-ttu-id="92aaa-343">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-343">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92aaa-344">В следующем коде показано в примере `EmptyTypes` поле, используемое в одном из `GetConstructor` способа получить конструктор, который не принимает никаких параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-344">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-345">Определяет, совпадает ли базовый системный тип текущего объекта <see cref="T:System.Type" /> с базовым системным типом указанного объекта <see cref="T:System.Object" /> или <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-345">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="92aaa-346">Объект, базовый системный тип которого сравнивается с базовым системным типом текущего типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-346">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span> <span data-ttu-id="92aaa-347">Для успешного сравнения необходимо, чтобы параметр <paramref name="o" /> можно было привести к объекту типа <see cref="T:System.Type" /> или преобразовать в объект такого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-347">For the comparison to succeed, <paramref name="o" /> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-348">Определяет, совпадает ли базовый системный тип текущего объекта <see cref="T:System.Type" /> с базовым системным типом указанного объекта <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-348">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-349">Значение <see langword="true" />, если базовый системный тип параметра <paramref name="o" /> совпадает с базовым системным типом текущего объекта <see cref="T:System.Type" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-349"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="92aaa-350">Этот метод также возвращает <see langword="false" /> в следующих случаях:</span><span class="sxs-lookup"><span data-stu-id="92aaa-350">This method also returns <see langword="false" /> if: .</span></span>  
  <span data-ttu-id="92aaa-351">
-   <paramref name="o" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-351">
-   <paramref name="o" /> is <see langword="null" />.</span></span>  
  <span data-ttu-id="92aaa-352">
-   <paramref name="o" /> невозможно привести к объекту или преобразовать в объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-352">
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-353">Этот метод переопределяет метод <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-353">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="92aaa-354">Он приводит `o` для объекта типа <xref:System.Type> и вызывает <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-354">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-355">В следующем примере используется <xref:System.Type.Equals%28System.Object%29> для сравнения различных <xref:System.Type> экземпляры с различными объектов <xref:System.Object> экземпляров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-355">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="92aaa-356">Это особенно необходимо отметить в примере:</span><span class="sxs-lookup"><span data-stu-id="92aaa-356">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="92aaa-357">Сравнение <xref:System.Type> объект, который представляет собой целое число с <xref:System.Reflection.TypeInfo> объект, который представляет возвращаемое целое `true` поскольку <xref:System.Reflection.TypeInfo> является производным от <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-357">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="92aaa-358">Сравнение <xref:System.Type> , представляющий <xref:System.Collections.Generic.IList%601> объект (открытый универсальный тип) с `List(Of String)` object (закрытого универсального типа) возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-358">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="92aaa-359">Объект, базовый системный тип которого сравнивается с базовым системным типом текущего типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-359">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-360">Позволяет определить, совпадает ли базовый системный тип текущего объекта <see cref="T:System.Type" /> с базовым системным типом указанного объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-360">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-361">Значение <see langword="true" />, если базовый системный тип параметра <paramref name="o" /> совпадает с базовым системным типом текущего объекта <see cref="T:System.Type" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-361"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92aaa-362">В следующем примере используется `Equals` для сравнения двух типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-362">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-363">Предоставляет фильтр членов, используемый для атрибутов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-363">Represents the member filter used on attributes.</span></span> <span data-ttu-id="92aaa-364">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-364">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-365">Это поле хранит ссылку на делегат, используемый <xref:System.Type.FindMembers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-365">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="92aaa-366">Метода, инкапсулируемого данным делегатом принимает два параметра: первый — <xref:System.Reflection.MemberInfo> объекта, а второй – `Object`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-366">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="92aaa-367">Этот метод определяет, является ли `MemberInfo` объект соответствует критериям, заданным `Object`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-367">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="92aaa-368">`Object` Может быть присвоено значение любого из полей в классах <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, или <xref:System.Reflection.MethodImplAttributes>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-368">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="92aaa-369">Например `Object` может быть присвоено значение поля из `FieldAttributes` такие как Public.</span><span class="sxs-lookup"><span data-stu-id="92aaa-369">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="92aaa-370">В этом случае, когда `FilterAttribute` делегат вызывается, он возвращает `true` только в том случае, если метод, представленный `MemberInfo` объект дополнен атрибутом открытого поля в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-370">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-371">В следующем примере возвращается `FilterAttribute` делегировать, передает его в качестве параметра <xref:System.Type.FindMembers%2A> метод и отображает заданные элементы и их атрибуты.</span><span class="sxs-lookup"><span data-stu-id="92aaa-371">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-372">Представляет фильтр членов с учетом регистра, применяемый к именам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-372">Represents the case-sensitive member filter used on names.</span></span> <span data-ttu-id="92aaa-373">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-373">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-374">Это поле хранит ссылку на делегат, используемый <xref:System.Type.FindMembers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-374">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="92aaa-375">Метода, инкапсулируемого данным делегатом принимает два параметра: первый — <xref:System.Reflection.MemberInfo> объекта, а второй – `Object`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-375">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="92aaa-376">Этот метод определяет, является ли `MemberInfo` объект соответствует критериям, заданным `Object`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-376">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="92aaa-377">`Object` Присваивается строковое значение, которое может содержать символ «\*» подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="92aaa-377">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="92aaa-378">Поддерживается только конечный совпадение со строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-378">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="92aaa-379">Например `Object` может быть присвоено значение «Байт \*».</span><span class="sxs-lookup"><span data-stu-id="92aaa-379">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="92aaa-380">В этом случае, когда `FilterName` делегат вызывается, он возвращает `true` только в том случае, если метод, представленный `MemberInfo` объект имеет имя, которое начинается с «Byte».</span><span class="sxs-lookup"><span data-stu-id="92aaa-380">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-381">В следующем примере возвращаются методы, связанные с определяемыми пользователем `Application` типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-381">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-382">Представляет фильтр членов без учета регистра, применяемый к именам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-382">Represents the case-insensitive member filter used on names.</span></span> <span data-ttu-id="92aaa-383">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-383">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-384">Это поле хранит ссылку на делегат, используемый <xref:System.Type.FindMembers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-384">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="92aaa-385">Метода, инкапсулируемого данным делегатом принимает два параметра: первый — <xref:System.Reflection.MemberInfo> объекта, а второй – `Object`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-385">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="92aaa-386">Этот метод определяет, является ли `MemberInfo` объект соответствует критериям, заданным `Object`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-386">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="92aaa-387">`Object` Присваивается строковое значение, которое может содержать символ «\*» подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="92aaa-387">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="92aaa-388">Поддерживается только конечный совпадение со строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-388">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="92aaa-389">Например `Object` может быть присвоено значение «Байт \*».</span><span class="sxs-lookup"><span data-stu-id="92aaa-389">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="92aaa-390">В этом случае, когда `FilterName` делегат вызывается, он вернет значение true, только если метод, представленный `MemberInfo` объект имеет имя, которое начинается с «byte», без учета регистра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-390">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-391">В следующем примере возвращается `MemberFilter` делегировать, передает его в качестве параметра <xref:System.Type.FindMembers%2A> метод и отображает методы и их атрибуты `String` класс, который начинается с прописной или строчной буквы «c»,.</span><span class="sxs-lookup"><span data-stu-id="92aaa-391">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="filterCriteria" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="92aaa-392">Делегат, сравнивающий интерфейсы с параметром <paramref name="filterCriteria" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-392">The delegate that compares the interfaces against <paramref name="filterCriteria" />.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="92aaa-393">Критерий поиска, определяющий, должен ли тот или иной интерфейс включаться в возвращаемый массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-393">The search criteria that determines whether an interface should be included in the returned array.</span></span></param>
        <summary><span data-ttu-id="92aaa-394">Возвращает массив объектов <see cref="T:System.Type" />, представляющий отфильтрованный список интерфейсов, реализованных или наследуемых текущим объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-394">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-395">Массив объектов <see cref="T:System.Type" />, представляющий отфильтрованный список интерфейсов, которые реализует или наследует текущий объект <see cref="T:System.Type" />, или пустой массив, если после применения фильтра для текущего объекта <see cref="T:System.Type" /> отсутствуют соответствующие реализованные или унаследованные интерфейсы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-395">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-396">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-396">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="92aaa-397"><xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> И <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> предоставленных делегатов <xref:System.Reflection.Module?displayProperty=nameWithType> класс может также использоваться, вместо <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> делегировать.</span><span class="sxs-lookup"><span data-stu-id="92aaa-397">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="92aaa-398">Все интерфейсы, реализованные этим классом, считаются во время поиска ли для объявления базового класса или в самом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-398">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="92aaa-399">Этот метод выполняет поиск по иерархии, возвращение каждого соответствующего интерфейса каждый класс реализует интерфейс, а также все соответствующие интерфейсы, каждый из этих интерфейсов реализует (то есть возвращается транзитивное замыкание сопоставления интерфейсов).</span><span class="sxs-lookup"><span data-stu-id="92aaa-399">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="92aaa-400">Каждый интерфейс возвращаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-400">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="92aaa-401">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, <xref:System.Type.FindInterfaces%2A> поиск всех интерфейсов, объявленных в ограничения для параметра типа, и все интерфейсы, наследуемые через интерфейсы объявлен в соответствии с ограничениями.</span><span class="sxs-lookup"><span data-stu-id="92aaa-401">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="92aaa-402">Если текущий <xref:System.Type> представляет аргумент типа универсального типа, <xref:System.Type.FindInterfaces%2A> ищет все интерфейсы, реализованные с помощью типа, независимо от того, имеется ли они удовлетворяет ограничениям.</span><span class="sxs-lookup"><span data-stu-id="92aaa-402">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-403"><xref:System.Type.FindInterfaces%2A> можно возвращать универсальные интерфейсы, даже для типов, которые не являются универсальными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-403"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="92aaa-404">Например, может реализовать неуниверсальный тип `IEnumerable<int>` (`IEnumerable(Of Integer)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-404">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-405">В следующем примере вычисляется указанный интерфейс реализован или унаследованные указанным типом и затем отображает имена интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-405">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-406"><paramref name="filter" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-406"><paramref name="filter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-407">Статический инициализатор вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-407">A static initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="filterCriteria" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="memberType"><span data-ttu-id="92aaa-408">Побитовое сочетание значений перечисления, обозначающее тип искомого члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-408">A bitwise combination of the enumeration values that indicates the type of member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-409">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-409">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-410">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-410">-or-</span></span> 
 <span data-ttu-id="92aaa-411"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-411"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="filter"><span data-ttu-id="92aaa-412">Делегат, выполняющий сравнение и возвращающий <see langword="true" />, если проверяемый член соответствует условиям, заданным в параметре <paramref name="filterCriteria" />, и <see langword="false" /> в противном случае.</span><span class="sxs-lookup"><span data-stu-id="92aaa-412">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="92aaa-413">Условие поиска, определяющее, будет ли член включен в возвращаемый массив объектов <see langword="MemberInfo" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-413">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span></span>  
  
<span data-ttu-id="92aaa-414">Поля классов <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> и <see langword="MethodImplAttributes" /> могут использоваться вместе с делегатом <see langword="FilterAttribute" />, предоставляемым этим классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-414">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span></span></param>
        <summary><span data-ttu-id="92aaa-415">Возвращает отфильтрованный массив объектов <see cref="T:System.Reflection.MemberInfo" />, тип которого совпадает с указанным типом члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-415">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-416">Отфильтрованный массив объектов <see cref="T:System.Reflection.MemberInfo" />, имеющих тип указанного члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-416">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span>  
  
<span data-ttu-id="92aaa-417">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-417">-or-</span></span> 
<span data-ttu-id="92aaa-418">Пустой массив, если у текущего <see cref="T:System.Type" /> нет членов типа <paramref name="memberType" />, удовлетворяющих условиям фильтра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-418">An empty array if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="92aaa-419">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-419">This method can be overridden by a derived class.</span></span>  
  
<span data-ttu-id="92aaa-420">Элементы включают свойства, методы, поля, события и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-420">Members include properties, methods, fields, events, and so on.</span></span>  

<span data-ttu-id="92aaa-421">Для `FindMembers` метод для успешного получения информация об элементе, `bindingAttr` аргумент должен содержать хотя бы один из <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, вместе с по крайней мере один из <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-421">For the `FindMembers` method to successfully retrieve member information, the `bindingAttr` argument must include at least one of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, along with at least one of <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span></span> 

 <span data-ttu-id="92aaa-422">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-422">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-423">Укажите `BindingFlags.Instance` для включения при поиске членов экземпляров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-423">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-424">Укажите `BindingFlags.Static` для включения в поиск статические члены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-424">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-425">Укажите `BindingFlags.Public` для включения в поиск открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-425">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-426">Укажите `BindingFlags.NonPublic` с участием не являющиеся открытыми (то есть внутренней, закрытые и защищенные члены) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-426">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="92aaa-427">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-427">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-428">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-428">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-429">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-429">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
<span data-ttu-id="92aaa-430">Чтобы получить инициализатор класса (статический конструктор), с помощью этого метода, необходимо указать <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-430">To get the class initializer (static constructor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-431">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-431">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
<span data-ttu-id="92aaa-432">Если текущий <xref:System.Type> представляет параметр типа универсального типа или метода, <xref:System.Type.FindMembers%2A> обрабатывает все члены, объявленные в класс ограничения и ограничения интерфейса параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-432">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  

<span data-ttu-id="92aaa-433">`filter` Аргумент может принимать пользовательский делегат типа <xref:System.Reflection.MemberFilter>, или он может принимать одно из следующих предопределенных делегаты:</span><span class="sxs-lookup"><span data-stu-id="92aaa-433">The `filter` argument can be a custom delegate of type <xref:System.Reflection.MemberFilter>, or it can be one of the following  predefined delegates:</span></span>

- <span data-ttu-id="92aaa-434"><xref:System.Type.FilterAttribute?displayProperty=nameWithType>, которая использует<xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, или <xref:System.Reflection.MethodImplAttributes> вспомним `filterCriteria` значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-434"><xref:System.Type.FilterAttribute?displayProperty=nameWithType>, which uses a<xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes> bitmask as the `filterCriteria` value.</span></span>

- <span data-ttu-id="92aaa-435"><xref:System.Type.FilterName?displayProperty=nameWithType>, который выполняет сравнение с учетом регистра имени каждого члена с помощью строки, переданной `filterCriteria`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-435"><xref:System.Type.FilterName?displayProperty=nameWithType>, which performs a case-sensitive comparison of each member name with the string passed to `filterCriteria`.</span></span>

- <span data-ttu-id="92aaa-436"><xref:System.Type.FilterNameIgnoreCase?displayProperty=nameWithType>, который выполняет сравнение без учета регистра имени каждого члена с помощью строки, переданной `filterCriteria`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-436"><xref:System.Type.FilterNameIgnoreCase?displayProperty=nameWithType>, which performs a case-insensitive comparison of each member name with the string passed to `filterCriteria`.</span></span>

## Examples  
 <span data-ttu-id="92aaa-437">Следующий пример находит все члены в классе, который соответствует указанным условиям поиска, а затем отображает соответствующие члены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-437">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-438"><paramref name="filter" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-438"><paramref name="filter" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-439">Возвращает полное имя типа, включая пространство имен, но не сборку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-439">Gets the fully qualified name of the type, including its namespace but not its assembly.</span></span></summary>
        <value><span data-ttu-id="92aaa-440">Полное имя типа, включая пространство имен, но не сборку; или значение <see langword="null" />, если текущий экземпляр представляет параметр универсального типа, тип массива, тип указателя, тип <see langword="byref" /> на основе параметра типа либо универсальный тип, который, хотя и не является определением универсального типа, содержит неразрешенные параметры типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-440">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-441">Например, полное имя <xref:System.String> тип — `System.String`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-441">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="92aaa-442">Сравните это с именем с указанием сборки, возвращенным <xref:System.Type.AssemblyQualifiedName%2A> свойство, которое состоит из полного имени, а также полное имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-442">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="92aaa-443">Если текущий тип представляет закрытый универсальный тип, возвращаемый аргументы типа в строке <xref:System.Type.FullName%2A> свойства определяются их полное имя сборки, несмотря на то, что строковое представление универсального типа не квалифицируется его full имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-443">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="92aaa-444">В следующем примере показано различие в свойстве FullName для типа, представляющий определение универсального типа и одно из них представляет закрытый универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-444">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="92aaa-445">Это свойство возвращает `null` если:</span><span class="sxs-lookup"><span data-stu-id="92aaa-445">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="92aaa-446">Текущий <xref:System.Type> представляет параметр типа универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-446">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="92aaa-447">В следующем примере извлекается параметр типа <xref:System.Nullable%601> тип и пытается отобразить его <xref:System.Type.FullName%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-447">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="92aaa-448">Текущий <xref:System.Type> объект представляет тип массива, тип указателя, или `byref` тип, основанный на параметр универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-448">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="92aaa-449">В следующем примере определяется универсальный тип, `Generictype1<T>`, три метода: `Display(T[])`, который передается массив объектов типа T; `HandleT(T)`, которой передается объект T; и `ChangeValue(ref T)`, который передается по ссылке объект T.</span><span class="sxs-lookup"><span data-stu-id="92aaa-449">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="92aaa-450">Так как C# и Visual Basic не позволяют нам определить как указатель в T `HandleT` метод, у нас есть для вызова <xref:System.Type.MakePointerType%2A> метод <xref:System.Type> , представляющий тип параметра метода, чтобы создать указатель к универсальному типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-450">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="92aaa-451">Выходные данные примера показано, что во всех трех случаях <xref:System.Type.FullName%2A> свойство `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-451">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="92aaa-452">Текущий тип содержит параметры универсального типа, которые не были заменены определенных типов (т. е <xref:System.Type.ContainsGenericParameters%2A> возвращает `true`), но тип не является определением универсального типа (то есть <xref:System.Type.IsGenericTypeDefinition%2A> возвращает `false`</span><span class="sxs-lookup"><span data-stu-id="92aaa-452">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="92aaa-453">В следующем примере `Derived<T>` наследует от `Base<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-453">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="92aaa-454"><xref:System.Type.BaseType%2A> Свойство получает <xref:System.Type> , представляющий базовый тип `Derived<T>`и его <xref:System.Type.FullName%2A> возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-454">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="92aaa-455">Чтобы получить <xref:System.Type.FullName%2A> , не `null`, можно использовать <xref:System.Type.GetGenericTypeDefinition%2A> метод для получения определения универсального типа, как показано в примере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-455">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="92aaa-456">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-456">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-457">Следующий пример отображает полное имя указанного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-457">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="92aaa-458">В следующем примере сравниваются строки, возвращаемые <xref:System.Type.ToString%2A> метод и `Name`, <xref:System.Type.FullName%2A>, и <xref:System.Type.AssemblyQualifiedName%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-458">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-459">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-459">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-460">Возвращает сочетание флагов <see cref="T:System.Reflection.GenericParameterAttributes" />, описывающих ковариацию и особые ограничения текущего параметра универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-460">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="92aaa-461">Побитовое сочетание значений <see cref="T:System.Reflection.GenericParameterAttributes" />, которое описывает ковариацию и особые ограничения текущего параметра универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-461">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-462">Значение этого свойства содержит флаги, описывающие ли текущий параметр универсального типа является ковариантным и флаги, описывающие особые ограничения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-462">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="92aaa-463">Используйте <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> значение для выбора флаги ковариации и использовать <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> значение для выбора флагов ограничений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-463">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="92aaa-464">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-464">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-465">В следующем примере кода определяется универсальный тип `Test` с двумя параметрами типа, которые имеют различные ограничения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-465">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="92aaa-466">При выполнении программы, ограничения проверяются с использованием <xref:System.Type.GenericParameterAttributes%2A> свойство и <xref:System.Type.GetGenericParameterConstraints%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-466">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-467">Текущий объект <see cref="T:System.Type" /> не является параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-467">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span></span> <span data-ttu-id="92aaa-468">То есть свойство <see cref="P:System.Type.IsGenericParameter" /> возвращает значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-468">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-469">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-469">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-470">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-470">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-471">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-471">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-472">Возвращает позицию параметра типа в списке параметров универсального типа или метода, который объявил параметр, если объект <see cref="T:System.Type" /> представляет параметр универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-472">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span></span></summary>
        <value><span data-ttu-id="92aaa-473">Позиция параметра типа в списке параметров типа универсального типа или метода, которые задали этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-473">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span></span> <span data-ttu-id="92aaa-474">Нумерация позиций начинается с 0.</span><span class="sxs-lookup"><span data-stu-id="92aaa-474">Position numbers begin at 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-475"><xref:System.Type.GenericParameterPosition%2A> Свойство возвращает позицию параметра типа в списке параметров определения универсального типа или определение универсального метода которой была изначально определена параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-475">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="92aaa-476"><xref:System.Type.DeclaringType%2A> И <xref:System.Type.DeclaringMethod%2A> свойства определяют определении универсального типа или метода:</span><span class="sxs-lookup"><span data-stu-id="92aaa-476">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="92aaa-477">Если <xref:System.Type.DeclaringMethod%2A> возвращает <xref:System.Reflection.MethodInfo>, в котором <xref:System.Reflection.MethodInfo> представляет определение универсального метода и текущий <xref:System.Type> представляет параметр типа определения универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-477">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="92aaa-478">Если <xref:System.Type.DeclaringMethod%2A> возвращает `null`, а затем <xref:System.Type.DeclaringType%2A> свойство всегда возвращает <xref:System.Type> объект, представляющий определение универсального типа и текущий <xref:System.Type> представляет параметр типа универсального типа Определение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-478">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="92aaa-479">Чтобы обеспечить правильный контекст для значения <xref:System.Type.GenericParameterPosition%2A> свойство, это необходимо для определения универсального типа или метода, параметр типа относится к.</span><span class="sxs-lookup"><span data-stu-id="92aaa-479">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="92aaa-480">Например, рассмотрим возвращаемое значение метода `GetSomething` в следующем коде:</span><span class="sxs-lookup"><span data-stu-id="92aaa-480">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="92aaa-481">Тип, возвращаемый `GetSomething` зависит от типа аргументов, предоставляемых классом `A` и `GetSomething` сам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-481">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="92aaa-482">Вы можете получить <xref:System.Reflection.MethodInfo> для `GetSomething`, и в, вы можете получить тип возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-482">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="92aaa-483">При проверке параметров типа, типа возвращаемого значения, <xref:System.Type.GenericParameterPosition%2A> возвращает 0 для обоих.</span><span class="sxs-lookup"><span data-stu-id="92aaa-483">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="92aaa-484">Положение `V` равно 0, так как `V` является первым параметром типа в списке параметров типа для класса `A`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-484">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="92aaa-485">Положение `X` равно 0, так как `X` является первым параметром в списке параметров типа для типа `GetSomething`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-485">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-486">Вызов <xref:System.Type.GenericParameterPosition%2A> свойство вызывает исключение, если текущий <xref:System.Type> не представляет параметр типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-486">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="92aaa-487">При проверке аргументов типа открытого сконструированного типа, использовать <xref:System.Type.IsGenericParameter%2A> свойство, чтобы сообщить, которые являются параметрами типа, а какие — типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-487">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="92aaa-488"><xref:System.Type.IsGenericParameter%2A> Возвращает `true` для параметра типа; затем можно использовать <xref:System.Type.GenericParameterPosition%2A> метод для получения его положения и использования <xref:System.Type.DeclaringMethod%2A> и <xref:System.Type.DeclaringType%2A> свойства, чтобы определить, метода или определение, определяющего его типа .</span><span class="sxs-lookup"><span data-stu-id="92aaa-488">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-489">В следующем примере определяется универсальный класс с двумя параметрами типа и определяет второй универсальный класс, производный от первого класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-489">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="92aaa-490">Базовый класс для производного класса имеет два аргумента типа: во-первых, <xref:System.Int32>, а второй — параметр типа производного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-490">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="92aaa-491">В примере отображаются сведения об этих универсальных классов, включая должности сообщил <xref:System.Type.GenericParameterPosition%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-491">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-492">Текущий тип не представляет параметр типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-492">The current type does not represent a type parameter.</span></span> <span data-ttu-id="92aaa-493">То есть <see cref="P:System.Type.IsGenericParameter" /> возвращает <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-493">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-494">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-494">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-495">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-495">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-496">Получает массив аргументов универсального типа для этого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-496">Gets an array of the generic type arguments for this type.</span></span></summary>
        <value><span data-ttu-id="92aaa-497">Массив аргументов универсального типа для этого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-497">An array of the generic type arguments for this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-498">Это свойство возвращает только аргументы универсального типа; то есть типы, которые были указаны для параметров универсального типа для текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-498">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="92aaa-499">Если текущий тип является определением универсального типа, это свойство возвращает пустой массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-499">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-500">При использовании универсального типа универсального метода или другого универсального типа, некоторые из его аргументов универсального типа могут быть параметров универсального типа для включающего метода или типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-500">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="92aaa-501">Чтобы получить параметры универсального типа, типа, представляющий определение универсального типа, используйте <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-501">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="92aaa-502">Чтобы получить <xref:System.Reflection.TypeInfo> объект для текущего <xref:System.Type> , используйте <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> метод расширения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-502">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-503">Возвращает размерность массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-503">Gets the number of dimensions in an array.</span></span></summary>
        <returns><span data-ttu-id="92aaa-504">Целое число, указывающее на количество измерений текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-504">An integer that contains the number of dimensions in the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92aaa-505">Следующий пример отображает число измерений в массиве.</span><span class="sxs-lookup"><span data-stu-id="92aaa-505">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-506">Функциональность этого метода не поддерживается в базовом классе и должна быть реализована в производном классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-506">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-507">Текущий тип не является массивом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-507">The current type is not an array.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-508">При переопределении в производном классе реализует свойство <see cref="P:System.Type.Attributes" /> и возвращает побитовое сочетание значений перечисления, указывающих атрибуты, связанные с <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-508">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitwise combination of enumeration values that indicate the attributes associated with the <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-509">Объект <see cref="T:System.Reflection.TypeAttributes" />, представляющий набор атрибутов объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-509">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-510">Возвращает определенный конструктор текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-510">Gets a specific constructor of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="92aaa-511">Массив объектов <see cref="T:System.Type" />, предоставляющих число, порядок и тип параметров нужного конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-511">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span></span>  
  
<span data-ttu-id="92aaa-512">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-512">-or-</span></span> 
<span data-ttu-id="92aaa-513">Пустой массив объектов <see cref="T:System.Type" /> для получения конструктора, не имеющего параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-513">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span></span> <span data-ttu-id="92aaa-514">Подобный пустой массив предоставляется полем <see langword="static" /> с описателем <see cref="F:System.Type.EmptyTypes" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-514">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-515">Выполняет поиск открытого конструктора экземпляра, параметры которого соответствуют типам, содержащимся в указанном массиве.</span><span class="sxs-lookup"><span data-stu-id="92aaa-515">Searches for a public instance constructor whose parameters match the types in the specified array.</span></span></summary>
        <returns><span data-ttu-id="92aaa-516">Объект, представляющий открытый конструктор экземпляра, параметры которого соответствуют типам, указанным в массиве типов параметров, если такой конструктор найден; в противном случае — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-516">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-517">Эта перегрузка метода ищет открытые конструкторы экземпляров и не может использоваться для получения инициализатором класса (статический конструктор).</span><span class="sxs-lookup"><span data-stu-id="92aaa-517">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (static constructor).</span></span> <span data-ttu-id="92aaa-518">Чтобы получить инициализатором класса, используйте перегрузку, принимающую <xref:System.Reflection.BindingFlags>и укажите <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-518">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-519">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-519">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-520">Если запрашиваемый конструктор не является открытым, этот метод возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-520">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-521">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-521">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-522">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-522">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-523">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.ConstructorInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-523">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="92aaa-524">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод всегда возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-524">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-525">В следующем примере извлекается тип `MyClass`, получает <xref:System.Reflection.ConstructorInfo> и отображает сигнатура конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-525">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-526"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-526"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-527">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-527">-or-</span></span> 
<span data-ttu-id="92aaa-528">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-528">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-529">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-529"><paramref name="types" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-530">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-530">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-531">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-531">-or-</span></span> 
 <span data-ttu-id="92aaa-532"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-532"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-533">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-533">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-534">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-534">-or-</span></span> 
<span data-ttu-id="92aaa-535">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-535">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-536">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров, извлекаемых конструктором.</span><span class="sxs-lookup"><span data-stu-id="92aaa-536">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="92aaa-537">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-537">-or-</span></span> 
<span data-ttu-id="92aaa-538">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить конструктор, который не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-538">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span>  
  
<span data-ttu-id="92aaa-539">- или -</span><span class="sxs-lookup"><span data-stu-id="92aaa-539">-or-</span></span> 
 <span data-ttu-id="92aaa-540"><see cref="F:System.Type.EmptyTypes" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-540"><see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-541">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве типов параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-541">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span></span> <span data-ttu-id="92aaa-542">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-542">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-543">Выполняет поиск конструктора, параметры которого соответствуют указанным типам аргументов и модификаторам, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-543">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-544">Если поиск выполнен удачно, возвращается объект <see cref="T:System.Reflection.ConstructorInfo" />, представляющий конструктор, который соответствует указанным требованиям; в противном случае возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-544">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-545">Если точное соответствие не существует, `binder` попытается преобразовать типы параметров, указанные в `types` массива, чтобы найти совпадение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-545">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="92aaa-546">Если `binder` не удается найти совпадение, затем `null` возвращается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-546">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="92aaa-547">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения конструкторов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-547">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-548">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-548">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-549">Укажите `BindingFlags.Public` для включения в поиск открытых конструкторов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-549">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-550">Укажите `BindingFlags.NonPublic` для включения в поиск закрытые конструкторы (то есть внутренней, закрытые и защищенные конструкторы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-550">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="92aaa-551">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-551">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-552">Чтобы получить инициализатор класса (статический конструктор), с помощью этой перегрузки метода, необходимо указать <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-552">To get the class initializer (static constructor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-553">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-553">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-554">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-554">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-555">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-555">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-556">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.ConstructorInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-556">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="92aaa-557">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод всегда возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-557">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-558">В следующем коде определяется тип `MyClass1` класса получает <xref:System.Reflection.ConstructorInfo> объекта, соответствующих заданным флагам привязки и отображается подпись конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-558">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-559"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-559"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-560">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-560">-or-</span></span> 
<span data-ttu-id="92aaa-561">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-561">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-562">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-562"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-563">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-563">-or-</span></span> 
 <span data-ttu-id="92aaa-564">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-564"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-565">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-565">-or-</span></span> 
 <span data-ttu-id="92aaa-566"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-566"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-567">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-567">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-568">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-568">-or-</span></span> 
 <span data-ttu-id="92aaa-569"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-569"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-570">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-570">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-571">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-571">-or-</span></span> 
<span data-ttu-id="92aaa-572">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-572">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="92aaa-573">Объект, определяющий набор применяемых правил, касающихся порядка и расположения аргументов, способа передачи возвращаемого значения, регистров, используемых для аргументов, и очистки стека.</span><span class="sxs-lookup"><span data-stu-id="92aaa-573">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-574">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров, извлекаемых конструктором.</span><span class="sxs-lookup"><span data-stu-id="92aaa-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="92aaa-575">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-575">-or-</span></span> 
<span data-ttu-id="92aaa-576">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить конструктор, который не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-577">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-577">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-578">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-578">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-579">Выполняет поиск конструктора с параметрами, соответствующими указанным модификаторам и типам аргументов, с учетом заданных ограничений по привязке и соглашений о вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-579">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="92aaa-580">Если поиск выполнен удачно, возвращается объект, представляющий конструктор, который соответствует указанным требованиям; в противном случае возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-580">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-581">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-581">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-582">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-582">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-583">Если точное соответствие не существует, `binder` попытается преобразовать типы параметров, указанные в `types` массива, чтобы найти совпадение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-583">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="92aaa-584">Если `binder` не удается найти совпадение, затем `null` возвращается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-584">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="92aaa-585">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения конструкторов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-585">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-586">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-586">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-587">Укажите `BindingFlags.Public` для включения в поиск открытых конструкторов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-587">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-588">Укажите `BindingFlags.NonPublic` для включения в поиск закрытые конструкторы (то есть внутренней, закрытые и защищенные конструкторы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-588">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="92aaa-589">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-589">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-590">Чтобы получить инициализатор класса (статический конструктор), с помощью этого метода, необходимо указать <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-590">To get the class initializer (static constructor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-591">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-591">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-592">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-592">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-593">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-593">Member Type</span></span>|<span data-ttu-id="92aaa-594">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-594">Static</span></span>|<span data-ttu-id="92aaa-595">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-595">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-596">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-596">Constructor</span></span>|<span data-ttu-id="92aaa-597">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-597">No</span></span>|<span data-ttu-id="92aaa-598">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-598">No</span></span>|  
|<span data-ttu-id="92aaa-599">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-599">Field</span></span>|<span data-ttu-id="92aaa-600">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-600">No</span></span>|<span data-ttu-id="92aaa-601">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-601">Yes.</span></span> <span data-ttu-id="92aaa-602">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-602">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-603">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-603">Event</span></span>|<span data-ttu-id="92aaa-604">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-604">Not applicable</span></span>|<span data-ttu-id="92aaa-605">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-605">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-606">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-606">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-607">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-607">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-608">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-608">Method</span></span>|<span data-ttu-id="92aaa-609">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-609">No</span></span>|<span data-ttu-id="92aaa-610">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-610">Yes.</span></span> <span data-ttu-id="92aaa-611">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-611">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-612">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-612">Nested Type</span></span>|<span data-ttu-id="92aaa-613">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-613">No</span></span>|<span data-ttu-id="92aaa-614">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-614">No</span></span>|  
|<span data-ttu-id="92aaa-615">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-615">Property</span></span>|<span data-ttu-id="92aaa-616">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-616">Not applicable</span></span>|<span data-ttu-id="92aaa-617">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-617">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-618">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-618">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-619">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-619">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-620">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-620">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-621">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-621">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-622">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-622">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-623">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-623">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-624">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-624">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-625">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-625">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-626">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-626">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-627">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.ConstructorInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-627">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="92aaa-628">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод всегда возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-628">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-629">В следующем примере извлекается тип `MyClass1`, получает <xref:System.Reflection.ConstructorInfo> объект, который соответствует указанным флагам привязки и отображается подпись конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-629">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-630"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-630"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-631">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-631">-or-</span></span> 
<span data-ttu-id="92aaa-632">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-632">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-633">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-633"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-634">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-634">-or-</span></span> 
 <span data-ttu-id="92aaa-635">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-635"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-636">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-636">-or-</span></span> 
 <span data-ttu-id="92aaa-637"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-637"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-638">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-638">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-639">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-639">-or-</span></span> 
<span data-ttu-id="92aaa-640"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-640"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-641">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-641">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-642">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-642">-or-</span></span> 
<span data-ttu-id="92aaa-643">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-643">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="92aaa-644">Объект, определяющий набор применяемых правил, касающихся порядка и расположения аргументов, способа передачи возвращаемого значения, регистров, используемых для аргументов, и очистки стека.</span><span class="sxs-lookup"><span data-stu-id="92aaa-644">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-645">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров, извлекаемых конструктором.</span><span class="sxs-lookup"><span data-stu-id="92aaa-645">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="92aaa-646">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-646">-or-</span></span> 
<span data-ttu-id="92aaa-647">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить конструктор, который не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-647">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-648">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-648">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-649">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-649">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-650">При переопределении в производном классе ищет конструктор, параметры которого соответствуют указанным типам аргументов и модификаторам, используя для этого заданные ограничения привязки и соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-650">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="92aaa-651">Если поиск выполнен удачно, возвращается объект <see cref="T:System.Reflection.ConstructorInfo" />, представляющий конструктор, который соответствует указанным требованиям; в противном случае возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-651">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-652">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-652">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-653">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-653">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-654">Если точное соответствие не существует, `binder` попытается преобразовать типы параметров, указанные в `types` массива, чтобы найти совпадение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-654">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="92aaa-655">Если `binder` не удается найти совпадение, затем `null` возвращается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-655">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="92aaa-656">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения конструкторов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-656">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-657">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-657">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-658">Укажите `BindingFlags.Public` для включения в поиск открытых конструкторов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-658">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-659">Укажите `BindingFlags.NonPublic` для включения в поиск закрытые конструкторы (то есть внутренней, закрытые и защищенные конструкторы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-659">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="92aaa-660">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-660">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-661">Этот метод реализует <xref:System.Type.GetConstructor%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-661">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-662"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-662"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-663">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-663">-or-</span></span> 
<span data-ttu-id="92aaa-664">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-664">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-665">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-665"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-666">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-666">-or-</span></span> 
 <span data-ttu-id="92aaa-667">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-667"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-668">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-668">-or-</span></span> 
 <span data-ttu-id="92aaa-669"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-669"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-670">Текущий тип — <see cref="T:System.Reflection.Emit.TypeBuilder" /> или <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-670">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-671">Получает конструкторы текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-671">Gets the constructors of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-672">Возвращает все открытые конструкторы, определенные для текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-672">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-673">Массив объектов <see cref="T:System.Reflection.ConstructorInfo" />, представляющий все открытые конструкторы экземпляров, определенные для текущего типа <see cref="T:System.Type" />, за исключением инициализатора типа (статический конструктор).</span><span class="sxs-lookup"><span data-stu-id="92aaa-673">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span></span> <span data-ttu-id="92aaa-674">Если для текущего объекта <see cref="T:System.Type" /> открытые конструкторы экземпляров не определены или если текущий объект <see cref="T:System.Type" /> представляет параметр типа в определении универсального типа или метода, возвращается пустой массив типа <see cref="T:System.Reflection.ConstructorInfo" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-674">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-675"><xref:System.Type.GetConstructors%2A> Метод не возвращает конструкторы в определенном порядке, например порядок объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-675">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="92aaa-676">Ваш код не должен зависеть от порядка, в котором возвращаются конструкторы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-676">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-677">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-677">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-678">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-678">Member Type</span></span>|<span data-ttu-id="92aaa-679">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-679">Static</span></span>|<span data-ttu-id="92aaa-680">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-680">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-681">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-681">Constructor</span></span>|<span data-ttu-id="92aaa-682">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-682">No</span></span>|<span data-ttu-id="92aaa-683">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-683">No</span></span>|  
|<span data-ttu-id="92aaa-684">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-684">Field</span></span>|<span data-ttu-id="92aaa-685">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-685">No</span></span>|<span data-ttu-id="92aaa-686">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-686">Yes.</span></span> <span data-ttu-id="92aaa-687">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-687">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-688">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-688">Event</span></span>|<span data-ttu-id="92aaa-689">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-689">Not applicable</span></span>|<span data-ttu-id="92aaa-690">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-690">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-691">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-691">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-692">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-692">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-693">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-693">Method</span></span>|<span data-ttu-id="92aaa-694">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-694">No</span></span>|<span data-ttu-id="92aaa-695">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-695">Yes.</span></span> <span data-ttu-id="92aaa-696">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-696">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-697">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-697">Nested Type</span></span>|<span data-ttu-id="92aaa-698">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-698">No</span></span>|<span data-ttu-id="92aaa-699">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-699">No</span></span>|  
|<span data-ttu-id="92aaa-700">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-700">Property</span></span>|<span data-ttu-id="92aaa-701">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-701">Not applicable</span></span>|<span data-ttu-id="92aaa-702">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-702">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-703">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-703">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-704">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-704">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-705">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-705">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-706">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-706">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-707">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-707">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-708">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-708">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-709">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-709">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-710">Эта перегрузка метода вызывает <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> перегрузку метода с <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-710">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-711">Его не удастся найти инициализаторы класса (статический конструктор).</span><span class="sxs-lookup"><span data-stu-id="92aaa-711">It will not find class initializers (static constructor).</span></span> <span data-ttu-id="92aaa-712">Чтобы найти инициализаторы класса, используйте перегрузку, принимающую <xref:System.Reflection.BindingFlags>и укажите <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-712">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-713">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-713">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-714">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.ConstructorInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-714">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="92aaa-715">Например если класс `C<T>` имеет конструктор `C(T t1)` (`Sub New(ByVal t1 As T)` в Visual Basic), вызов <xref:System.Type.GetConstructors%2A> на `C<int>` возвращает <xref:System.Reflection.ConstructorInfo> , представляющий `C(int t1)` в C# (`Sub New(ByVal t1 As Integer)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-715">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="92aaa-716">Если текущий <xref:System.Type> представляет параметр универсального типа, <xref:System.Type.GetConstructors%2A> метод возвращает пустой массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-716">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-717">В этом примере показан результат выполнения <xref:System.Type.GetConstructors%2A> перегружать из класса, который имеет два конструктора экземпляра и один статический конструктор.</span><span class="sxs-lookup"><span data-stu-id="92aaa-717">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="92aaa-718">Ниже приведен результат выполнения этого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-718">The output of this code is:</span></span>  
  
 <span data-ttu-id="92aaa-719">2</span><span class="sxs-lookup"><span data-stu-id="92aaa-719">2</span></span>  
  
 <span data-ttu-id="92aaa-720">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-720">False</span></span>  
  
 <span data-ttu-id="92aaa-721">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-721">False</span></span>  
  
 <span data-ttu-id="92aaa-722">Так как <xref:System.Type.GetConstructors> перегрузка использует только <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, статический конструктор не подсчитывается `for` выражения и не вычисляется `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-722">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="92aaa-723">Чтобы найти статические конструкторы, используйте <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> перегружать и передать сочетания (логические `OR`) из <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, как показано в следующем примере кода:</span><span class="sxs-lookup"><span data-stu-id="92aaa-723">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="92aaa-724">Теперь выводится следующий результат:</span><span class="sxs-lookup"><span data-stu-id="92aaa-724">Now the output is:</span></span>  
  
 <span data-ttu-id="92aaa-725">3</span><span class="sxs-lookup"><span data-stu-id="92aaa-725">3</span></span>  
  
 <span data-ttu-id="92aaa-726">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-726">False</span></span>  
  
 <span data-ttu-id="92aaa-727">Да</span><span class="sxs-lookup"><span data-stu-id="92aaa-727">True</span></span>  
  
 <span data-ttu-id="92aaa-728">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-728">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-729">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-729">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-730">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-730">-or-</span></span> 
<span data-ttu-id="92aaa-731"><see cref="F:System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-731"><see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-732">При переопределении в производном классе ищет конструкторы, определенные для текущего объекта <see cref="T:System.Type" />, с использованием указанного объекта <see langword="BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-732">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-733">Массив объектов <see cref="T:System.Reflection.ConstructorInfo" />, представляющий все конструкторы, определенные для текущего объекта <see cref="T:System.Type" /> и удовлетворяющие указанным ограничениям привязки, в том числе и инициализатор типа, если он определен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-733">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span></span> <span data-ttu-id="92aaa-734">Возвращает пустой массив типа <see cref="T:System.Reflection.ConstructorInfo" />, если для текущего типа <see cref="T:System.Type" /> не определены конструкторы, если ни один из определенных конструкторов не соответствует ограничениям привязки или если текущий тип <see cref="T:System.Type" /> представляет параметр типа в определении универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-734">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="92aaa-735">`bindingAttr` можно использовать для указания, следует ли возвращать только открытые конструкторы либо как открытые и закрытые конструкторы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-735">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
<span data-ttu-id="92aaa-736">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения конструкторов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-736">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
- <span data-ttu-id="92aaa-737">Укажите `BindingFlags.Static` вместе с `BindingFlags.NonPublic` извлекаемого инициализатор класса (статический конструктор).</span><span class="sxs-lookup"><span data-stu-id="92aaa-737">Specify `BindingFlags.Static` along with `BindingFlags.NonPublic` to retrieve the class initializer (static constructor).</span></span> <span data-ttu-id="92aaa-738">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-738">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>

- <span data-ttu-id="92aaa-739">Укажите `BindingFlags.Instance` вместе с одним или обоими `BindingFlags.Public` и `BindingFlags.NonPublic` для получения конструкторы экземпляров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-739">Specify `BindingFlags.Instance` along with one or both of `BindingFlags.Public` and `BindingFlags.NonPublic` to retrieve instance constructors.</span></span>   
  
<span data-ttu-id="92aaa-740">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-740">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  

<span data-ttu-id="92aaa-741"><xref:System.Type.GetConstructors%2A> Метод не возвращает конструкторы в определенном порядке, например порядок объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-741">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="92aaa-742">Ваш код не должен зависеть от порядка, в котором возвращаются конструкторы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-742">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  

<span data-ttu-id="92aaa-743">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.ConstructorInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-743">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="92aaa-744">Например если класс `C<T>` имеет конструктор `C(T t1)` (`Sub New(ByVal t1 As T)` в Visual Basic), вызов <xref:System.Type.GetConstructors%2A> на `C<int>` возвращает <xref:System.Reflection.ConstructorInfo> , представляющий `C(int t1)` в C# (`Sub New(ByVal t1 As Integer)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-744">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
<span data-ttu-id="92aaa-745">Если текущий <xref:System.Type> представляет параметр универсального типа, <xref:System.Type.GetConstructors%2A> метод возвращает пустой массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-745">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
## Examples  

<span data-ttu-id="92aaa-746">В этом примере показан результат выполнения <xref:System.Type.GetConstructors> перегружать из класса, который имеет два конструктора экземпляра и один статический конструктор.</span><span class="sxs-lookup"><span data-stu-id="92aaa-746">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="92aaa-747">Ниже приведен результат выполнения этого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-747">The output of this code is:</span></span>  
  
 <span data-ttu-id="92aaa-748">2</span><span class="sxs-lookup"><span data-stu-id="92aaa-748">2</span></span>  
  
 <span data-ttu-id="92aaa-749">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-749">False</span></span>  
  
 <span data-ttu-id="92aaa-750">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-750">False</span></span>  
  
 <span data-ttu-id="92aaa-751">Так как <xref:System.Type.GetConstructors%2A> перегрузка использует только <xref:System.Reflection.BindingFlags.Public> и <xref:System.Reflection.BindingFlags.Instance>, статический конструктор не подсчитывается `for` выражения и не вычисляется `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-751">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="92aaa-752">Чтобы найти статические конструкторы, используйте <xref:System.Type.GetConstructors%2A> перегружать и передать его сочетание (логическое или) <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, как показано в следующем примере кода:</span><span class="sxs-lookup"><span data-stu-id="92aaa-752">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="92aaa-753">Теперь выводится следующий результат:</span><span class="sxs-lookup"><span data-stu-id="92aaa-753">Now the output is:</span></span>  
  
 <span data-ttu-id="92aaa-754">3</span><span class="sxs-lookup"><span data-stu-id="92aaa-754">3</span></span>  
  
 <span data-ttu-id="92aaa-755">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-755">False</span></span>  
  
 <span data-ttu-id="92aaa-756">Да</span><span class="sxs-lookup"><span data-stu-id="92aaa-756">True</span></span>  
  
 <span data-ttu-id="92aaa-757">False</span><span class="sxs-lookup"><span data-stu-id="92aaa-757">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-758">Выполняет поиск членов, определенных для текущего объекта <see cref="T:System.Type" />, для которого задан атрибут <see cref="T:System.Reflection.DefaultMemberAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-758">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span></span></summary>
        <returns><span data-ttu-id="92aaa-759">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, представляющий все члены по умолчанию текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-759">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-760">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-760">-or-</span></span> 
<span data-ttu-id="92aaa-761">Пустой массив типа <see cref="T:System.Reflection.MemberInfo" />, если у текущего типа <see cref="T:System.Type" /> нет членов по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-761">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-762"><xref:System.Type.GetDefaultMembers%2A> Метод не возвращает элементы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-762">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-763">Ваш код не должен зависеть от порядка, в котором возвращаются элементы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-763">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-764">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-764">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="92aaa-765">Элементы включают свойства, методы, поля, события и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-765">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="92aaa-766">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-766">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-767">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-767">Member Type</span></span>|<span data-ttu-id="92aaa-768">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-768">Static</span></span>|<span data-ttu-id="92aaa-769">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-769">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-770">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-770">Constructor</span></span>|<span data-ttu-id="92aaa-771">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-771">No</span></span>|<span data-ttu-id="92aaa-772">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-772">No</span></span>|  
|<span data-ttu-id="92aaa-773">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-773">Field</span></span>|<span data-ttu-id="92aaa-774">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-774">No</span></span>|<span data-ttu-id="92aaa-775">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-775">Yes.</span></span> <span data-ttu-id="92aaa-776">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-776">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-777">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-777">Event</span></span>|<span data-ttu-id="92aaa-778">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-778">Not applicable</span></span>|<span data-ttu-id="92aaa-779">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-779">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-780">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-780">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-781">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-781">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-782">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-782">Method</span></span>|<span data-ttu-id="92aaa-783">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-783">No</span></span>|<span data-ttu-id="92aaa-784">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-784">Yes.</span></span> <span data-ttu-id="92aaa-785">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-785">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-786">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-786">Nested Type</span></span>|<span data-ttu-id="92aaa-787">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-787">No</span></span>|<span data-ttu-id="92aaa-788">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-788">No</span></span>|  
|<span data-ttu-id="92aaa-789">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-789">Property</span></span>|<span data-ttu-id="92aaa-790">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-790">Not applicable</span></span>|<span data-ttu-id="92aaa-791">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-791">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-792">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-792">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-793">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-793">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-794">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-794">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-795">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-795">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-796">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-796">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-797">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-797">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-798">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-798">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-799">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MemberInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-799">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="92aaa-800">Например если класс `C<T>` имеет свойство `P` , возвращающий `T`, вызов <xref:System.Type.GetDefaultMembers%2A> на `C<int>` возвращает `int P` в C# (`Property P As Integer` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-800">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="92aaa-801">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет члены ограничения класса или членов <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-801">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-802">Следующий пример получает сведения элемента по умолчанию из `MyClass` и отображает элементы по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-802">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-803">При переопределении в производном классе возвращает тип <see cref="T:System.Type" /> объекта, на который ссылается данный массив, указатель или ссылка или который инкапсулирован в этих объектах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-803">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-804">Тип объекта <see cref="T:System.Type" />, на который ссылается данный массив, указатель или ссылка или который инкапсулирован в этих объектах, или значение <see langword="null" />, если текущий объект <see cref="T:System.Type" /> не является массивом или указателем, не передается по ссылке либо представляет универсальный тип или параметр типа в определении универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-804">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-805">Этот метод возвращает `null` для <xref:System.Array> класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-805">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-806">В следующем примере показано использование `GetElementType` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-806">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92aaa-807">Значение, имя которой требуется извлечь.</span><span class="sxs-lookup"><span data-stu-id="92aaa-807">The value whose name is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="92aaa-808">Возвращает имя константы с заданным значением для текущего типа перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-808">Returns the name of the constant that has the specified value, for the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-809">Имя члена текущего типа перечисления, имеющего указанное значение, или <see langword="null" />, если такая константа не найдена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-809">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-810">Текущий тип не является перечислением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-810">The current type is not an enumeration.</span></span>  
  
<span data-ttu-id="92aaa-811">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-811">-or-</span></span> 
 <span data-ttu-id="92aaa-812"><paramref name="value" /> не является ни текущим типом, ни имеющим базовый тип, совпадающий с текущим типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-812"><paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-813"><paramref name="value" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-813"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-814">Возвращает имена членов текущего типа перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-814">Returns the names of the members of the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-815">Массив, который содержит имена членов перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-815">An array that contains the names of the members of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-816">Элементы массива возвращаемого значения сортируются по двоичным значениям (то есть значениям без знака) констант-перечислителей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-816">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="92aaa-817">Если массив содержит константы-перечислители с тем же значением, порядок соответствующих им имен не задан.</span><span class="sxs-lookup"><span data-stu-id="92aaa-817">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-818">Текущий тип не является перечислением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-818">The current type is not an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-819">Возвращает базовый тип текущего типа перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-819">Returns the underlying type of the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-820">Базовый тип текущего перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-820">The underlying type of the current enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-821">По умолчанию базовым типом перечисления в C# и Visual Basic является <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-821">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="92aaa-822">Можно указать других целочисленных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-822">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-823">Текущий тип не является перечислением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-823">The current type is not an enumeration.</span></span>  
  
<span data-ttu-id="92aaa-824">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-824">-or-</span></span> 
<span data-ttu-id="92aaa-825">Тип перечисления не является допустимым, так как содержит более одного поля экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-825">The enumeration type is not valid, because it contains more than one instance field.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-826">Возвращает массив значений констант в текущем типе перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-826">Returns an array of the values of the constants in the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-827">Массив, содержащий значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-827">An array that contains the values.</span></span> <span data-ttu-id="92aaa-828">Элементы массива сортируются по двоичным значениям (то есть значениям без знака) констант перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-828">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-829">Текущий тип не является перечислением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-829">The current type is not an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-830">Получает определенное событие, которое объявлено или унаследовано в текущем объекте <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-830">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-831">Строка, содержащая имя события, которое объявлено или унаследовано текущим типом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-831">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-832">Возвращает объект <see cref="T:System.Reflection.EventInfo" />, представляющий указанное открытое событие.</span><span class="sxs-lookup"><span data-stu-id="92aaa-832">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span></span></summary>
        <returns><span data-ttu-id="92aaa-833">Объект, представляющий указанное открытое событие, которое объявлено или унаследовано в текущем объекте <see cref="T:System.Type" />, если такое событие найдено; в противном случае — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-833">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-834">Событие считается открытым для отражения, если он имеет по крайней мере один метод или метод доступа, который является общим.</span><span class="sxs-lookup"><span data-stu-id="92aaa-834">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="92aaa-835">В противном случае событие считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-835">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-836">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-836">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-837">Поиск включает общедоступный статический и открытый экземпляр события.</span><span class="sxs-lookup"><span data-stu-id="92aaa-837">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="92aaa-838">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-838">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-839">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-839">Member Type</span></span>|<span data-ttu-id="92aaa-840">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-840">Static</span></span>|<span data-ttu-id="92aaa-841">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-841">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-842">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-842">Constructor</span></span>|<span data-ttu-id="92aaa-843">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-843">No</span></span>|<span data-ttu-id="92aaa-844">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-844">No</span></span>|  
|<span data-ttu-id="92aaa-845">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-845">Field</span></span>|<span data-ttu-id="92aaa-846">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-846">No</span></span>|<span data-ttu-id="92aaa-847">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-847">Yes.</span></span> <span data-ttu-id="92aaa-848">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-848">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-849">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-849">Event</span></span>|<span data-ttu-id="92aaa-850">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-850">Not applicable</span></span>|<span data-ttu-id="92aaa-851">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-851">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-852">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-852">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-853">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-853">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-854">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-854">Method</span></span>|<span data-ttu-id="92aaa-855">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-855">No</span></span>|<span data-ttu-id="92aaa-856">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-856">Yes.</span></span> <span data-ttu-id="92aaa-857">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-857">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-858">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-858">Nested Type</span></span>|<span data-ttu-id="92aaa-859">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-859">No</span></span>|<span data-ttu-id="92aaa-860">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-860">No</span></span>|  
|<span data-ttu-id="92aaa-861">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-861">Property</span></span>|<span data-ttu-id="92aaa-862">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-862">Not applicable</span></span>|<span data-ttu-id="92aaa-863">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-863">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-864">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-864">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-865">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-865">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-866">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-866">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-867">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-867">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-868">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-868">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-869">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-869">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-870">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-870">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-871">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.EventInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-871">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-872">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет события ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-872">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-873">В следующем примере создается <xref:System.Reflection.EventInfo> объекта и возвращает событие класса button для указанного события.</span><span class="sxs-lookup"><span data-stu-id="92aaa-873">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-874"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-874"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-875">Строка, содержащая имя события, которое объявлено или унаследовано текущим типом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-875">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-876">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-876">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-877">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-877">-or-</span></span> 
 <span data-ttu-id="92aaa-878"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-878"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-879">При переопределении в производном классе возвращает объект <see cref="T:System.Reflection.EventInfo" />, представляющий указанное событие, используя для этого указанные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-879">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-880">Объект, представляющий указанное событие, которое объявлено или унаследовано текущим типом <see cref="T:System.Type" />, если такое событие найдено; <see langword="null" /> в противном случае.</span><span class="sxs-lookup"><span data-stu-id="92aaa-880">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-881">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие события, чтобы включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-881">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-882">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-882">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-883">Укажите `BindingFlags.Public` для включения в поиск открытых событий.</span><span class="sxs-lookup"><span data-stu-id="92aaa-883">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-884">Укажите `BindingFlags.NonPublic` для включения в поиск закрытые событий (то есть внутренней, закрытые и защищенные).</span><span class="sxs-lookup"><span data-stu-id="92aaa-884">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-885">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-885">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-886">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-886">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-887">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-887">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-888">`BindingFlags.DeclaredOnly` для поиска только события, объявленные на <xref:System.Type>, не события, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-888">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-889">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-889">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-890">Событие считается открытым для отражения, если он имеет по крайней мере один метод или метод доступа, который является общим.</span><span class="sxs-lookup"><span data-stu-id="92aaa-890">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="92aaa-891">В противном случае событие считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-891">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-892">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.EventInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-892">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-893">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет события ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-893">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-894">В следующем примере кода используется <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> метод для поиска типа public или не являющиеся открытыми события с именем «Щелкните», не `static` (`Shared` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-894">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-895"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-895"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-896">Получает события, которые объявлены или унаследованы текущим объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-896">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-897">Возвращает все открытые события, которые объявлены или унаследованы текущим объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-897">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-898">Массив объектов <see cref="T:System.Reflection.EventInfo" />, представляющий все открытые события, которые объявлены или унаследованы текущим объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-898">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-899">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-899">-or-</span></span> 
<span data-ttu-id="92aaa-900">Пустой массив типа <see cref="T:System.Reflection.EventInfo" />, если в текущем объекте <see cref="T:System.Type" /> нет открытых событий.</span><span class="sxs-lookup"><span data-stu-id="92aaa-900">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-901">Событие считается открытым для отражения, если он имеет по крайней мере один метод или метод доступа, который является общим.</span><span class="sxs-lookup"><span data-stu-id="92aaa-901">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="92aaa-902">В противном случае событие считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-902">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-903"><xref:System.Type.GetEvents%2A> Метод не возвращает события в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-903">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-904">Ваш код не должен зависеть от порядка, в котором возвращаются события, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-904">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-905">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-905">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="92aaa-906">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-906">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-907">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-907">Member Type</span></span>|<span data-ttu-id="92aaa-908">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-908">Static</span></span>|<span data-ttu-id="92aaa-909">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-909">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-910">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-910">Constructor</span></span>|<span data-ttu-id="92aaa-911">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-911">No</span></span>|<span data-ttu-id="92aaa-912">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-912">No</span></span>|  
|<span data-ttu-id="92aaa-913">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-913">Field</span></span>|<span data-ttu-id="92aaa-914">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-914">No</span></span>|<span data-ttu-id="92aaa-915">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-915">Yes.</span></span> <span data-ttu-id="92aaa-916">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-916">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-917">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-917">Event</span></span>|<span data-ttu-id="92aaa-918">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-918">Not applicable</span></span>|<span data-ttu-id="92aaa-919">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-919">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-920">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-920">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-921">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-921">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-922">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-922">Method</span></span>|<span data-ttu-id="92aaa-923">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-923">No</span></span>|<span data-ttu-id="92aaa-924">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-924">Yes.</span></span> <span data-ttu-id="92aaa-925">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-925">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-926">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-926">Nested Type</span></span>|<span data-ttu-id="92aaa-927">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-927">No</span></span>|<span data-ttu-id="92aaa-928">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-928">No</span></span>|  
|<span data-ttu-id="92aaa-929">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-929">Property</span></span>|<span data-ttu-id="92aaa-930">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-930">Not applicable</span></span>|<span data-ttu-id="92aaa-931">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-931">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-932">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-932">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-933">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-933">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-934">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-934">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-935">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-935">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-936">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-936">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-937">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-937">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-938">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-938">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-939">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.EventInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-939">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-940">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет события ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-940">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-941">В следующем примере извлекается массив <xref:System.Reflection.EventInfo> объекты, возвращаются все события `Button` класса и отображает имена событий.</span><span class="sxs-lookup"><span data-stu-id="92aaa-941">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="92aaa-942">Чтобы скомпилировать этот пример Visual Basic, используйте следующую команду:</span><span class="sxs-lookup"><span data-stu-id="92aaa-942">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-943">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-943">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>

<span data-ttu-id="92aaa-944">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-944">-or-</span></span>

 <span data-ttu-id="92aaa-945"><see cref="F:System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-945"><see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-946">При переопределении в производном классе ищет события, которые объявлены или унаследованы текущим объектом <see cref="T:System.Type" />, используя указанные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-946">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-947">Массив объектов <see cref="T:System.Reflection.EventInfo" />, представляющий все события, которые объявлены или унаследованы данным объектом <see cref="T:System.Type" /> и удовлетворяют указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-947">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="92aaa-948">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-948">-or-</span></span> 
<span data-ttu-id="92aaa-949">Пустой массив типа <see cref="T:System.Reflection.EventInfo" />, если у текущего типа <see cref="T:System.Type" /> нет событий или ни одно событие не удовлетворяет ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-949">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-950"><xref:System.Type.GetEvents%2A> Метод не возвращает события в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-950">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-951">Ваш код не должен зависеть от порядка, в котором возвращаются события, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-951">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-952">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие события, чтобы включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-952">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-953">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-953">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-954">Укажите `BindingFlags.Public` для включения в поиск открытых событий.</span><span class="sxs-lookup"><span data-stu-id="92aaa-954">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-955">Укажите `BindingFlags.NonPublic` для включения в поиск закрытые событий (то есть внутренней, закрытые и защищенные).</span><span class="sxs-lookup"><span data-stu-id="92aaa-955">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="92aaa-956">Только защищенные и внутренние события базовых классов, возвращаются; Закрытые события базовых классов не возвращаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-956">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="92aaa-957">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-957">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-958">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-958">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-959">`BindingFlags.DeclaredOnly` для поиска только события, объявленные на <xref:System.Type>, не события, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-959">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-960">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-960">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-961">Событие считается открытым для отражения, если он имеет по крайней мере один метод или метод доступа, который является общим.</span><span class="sxs-lookup"><span data-stu-id="92aaa-961">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="92aaa-962">В противном случае событие считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-962">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-963">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.EventInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-963">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-964">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет события ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-964">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-965">В следующем примере извлекается массив <xref:System.Reflection.EventInfo> объектов, соответствующих заданным флагам привязки, возвращаются все события `Button` класса и отображает имена событий.</span><span class="sxs-lookup"><span data-stu-id="92aaa-965">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="92aaa-966">Чтобы скомпилировать этот пример Visual Basic, используйте следующую команду:</span><span class="sxs-lookup"><span data-stu-id="92aaa-966">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-967">Получает указанное поле текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-967">Gets a specific field of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-968">Строка, содержащая имя искомого поля данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-968">The string containing the name of the data field to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-969">Выполняет поиск открытого поля с заданным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-969">Searches for the public field with the specified name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-970">Объект, представляющий открытое поле с указанным именем, если такое свойство есть, или <see langword="null" />, если такого свойства нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-970">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-971">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-971">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-972">Поиск включает общедоступный статический и открытый экземпляр поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-972">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="92aaa-973">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.FieldInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-973">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-974">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет поля ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-974">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-975">В следующем примере возвращается `Type` объекта для указанного класса, получает <xref:System.Reflection.FieldInfo> объекта в поле и отображает значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-975">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-976"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-976"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-977">Этот объект <see cref="T:System.Type" /> является <see cref="T:System.Reflection.Emit.TypeBuilder" />, метод <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> которого еще не был вызван.</span><span class="sxs-lookup"><span data-stu-id="92aaa-977">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span></span></exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-978">Строка, содержащая имя искомого поля данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-978">The string containing the name of the data field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-979">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-979">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-980">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-980">-or-</span></span> 
 <span data-ttu-id="92aaa-981"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-981"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-982">Выполняет поиск указанного поля, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-982">Searches for the specified field, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-983">Объект, предоставляющий поле, которое соответствует указанным требованиям, если такое свойство найдено; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-983">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-984">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-984">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-985">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-985">Member Type</span></span>|<span data-ttu-id="92aaa-986">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-986">Static</span></span>|<span data-ttu-id="92aaa-987">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-987">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-988">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-988">Constructor</span></span>|<span data-ttu-id="92aaa-989">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-989">No</span></span>|<span data-ttu-id="92aaa-990">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-990">No</span></span>|  
|<span data-ttu-id="92aaa-991">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-991">Field</span></span>|<span data-ttu-id="92aaa-992">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-992">No</span></span>|<span data-ttu-id="92aaa-993">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-993">Yes.</span></span> <span data-ttu-id="92aaa-994">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-994">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-995">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-995">Event</span></span>|<span data-ttu-id="92aaa-996">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-996">Not applicable</span></span>|<span data-ttu-id="92aaa-997">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-997">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-998">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-998">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-999">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-999">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1000">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1000">Method</span></span>|<span data-ttu-id="92aaa-1001">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1001">No</span></span>|<span data-ttu-id="92aaa-1002">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1002">Yes.</span></span> <span data-ttu-id="92aaa-1003">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1003">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1004">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1004">Nested Type</span></span>|<span data-ttu-id="92aaa-1005">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1005">No</span></span>|<span data-ttu-id="92aaa-1006">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1006">No</span></span>|  
|<span data-ttu-id="92aaa-1007">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1007">Property</span></span>|<span data-ttu-id="92aaa-1008">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1008">Not applicable</span></span>|<span data-ttu-id="92aaa-1009">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1009">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1010">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1010">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1011">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1011">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1012">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1012">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1013">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1013">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1014">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1014">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1015">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1015">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1016">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1016">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1017">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения полей, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1017">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1018">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1018">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1019">Укажите `BindingFlags.Public` для включения в поиск открытых полей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1019">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1020">Укажите `BindingFlags.NonPublic` для включения в поиск полей не являющиеся открытыми (то есть внутренней, закрытые и защищенные поля).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1020">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1021">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1021">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1022">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1022">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1023">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1023">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1024">`BindingFlags.DeclaredOnly` для поиска только поля, объявленные в <xref:System.Type>, не полями, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1024">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1025">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1025">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-1026">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.FieldInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1026">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1027">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет поля ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1027">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1028">В следующем примере возвращается `Type` объекта для указанного класса, получает <xref:System.Reflection.FieldInfo> объект для поля, которое соответствует указанным флагам привязки и отображает значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1028">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1029"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1029"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1030">Получает поля текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1030">Gets the fields of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1031">Возвращает все открытые поля текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1031">Returns all the public fields of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1032">Массив объектов <see cref="T:System.Reflection.FieldInfo" />, представляющий все открытые поля, определенные для текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1032">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-1033">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1033">-or-</span></span> 
<span data-ttu-id="92aaa-1034">Пустой массив типа <see cref="T:System.Reflection.FieldInfo" />, если для текущего типа <see cref="T:System.Type" /> открытые поля не определены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1034">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1035"><xref:System.Type.GetFields%2A> Метод не возвращает поля в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1035">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1036">Ваш код не должен зависеть от порядка, в котором возвращаются поля, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1036">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1037">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1037">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1038">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1038">Member Type</span></span>|<span data-ttu-id="92aaa-1039">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1039">Static</span></span>|<span data-ttu-id="92aaa-1040">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1040">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1041">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1041">Constructor</span></span>|<span data-ttu-id="92aaa-1042">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1042">No</span></span>|<span data-ttu-id="92aaa-1043">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1043">No</span></span>|  
|<span data-ttu-id="92aaa-1044">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1044">Field</span></span>|<span data-ttu-id="92aaa-1045">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1045">No</span></span>|<span data-ttu-id="92aaa-1046">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1046">Yes.</span></span> <span data-ttu-id="92aaa-1047">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1047">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1048">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1048">Event</span></span>|<span data-ttu-id="92aaa-1049">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1049">Not applicable</span></span>|<span data-ttu-id="92aaa-1050">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1050">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1051">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1051">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1052">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1052">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1053">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1053">Method</span></span>|<span data-ttu-id="92aaa-1054">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1054">No</span></span>|<span data-ttu-id="92aaa-1055">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1055">Yes.</span></span> <span data-ttu-id="92aaa-1056">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1056">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1057">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1057">Nested Type</span></span>|<span data-ttu-id="92aaa-1058">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1058">No</span></span>|<span data-ttu-id="92aaa-1059">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1059">No</span></span>|  
|<span data-ttu-id="92aaa-1060">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1060">Property</span></span>|<span data-ttu-id="92aaa-1061">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1061">Not applicable</span></span>|<span data-ttu-id="92aaa-1062">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1062">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1063">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1063">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1064">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1064">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1065">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1065">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1066">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1066">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1067">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1067">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1068">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1068">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1069">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1069">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1070">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.FieldInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1070">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1071">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод осуществляет открытые поля ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1071">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1072">В следующем примере показано использование `GetFields()` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1072">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1073">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1073">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>

<span data-ttu-id="92aaa-1074">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1074">-or-</span></span>

 <span data-ttu-id="92aaa-1075"><see cref="F:System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1075"><see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-1076">При переопределении в производном классе ищет поля, определенные для текущего объекта <see cref="T:System.Type" />, используя указанные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1076">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1077">Массив объектов <see cref="T:System.Reflection.FieldInfo" />, представляющий все поля, определенные для текущего типа <see cref="T:System.Type" /> и удовлетворяющие указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1077">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="92aaa-1078">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1078">-or-</span></span> 
<span data-ttu-id="92aaa-1079">Пустой массив типа <see cref="T:System.Reflection.FieldInfo" />, если для текущего объекта <see cref="T:System.Type" /> не определены поля или ни одно из определенных полей не удовлетворяет ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1079">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="92aaa-1080">Для `GetFields(BindingFlags)` перегрузки для успешного получения сведений о свойствах, `bindingAttr` аргумент должен содержать хотя бы один из <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, а также по крайней мере один из <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1080">For the `GetFields(BindingFlags)` overload to successfully retrieve property information, the `bindingAttr` argument must include at least one of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, along with at least one of <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="92aaa-1081">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения полей, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1081">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
- <span data-ttu-id="92aaa-1082">Укажите `BindingFlags.Instance` для включения методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1082">Specify `BindingFlags.Instance` to include instance methods.</span></span> 

- <span data-ttu-id="92aaa-1083">Укажите `BindingFlags.Static` для включения статических методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1083">Specify `BindingFlags.Static` to include static methods.</span></span> 
    
- <span data-ttu-id="92aaa-1084">Укажите `BindingFlags.Public` для включения в поиск открытых полей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1084">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
- <span data-ttu-id="92aaa-1085">Укажите `BindingFlags.NonPublic` для включения в поиск полей не являющиеся открытыми (то есть внутренней, закрытые и защищенные поля).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1085">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="92aaa-1086">Только защищенные и внутренние поля базовых классов, возвращаются; закрытые поля базовых классов не возвращаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1086">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
- <span data-ttu-id="92aaa-1087">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1087">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  

- <span data-ttu-id="92aaa-1088">Укажите `BindingFlags.Default` отдельно, чтобы возвратить пустую <xref:System.Reflection.PropertyInfo> массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1088">Specify `BindingFlags.Default` alone to return an empty <xref:System.Reflection.PropertyInfo> array.</span></span>

<span data-ttu-id="92aaa-1089">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1089">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
- <span data-ttu-id="92aaa-1090">`BindingFlags.DeclaredOnly` для поиска только поля, объявленные в <xref:System.Type>, не полями, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1090">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
<span data-ttu-id="92aaa-1091">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1091">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
<span data-ttu-id="92aaa-1092"><xref:System.Type.GetFields%2A> Метод не возвращает поля в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1092">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1093">Ваш код не должен зависеть от порядка, в котором возвращаются поля, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1093">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  

 <span data-ttu-id="92aaa-1094">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.FieldInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1094">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1095">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод осуществляет открытые поля ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1095">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
## Examples  
 <span data-ttu-id="92aaa-1096">В следующем примере показано использование `GetFields(BindingFlags)` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1096">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1097">Возвращает массив объектов <see cref="T:System.Type" />, которые представляют аргументы закрытого универсального типа или параметры определения универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1097">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1098">Массив объектов <see cref="T:System.Type" />, которые представляют аргументы универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1098">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span></span> <span data-ttu-id="92aaa-1099">Возвращает пустой массив, если текущий тип не является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1099">Returns an empty array if the current type is not a generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1100">Элементы массива возвращаются в порядке, в котором они отображаются в списке аргументов типа для универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1100">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="92aaa-1101">Если текущий тип является закрытым сконструированным типом (то есть <xref:System.Type.ContainsGenericParameters%2A> возвращает `false`), массив, возвращаемый <xref:System.Type.GetGenericArguments%2A> метод содержит типы, которые были назначены параметрам универсального типа определения универсального типа .</span><span class="sxs-lookup"><span data-stu-id="92aaa-1101">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="92aaa-1102">Если текущий тип является определением универсального типа, массив содержит параметры типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1102">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="92aaa-1103">Если текущий тип является открытым сконструированным типом (то есть <xref:System.Type.ContainsGenericParameters%2A> возвращает `true`) в определенные типы не были назначены все параметры типа и параметры типа заключающих универсальным типам или методам, массив содержит типы и параметры типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1103">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="92aaa-1104">Используйте <xref:System.Type.IsGenericParameter%2A> свойство, чтобы отличить друг от друга.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1104">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="92aaa-1105">Для демонстрации этого сценария, см. в разделе пример кода для <xref:System.Type.ContainsGenericParameters%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1105">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-1106">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1106">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1107">В следующем примере кода используется <xref:System.Type.GetGenericArguments%2A> метод для отображения аргументы типа сконструированного типа и параметров типа определения универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1107">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="92aaa-1108">Данный пример кода является частью большего примера для <xref:System.Type.IsGenericTypeDefinition%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1108">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="92aaa-1109">См. в разделе большего примера для пример выходных данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1109">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-1110">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1110">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="92aaa-1111">Реализацию должны обеспечивать производные классы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1111">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-1112">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-1112">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-1113">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-1113">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1114">Возвращает массив объектов <see cref="T:System.Type" />, которые представляют ограничения, накладываемые на параметр текущего универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1114">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1115">Массив объектов <see cref="T:System.Type" />, которые представляют ограничения, накладываемые на параметр текущего универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1115">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1116">Каждое ограничение параметра универсального типа выражается как <xref:System.Type> объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1116">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="92aaa-1117">Используйте <xref:System.Type.IsClass%2A> свойства, чтобы определить, является ли ограничение ограничение базового класса; Если свойство возвращает `false`, ограничение является ограничение интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1117">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="92aaa-1118">Если параметр типа без ограничения класса и интерфейса, возвращается пустой массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1118">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="92aaa-1119">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1119">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1120">В следующем примере кода определяется универсальный тип `Test` с двумя параметрами типа, которые имеют различные ограничения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1120">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="92aaa-1121">При выполнении программы, ограничения проверяются с использованием <xref:System.Type.GenericParameterAttributes%2A> свойство и <xref:System.Type.GetGenericParameterConstraints%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1121">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-1122">Текущий объект <see cref="T:System.Type" /> не является параметром универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1122">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span></span> <span data-ttu-id="92aaa-1123">То есть свойство <see cref="P:System.Type.IsGenericParameter" /> возвращает значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1123">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-1124">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-1124">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1125">Возвращает объект <see cref="T:System.Type" />, представляющий определение универсального типа, на основе которого можно сконструировать текущий универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1125">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1126">Объект <see cref="T:System.Type" />, представляющий универсальный тип, на основе которого можно сконструировать текущий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1126">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1127">Определение универсального типа — это шаблон, из которого можно сконструировать другие типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1127">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="92aaa-1128">Например, из определения универсального типа `G<T>` (выражена в синтаксис C#; `G(Of T)` в Visual Basic или `generic <typename T> ref class G` в C++) можно создавать и создает экземпляр типа `G<int>` (`G(Of Integer)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1128">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="92aaa-1129">Учитывая <xref:System.Type> объект, представляющий это сконструированный тип, <xref:System.Type.GetGenericTypeDefinition%2A> метод возвращает определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1129">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="92aaa-1130">Если два сконструированные типы создаются из одного определения универсального типа, с теми же аргументами типа, <xref:System.Type.GetGenericTypeDefinition%2A> метод возвращает тот же <xref:System.Type> объекта для обоих типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1130">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="92aaa-1131">При вызове метода <xref:System.Type.GetGenericTypeDefinition%2A> метод <xref:System.Type> объект, который уже представляет определение универсального типа, возвращается текущий <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1131">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="92aaa-1132">Массив универсальных типов не сам является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1132">An array of generic types is not itself generic.</span></span> <span data-ttu-id="92aaa-1133">В коде C# `A<int>[] v;` или код Visual Basic `Dim v() As A(Of Integer)`, тип переменной `v` не является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1133">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="92aaa-1134">Используйте <xref:System.Type.IsGenericType%2A> для определения, является ли тип универсальным, перед вызовом <xref:System.Type.GetGenericTypeDefinition%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1134">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="92aaa-1135">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1135">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1136">В следующем примере кода создает экземпляр сконструированного типа с помощью обычного создания экземпляра, а затем использует <xref:System.Type.GetType%2A> и <xref:System.Type.GetGenericTypeDefinition%2A> методы для получения сконструированный тип и определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1136">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="92aaa-1137">В этом примере используется универсальный <xref:System.Collections.Generic.Dictionary%602> тип, представляющий сконструированный тип <xref:System.Collections.Generic.Dictionary%602> из `Test` объектов со строковыми ключами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1137">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-1138">Текущий тип не является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1138">The current type is not a generic type.</span></span>  <span data-ttu-id="92aaa-1139">То есть <see cref="P:System.Type.IsGenericType" /> возвращает <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1139">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-1140">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1140">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="92aaa-1141">Реализацию должны обеспечивать производные классы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1141">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-1142">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-1142">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-1143">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-1143">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1144">Возвращает хэш-код данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1144">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1145">Хэш-код данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1145">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1146">Этот метод переопределяет метод <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1146">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1147">В следующем примере отображается хэш-код `System.Windows.Forms.Button` класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1147">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1148">Возвращает определенный интерфейс, реализуемый или наследуемый текущим объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1148">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1149">Строка, содержащая имя искомого интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1149">The string containing the name of the interface to get.</span></span> <span data-ttu-id="92aaa-1150">Для универсальных интерфейсов это искаженное имя.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1150">For generic interfaces, this is the mangled name.</span></span></param>
        <summary><span data-ttu-id="92aaa-1151">Выполняет поиск интерфейса с заданным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1151">Searches for the interface with the specified name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1152">Объект, представляющий интерфейс с заданным именем, который реализуется или наследуется текущим объектом <see cref="T:System.Type" />, если такой интерфейс существует; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1152">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1153">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1153">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="92aaa-1154">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Type> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1154">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1155">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод выполняет поиск ограничений интерфейса и все интерфейсы, унаследованные от ограничений класса или интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1155">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1156">Для универсальных интерфейсов `name` параметр является искаженное имя, заканчивающееся грависом (\`) и число параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1156">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="92aaa-1157">Это справедливо для определений универсального интерфейса и сконструированных универсальных интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1157">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="92aaa-1158">Например, чтобы найти `IExample<T>` (`IExample(Of T)` в Visual Basic) или `IExample<string>` (`IExample(Of String)` в Visual Basic), поиск ``"IExample`1"``.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1158">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1159">В следующем примере кода используется <xref:System.Type.GetInterface%28System.String%29> метод для поиска <xref:System.Collections.Hashtable> класса для <xref:System.Runtime.Serialization.IDeserializationCallback> интерфейс и перечислены методы интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1159">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="92aaa-1160">В примере также показано <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> перегрузку метода и <xref:System.Type.GetInterfaceMap%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1160">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1161"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1161"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1162">Текущий <see cref="T:System.Type" /> представляет тип, реализующий тот же универсальный интерфейс с другими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1162">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1163">Строка, содержащая имя искомого интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1163">The string containing the name of the interface to get.</span></span> <span data-ttu-id="92aaa-1164">Для универсальных интерфейсов это искаженное имя.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1164">For generic interfaces, this is the mangled name.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="92aaa-1165">Значение <see langword="true" />, чтобы игнорировать регистр той части параметра <paramref name="name" />, в которой задается простое имя интерфейса (регистр части, соответствующей пространству имен, должен быть надлежащим образом соблюден).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1165"><see langword="true" /> to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span></span>  
  
<span data-ttu-id="92aaa-1166">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1166">-or-</span></span> 
 <span data-ttu-id="92aaa-1167">Значение <see langword="false" />, для поиска с учетом регистра всех частей параметра <paramref name="name" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1167"><see langword="false" /> to perform a case-sensitive search for all parts of <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-1168">При переопределении в производном классе ищет интерфейс с заданным именем, позволяющий определить, нужно ли выполнять поиск без учета регистра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1168">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1169">Объект, представляющий интерфейс с заданным именем, который реализуется или наследуется текущим объектом <see cref="T:System.Type" />, если такой интерфейс существует; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1169">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1170">`ignoreCase` Параметр применяется только к простое имя интерфейса, не к пространству имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1170">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="92aaa-1171">Часть `name` , определяющий пространство имен должно иметь правильный регистр, или интерфейс не будет найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1171">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="92aaa-1172">Например, строка «System.icomparable» находит <xref:System.IComparable> не поддерживает интерфейс, но строка «system.icomparable».</span><span class="sxs-lookup"><span data-stu-id="92aaa-1172">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="92aaa-1173">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Type> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1173">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1174">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод выполняет поиск ограничений интерфейса и все интерфейсы, унаследованные от ограничений класса или интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1174">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1175">Для универсальных интерфейсов `name` параметр является искаженное имя, заканчивающееся грависом (\`) и число параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1175">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="92aaa-1176">Это справедливо для определений универсального интерфейса и сконструированных универсальных интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1176">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="92aaa-1177">Например, чтобы найти `IExample<T>` (`IExample(Of T)` в Visual Basic) или `IExample<string>` (`IExample(Of String)` в Visual Basic), поиск `"IExample`1"".</span><span class="sxs-lookup"><span data-stu-id="92aaa-1177">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1178">В следующем примере кода используется <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> метод, чтобы выполнить поиск без учета регистра из <xref:System.Collections.Hashtable> класса для <xref:System.Collections.IEnumerable> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1178">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="92aaa-1179">В примере также показано <xref:System.Type.GetInterface%28System.String%29> перегрузку метода и <xref:System.Type.GetInterfaceMap%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1179">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1180"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1180"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1181">Текущий <see cref="T:System.Type" /> представляет тип, реализующий тот же универсальный интерфейс с другими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1181">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="92aaa-1182">Тип интерфейса, для которого требуется извлечь сопоставление.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1182">The interface type to retrieve a mapping for.</span></span></param>
        <summary><span data-ttu-id="92aaa-1183">Возвращает сопоставление для интерфейса заданного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1183">Returns an interface mapping for the specified interface type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1184">Объект, представляющий сопоставление интерфейса для <paramref name="interfaceType" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1184">An object that represents the interface mapping for <paramref name="interfaceType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1185">Карта интерфейса описывает, как интерфейс был сопоставлен с фактическим членам класса, который реализует этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1185">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="92aaa-1186">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, тип, параметры заменяются с соответствующими аргументами типа в элементах <xref:System.Reflection.InterfaceMapping> возвращаемого этим методом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1186">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1187">В следующем примере вызывается <xref:System.Type.GetInterfaceMap%2A> метод, чтобы определить, как <xref:System.IFormatProvider> интерфейс сопоставляется <xref:System.Globalization.CultureInfo> методов и как <xref:System.IAppDomainSetup> интерфейс сопоставляется <xref:System.AppDomainSetup> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1187">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="92aaa-1188">Обратите внимание, что, поскольку <xref:System.IAppDomainSetup> интерфейс определяет набор свойств, возвращенный <xref:System.Reflection.InterfaceMapping> объект включает отдельный <xref:System.Reflection.MethodInfo> объекты для get свойства и методы доступа set.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1188">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-1189">Тип <paramref name="interfaceType" /> не реализован с помощью текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1189"><paramref name="interfaceType" /> is not implemented by the current type.</span></span>  
  
<span data-ttu-id="92aaa-1190">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1190">-or-</span></span> 
<span data-ttu-id="92aaa-1191">Аргумент <paramref name="interfaceType" /> не ссылается на интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1191">The <paramref name="interfaceType" /> argument does not refer to an interface.</span></span>  
  
<span data-ttu-id="92aaa-1192">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1192">-or-</span></span>

<span data-ttu-id="92aaa-1193">Текущий экземпляр или аргумент <paramref name="interfaceType" /> является открытым универсальным типом (то есть свойство <see cref="P:System.Type.ContainsGenericParameters" /> возвращает <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1193">The current instance or <paramref name="interfaceType" /> argument is an open generic type; that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span>

<span data-ttu-id="92aaa-1194">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1194">-or-</span></span>


 <span data-ttu-id="92aaa-1195"><paramref name="interfaceType" /> является универсальным интерфейсом, а текущий тип является типом массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1195"><paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1196"><paramref name="interfaceType" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1196"><paramref name="interfaceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-1197">Текущий тип <see cref="T:System.Type" /> представляет параметр универсального типа, то есть <see cref="P:System.Type.IsGenericParameter" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1197">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-1198">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1198">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="92aaa-1199">Реализацию должны обеспечивать производные классы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1199">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1200">При переопределении в производном классе возвращает все интерфейсы, реализуемые или наследуемые текущим объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1200">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1201">Массив объектов <see cref="T:System.Type" />, представляющий все интерфейсы, реализуемые или наследуемые текущим типом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1201">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-1202">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1202">-or-</span></span> 
<span data-ttu-id="92aaa-1203">Пустой массив типа <see cref="T:System.Type" /> в случае отсутствия интерфейсов, реализуемых или наследуемых текущим типом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1203">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1204"><xref:System.Type.GetInterfaces%2A> Метод не возвращает интерфейсы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1204">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1205">Ваш код не должен зависеть от порядка, в котором возвращаются интерфейсы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1205">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1206">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Type> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1206">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1207">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод выполняет поиск ограничений интерфейса и все интерфейсы, унаследованные от ограничений класса или интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1207">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1208">В следующем примере возвращает тип указанного класса и отображает все интерфейсы, которые этот тип реализует или наследует.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1208">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="92aaa-1209">Чтобы скомпилировать этот пример Visual Basic, используйте следующие команды компилятора:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1209">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-1210">Статический инициализатор вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1210">A static initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1211">Возвращает указанные члены текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1211">Gets the specified members of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1212">Строка, содержащая имя искомых открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1212">The string containing the name of the public members to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-1213">Выполняет поиск открытого члена с заданным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1213">Searches for the public members with the specified name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1214">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, представляющий открытые члены с заданным именем, если такие члены есть, и пустой массив, если таких членов нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1214">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1215">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1215">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-1216">Поиск включает общедоступный статический и открытый экземпляр членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1216">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="92aaa-1217">Элементы включают свойства, методы, поля, события и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1217">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="92aaa-1218"><xref:System.Type.GetMember%2A> Метод не возвращает элементы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1218">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1219">Ваш код не должен зависеть от порядка, в котором возвращаются элементы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1219">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1220">Эта перегрузка метода не удастся найти инициализаторы класса (статический конструктор).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1220">This method overload will not find class initializers (static constructor).</span></span> <span data-ttu-id="92aaa-1221">Чтобы найти инициализаторы класса, используйте перегрузку, принимающую <xref:System.Reflection.BindingFlags>и укажите <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1221">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-1222">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1222">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-1223">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1223">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1224">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1224">Member Type</span></span>|<span data-ttu-id="92aaa-1225">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1225">Static</span></span>|<span data-ttu-id="92aaa-1226">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1226">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1227">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1227">Constructor</span></span>|<span data-ttu-id="92aaa-1228">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1228">No</span></span>|<span data-ttu-id="92aaa-1229">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1229">No</span></span>|  
|<span data-ttu-id="92aaa-1230">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1230">Field</span></span>|<span data-ttu-id="92aaa-1231">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1231">No</span></span>|<span data-ttu-id="92aaa-1232">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1232">Yes.</span></span> <span data-ttu-id="92aaa-1233">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1233">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1234">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1234">Event</span></span>|<span data-ttu-id="92aaa-1235">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1235">Not applicable</span></span>|<span data-ttu-id="92aaa-1236">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1236">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1237">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1237">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1238">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1238">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1239">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1239">Method</span></span>|<span data-ttu-id="92aaa-1240">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1240">No</span></span>|<span data-ttu-id="92aaa-1241">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1241">Yes.</span></span> <span data-ttu-id="92aaa-1242">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1242">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1243">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1243">Nested Type</span></span>|<span data-ttu-id="92aaa-1244">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1244">No</span></span>|<span data-ttu-id="92aaa-1245">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1245">No</span></span>|  
|<span data-ttu-id="92aaa-1246">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1246">Property</span></span>|<span data-ttu-id="92aaa-1247">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1247">Not applicable</span></span>|<span data-ttu-id="92aaa-1248">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1248">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1249">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1249">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1250">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1250">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1251">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1251">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1252">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1252">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1253">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1253">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1254">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1254">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1255">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1255">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1256">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MemberInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1256">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1257">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет члены ограничения класса или членов <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1257">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1258">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1258">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1259">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1259">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1260">В следующем примере отображаются все члены `String` которых начинаются с буквы C.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1260">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1261"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1261"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1262">Строка, содержащая имя для поиска элементов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1262">The string containing the name of the members to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1263">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1263">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1264">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1264">-or-</span></span> 
 <span data-ttu-id="92aaa-1265"><see cref="System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1265"><see cref="System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-1266">Выполняет поиск указанных членов, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1266">Searches for the specified members, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1267">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, представляющий открытые члены с заданным именем, если такие члены есть, и пустой массив, если таких членов нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1267">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1268">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1268">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="92aaa-1269">Элементы включают свойства, методы, поля, события и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1269">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="92aaa-1270"><xref:System.Type.GetMember%2A> Метод не возвращает элементы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1270">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1271">Ваш код не должен зависеть от порядка, в котором возвращаются элементы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1271">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1272">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1272">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1273">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1273">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1274">Укажите `BindingFlags.Public` для включения в поиск открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1274">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1275">Укажите `BindingFlags.NonPublic` с участием не являющиеся открытыми (то есть внутренней, закрытые и защищенные члены) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1275">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1276">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1276">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1277">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1277">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1278">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1278">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1279">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1279">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1280">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1280">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-1281">Чтобы получить инициализатор класса (статический конструктор), с помощью этой перегрузки метода, необходимо указать «статический конструктор» для `name`, и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic) для `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1281">To get the class initializer (static constructor) using this method overload, you must specify "static constructor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="92aaa-1282">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1282">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-1283">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MemberInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1283">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1284">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет члены ограничения класса или членов <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1284">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1285">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1285">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1286">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1286">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1287">Следующий пример отображает все открытые статические члены `myString` которых начинаются с буквы C.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1287">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1288"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1288"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1289">Строка, содержащая имя для поиска элементов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1289">The string containing the name of the members to get.</span></span></param>
        <param name="type"><span data-ttu-id="92aaa-1290">Значение, которое нужно найти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1290">The value to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1291">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1291">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1292">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1292">-or-</span></span> 
 <span data-ttu-id="92aaa-1293"><see cref="System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1293"><see cref="System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-1294">Ищет указанные члены заданного типа, используя установленные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1294">Searches for the specified members of the specified member type, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1295">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, представляющий открытые члены с заданным именем, если такие члены есть, и пустой массив, если таких членов нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1295">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1296">Элементы включают свойства, методы, поля, события и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1296">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="92aaa-1297"><xref:System.Type.GetMember%2A> Метод не возвращает элементы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1297">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1298">Ваш код не должен зависеть от порядка, в котором возвращаются элементы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1298">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1299">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1299">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1300">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1300">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1301">Укажите `BindingFlags.Public` для включения в поиск открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1301">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1302">Укажите `BindingFlags.NonPublic` с участием не являющиеся открытыми (то есть внутренней, закрытые и защищенные члены) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1302">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1303">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1303">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1304">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1304">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1305">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1305">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1306">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1306">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1307">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1307">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-1308">Чтобы получить инициализатор класса (статический конструктор), с помощью этой перегрузки метода, необходимо указать «статический конструктор» для `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> для `type`, и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic) для `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1308">To get the class initializer (static constructor) using this method overload, you must specify "static constructor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="92aaa-1309">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1309">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-1310">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MemberInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1310">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1311">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет члены ограничения класса или членов <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1311">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1312">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1312">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1313">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1313">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1314">В следующем примере отображаются все методы объекта `myString` которых начинаются с буквы C.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1314">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1315"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1315"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-1316">Реализацию должен обеспечивать производный класс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1316">A derived class must provide an implementation.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1317">Получает члены (свойства, методы, поля, события и т. д.) текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1317">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1318">Возвращает все открытые члены текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1318">Returns all the public members of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1319">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, представляющий все открытые члены текущего типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1319">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-1320">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1320">-or-</span></span> 
<span data-ttu-id="92aaa-1321">Пустой массив типа <see cref="T:System.Reflection.MemberInfo" />, если у текущего типа <see cref="T:System.Type" /> нет открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1321">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="92aaa-1322">Элементы включают свойства, методы, конструкторы, поля, события и вложенные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1322">Members include properties, methods, constructors, fields, events, and nested types.</span></span>
  
 <span data-ttu-id="92aaa-1323"><xref:System.Type.GetMembers%2A> Метод не возвращает элементы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1323">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1324">Ваш код не должен зависеть от порядка, в котором возвращаются элементы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1324">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1325">Эта перегрузка метода вызывает <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> перегрузку метода с <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1325">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-1326">Его не удастся найти инициализаторы класса (статические конструкторы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1326">It will not find class initializers (static constructors).</span></span> <span data-ttu-id="92aaa-1327">Чтобы найти инициализаторы класса, вызовите <xref:System.Type.GetMembers(System.Reflection.BindingFlags)> перегружать и укажите <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1327">To find class initializers, call the <xref:System.Type.GetMembers(System.Reflection.BindingFlags)> overload, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-1328">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1328">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-1329">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1329">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1330">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1330">Member Type</span></span>|<span data-ttu-id="92aaa-1331">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1331">Static</span></span>|<span data-ttu-id="92aaa-1332">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1332">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1333">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1333">Constructor</span></span>|<span data-ttu-id="92aaa-1334">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1334">No</span></span>|<span data-ttu-id="92aaa-1335">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1335">No</span></span>|  
|<span data-ttu-id="92aaa-1336">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1336">Field</span></span>|<span data-ttu-id="92aaa-1337">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1337">No</span></span>|<span data-ttu-id="92aaa-1338">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1338">Yes.</span></span> <span data-ttu-id="92aaa-1339">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1339">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1340">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1340">Event</span></span>|<span data-ttu-id="92aaa-1341">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1341">Not applicable</span></span>|<span data-ttu-id="92aaa-1342">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1342">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1343">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1343">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1344">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1344">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1345">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1345">Method</span></span>|<span data-ttu-id="92aaa-1346">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1346">No</span></span>|<span data-ttu-id="92aaa-1347">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1347">Yes.</span></span> <span data-ttu-id="92aaa-1348">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1348">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1349">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1349">Nested Type</span></span>|<span data-ttu-id="92aaa-1350">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1350">No</span></span>|<span data-ttu-id="92aaa-1351">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1351">No</span></span>|  
|<span data-ttu-id="92aaa-1352">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1352">Property</span></span>|<span data-ttu-id="92aaa-1353">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1353">Not applicable</span></span>|<span data-ttu-id="92aaa-1354">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1354">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1355">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1355">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1356">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1356">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1357">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1357">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1358">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1358">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1359">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1359">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1360">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1360">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1361">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1361">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1362">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MemberInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1362">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1363">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет члены ограничения класса или членов <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1363">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span> 
  
## Examples  
 <span data-ttu-id="92aaa-1364">В следующем примере кода демонстрируется использование <xref:System.Type.GetMembers> перегруженный метод для сбора сведений о все открытые члены указанного класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1364">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1365">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1365">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1366">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1366">-or-</span></span> 
 <span data-ttu-id="92aaa-1367"><see cref="F:System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1367"><see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-1368">При переопределении в производном классе ищет члены, определенные для текущего объекта <see cref="T:System.Type" />, используя указанные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1368">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1369">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, представляющий все члены, определенные для текущего типа <see cref="T:System.Type" /> и удовлетворяющие указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1369">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="92aaa-1370">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1370">-or-</span></span> 
<span data-ttu-id="92aaa-1371">Пустой массив, если для текущего объекта <see cref="T:System.Type" /> не определены члены или ни один из определенных членов не удовлетворяет ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1371">An empty array if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="92aaa-1372">Элементы включают свойства, методы, конструкторы, поля, события и вложенные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1372">Members include properties, methods, constructors, fields, events, and nested types.</span></span>

<span data-ttu-id="92aaa-1373">Для `GetMethods(BindingFlags)` перегрузки для успешного получения сведений о методе, `bindingAttr` аргумент должен содержать хотя бы один из <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, а также по крайней мере один из <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1373">For the `GetMethods(BindingFlags)` overload to successfully retrieve method information, the `bindingAttr` argument must include at least one of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, along with at least one of <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span></span> <span data-ttu-id="92aaa-1374">Единственное исключение — вызов метода с <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, которое возвращает член вложенные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1374">The sole exception is a method call with <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, which returns member information about nested types.</span></span>

<span data-ttu-id="92aaa-1375">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1375">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span> 

- <span data-ttu-id="92aaa-1376">Укажите `BindingFlags.Instance` для включения методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1376">Specify `BindingFlags.Instance` to include instance methods.</span></span> 

- <span data-ttu-id="92aaa-1377">Укажите `BindingFlags.Static` для включения статических методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1377">Specify `BindingFlags.Static` to include static methods.</span></span> 
  
- <span data-ttu-id="92aaa-1378">Укажите `BindingFlags.Public` для включения в поиск открытых методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1378">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
- <span data-ttu-id="92aaa-1379">Укажите `BindingFlags.NonPublic` для включения в поиск неоткрытые методы (то есть внутренней, закрытые и защищенные методы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1379">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="92aaa-1380">Только защищенные и внутренние методы базовых классов, возвращаются; закрытые методы базовых классов не возвращаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1380">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
- <span data-ttu-id="92aaa-1381">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1381">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  

- <span data-ttu-id="92aaa-1382">Укажите `BindingFlags.Default` отдельно, чтобы возвратить пустую <xref:System.Reflection.MethodInfo> массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1382">Specify `BindingFlags.Default` alone to return an empty <xref:System.Reflection.MethodInfo> array.</span></span>

<span data-ttu-id="92aaa-1383">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1383">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
- <span data-ttu-id="92aaa-1384">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1384">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
<span data-ttu-id="92aaa-1385">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1385">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  

<span data-ttu-id="92aaa-1386"><xref:System.Type.GetMembers%2A> Метод не возвращает элементы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1386">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1387">Ваш код не должен зависеть от порядка, в котором возвращаются элементы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1387">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  

 <span data-ttu-id="92aaa-1388">Чтобы получить инициализатор класса (статический конструктор), с помощью этой перегрузки метода, необходимо указать <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1388">To get the class initializer (static constructor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="92aaa-1389">Также можно получить с помощью инициализатор класса <xref:System.Type.TypeInitializer%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1389">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-1390">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MemberInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1390">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1391">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет члены ограничения класса или членов <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1391">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  

## Examples  
 <span data-ttu-id="92aaa-1392">В следующем примере кода демонстрируется использование <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> перегруженный метод для сбора сведений о всех членах открытые экземпляры указанного класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1392">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1393">Получает заданный метод текущего класса <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1393">Gets a specific method of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1394">Строка, содержащая имя искомого открытого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1394">The string containing the name of the public method to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-1395">Выполняет поиск открытого метода с заданным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1395">Searches for the public method with the specified name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1396">Объект, представляющий открытый метод с заданным именем, если такой метод есть, и <see langword="null" />, если такого метода нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1396">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1397">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1397">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-1398">Поиск включает общедоступный статический и открытые методы экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1398">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="92aaa-1399">Если метод перегружен и имеет более чем один открытый метод <xref:System.Type.GetMethod%28System.String%29> вызывает метод <xref:System.Reflection.AmbiguousMatchException> исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1399">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="92aaa-1400">В следующем примере создается исключение, так как присутствует более одного общедоступного перегрузка <xref:System.Int32.ToString%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1400">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="92aaa-1401">С другой стороны так как `Person.ToString` переопределения методов <xref:System.Object.ToString%2A?displayProperty=nameWithType> и поэтому не перегружен, <xref:System.Type.GetMethod%28System.String%29> метод способен получить <xref:System.Reflection.MethodInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1401">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="92aaa-1402">Необходимо выполнить одно из следующих действий, чтобы получить определенный метод:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1402">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="92aaa-1403">Вызовите <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> метод и указать `bindingAttr` аргумент, который однозначно определяет метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1403">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="92aaa-1404">Например, если исключение вызывается, поскольку тип имеет статический и перегрузку экземпляр, можно указать `bindingAttr` аргумент <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1404">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="92aaa-1405">Вызвать перегрузку <xref:System.Type.GetMethod%2A> метод, который включает в себя `types` параметр, который определяет типы параметров метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1405">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="92aaa-1406">Вызовите <xref:System.Type.GetMethods> метод для извлечения массив, содержащий все открытые методы, принадлежащие типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1406">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="92aaa-1407">Затем можно последовательно для идентификации повторяющихся методов с именем `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1407">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="92aaa-1408">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1408">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1409">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1409">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1410">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1410">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1411">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1411">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1412">В следующем примере возвращается метод с именем `MethodA`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1412">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1413">Найдено несколько методов с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1413">More than one method is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1414"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1414"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1415">Строка, содержащая имя искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1415">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1416">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1416">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1417">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1417">-or-</span></span> 
 <span data-ttu-id="92aaa-1418"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1418"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-1419">Выполняет поиск указанного метода, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1419">Searches for the specified method, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1420">Если поиск выполнен удачно, возвращается объект, предоставляющий метод, который соответствует указанным требованиям; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1420">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1421">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения методов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1421">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1422">Необходимо указать либо <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> или <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1422">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1423">Укажите <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> для включения в поиск открытых методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1423">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1424">Укажите <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> для включения в поиск неоткрытые методы (то есть внутренней, закрытые и защищенные методы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1424">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1425">Укажите <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1425">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1426">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1426">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1427"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1427"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1428"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> для поиска только методы, объявленные на <xref:System.Type>, не те методы, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1428"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1429">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1429">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-1430">Если метод перегружен и более одного перегруженного метода соответствует ограничениям, указанным по `bindingAttr` аргумент, метод вызывает <xref:System.Reflection.AmbiguousMatchException> исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1430">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="92aaa-1431">В следующем примере возникает исключение из-за:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1431">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="92aaa-1432">`TestClass` Тип имеет две перегрузки открытого экземпляра `DisplayValue` метод, `DisplayValue(String)` и `DisplayValue(String, Object[])`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1432">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="92aaa-1433">`TestClass` Тип имеет две перегрузки открытого экземпляра `Equals` метода, один из которых наследуется от <xref:System.Object>: `Equals(TestClass)` и `Equals(Object)`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1433">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="92aaa-1434">Необходимо выполнить одно из следующих действий, чтобы получить определенный метод:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1434">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="92aaa-1435">Измените ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1435">Change the binding constraints.</span></span> <span data-ttu-id="92aaa-1436">В предыдущем примере, попытка получить открытый экземпляр `Equals` извлекает метод, который объявляется по типу и не наследуется успешно `Equals(TestClass)`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1436">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="92aaa-1437">Вызвать перегрузку <xref:System.Type.GetMethod%2A> метод, который включает в себя `types` параметр, который определяет типы параметров метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1437">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="92aaa-1438">Вызовите <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> метод для извлечения массив, содержащий все методы, принадлежащие типу с атрибутами указанную привязку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1438">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="92aaa-1439">Затем можно последовательно для идентификации повторяющихся методов с именем `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1439">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="92aaa-1440">Этот подход проиллюстрирован в предыдущем примере обработчик для <xref:System.Reflection.AmbiguousMatchException> исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1440">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="92aaa-1441">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1441">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1442">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1442">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1443">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1443">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1444">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1444">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1445">Следующий пример возвращает метод, который соответствует указанным флагам привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1445">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1446">Найдено несколько методов с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1446">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1447"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1447"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1448">Строка, содержащая имя искомого открытого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1448">The string containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-1449">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1449">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="92aaa-1450">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1450">-or-</span></span> 
<span data-ttu-id="92aaa-1451">Пустой массив объектов <see cref="T:System.Type" /> (в соответствии со значением поля <see cref="F:System.Type.EmptyTypes" />) для получения метода, не принимающего параметры.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1451">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="92aaa-1452">Ищет указанный открытый метод, параметры которого соответствуют заданным типам аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1452">Searches for the specified public method whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1453">Объект, представляющий открытый метод, параметры которого соответствуют указанным типам аргументов, если они существуют, и <see langword="null" />, если их нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1453">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1454">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1454">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-1455">Поиск включает общедоступный статический и открытые методы экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1455">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1456">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1456">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-1457">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1457">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-1458">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1458">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1459">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1459">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1460">`name` Параметр не может включать аргументы типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1460">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="92aaa-1461">К примеру, код C# `GetMethod("MyGenericMethod<int>")` ищет метод с именем текст "`MyGenericMethod<int>`«, а не для метод с именем `MyGenericMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1461">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="92aaa-1462">Вместо этого используйте `GetMethod("MyGenericMethod")` с соответствующим параметром в `types` массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1462">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1463">В следующем примере вычисляется определенные перегрузки `MethodA`, задающие различные типы аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1463">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1464">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Примера требуется `/unsafe` параметр компилятора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1464">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="92aaa-1465">В следующем примере извлекается <xref:System.Reflection.MethodInfo> объекты, представляющие `Add` методы, не являющегося универсальным типа ( <xref:System.Collections.ArrayList> класс), открытым универсальным типом ( <xref:System.Collections.Generic.List%601> класса) и закрытый универсальный тип ( `List(Of String)` типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1465">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="92aaa-1466">В примере определяется `GetAddMethod` метод, который получает соответствующий <xref:System.Reflection.MethodInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1466">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="92aaa-1467">Для предоставления `types` аргумент для открытого универсального типа, он вызывает <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1467">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="92aaa-1468">Для предоставления `types` аргумента для закрытого универсального типа, он извлекает значение <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1468">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1469">Найдено несколько методов с указанным именем и заданными параметрами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1469">More than one method is found with the specified name and specified parameters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1470"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1470"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1471">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1471">-or-</span></span> 
 <span data-ttu-id="92aaa-1472"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1472"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1473">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1473">-or-</span></span> 
<span data-ttu-id="92aaa-1474">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1474">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-1475">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1475"><paramref name="types" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="genericParameterCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1476">Строка, содержащая имя искомого открытого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1476">The string containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-1477">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1477">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="92aaa-1478">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1478">-or-</span></span> 
<span data-ttu-id="92aaa-1479">Пустой массив объектов <see cref="T:System.Type" /> (в соответствии со значением поля <see cref="F:System.Type.EmptyTypes" />) для получения метода, не принимающего параметры.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1479">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-1480">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1480">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-1481">Используется только при вызове посредством COM-взаимодействия. При этом обрабатываются только параметры, переданные по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1481">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="92aaa-1482">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1482">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-1483">Выполняет поиск указанного открытого метода, параметры которого соответствуют указанным типам аргументов и модификаторам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1483">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1484">Если поиск выполнен успешно, возвращается объект, представляющий открытый метод, который соответствует указанным требованиям; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1484">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1485">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1485">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-1486">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1486">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-1487">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1487">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-1488">Поиск включает общедоступный статический и открытые методы экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1488">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1489">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1489">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-1490">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1490">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-1491">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1491">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1492">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1492">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1493">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1493">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1494">К примеру, код C# `GetMethod("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1494">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="92aaa-1495">Вместо этого используйте `GetMethod("MyMethod")` с соответствующим параметром в `types` массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1495">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1496">Найдено несколько методов с указанным именем и заданными параметрами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1496">More than one method is found with the specified name and specified parameters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1497"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1497"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1498">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1498">-or-</span></span> 
 <span data-ttu-id="92aaa-1499"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1499"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1500">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1500">-or-</span></span> 
<span data-ttu-id="92aaa-1501">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1501">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-1502">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1502"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-1503">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1503">-or-</span></span> 
 <span data-ttu-id="92aaa-1504">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1504"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="genericParameterCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1505">Строка, содержащая имя искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1505">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1506">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1506">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1507">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1507">-or-</span></span> 
 <span data-ttu-id="92aaa-1508"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1508"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-1509">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1509">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-1510">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1510">-or-</span></span> 
<span data-ttu-id="92aaa-1511">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1511">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-1512">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1512">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="92aaa-1513">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1513">-or-</span></span> 
<span data-ttu-id="92aaa-1514">Пустой массив объектов <see cref="T:System.Type" /> (в соответствии со значением поля <see cref="F:System.Type.EmptyTypes" />) для получения метода, не принимающего параметры.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1514">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-1515">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1515">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-1516">Используется только при вызове посредством COM-взаимодействия. При этом обрабатываются только параметры, переданные по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1516">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="92aaa-1517">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1517">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-1518">Ищет заданный метод, параметры которого соответствуют указанным типам аргументов и модификаторам, используя установленные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1518">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1519">Если поиск выполнен удачно, возвращается объект, предоставляющий метод, который соответствует указанным требованиям; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1519">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1520">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1520">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-1521">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1521">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-1522">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения методов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1522">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1523">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1523">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1524">Укажите `BindingFlags.Public` для включения в поиск открытых методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1524">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1525">Укажите `BindingFlags.NonPublic` для включения закрытых методов (то есть внутренней, закрытые и защищенные методы) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1525">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1526">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1526">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1527">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1527">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1528">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1528">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1529">`BindingFlags.DeclaredOnly` для поиска только методы, объявленные на <xref:System.Type>, не те методы, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1529">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1530">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1530">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1531">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1531">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-1532">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1532">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-1533">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1533">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1534">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1534">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1535">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1535">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1536">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1536">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1537">В следующем примере вычисляется определенные перегрузки `MethodA`, указав ограничениям привязки и различных типов аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1537">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1538">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Примера требуется `/unsafe` параметр компилятора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1538">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1539">Найдено несколько методов с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1539">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1540"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1540"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1541">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1541">-or-</span></span> 
 <span data-ttu-id="92aaa-1542"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1542"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1543">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1543">-or-</span></span> 
<span data-ttu-id="92aaa-1544">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1544">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-1545">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1545"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-1546">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1546">-or-</span></span> 
 <span data-ttu-id="92aaa-1547">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1547"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="genericParameterCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1548">Строка, содержащая имя искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1548">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1549">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1549">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1550">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1550">-or-</span></span> 
 <span data-ttu-id="92aaa-1551"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1551"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-1552">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1552">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-1553">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1553">-or-</span></span> 
<span data-ttu-id="92aaa-1554">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1554">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="92aaa-1555">Объект, определяющий набор применяемых правил, касающихся порядка и расположения аргументов, способа передачи возвращаемого значения, регистров, используемых для аргументов, и способа очистки стека.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1555">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-1556">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1556">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="92aaa-1557">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1557">-or-</span></span> 
<span data-ttu-id="92aaa-1558">Пустой массив объектов <see cref="T:System.Type" /> (в соответствии со значением поля <see cref="F:System.Type.EmptyTypes" />) для получения метода, не принимающего параметры.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1558">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-1559">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1559">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-1560">Используется только при вызове посредством COM-взаимодействия. При этом обрабатываются только параметры, переданные по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1560">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="92aaa-1561">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1561">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-1562">Ищет метод с параметрами, соответствующими указанным модификаторам и типам аргументов, с учетом заданных ограничений привязки и соглашений о вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1562">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1563">Если поиск выполнен удачно, возвращается объект, предоставляющий метод, который соответствует указанным требованиям; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1563">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1564">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1564">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-1565">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1565">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-1566">В следующей таблице показаны, какие члены базового класса возвращаются `GetXXX` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1566">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1567">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1567">Member Type</span></span>|<span data-ttu-id="92aaa-1568">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1568">Static</span></span>|<span data-ttu-id="92aaa-1569">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1569">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1570">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1570">Constructor</span></span>|<span data-ttu-id="92aaa-1571">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1571">No</span></span>|<span data-ttu-id="92aaa-1572">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1572">No</span></span>|  
|<span data-ttu-id="92aaa-1573">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1573">Field</span></span>|<span data-ttu-id="92aaa-1574">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1574">No</span></span>|<span data-ttu-id="92aaa-1575">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1575">Yes.</span></span> <span data-ttu-id="92aaa-1576">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1576">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1577">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1577">Event</span></span>|<span data-ttu-id="92aaa-1578">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1578">Not applicable</span></span>|<span data-ttu-id="92aaa-1579">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1579">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1580">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1580">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1581">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1581">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1582">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1582">Method</span></span>|<span data-ttu-id="92aaa-1583">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1583">No</span></span>|<span data-ttu-id="92aaa-1584">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1584">Yes.</span></span> <span data-ttu-id="92aaa-1585">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1585">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1586">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1586">Nested Type</span></span>|<span data-ttu-id="92aaa-1587">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1587">No</span></span>|<span data-ttu-id="92aaa-1588">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1588">No</span></span>|  
|<span data-ttu-id="92aaa-1589">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1589">Property</span></span>|<span data-ttu-id="92aaa-1590">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1590">Not applicable</span></span>|<span data-ttu-id="92aaa-1591">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1591">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1592">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1592">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1593">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1593">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1594">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1594">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1595">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1595">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1596">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1596">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1597">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1597">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1598">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1598">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1599">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения методов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1599">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1600">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1600">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1601">Укажите `BindingFlags.Public` для включения в поиск открытых методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1601">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1602">Укажите `BindingFlags.NonPublic` для включения закрытых методов (то есть внутренней, закрытые и защищенные методы) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1602">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1603">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1603">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1604">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1604">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1605">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1605">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1606">`BindingFlags.DeclaredOnly` для поиска только методы, объявленные на <xref:System.Type>, не те методы, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1606">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1607">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1607">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1608">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1608">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-1609">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1609">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-1610">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1610">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1611">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1611">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1612">Для универсальных методов, не используйте аргументы типа в `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1612">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="92aaa-1613">К примеру, код C# `GetMember("MyMethod<int>")` ищет элемент с именем текст "`MyMethod<int>`«, а не для метод с именем `MyMethod` , имеет один аргумент универсального типа `int`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1613">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1614">В следующем примере вычисляется определенные перегрузки `MethodA`, указав ограничениям привязки, соглашения о вызовах и различных типов аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1614">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1615">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Примера требуется `/unsafe` параметр компилятора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1615">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1616">Найдено несколько методов с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1616">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1617"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1617"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1618">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1618">-or-</span></span> 
 <span data-ttu-id="92aaa-1619"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1619"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-1620">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1620">-or-</span></span> 
<span data-ttu-id="92aaa-1621">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1621">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-1622">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1622"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-1623">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1623">-or-</span></span> 
 <span data-ttu-id="92aaa-1624">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1624"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="genericParameterCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="6" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1625">Строка, содержащая имя искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1625">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1626">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1626">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1627">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1627">-or-</span></span> 
 <span data-ttu-id="92aaa-1628"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1628"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-1629">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1629">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-1630">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1630">-or-</span></span> 
<span data-ttu-id="92aaa-1631">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1631">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="92aaa-1632">Объект, который задает набор правил, используемых в зависимости от порядка и расположения аргументов, способа передачи возвращаемого значения, регистров, используемых для аргументов, и процесса очистки стека.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1632">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-1633">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1633">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="92aaa-1634">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1634">-or-</span></span> 
<span data-ttu-id="92aaa-1635">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить метод, который не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1635">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span>  
  
<span data-ttu-id="92aaa-1636">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1636">-or-</span></span> 
 <span data-ttu-id="92aaa-1637"><see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1637"><see langword="null" />.</span></span> <span data-ttu-id="92aaa-1638">Если значение параметра <paramref name="types" /> равно <see langword="null" />, аргументы метода не проверяются на соответствие условиям.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1638">If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-1639">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1639">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-1640">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1640">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-1641">При переопределении в производном классе ищет указанный метод, параметры которого соответствуют указанным типам аргументов и модификаторам, используя для этого заданные ограничения привязки и соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1641">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1642">Если поиск выполнен удачно, возвращается объект, предоставляющий метод, который соответствует указанным требованиям; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1642">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1643">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1643">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-1644">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1644">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-1645">Если значение параметра `types` равно `null`, аргументы метода не проверяются на соответствие условиям.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1645">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="92aaa-1646">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения методов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1646">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1647">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1647">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1648">Укажите `BindingFlags.Public` для включения в поиск открытых методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1648">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1649">Укажите `BindingFlags.NonPublic` для включения в поиск неоткрытые методы (то есть внутренней, закрытые и защищенные методы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1649">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1650">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1650">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1651">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1651">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-1652">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1652">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-1653">`BindingFlags.DeclaredOnly` для поиска только методы, объявленные на <xref:System.Type>, не те методы, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1653">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1654">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1654">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1655">Найдено несколько методов с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1655">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1656"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1656"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-1657">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1657"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-1658">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1658">-or-</span></span> 
 <span data-ttu-id="92aaa-1659">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1659"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-1660">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1660">-or-</span></span> 
 <span data-ttu-id="92aaa-1661"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1661"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-1662">Текущий тип — <see cref="T:System.Reflection.Emit.TypeBuilder" /> или <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1662">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="genericParameterCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="6" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1663">Возвращает методы текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1663">Gets the methods of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1664">Возвращает все открытые методы текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1664">Returns all the public methods of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1665">Массив объектов <see cref="T:System.Reflection.MethodInfo" />, представляющий все открытые методы, определенные для текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1665">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-1666">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1666">-or-</span></span> 
<span data-ttu-id="92aaa-1667">Пустой массив типа <see cref="T:System.Reflection.MethodInfo" />, если для текущего типа <see cref="T:System.Type" /> открытые методы не определены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1667">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="92aaa-1668"><xref:System.Type.GetMethods%2A> Метод не возвращает методы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1668">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1669">Ваш код не должен зависеть от порядка, в котором возвращаются методы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1669">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1670">Конструкторы не включаются в массив методов, возвращаемый при вызове этого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1670">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="92aaa-1671">Создать отдельный вызов `GetConstructors()` для получения методов конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1671">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="92aaa-1672">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1672">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1673">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1673">Member Type</span></span>|<span data-ttu-id="92aaa-1674">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1674">Static</span></span>|<span data-ttu-id="92aaa-1675">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1675">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1676">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1676">Constructor</span></span>|<span data-ttu-id="92aaa-1677">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1677">No</span></span>|<span data-ttu-id="92aaa-1678">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1678">No</span></span>|  
|<span data-ttu-id="92aaa-1679">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1679">Field</span></span>|<span data-ttu-id="92aaa-1680">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1680">No</span></span>|<span data-ttu-id="92aaa-1681">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1681">Yes.</span></span> <span data-ttu-id="92aaa-1682">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1682">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1683">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1683">Event</span></span>|<span data-ttu-id="92aaa-1684">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1684">Not applicable</span></span>|<span data-ttu-id="92aaa-1685">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1685">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1686">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1686">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1687">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1687">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1688">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1688">Method</span></span>|<span data-ttu-id="92aaa-1689">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1689">No</span></span>|<span data-ttu-id="92aaa-1690">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1690">Yes.</span></span> <span data-ttu-id="92aaa-1691">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1691">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1692">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1692">Nested Type</span></span>|<span data-ttu-id="92aaa-1693">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1693">No</span></span>|<span data-ttu-id="92aaa-1694">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1694">No</span></span>|  
|<span data-ttu-id="92aaa-1695">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1695">Property</span></span>|<span data-ttu-id="92aaa-1696">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1696">Not applicable</span></span>|<span data-ttu-id="92aaa-1697">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1697">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1698">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1698">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1699">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1699">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1700">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1700">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1701">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1701">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1702">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1702">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1703">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1703">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1704">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1704">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1705">Параметры нельзя опускать при поиске конструкторов и методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1705">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="92aaa-1706">Параметры можно опустить только в том случае, при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1706">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="92aaa-1707">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1707">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1708">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1708">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1709">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1709">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>

<span data-ttu-id="92aaa-1710">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1710">-or-</span></span>

 <span data-ttu-id="92aaa-1711"><see cref="F:System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1711"><see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-1712">При переопределении в производном классе ищет методы, определенные для текущего объекта <see cref="T:System.Type" />, используя указанные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1712">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1713">Массив объектов <see cref="T:System.Reflection.MethodInfo" />, представляющий все методы, определенные для текущего типа <see cref="T:System.Type" /> и удовлетворяющие указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1713">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="92aaa-1714">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1714">-or-</span></span> 
<span data-ttu-id="92aaa-1715">Пустой массив типа <see cref="T:System.Reflection.MethodInfo" />, если для текущего объекта <see cref="T:System.Type" /> не определены методы или ни один из определенных методов не удовлетворяет ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1715">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="92aaa-1716">Для `GetMethods(BindingFlags)` перегрузки для успешного получения сведений о методе, `bindingAttr` аргумент должен содержать хотя бы один из <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, а также по крайней мере один из <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1716">For the `GetMethods(BindingFlags)` overload to successfully retrieve method information, the `bindingAttr` argument must include at least one of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, along with at least one of <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span></span> 
  
 <span data-ttu-id="92aaa-1717">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения методов, включаемых в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1717">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
- <span data-ttu-id="92aaa-1718">Укажите `BindingFlags.Instance` для включения методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1718">Specify `BindingFlags.Instance` to include instance methods.</span></span> 

- <span data-ttu-id="92aaa-1719">Укажите `BindingFlags.Static` для включения статических методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1719">Specify `BindingFlags.Static` to include static methods.</span></span> 
  
- <span data-ttu-id="92aaa-1720">Укажите `BindingFlags.Public` для включения в поиск открытых методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1720">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
- <span data-ttu-id="92aaa-1721">Укажите `BindingFlags.NonPublic` для включения в поиск неоткрытые методы (то есть внутренней, закрытые и защищенные методы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1721">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="92aaa-1722">Только защищенные и внутренние методы базовых классов, возвращаются; закрытые методы базовых классов не возвращаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1722">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
- <span data-ttu-id="92aaa-1723">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1723">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  

- <span data-ttu-id="92aaa-1724">Укажите `BindingFlags.Default` отдельно, чтобы возвратить пустую <xref:System.Reflection.MethodInfo> массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1724">Specify `BindingFlags.Default` alone to return an empty <xref:System.Reflection.MethodInfo> array.</span></span>
  
 <span data-ttu-id="92aaa-1725">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1725">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
- <span data-ttu-id="92aaa-1726">`BindingFlags.DeclaredOnly` для поиска только методы, объявленные на <xref:System.Type>, не те методы, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1726">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1727">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1727">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  

<span data-ttu-id="92aaa-1728"><xref:System.Type.GetMethods%2A> Метод не возвращает методы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1728">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1729">Ваш код не должен зависеть от порядка, в котором возвращаются методы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1729">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  

<span data-ttu-id="92aaa-1730">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.MethodInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1730">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
<span data-ttu-id="92aaa-1731">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод ищет методы ограничения класса или методы <xref:System.Object> при возникновении без ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1731">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span> 
  
## Examples  
 <span data-ttu-id="92aaa-1732">Следующий пример создает класс с два открытых метода и один защищенный метод, создает `Type` объект, соответствующий `MyTypeClass`, возвращает все открытые и неоткрытые методы и отображает их имена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1732">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1733">Возвращает определенный тип, вложенный в текущий объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1733">Gets a specific type nested within the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1734">Строка, содержащая имя искомого вложенного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1734">The string containing the name of the nested type to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-1735">Выполняет поиск открытого вложенного типа с заданным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1735">Searches for the public nested type with the specified name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1736">Объект, представляющий открытый вложенный тип с указанным именем, если тип есть, и <see langword="null" />, если такого типа нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1736">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1737">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1737">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="92aaa-1738">Можно использовать простое имя вложенного класса для `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1738">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="92aaa-1739">Не уточните его, указав имя внешнего класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1739">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="92aaa-1740">Для универсального вложенного класса следует использовать искаженное имя — то есть, добавление грависом и число универсальных аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1740">For a generic nested class, use the mangled name - that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="92aaa-1741">Например, используйте строку «внутреннее\`1» для получения универсального вложенных классов `Inner<T>` (`Inner(Of T)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1741">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="92aaa-1742">Не используйте синтаксис конкретного языка для параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1742">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="92aaa-1743">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1743">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1744">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1744">Member Type</span></span>|<span data-ttu-id="92aaa-1745">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1745">Static</span></span>|<span data-ttu-id="92aaa-1746">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1746">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1747">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1747">Constructor</span></span>|<span data-ttu-id="92aaa-1748">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1748">No</span></span>|<span data-ttu-id="92aaa-1749">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1749">No</span></span>|  
|<span data-ttu-id="92aaa-1750">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1750">Field</span></span>|<span data-ttu-id="92aaa-1751">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1751">No</span></span>|<span data-ttu-id="92aaa-1752">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1752">Yes.</span></span> <span data-ttu-id="92aaa-1753">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1753">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1754">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1754">Event</span></span>|<span data-ttu-id="92aaa-1755">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1755">Not applicable</span></span>|<span data-ttu-id="92aaa-1756">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1756">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1757">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1757">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1758">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1758">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1759">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1759">Method</span></span>|<span data-ttu-id="92aaa-1760">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1760">No</span></span>|<span data-ttu-id="92aaa-1761">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1761">Yes.</span></span> <span data-ttu-id="92aaa-1762">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1762">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1763">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1763">Nested Type</span></span>|<span data-ttu-id="92aaa-1764">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1764">No</span></span>|<span data-ttu-id="92aaa-1765">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1765">No</span></span>|  
|<span data-ttu-id="92aaa-1766">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1766">Property</span></span>|<span data-ttu-id="92aaa-1767">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1767">Not applicable</span></span>|<span data-ttu-id="92aaa-1768">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1768">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1769">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1769">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1770">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1770">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1771">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1771">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1772">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1772">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1773">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1773">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1774">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1774">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1775">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1775">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1776">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет вложенные типы ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1776">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="92aaa-1777">Если вложенный тип является универсальным, этот метод возвращает его определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1777">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="92aaa-1778">Это справедливо, даже если включающий универсальный тип является закрытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1778">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1779">Если текущий <xref:System.Type> представляет универсальный тип, определенный в C#, Visual Basic или C++, его вложенные типы являются универсальными, даже если они имеют собственные имеет тех универсальных параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1779">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="92aaa-1780">Это не всегда справедливо для вложенных типов, определенных в динамических сборках или скомпилированные с использованием [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1780">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="92aaa-1781">Сведения о вложенных универсальных типов и о создании вложенных универсальных типов из их определений универсальных типов, см. в разделе <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1781">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1782"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1782"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1783">Строка, содержащая имя искомого вложенного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1783">The string containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1784">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1784">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1785">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1785">-or-</span></span> 
 <span data-ttu-id="92aaa-1786"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1786"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-1787">При переопределении в производном классе ищет указанный вложенный тип, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1787">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1788">Если поиск выполнен успешно, возвращается объект, предоставляющий вложенный тип, который соответствует указанным требованиям; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1788">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1789">Можно использовать простое имя вложенного класса для `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1789">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="92aaa-1790">Не уточните его, указав имя внешнего класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1790">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="92aaa-1791">Для универсального вложенного класса следует использовать искаженное имя — то есть, добавление грависом и число универсальных параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1791">For a generic nested class, use the mangled name - that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="92aaa-1792">Например, используйте строку «внутреннее\`1» для получения универсального вложенных классов `Inner<T>` (`Inner(Of T)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1792">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="92aaa-1793">Не используйте синтаксис конкретного языка для параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1793">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="92aaa-1794">Следующие <xref:System.Reflection.BindingFlags> фильтра флаги можно использовать для определения, какие вложенные типы будут включены в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1794">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1795">Необходимо указать либо <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> или <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1795">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1796">Укажите <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> для включения в поиск открытые вложенные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1796">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1797">Укажите <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> для включения при поиске не являющиеся открытыми вложенные типы (то есть внутренней, закрытые и защищенные вложенные типы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1797">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="92aaa-1798">Этот метод возвращает только вложенные типы текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1798">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="92aaa-1799">Он не выполняет поиск базовые классы для текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1799">It does not search the base classes of the current type.</span></span> <span data-ttu-id="92aaa-1800">Чтобы найти типы, вложенные в базовых классах, вы должны пройти в иерархии наследования, вызвав <xref:System.Type.GetNestedType%2A> на каждом уровне.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1800">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="92aaa-1801"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> игнорируются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1801"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="92aaa-1802">Вызов этого метода только с <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> флаг или только <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> флаг Возвращает указанные вложенные типы и другие флаги не требуются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1802">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="92aaa-1803">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1803">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-1804">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет вложенные типы ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1804">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="92aaa-1805">Если вложенный тип является универсальным, этот метод возвращает его определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1805">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="92aaa-1806">Это справедливо, даже если включающий универсальный тип является закрытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1806">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1807">Если текущий <xref:System.Type> представляет универсальный тип, определенный в C#, Visual Basic или C++, его вложенные типы являются универсальными, даже если они имеют собственные имеет тех универсальных параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1807">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="92aaa-1808">Это не всегда справедливо для вложенных типов, определенных в динамических сборках или скомпилированные с использованием [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1808">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="92aaa-1809">Сведения о вложенных универсальных типов и о создании вложенных универсальных типов из их определений универсальных типов, см. в разделе <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1809">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1810"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1810"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1811">Возвращает типы, вложенные в текущий объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1811">Gets the types nested within the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1812">Возвращает открытые типы, вложенные в текущий объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1812">Returns the public types nested in the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1813">Массив объектов <see cref="T:System.Type" />, представляющий открытые типы, вложенные в текущий объект <see cref="T:System.Type" /> (нерекурсивный поиск), или пустой массив типа <see cref="T:System.Type" />, если в текущий объект <see cref="T:System.Type" /> не вложен ни один открытый тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1813">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1814"><xref:System.Type.GetNestedTypes%2A> Метод не возвращает типы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1814">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1815">Ваш код не должен зависеть от порядка, в котором возвращаются типы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1815">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1816">Возвращаются только открытые типы, непосредственно вложенные в текущий тип; Поиск не является рекурсивным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1816">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="92aaa-1817">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1817">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1818">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1818">Member Type</span></span>|<span data-ttu-id="92aaa-1819">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1819">Static</span></span>|<span data-ttu-id="92aaa-1820">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1820">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1821">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1821">Constructor</span></span>|<span data-ttu-id="92aaa-1822">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1822">No</span></span>|<span data-ttu-id="92aaa-1823">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1823">No</span></span>|  
|<span data-ttu-id="92aaa-1824">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1824">Field</span></span>|<span data-ttu-id="92aaa-1825">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1825">No</span></span>|<span data-ttu-id="92aaa-1826">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1826">Yes.</span></span> <span data-ttu-id="92aaa-1827">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1827">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1828">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1828">Event</span></span>|<span data-ttu-id="92aaa-1829">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1829">Not applicable</span></span>|<span data-ttu-id="92aaa-1830">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1830">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1831">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1831">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1832">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1832">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1833">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1833">Method</span></span>|<span data-ttu-id="92aaa-1834">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1834">No</span></span>|<span data-ttu-id="92aaa-1835">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1835">Yes.</span></span> <span data-ttu-id="92aaa-1836">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1836">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1837">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1837">Nested Type</span></span>|<span data-ttu-id="92aaa-1838">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1838">No</span></span>|<span data-ttu-id="92aaa-1839">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1839">No</span></span>|  
|<span data-ttu-id="92aaa-1840">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1840">Property</span></span>|<span data-ttu-id="92aaa-1841">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1841">Not applicable</span></span>|<span data-ttu-id="92aaa-1842">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1842">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1843">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1843">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1844">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1844">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1845">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1845">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1846">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1846">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1847">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1847">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1848">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1848">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1849">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1849">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1850">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет вложенные типы ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1850">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="92aaa-1851">Если вложенный тип является универсальным, этот метод возвращает его определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1851">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="92aaa-1852">Это справедливо, даже если включающий универсальный тип является закрытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1852">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1853">Если текущий <xref:System.Type> представляет универсальный тип, определенный в C#, Visual Basic или C++, его вложенные типы являются универсальными, даже если они имеют собственные имеет тех универсальных параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1853">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="92aaa-1854">Это не всегда справедливо для вложенных типов, определенных в динамических сборках или скомпилированные с использованием [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1854">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="92aaa-1855">Сведения о вложенных универсальных типов и о создании вложенных универсальных типов из их определений универсальных типов, см. в разделе <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1855">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1856">В следующем примере определяется вложенный класс и `struct` в `MyClass`и затем получает объекты вложенных типов, с использованием типа `MyClass`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1856">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1857">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1857">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1858">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1858">-or-</span></span> 
 <span data-ttu-id="92aaa-1859"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1859"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-1860">При переопределении в производном классе ищет типы, вложенные в текущий объект <see cref="T:System.Type" />, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1860">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1861">Массив объектов <see cref="T:System.Type" />, представляющий все типы, вложенные в текущий объект <see cref="T:System.Type" />, удовлетворяющий заданным ограничениям привязки (нерекурсивный поиск), или пустой массив типа <see cref="T:System.Type" />, если вложенные типы, удовлетворяющие ограничениям привязки, не найдены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1861">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1862">Поиск вложенных типов не является рекурсивным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1862">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="92aaa-1863"><xref:System.Type.GetNestedTypes%2A> Метод не возвращает типы в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1863">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1864">Ваш код не должен зависеть от порядка, в котором возвращаются типы, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1864">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1865">Следующие <xref:System.Reflection.BindingFlags> фильтра флаги можно использовать для определения, какие вложенные типы будут включены в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1865">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1866">Необходимо указать либо <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> или <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1866">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1867">Укажите <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> для включения в поиск открытые вложенные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1867">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1868">Укажите <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> для включения при поиске не являющиеся открытыми вложенные типы (то есть внутренней, закрытые и защищенные вложенные типы).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1868">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="92aaa-1869">Этот метод возвращает только вложенные типы текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1869">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="92aaa-1870">Он не выполняет поиск базовые классы для текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1870">It does not search the base classes of the current type.</span></span> <span data-ttu-id="92aaa-1871">Чтобы найти типы, вложенные в базовых классах, вы должны пройти в иерархии наследования, вызвав <xref:System.Type.GetNestedTypes%2A> на каждом уровне.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1871">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="92aaa-1872"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> игнорируются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1872"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="92aaa-1873">Вызов этого метода только с <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> флаг или только <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> флаг Возвращает указанные вложенные типы и другие флаги не требуются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1873">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="92aaa-1874">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1874">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-1875">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет вложенные типы ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1875">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="92aaa-1876">Если вложенный тип является универсальным, этот метод возвращает его определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1876">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="92aaa-1877">Это справедливо, даже если включающий универсальный тип является закрытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1877">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-1878">Если текущий <xref:System.Type> представляет универсальный тип, определенный в C#, Visual Basic или C++, его вложенные типы являются универсальными, даже если они имеют собственные имеет тех универсальных параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1878">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="92aaa-1879">Это не всегда справедливо для вложенных типов, определенных в динамических сборках или скомпилированные с использованием [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1879">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="92aaa-1880">Сведения о вложенных универсальных типов и о создании вложенных универсальных типов из их определений универсальных типов, см. в разделе <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1880">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1881">Следующий пример создает два вложенных открытых классов и два вложенных класса защищенных и выводятся сведения о классах, которые соответствуют указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1881">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1882">Получает свойства текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1882">Gets the properties of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-1883">Возвращает все открытые свойства текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1883">Returns all the public properties of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1884">Массив объектов <see cref="T:System.Reflection.PropertyInfo" />, представляющий все открытые свойства текущего типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1884">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="92aaa-1885">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1885">-or-</span></span> 
<span data-ttu-id="92aaa-1886">Пустой массив типа <see cref="T:System.Reflection.PropertyInfo" />, если у текущего типа <see cref="T:System.Type" /> нет открытых свойств.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1886">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1887">Вызов этой перегрузки, аналогичен вызову <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> перегрузка с `bindingAttr` аргумент равен `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` в C# и `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1887">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="92aaa-1888">Он возвращает все открытые экземпляры и статические свойства, которые определяется типом, представленный текущим <xref:System.Type> объекта, а также тех, унаследованные от базовых типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1888">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="92aaa-1889">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1889">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-1890">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1890">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-1891"><xref:System.Type.GetProperties%2A> Метод не возвращает свойства в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1891">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1892">Ваш код не должен зависеть от порядка, в котором возвращаются свойства, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1892">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="92aaa-1893">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1893">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-1894">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-1894">Member Type</span></span>|<span data-ttu-id="92aaa-1895">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-1895">Static</span></span>|<span data-ttu-id="92aaa-1896">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-1896">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-1897">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-1897">Constructor</span></span>|<span data-ttu-id="92aaa-1898">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1898">No</span></span>|<span data-ttu-id="92aaa-1899">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1899">No</span></span>|  
|<span data-ttu-id="92aaa-1900">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-1900">Field</span></span>|<span data-ttu-id="92aaa-1901">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1901">No</span></span>|<span data-ttu-id="92aaa-1902">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1902">Yes.</span></span> <span data-ttu-id="92aaa-1903">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1903">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1904">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-1904">Event</span></span>|<span data-ttu-id="92aaa-1905">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1905">Not applicable</span></span>|<span data-ttu-id="92aaa-1906">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1906">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1907">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1907">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1908">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1908">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-1909">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-1909">Method</span></span>|<span data-ttu-id="92aaa-1910">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1910">No</span></span>|<span data-ttu-id="92aaa-1911">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1911">Yes.</span></span> <span data-ttu-id="92aaa-1912">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1912">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-1913">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-1913">Nested Type</span></span>|<span data-ttu-id="92aaa-1914">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1914">No</span></span>|<span data-ttu-id="92aaa-1915">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-1915">No</span></span>|  
|<span data-ttu-id="92aaa-1916">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1916">Property</span></span>|<span data-ttu-id="92aaa-1917">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-1917">Not applicable</span></span>|<span data-ttu-id="92aaa-1918">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1918">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-1919">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1919">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1920">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1920">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-1921">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1921">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-1922">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1922">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-1923">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1923">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-1924">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1924">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-1925">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1925">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-1926">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1926">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1927">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1927">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1928">В следующем примере иллюстрируется использование метода `GetProperties`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1928">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1929">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1929">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>

<span data-ttu-id="92aaa-1930">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1930">-or-</span></span>

 <span data-ttu-id="92aaa-1931"><see cref="F:System.Reflection.BindingFlags.Default" /> для возврата пустого массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1931"><see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</span></span></param>
        <summary><span data-ttu-id="92aaa-1932">При переопределении в производном классе ищет свойства текущего объекта <see cref="T:System.Type" />, используя указанные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1932">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1933">Массив объектов, представляющий все свойства текущего <see cref="T:System.Type" />, которые удовлетворяют указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1933">An array of objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="92aaa-1934">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1934">-or-</span></span> 
<span data-ttu-id="92aaa-1935">Пустой массив типа <see cref="T:System.Reflection.PropertyInfo" />, если у текущего типа <see cref="T:System.Type" /> нет свойств или ни одно свойство не удовлетворяет ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1935">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="92aaa-1936">Для `GetProperties(BindingFlags)` перегрузки для успешного получения сведений о свойствах, `bindingAttr` аргумент должен содержать хотя бы один из <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, а также по крайней мере один из <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> и <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1936">For the `GetProperties(BindingFlags)` overload to successfully retrieve property information, the `bindingAttr` argument must include at least one of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, along with at least one of <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="92aaa-1937">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие свойства следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1937">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
- <span data-ttu-id="92aaa-1938">Укажите `BindingFlags.Instance` для включения методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1938">Specify `BindingFlags.Instance` to include instance methods.</span></span> 

- <span data-ttu-id="92aaa-1939">Укажите `BindingFlags.Static` для включения статических методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1939">Specify `BindingFlags.Static` to include static methods.</span></span> 
  
- <span data-ttu-id="92aaa-1940">Укажите `BindingFlags.Public` для включения в поиск открытые свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1940">Specify `BindingFlags.Public` to include public properties in the search.</span></span> <span data-ttu-id="92aaa-1941">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1941">A property is considered public to reflection if it has at least one accessor that is public.</span></span> 
  
- <span data-ttu-id="92aaa-1942">Укажите `BindingFlags.NonPublic` для включения в поиск свойств не являющиеся открытыми (то есть внутренней, закрытые и защищенные свойства).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1942">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="92aaa-1943">Только защищенные и внутренние свойства базовых классов, возвращаются; частные свойства базовых классов не возвращаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1943">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
- <span data-ttu-id="92aaa-1944">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1944">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  

- <span data-ttu-id="92aaa-1945">Укажите `BindingFlags.Default` отдельно, чтобы возвратить пустую <xref:System.Reflection.PropertyInfo> массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1945">Specify `BindingFlags.Default` alone to return an empty <xref:System.Reflection.PropertyInfo> array.</span></span>

 <span data-ttu-id="92aaa-1946">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1946">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
- <span data-ttu-id="92aaa-1947">`BindingFlags.DeclaredOnly` для поиска только свойства, объявленные в <xref:System.Type>, не те свойства, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1947">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-1948">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1948">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
<span data-ttu-id="92aaa-1949"><xref:System.Type.GetProperties%2A> Метод не возвращает свойства в определенном порядке, такие как алфавитном или в порядке объявления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1949">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="92aaa-1950">Ваш код не должен зависеть от порядка, в котором возвращаются свойства, так как этот порядок меняется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1950">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  

 <span data-ttu-id="92aaa-1951">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> объекты с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1951">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1952">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1952">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1953">В следующем примере определяется класс с именем `PropertyClass` , включает в себя шесть свойств: два являются открытыми, один является закрытым, один защищен, один является внутренним (`Friend` в Visual Basic), и один protected internal (`Protected Friend` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1953">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="92aaa-1954">Затем он отобразит сведения о некоторых основных свойств (имя и тип, следует ли это чтение и запись и видимость его `get` и `set` методы доступа) для свойств, которые соответствуют указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1954">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-1955">Получает указанное свойство текущего класса <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1955">Gets a specific property of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1956">Строка, содержащая искомое имя открытого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1956">The string containing the name of the public property to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-1957">Выполняет поиск открытого свойства с заданным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1957">Searches for the public property with the specified name.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1958">Объект, представляющий открытое свойство с заданным именем, если такое свойство есть, и <see langword="null" />, если такого свойства нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1958">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1959">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1959">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-1960">Поиск включает общедоступный статический и открытый экземпляр свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1960">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="92aaa-1961">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1961">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-1962">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1962">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-1963">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1963">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-1964">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1964">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="92aaa-1965">В ситуациях, когда <xref:System.Reflection.AmbiguousMatchException> происходит включают следующее:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1965">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="92aaa-1966">Тип содержит два индексированные свойства, которые имеют одинаковое имя, но различное число параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1966">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="92aaa-1967">Чтобы устранить неоднозначность, используйте перегрузку <xref:System.Type.GetProperty%2A> метод, который задает типы параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1967">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="92aaa-1968">Производный тип объявляет свойство, которое скрывает унаследованное свойство с тем же именем, с помощью `new` модификатор (`Shadows` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1968">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="92aaa-1969">Чтобы устранить неоднозначность, используйте <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> перегрузки метода и добавьте <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> флаг для ограничения поиска к элементам, которые не наследуются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1969">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-1970">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-1970">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-1971">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1971">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-1972">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1972">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-1973">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1973">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-1974">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1974">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-1975">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-1975">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-1976">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1976">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-1977">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1977">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-1978">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1978">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-1979">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1979">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-1980">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1980">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-1981">В следующем примере извлекается `Type` объекта класса определяемых пользователем, извлекается свойство этого класса и отображает имя свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1981">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="92aaa-1982">Это свойство имеет внутреннее в метаданных по имени «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-1982">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="92aaa-1983">Любая попытка получить `PropertyInfo` с помощью отражения необходимо указать это внутреннее имя, чтобы правильно возвращает `PropertyInfo` свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1983">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-1984">Найдено несколько свойств с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1984">More than one property is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-1985"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1985"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-1986">Строка, содержащий имя искомого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1986">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-1987">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1987">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-1988">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-1988">-or-</span></span> 
<span data-ttu-id="92aaa-1989"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1989"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-1990">Ищет указанное свойство, используя заданные ограничения привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1990">Searches for the specified property, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-1991">Объект, предоставляющий свойство, которое соответствует указанным требованиям, если такое свойство найдено; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1991">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-1992">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1992">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-1993">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1993">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-1994">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие свойства следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1994">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-1995">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1995">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-1996">Укажите `BindingFlags.Public` для включения в поиск открытые свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1996">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1997">Укажите `BindingFlags.NonPublic` для включения в поиск свойств не являющиеся открытыми (то есть внутренней, закрытые и защищенные свойства).</span><span class="sxs-lookup"><span data-stu-id="92aaa-1997">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-1998">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-1998">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-1999">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-1999">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-2000">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2000">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-2001">`BindingFlags.DeclaredOnly` для поиска только свойства, объявленные в <xref:System.Type>, не те свойства, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2001">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-2002">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2002">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-2003">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2003">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-2004">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2004">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="92aaa-2005">В ситуациях, когда <xref:System.Reflection.AmbiguousMatchException> происходит включают следующее:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2005">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="92aaa-2006">Тип содержит два индексированные свойства, которые имеют одинаковое имя, но различное число параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2006">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="92aaa-2007">Чтобы устранить неоднозначность, используйте перегрузку <xref:System.Type.GetProperty%2A> метод, который задает типы параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2007">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="92aaa-2008">Производный тип объявляет свойство, которое скрывает унаследованное свойство с тем же именем, с помощью `new` модификатор (`Shadows` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2008">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="92aaa-2009">Чтобы устранить неоднозначность, включите <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> для ограничения поиска к элементам, которые не наследуются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2009">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-2010">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-2010">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-2011">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2011">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-2012">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2012">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-2013">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2013">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-2014">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2014">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-2015">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2015">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-2016">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2016">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-2017">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2017">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-2018">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2018">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-2019">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2019">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-2020">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2020">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-2021">В следующем примере извлекается тип пользовательского класса, извлекается свойство этого класса и отображает имя свойства в соответствии с указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2021">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2022">Найдено несколько свойств с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2022">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2023"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2023"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-2024">Строка, содержащая искомое имя открытого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2024">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="92aaa-2025">Возвращаемый тип свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2025">The return type of the property.</span></span></param>
        <summary><span data-ttu-id="92aaa-2026">Выполняет поиск открытого свойства с заданным именем и типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2026">Searches for the public property with the specified name and return type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2027">Объект, представляющий открытое свойство с заданным именем, если такое свойство есть, и <see langword="null" />, если такого свойства нет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2027">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2028">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2028">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-2029">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2029">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-2030">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2030">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-2031">Поиск включает общедоступный статический и открытый экземпляр свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2031">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="92aaa-2032">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2032">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-2033">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2033">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-2034">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-2034">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-2035">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2035">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-2036">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2036">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-2037">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2037">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-2038">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2038">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-2039">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2039">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-2040">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2040">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-2041">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2041">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-2042">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2042">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-2043">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2043">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-2044">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2044">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-2045">В следующем примере определяется класс с одним свойством и возвращает имя и тип свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2045">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2046">Найдено несколько свойств с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2046">More than one property is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2047"><paramref name="name" /> имеет значение <see langword="null" />, или <paramref name="returnType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2047"><paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-2048">Строка, содержащая искомое имя открытого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2048">The string containing the name of the public property to get.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-2049">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2049">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="92aaa-2050">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2050">-or-</span></span> 
<span data-ttu-id="92aaa-2051">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить неиндексированное свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2051">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="92aaa-2052">Ищет указанное открытое свойство, параметры которого соответствуют указанным типам аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2052">Searches for the specified public property whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2053">Объект, представляющий открытое свойство, параметры которого соответствуют указанным типам аргументов, если таковые найдены; в противном случае — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2053">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2054">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2054">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-2055">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2055">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-2056">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2056">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-2057">Поиск включает общедоступный статический и открытый экземпляр свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2057">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="92aaa-2058">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2058">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-2059">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2059">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-2060">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-2060">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-2061">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2061">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-2062">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2062">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-2063">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2063">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-2064">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2064">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-2065">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2065">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-2066">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2066">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-2067">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2067">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-2068">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2068">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-2069">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2069">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-2070">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2070">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-2071">В следующем примере извлекается `Type` извлекает свойства этого класса объект этого класса, определяемые пользователем и отображает имя свойства и тип свойства, заданные аргументы, передаваемые `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2071">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2072">Найдено несколько свойств с указанным именем и соответствующих указанным типам аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2072">More than one property is found with the specified name and matching the specified argument types.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2073"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2073"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-2074">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2074">-or-</span></span> 
 <span data-ttu-id="92aaa-2075"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2075"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2076">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2076"><paramref name="types" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="92aaa-2077">Элемент <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2077">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-2078">Строка, содержащая искомое имя открытого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2078">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="92aaa-2079">Возвращаемый тип свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2079">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-2080">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2080">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="92aaa-2081">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2081">-or-</span></span> 
<span data-ttu-id="92aaa-2082">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить неиндексированное свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2082">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="92aaa-2083">Ищет указанное открытое свойство, параметры которого соответствуют указанным типам аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2083">Searches for the specified public property whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2084">Объект, представляющий открытое свойство, параметры которого соответствуют указанным типам аргументов, если таковые найдены; в противном случае — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2084">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2085">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2085">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-2086">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2086">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-2087">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2087">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-2088">Поиск включает общедоступный статический и открытый экземпляр свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2088">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="92aaa-2089">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2089">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-2090">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2090">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-2091">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-2091">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-2092">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2092">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-2093">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2093">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-2094">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2094">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-2095">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2095">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-2096">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2096">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-2097">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2097">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-2098">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2098">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-2099">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2099">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-2100">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2100">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-2101">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2101">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2102">Найдено несколько свойств с указанным именем и соответствующих указанным типам аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2102">More than one property is found with the specified name and matching the specified argument types.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2103"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2103"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-2104">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2104">-or-</span></span> 
 <span data-ttu-id="92aaa-2105"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2105"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2106">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2106"><paramref name="types" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="92aaa-2107">Элемент <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2107">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-2108">Строка, содержащая искомое имя открытого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2108">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="92aaa-2109">Возвращаемый тип свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2109">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-2110">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2110">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="92aaa-2111">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2111">-or-</span></span> 
<span data-ttu-id="92aaa-2112">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить неиндексированное свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2112">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-2113">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2113">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-2114">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2114">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-2115">Ищет заданное открытое свойство, параметры которого соответствуют указанным типам аргументов и модификаторам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2115">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2116">Объект, представляющий открытое свойство, которое соответствует указанным требованиям, если такое свойство найдено; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2116">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2117">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2117">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-2118">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2118">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-2119">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2119">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-2120">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2120">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-2121">Поиск `name` чувствителен к регистру.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2121">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="92aaa-2122">Поиск включает общедоступный статический и открытый экземпляр свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2122">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="92aaa-2123">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2123">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-2124">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2124">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-2125">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-2125">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-2126">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2126">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-2127">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2127">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-2128">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2128">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-2129">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2129">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-2130">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2130">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-2131">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2131">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-2132">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2132">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-2133">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2133">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-2134">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2134">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-2135">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2135">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-2136">Следующий пример получает `Type` объект, соответствующий `MyPropertyClass`, и индексированного свойства этого класса получаются с помощью аргументы, передаваемые `GetProperty` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2136">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2137">Найдено несколько свойств с указанным именем и соответствующих указанным типам аргументов и модификаторам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2137">More than one property is found with the specified name and matching the specified argument types and modifiers.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2138"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2138"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-2139">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2139">-or-</span></span> 
 <span data-ttu-id="92aaa-2140"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2140"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2141">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2141"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-2142">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2142">-or-</span></span> 
 <span data-ttu-id="92aaa-2143">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2143"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-2144">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2144">-or-</span></span> 
 <span data-ttu-id="92aaa-2145"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2145"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="92aaa-2146">Элемент <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2146">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-2147">Строка, содержащий имя искомого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2147">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-2148">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2148">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-2149">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2149">-or-</span></span> 
 <span data-ttu-id="92aaa-2150"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2150"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-2151">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2151">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-2152">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2152">-or-</span></span> 
<span data-ttu-id="92aaa-2153">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2153">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="92aaa-2154">Возвращаемый тип свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2154">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-2155">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2155">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="92aaa-2156">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2156">-or-</span></span> 
<span data-ttu-id="92aaa-2157">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить неиндексированное свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2157">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-2158">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2158">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-2159">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2159">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-2160">Ищет свойство с параметрами, соответствующими указанным модификаторам и типам аргументов, с учетом заданных ограничений привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2160">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2161">Объект, предоставляющий свойство, которое соответствует указанным требованиям, если такое свойство найдено; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2161">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2162">Если у него есть хотя бы один открытый метод доступа, свойство считается открытым для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2162">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="92aaa-2163">В противном случае свойство считается закрытым, и необходимо использовать <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (в Visual Basic, объединить значения, с помощью `Or`) для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2163">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="92aaa-2164">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2164">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-2165">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2165">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-2166">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2166">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-2167">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-2167">Member Type</span></span>|<span data-ttu-id="92aaa-2168">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-2168">Static</span></span>|<span data-ttu-id="92aaa-2169">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-2169">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-2170">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-2170">Constructor</span></span>|<span data-ttu-id="92aaa-2171">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2171">No</span></span>|<span data-ttu-id="92aaa-2172">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2172">No</span></span>|  
|<span data-ttu-id="92aaa-2173">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-2173">Field</span></span>|<span data-ttu-id="92aaa-2174">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2174">No</span></span>|<span data-ttu-id="92aaa-2175">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2175">Yes.</span></span> <span data-ttu-id="92aaa-2176">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2176">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2177">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-2177">Event</span></span>|<span data-ttu-id="92aaa-2178">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2178">Not applicable</span></span>|<span data-ttu-id="92aaa-2179">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2179">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2180">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2180">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2181">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2181">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-2182">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-2182">Method</span></span>|<span data-ttu-id="92aaa-2183">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2183">No</span></span>|<span data-ttu-id="92aaa-2184">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2184">Yes.</span></span> <span data-ttu-id="92aaa-2185">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2185">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2186">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-2186">Nested Type</span></span>|<span data-ttu-id="92aaa-2187">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2187">No</span></span>|<span data-ttu-id="92aaa-2188">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2188">No</span></span>|  
|<span data-ttu-id="92aaa-2189">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2189">Property</span></span>|<span data-ttu-id="92aaa-2190">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2190">Not applicable</span></span>|<span data-ttu-id="92aaa-2191">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2191">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2192">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2192">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2193">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2193">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-2194">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2194">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-2195">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2195">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-2196">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2196">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2197">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2197">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-2198">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2198">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-2199">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие свойства следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2199">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-2200">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2200">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-2201">Укажите `BindingFlags.Public` для включения в поиск открытые свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2201">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-2202">Укажите `BindingFlags.NonPublic` для включения в поиск свойств не являющиеся открытыми (то есть внутренней, закрытые и защищенные свойства).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2202">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-2203">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2203">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-2204">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2204">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-2205">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2205">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-2206">`BindingFlags.DeclaredOnly` для поиска только свойства, объявленные в <xref:System.Type>, не те свойства, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2206">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-2207">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2207">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-2208">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, этот метод возвращает <xref:System.Reflection.PropertyInfo> с параметрами типа, заменены соответствующими аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2208">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-2209">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, этот метод ищет свойства ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2209">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="92aaa-2210">Индексаторы и свойства по умолчанию</span><span class="sxs-lookup"><span data-stu-id="92aaa-2210">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="92aaa-2211">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], и [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] упрощенный синтаксис для доступа к индексированным свойствам и разрешить одно индексированное свойство по умолчанию для его типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2211">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="92aaa-2212">Например если переменная `myList` ссылается на <xref:System.Collections.ArrayList>, синтаксис `myList[3]` (`myList(3)` в Visual Basic) извлекает элемент с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2212">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="92aaa-2213">Свойство можно перегрузить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2213">You can overload the property.</span></span>  
  
 <span data-ttu-id="92aaa-2214">В C#, эта функция вызывается индексатором и не может ссылаться по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2214">In C#, this feature is called an indexer and cannot be referred to by name.</span></span> <span data-ttu-id="92aaa-2215">По умолчанию индексатор C# отображается в метаданных как индексированное свойство с именем «Item».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2215">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="92aaa-2216">Тем не менее, разработчик библиотеки класса можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы изменить имя индексатора в метаданных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2216">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="92aaa-2217">Например <xref:System.String> класс имеет индекс с именем <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2217">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="92aaa-2218">Индексированные свойства, созданные с помощью языков, отличных от C# могут иметь имена отличные от элемента, а также.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2218">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="92aaa-2219">Чтобы определить, является ли тип имеет свойство по умолчанию, используйте <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> метод для проверки <xref:System.Reflection.DefaultMemberAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2219">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="92aaa-2220">Если тип имеет <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> свойство возвращает имя свойства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2220">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2221">Найдено несколько свойств с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2221">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2222"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2222"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-2223">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2223">-or-</span></span> 
 <span data-ttu-id="92aaa-2224"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2224"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2225">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2225"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-2226">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2226">-or-</span></span> 
 <span data-ttu-id="92aaa-2227">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2227"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-2228">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2228">-or-</span></span> 
 <span data-ttu-id="92aaa-2229"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2229"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="92aaa-2230">Элемент <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2230">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="types" Type="System.Type[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-2231">Строка, содержащий имя искомого свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2231">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="92aaa-2232">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2232">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="92aaa-2233">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2233">-or-</span></span> 
 <span data-ttu-id="92aaa-2234"><see cref="System.Reflection.BindingFlags.Default" /> для возврата <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2234"><see cref="System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-2235">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженного члена, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2235">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-2236">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2236">-or-</span></span> 
<span data-ttu-id="92aaa-2237">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2237">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="92aaa-2238">Возвращаемый тип свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2238">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="92aaa-2239">Массив объектов <see cref="T:System.Type" />, предоставляющий число, порядок и тип параметров искомого индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2239">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="92aaa-2240">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2240">-or-</span></span> 
<span data-ttu-id="92aaa-2241">Пустой массив объектов типа <see cref="T:System.Type" /> (то есть Type[] types = new Type[0]), если требуется получить неиндексированное свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2241">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-2242">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="types" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2242">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="92aaa-2243">Связыватель по умолчанию не обрабатывает этот параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2243">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="92aaa-2244">При переопределении в производном классе выполняет поиск заданного свойства, параметры которого соответствуют типам и модификаторам заданных аргументов, с использованием заданных ограничений привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2244">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2245">Объект, предоставляющий свойство, которое соответствует указанным требованиям, если такое свойство найдено; в противном случае возвращается <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2245">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2246">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> ( `modifiers` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2246">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="92aaa-2247">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2247">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-2248">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие свойства следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2248">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-2249">Необходимо указать либо `BindingFlags.Instance` или `BindingFlags.Static` Чтобы получить возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2249">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="92aaa-2250">Укажите `BindingFlags.Public` для включения в поиск открытые свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2250">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-2251">Укажите `BindingFlags.NonPublic` для включения в поиск свойств не являющиеся открытыми (то есть внутренней, закрытые и защищенные свойства).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2251">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-2252">Укажите `BindingFlags.FlattenHierarchy` для включения `public` и `protected` статические члены вверху иерархии; `private` статические члены в наследуемых классах не включаются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2252">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="92aaa-2253">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2253">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-2254">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2254">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-2255">`BindingFlags.DeclaredOnly` для поиска только свойства, объявленные в <xref:System.Type>, не те свойства, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2255">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-2256">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2256">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-2257">Найдено несколько свойств с указанным именем и соответствующих указанным ограничениям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2257">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2258"><paramref name="name" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2258"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-2259">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2259">-or-</span></span> 
 <span data-ttu-id="92aaa-2260"><paramref name="types" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2260"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-2261">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2261">-or-</span></span> 
<span data-ttu-id="92aaa-2262">Один из элементов в <paramref name="types" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2262">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2263">Массив <paramref name="types" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2263"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-2264">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2264">-or-</span></span> 
 <span data-ttu-id="92aaa-2265">Массив <paramref name="modifiers" /> является многомерным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2265"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="92aaa-2266">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2266">-or-</span></span> 
 <span data-ttu-id="92aaa-2267"><paramref name="types" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2267"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-2268">Текущий тип — <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" /> или <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2268">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-2269">Возвращает объект <see cref="T:System.Type" />, предоставляющий указанный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2269">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-2270">Возвращает текущий <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2270">Gets the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2271">Текущий контекст <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2271">The current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-2272">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2272">A class initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.TypeLoadException" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-2273">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2273">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-2274">Имя искомого типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2274">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="92aaa-2275">См. раздел <see cref="P:System.Type.AssemblyQualifiedName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2275">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="92aaa-2276">Если тип находится в выполняемой в данный момент сборке или библиотеке Mscorlib.dll, достаточно предоставить имя типа с указанием пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2276">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <summary><span data-ttu-id="92aaa-2277">Возвращает объект <see cref="T:System.Type" /> с указанным именем, учитывая при поиске регистр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2277">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2278">Тип с указанным именем, если он существует; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2278">The type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2279">Можно использовать <xref:System.Type.GetType%2A> метод, чтобы получить <xref:System.Type> объекта для типа в другой сборке, если вы знаете его имя с указанием сборки, который можно получить из <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2279">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly if you know its assembly-qualified name, which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="92aaa-2280"><xref:System.Type.GetType%2A> приводит к загрузке сборки, указанной в `typeName`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2280"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="92aaa-2281">Вы также можете загрузить сборки с помощью <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> метод, а затем использовать <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> или <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> метод для получения <xref:System.Type> объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2281">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method, and then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method to get <xref:System.Type> objects.</span></span> <span data-ttu-id="92aaa-2282">Если тип находится в сборке во время компиляции неизвестен в программу, это более эффективно использовать `typeof` в C# или `GetType` оператор в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2282">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C# or the `GetType` operator in Visual Basic.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2283">Если `typeName` отсутствует, вызов <xref:System.Type.GetType%28System.String%29> возвращает метод `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2283">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="92aaa-2284">Он не вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2284">It does not throw an exception.</span></span> <span data-ttu-id="92aaa-2285">Для управления ли исключение, вызовите перегрузку <xref:System.Type.GetType%2A> метод, который имеет `throwOnError` параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2285">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="92aaa-2286"><xref:System.Type.GetType%2A> работает только на сборки, загруженные с диска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2286"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="92aaa-2287">При вызове метода <xref:System.Type.GetType%2A> для поиска типа, определенного в динамическую сборку с использованием <xref:System.Reflection.Emit> служб, могут быть неверными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2287">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="92aaa-2288">Поведение зависит от того, ли динамическая сборка является постоянным, то есть, созданные с помощью `RunAndSave` или `Save` режимов доступа <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2288">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="92aaa-2289">Если динамическая сборка сохраняется и будет записана на диск перед `GetType` — вызывается, загрузчик найдет сохраненную сборку на диске, загружает эту сборку и возвращает тип из этой сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2289">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="92aaa-2290">Если сборка не была сохранена на диск, когда `GetType` вызывается, метод возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2290">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="92aaa-2291">`GetType` не поддерживает временные динамические сборки; Таким образом, вызов `GetType` для извлечения типа во временную динамическую сборку возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2291">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="92aaa-2292">Чтобы использовать `GetType` для динамического модуля, Подпишитесь на <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> событий и вызовов `GetType` перед сохранением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2292">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="92aaa-2293">В противном случае вы получите две копии сборки в памяти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2293">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="92aaa-2294">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2294">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-2295">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-2295">Member Type</span></span>|<span data-ttu-id="92aaa-2296">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-2296">Static</span></span>|<span data-ttu-id="92aaa-2297">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-2297">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-2298">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-2298">Constructor</span></span>|<span data-ttu-id="92aaa-2299">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2299">No</span></span>|<span data-ttu-id="92aaa-2300">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2300">No</span></span>|  
|<span data-ttu-id="92aaa-2301">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-2301">Field</span></span>|<span data-ttu-id="92aaa-2302">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2302">No</span></span>|<span data-ttu-id="92aaa-2303">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2303">Yes.</span></span> <span data-ttu-id="92aaa-2304">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2304">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2305">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-2305">Event</span></span>|<span data-ttu-id="92aaa-2306">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2306">Not applicable</span></span>|<span data-ttu-id="92aaa-2307">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2307">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2308">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2308">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2309">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2309">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-2310">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-2310">Method</span></span>|<span data-ttu-id="92aaa-2311">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2311">No</span></span>|<span data-ttu-id="92aaa-2312">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2312">Yes.</span></span> <span data-ttu-id="92aaa-2313">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2313">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2314">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-2314">Nested Type</span></span>|<span data-ttu-id="92aaa-2315">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2315">No</span></span>|<span data-ttu-id="92aaa-2316">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2316">No</span></span>|  
|<span data-ttu-id="92aaa-2317">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2317">Property</span></span>|<span data-ttu-id="92aaa-2318">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2318">Not applicable</span></span>|<span data-ttu-id="92aaa-2319">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2319">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2320">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2320">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2321">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2321">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-2322">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2322">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-2323">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2323">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-2324">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2324">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2325">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2325">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-2326">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2326">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-2327">Массивы или COM-типы не производится, если они уже были загружены в таблицу доступных классов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2327">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="92aaa-2328">`typeName` может быть имя типа с указанием его пространство имен или имя с указанием сборки, включающий спецификации имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2328">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="92aaa-2329">См. раздел <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2329">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="92aaa-2330">Если `typeName` включает в себя пространство имен, но не имя сборки, этот метод выполняет поиск только в сборке вызывающего объекта и библиотеки Mscorlib.dll, в указанном порядке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2330">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="92aaa-2331">Если полное имя сборки частичного или полного typeName, этот метод выполняет поиск в указанной сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2331">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="92aaa-2332">Если сборка имеет строгое имя, полное имя сборки не требуется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2332">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="92aaa-2333"><xref:System.Type.AssemblyQualifiedName%2A> Свойство возвращает полное имя, включая вложенные типы, имя сборки и аргументы универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2333">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="92aaa-2334">Все компиляторы, которые поддерживают среда CLR будет выдавать простое имя вложенного класса, а отражение создает искаженное имя при запросе, в соответствии со следующими соглашениями.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2334">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2335">В .NET Framework версии 2.0 архитектура процессора добавляется удостоверения сборки и может быть указан как часть строки имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2335">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="92aaa-2336">Например «ProcessorArchitecture = msil».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2336">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="92aaa-2337">Тем не менее, он не включен в строку, возвращаемую <xref:System.Type.AssemblyQualifiedName%2A> свойство, по соображениям совместимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2337">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="92aaa-2338">Можно также загрузить типы, создав <xref:System.Reflection.AssemblyName> объекта и передачи его в соответствующую перегрузку <xref:System.Reflection.Assembly.Load%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2338">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="92aaa-2339">Затем можно использовать <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> метод, чтобы загрузить типы из сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2339">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="92aaa-2340">См. также раздел <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2340">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="92aaa-2341">разделитель</span><span class="sxs-lookup"><span data-stu-id="92aaa-2341">Delimiter</span></span>|<span data-ttu-id="92aaa-2342">Значение</span><span class="sxs-lookup"><span data-stu-id="92aaa-2342">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="92aaa-2343">Обратная косая черта (\\)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2343">Backslash (\\)</span></span>|<span data-ttu-id="92aaa-2344">Escape-символ.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2344">Escape character.</span></span>|  
|<span data-ttu-id="92aaa-2345">Обратный апостроф (')</span><span class="sxs-lookup"><span data-stu-id="92aaa-2345">Backtick (\`)</span></span>|<span data-ttu-id="92aaa-2346">Предшествует одной или нескольких цифр, представляющее число параметров типа, находится в конце имени универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2346">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="92aaa-2347">Квадратные скобки ([])</span><span class="sxs-lookup"><span data-stu-id="92aaa-2347">Brackets ([])</span></span>|<span data-ttu-id="92aaa-2348">Заключите список аргументов универсального типа для сконструированного универсального типа; в список аргументов типа заключите типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2348">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="92aaa-2349">Запятая ()</span><span class="sxs-lookup"><span data-stu-id="92aaa-2349">Comma (,)</span></span>|<span data-ttu-id="92aaa-2350">Предшествует имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2350">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="92aaa-2351">Точка (.)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2351">Period (.)</span></span>|<span data-ttu-id="92aaa-2352">Определяет идентификаторы пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2352">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="92aaa-2353">Знак плюс (+)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2353">Plus sign (+)</span></span>|<span data-ttu-id="92aaa-2354">Перед вложенным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2354">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="92aaa-2355">Например полное имя класса может выглядеть следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2355">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="92aaa-2356">Если было TopNamespace.Sub+Namespace, то строка пришлось бы предшествовать знак плюс (+) с escape-символ (\\) для предотвращения его обрабатывались как разделитель вложений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2356">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="92aaa-2357">Отражение порождает эту строку следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2357">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="92aaa-2358">Объект «++» становится "\\+\\+» и"\\«становится»\\\\«.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2358">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="92aaa-2359">Это полное имя можно сохраняются и впоследствии использовать для загрузки <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2359">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="92aaa-2360">Чтобы найти и загрузить <xref:System.Type>, использовать <xref:System.Type.GetType%2A> либо с типом имя, либо только имя типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2360">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="92aaa-2361"><xref:System.Type.GetType%2A> с типом имя только будет искать <xref:System.Type> в сборке вызывающего, а затем в системную сборку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2361"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="92aaa-2362"><xref:System.Type.GetType%2A> в сборке будет искать имя типа с указанием <xref:System.Type> в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2362"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="92aaa-2363">Имена типов могут включать конечные символы, определяющие дополнительные сведения о типе, например, является ли тип ссылочным типом, тип указателя или тип массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2363">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="92aaa-2364">Получить имя типа без этих конечных символов, с помощью `t.GetElementType().ToString()`, где `t` — это тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2364">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="92aaa-2365">Пробелы учитываются во всех компонентах имени типа, за исключением имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2365">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="92aaa-2366">В имени сборки пробелы перед разделителем «,» существенны, но пробелы после разделителя «,» игнорируются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2366">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="92aaa-2367">Имя универсального типа заканчивается — обратный апостроф (\`) следуют цифры, представляющее число аргументов универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2367">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="92aaa-2368">Искажение имени предназначена для обеспечения поддержки универсальных типов с одинаковым именем, но с разным числом параметров типа, происходящих в той же области.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2368">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="92aaa-2369">Например, отражения возвращает искаженные имена `Tuple`1` and `кортежа`2` из универсальных методов `Tuple(Of T)` и `Tuple(Of T0, T1)` в Visual Basic или `Tuple<T>` и кортежа`\<T0, T1>` в Visual C#.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2369">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="92aaa-2370">Для универсальных типов заключается в квадратные скобки список аргументов типа и аргументы типа разделяются запятыми.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2370">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="92aaa-2371">Например, универсальный <xref:System.Collections.Generic.Dictionary%602> имеет два параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2371">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="92aaa-2372">Объект <xref:System.Collections.Generic.Dictionary%602> из `MyType` с ключами типа <xref:System.String> может быть представлен следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2372">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="92aaa-2373">Для указания типа с указанием сборки в список аргументов типа, заключите его в квадратных скобках указывается тип с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2373">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="92aaa-2374">В противном случае запятых, разделяющих частей имени с указанием сборки, интерпретируются как разделители дополнительных аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2374">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="92aaa-2375">Например <xref:System.Collections.Generic.Dictionary%602> из `MyType` fromMyAssembly.dll с ключами типа <xref:System.String>, может быть указан следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2375">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2376">Тип с указанием сборки могут быть заключены в квадратные скобки, только в том случае, когда он появится в списке параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2376">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="92aaa-2377">Правила поиска сборок для полных и неполных типов в список параметров типа совпадают с правила для полных и неполных неуниверсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2377">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="92aaa-2378">Обнуляемые типы представляют собой особый случай универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2378">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="92aaa-2379">Например, для типа <xref:System.Int32> представлена строкой «System.Nullable'1[System.Int32]».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2379">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2380">В C#, C++ и Visual Basic можно также получить обнуляемые типы, с помощью операторов типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2380">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="92aaa-2381">Например, допускающий значение NULL <xref:System.Boolean> возвращаемый тип `typeof(Nullable<bool>)` в C#, `Nullable<Boolean>::typeid` в C++, а также по `GetType(Nullable(Of Boolean))` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2381">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="92aaa-2382">В следующей таблице показаны синтаксис, используемом с `GetType` для различных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2382">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="92aaa-2383">Чтобы получить</span><span class="sxs-lookup"><span data-stu-id="92aaa-2383">To Get</span></span>|<span data-ttu-id="92aaa-2384">Использовать</span><span class="sxs-lookup"><span data-stu-id="92aaa-2384">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="92aaa-2385">Значение необязательной определенности <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="92aaa-2385">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="92aaa-2386">Неуправляемый указатель на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2386">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="92aaa-2387">Неуправляемый указатель на указатель на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2387">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="92aaa-2388">Управляемый указатель или ссылка на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2388">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="92aaa-2389">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2389">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="92aaa-2390">Обратите внимание, что ссылки, в отличие от указателей, ограничены одним уровнем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2390">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="92aaa-2391">Родительский и вложенный класс</span><span class="sxs-lookup"><span data-stu-id="92aaa-2391">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="92aaa-2392">Одномерный массив с нижней границей, равной 0</span><span class="sxs-lookup"><span data-stu-id="92aaa-2392">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="92aaa-2393">Одномерный массив с неизвестной нижней границей</span><span class="sxs-lookup"><span data-stu-id="92aaa-2393">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="92aaa-2394">N мерный массив</span><span class="sxs-lookup"><span data-stu-id="92aaa-2394">An n-dimensional array</span></span>|<span data-ttu-id="92aaa-2395">Запятая (,) внутри квадратных скобок n-1 раз.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2395">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="92aaa-2396">Например `System.Object[,,]` представляет трехмерный массив `Object` массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2396">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="92aaa-2397">Массив одномерных массивов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2397">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="92aaa-2398">Прямоугольный двухмерный массив с неизвестными нижними границами</span><span class="sxs-lookup"><span data-stu-id="92aaa-2398">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="92aaa-2399">Универсальный тип с одним аргументом типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2399">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="92aaa-2400">Универсальный тип с двумя аргументами типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2400">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="92aaa-2401">Универсальный тип с двумя аргументами типа сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2401">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="92aaa-2402">С указанием сборки универсального типа с аргументом типа сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2402">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="92aaa-2403">Универсальный тип, тип аргумента является универсальным типом с двумя аргументами типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2403">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-2404">В следующем примере извлекается тип `System.Int32` и используется для отображения этого объекта <xref:System.Type.FullName%2A> свойство `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2404">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2405"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2405"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-2406">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2406">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2407"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2407"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2408">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2408">-or-</span></span> 
 <span data-ttu-id="92aaa-2409"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2409"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2410">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2410">-or-</span></span> 
 <span data-ttu-id="92aaa-2411"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2411"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-2412"><paramref name="typeName" /> представляет массив <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2412"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="92aaa-2413">Вместо этого в <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET для приложений Магазина Windows</see> или в <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.IO.IOException" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2413">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="92aaa-2414">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2414">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-2415">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2415">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-2416">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2416">-or-</span></span> 
<span data-ttu-id="92aaa-2417">В текущий момент загружена среда CLR версии 2.0 или более поздней версии. Сборка была скомпилирована в более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2417">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-2418">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2418">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-2419">Имя искомого типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2419">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="92aaa-2420">См. раздел <see cref="P:System.Type.AssemblyQualifiedName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2420">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="92aaa-2421">Если тип находится в выполняемой в данный момент сборке или библиотеке Mscorlib.dll, достаточно предоставить имя типа с указанием пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2421">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-2422">Значение <see langword="true" />, чтобы создать исключение, если тип не удается найти; значение <see langword="false" />, чтобы вернуть значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2422"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="92aaa-2423">Кроме того, при указании значения <see langword="false" /> подавляются некоторые другие условия возникновения исключений, но не все из них.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2423">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="92aaa-2424">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2424">See the Exceptions section.</span></span></param>
        <summary><span data-ttu-id="92aaa-2425">Возвращает объект <see cref="T:System.Type" /> с заданным именем, выполняя поиск с учетом регистра и указывая, будет ли создаваться исключение в случае невозможности найти тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2425">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2426">Тип с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2426">The type with the specified name.</span></span> <span data-ttu-id="92aaa-2427">Если тип не найден, параметр <paramref name="throwOnError" /> определяет дальнейшее действие — возврат значения <see langword="null" /> или создание исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2427">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="92aaa-2428">В некоторых случаях исключение создается независимо от значения параметра <paramref name="throwOnError" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2428">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="92aaa-2429">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2429">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2430">Можно использовать <xref:System.Type.GetType%2A> метод, чтобы получить <xref:System.Type> объекта для типа в другой сборке, если вы знаете его имя с указанием сборки, который можно получить из <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2430">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly if you know its assembly-qualified name, which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="92aaa-2431"><xref:System.Type.GetType%2A> приводит к загрузке сборки, указанной в `typeName`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2431"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="92aaa-2432">Вы также можете загрузить сборки с помощью <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> метод, а затем использовать <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> или <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> метод для получения <xref:System.Type> объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2432">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method, and then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method to get <xref:System.Type> objects.</span></span> <span data-ttu-id="92aaa-2433">Если тип находится в сборке во время компиляции неизвестен в программу, это более эффективно использовать `typeof` в C# или `GetType` оператор в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2433">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C# or the `GetType` operator in Visual Basic.</span></span>
  
 <span data-ttu-id="92aaa-2434">`GetType` работает только на сборки, загруженные с диска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2434">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="92aaa-2435">При вызове метода `GetType` для поиска типа, определенного в динамическую сборку с использованием <xref:System.Reflection.Emit> служб, могут быть неверными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2435">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="92aaa-2436">Поведение зависит от того, ли динамическая сборка является постоянным, то есть, созданные с помощью `RunAndSave` или `Save` режимов доступа <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2436">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="92aaa-2437">Если динамическая сборка сохраняется и будет записана на диск перед `GetType` — вызывается, загрузчик найдет сохраненную сборку на диске, загружает эту сборку и возвращает тип из этой сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2437">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="92aaa-2438">Если сборка не была сохранена на диск, когда `GetType` вызывается, метод возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2438">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="92aaa-2439">`GetType` не поддерживает временные динамические сборки; Таким образом, вызов `GetType` для извлечения типа во временную динамическую сборку возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2439">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="92aaa-2440">Чтобы использовать `GetType` для динамического модуля, Подпишитесь на <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> событий и вызовов `GetType` перед сохранением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2440">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="92aaa-2441">В противном случае вы получите две копии сборки в памяти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2441">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="92aaa-2442">`throwOnError` Параметр указывает, что произойдет, если тип не найден, а также подавляются некоторые другие условия исключения, как описано в раздел "исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2442">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="92aaa-2443">Некоторые исключения создаются независимо от значения `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2443">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="92aaa-2444">Например, если найден тип, но не может быть загружен <xref:System.TypeLoadException> возникает даже в том случае, если `throwOnError` является `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2444">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="92aaa-2445">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2445">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-2446">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-2446">Member Type</span></span>|<span data-ttu-id="92aaa-2447">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-2447">Static</span></span>|<span data-ttu-id="92aaa-2448">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-2448">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-2449">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-2449">Constructor</span></span>|<span data-ttu-id="92aaa-2450">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2450">No</span></span>|<span data-ttu-id="92aaa-2451">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2451">No</span></span>|  
|<span data-ttu-id="92aaa-2452">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-2452">Field</span></span>|<span data-ttu-id="92aaa-2453">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2453">No</span></span>|<span data-ttu-id="92aaa-2454">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2454">Yes.</span></span> <span data-ttu-id="92aaa-2455">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2455">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2456">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-2456">Event</span></span>|<span data-ttu-id="92aaa-2457">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2457">Not applicable</span></span>|<span data-ttu-id="92aaa-2458">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2458">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2459">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2459">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2460">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2460">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-2461">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-2461">Method</span></span>|<span data-ttu-id="92aaa-2462">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2462">No</span></span>|<span data-ttu-id="92aaa-2463">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2463">Yes.</span></span> <span data-ttu-id="92aaa-2464">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2464">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2465">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-2465">Nested Type</span></span>|<span data-ttu-id="92aaa-2466">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2466">No</span></span>|<span data-ttu-id="92aaa-2467">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2467">No</span></span>|  
|<span data-ttu-id="92aaa-2468">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2468">Property</span></span>|<span data-ttu-id="92aaa-2469">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2469">Not applicable</span></span>|<span data-ttu-id="92aaa-2470">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2470">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2471">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2471">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2472">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2472">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-2473">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2473">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-2474">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2474">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-2475">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2475">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2476">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2476">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-2477">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2477">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-2478">Массивы или COM-типы не производится, если они уже были загружены в таблицу доступных классов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2478">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="92aaa-2479">`typeName` может быть имя типа с указанием его пространство имен или имя с указанием сборки, включающий спецификации имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2479">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="92aaa-2480">См. раздел <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2480">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="92aaa-2481">Если `typeName` включает в себя пространство имен, но не имя сборки, этот метод выполняет поиск только в сборке вызывающего объекта и библиотеки Mscorlib.dll, в указанном порядке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2481">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="92aaa-2482">Если полное имя сборки частичного или полного typeName, этот метод выполняет поиск в указанной сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2482">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="92aaa-2483">Если сборка имеет строгое имя, полное имя сборки не требуется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2483">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="92aaa-2484"><xref:System.Type.AssemblyQualifiedName%2A> Свойство возвращает полное имя, включая вложенные типы, имя сборки и универсальных аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2484">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="92aaa-2485">Все компиляторы, которые поддерживают среда CLR будет выдавать простое имя вложенного класса, а отражение создает искаженное имя при запросе, в соответствии со следующими соглашениями.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2485">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2486">В .NET Framework версии 2.0 архитектура процессора добавляется удостоверения сборки и может быть указан как часть строки имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2486">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="92aaa-2487">Например «ProcessorArchitecture = msil».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2487">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="92aaa-2488">Тем не менее, он не включен в строку, возвращаемую <xref:System.Type.AssemblyQualifiedName%2A> свойство, по соображениям совместимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2488">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="92aaa-2489">Можно также загрузить типы, создав <xref:System.Reflection.AssemblyName> объекта и передачи его в соответствующую перегрузку <xref:System.Reflection.Assembly.Load%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2489">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="92aaa-2490">Затем можно использовать <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> метод, чтобы загрузить типы из сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2490">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="92aaa-2491">См. также раздел <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2491">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="92aaa-2492">разделитель</span><span class="sxs-lookup"><span data-stu-id="92aaa-2492">Delimiter</span></span>|<span data-ttu-id="92aaa-2493">Значение</span><span class="sxs-lookup"><span data-stu-id="92aaa-2493">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="92aaa-2494">Обратная косая черта (\\)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2494">Backslash (\\)</span></span>|<span data-ttu-id="92aaa-2495">Escape-символ.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2495">Escape character.</span></span>|  
|<span data-ttu-id="92aaa-2496">Обратный апостроф (')</span><span class="sxs-lookup"><span data-stu-id="92aaa-2496">Backtick (\`)</span></span>|<span data-ttu-id="92aaa-2497">Предшествует одной или нескольких цифр, представляющее число параметров типа, находится в конце имени универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2497">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="92aaa-2498">Квадратные скобки ([])</span><span class="sxs-lookup"><span data-stu-id="92aaa-2498">Brackets ([])</span></span>|<span data-ttu-id="92aaa-2499">Заключите список аргументов универсального типа для сконструированного универсального типа; в список аргументов типа заключите типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2499">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="92aaa-2500">Запятая ()</span><span class="sxs-lookup"><span data-stu-id="92aaa-2500">Comma (,)</span></span>|<span data-ttu-id="92aaa-2501">Предшествует имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2501">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="92aaa-2502">Точка (.)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2502">Period (.)</span></span>|<span data-ttu-id="92aaa-2503">Определяет идентификаторы пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2503">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="92aaa-2504">Знак плюс (+)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2504">Plus sign (+)</span></span>|<span data-ttu-id="92aaa-2505">Перед вложенным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2505">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="92aaa-2506">Например полное имя класса может выглядеть следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2506">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="92aaa-2507">Если было TopNamespace.Sub+Namespace, то строка пришлось бы предшествовать знак плюс (+) с escape-символ (\\) для предотвращения его обрабатывались как разделитель вложений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2507">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="92aaa-2508">Отражение порождает эту строку следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2508">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="92aaa-2509">Объект «++» становится "\\+\\+» и"\\«становится»\\\\«.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2509">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="92aaa-2510">Это полное имя можно сохраняются и впоследствии использовать для загрузки <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2510">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="92aaa-2511">Чтобы найти и загрузить <xref:System.Type>, использовать <xref:System.Type.GetType%2A> либо с типом имя, либо только имя типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2511">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="92aaa-2512"><xref:System.Type.GetType%2A> с типом имя только будет искать <xref:System.Type> в сборке вызывающего, а затем в системную сборку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2512"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="92aaa-2513"><xref:System.Type.GetType%2A> в сборке будет искать имя типа с указанием <xref:System.Type> в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2513"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="92aaa-2514">Имена типов могут включать конечные символы, определяющие дополнительные сведения о типе, например, является ли тип ссылочным типом, тип указателя или тип массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2514">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="92aaa-2515">Получить имя типа без этих конечных символов, с помощью `t.GetElementType().ToString()`, где `t` — это тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2515">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="92aaa-2516">Пробелы учитываются во всех компонентах имени типа, за исключением имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2516">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="92aaa-2517">В имени сборки пробелы перед разделителем «,» существенны, но пробелы после разделителя «,» игнорируются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2517">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="92aaa-2518">Имя универсального типа заканчивается — обратный апостроф (\`) следуют цифры, представляющее число аргументов универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2518">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="92aaa-2519">Искажение имени предназначена для обеспечения поддержки универсальных типов с одинаковым именем, но с разным числом параметров типа, происходящих в той же области.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2519">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="92aaa-2520">Например, отражения возвращает искаженные имена `Tuple`1` and `кортежа`2` из универсальных методов `Tuple(Of T)` и `Tuple(Of T0, T1)` в Visual Basic или `Tuple<T>` и кортежа`\<T0, T1>` в Visual C#.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2520">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="92aaa-2521">Для универсальных типов заключается в квадратные скобки список аргументов типа и аргументы типа разделяются запятыми.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2521">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="92aaa-2522">Например, универсальный <xref:System.Collections.Generic.Dictionary%602> имеет два параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2522">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="92aaa-2523">Объект <xref:System.Collections.Generic.Dictionary%602> из `MyType` с ключами типа <xref:System.String> может быть представлен следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2523">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="92aaa-2524">Для указания типа с указанием сборки в список аргументов типа, заключите его в квадратных скобках указывается тип с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2524">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="92aaa-2525">В противном случае запятых, разделяющих частей имени с указанием сборки, интерпретируются как разделители дополнительных аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2525">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="92aaa-2526">Например <xref:System.Collections.Generic.Dictionary%602> из `MyType` из MyAssembly.dll, с помощью ключей типа <xref:System.String>, может быть указан следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2526">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2527">Тип с указанием сборки могут быть заключены в квадратные скобки, только в том случае, когда он появится в списке параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2527">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="92aaa-2528">Правила поиска сборок для полных и неполных типов в список параметров типа совпадают с правила для полных и неполных неуниверсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2528">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="92aaa-2529">Обнуляемые типы представляют собой особый случай универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2529">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="92aaa-2530">Например, для типа <xref:System.Int32> представлена строкой «System.Nullable'1[System.Int32]».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2530">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2531">В C#, C++ и Visual Basic можно также получить обнуляемые типы, с помощью операторов типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2531">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="92aaa-2532">Например, допускающий значение NULL <xref:System.Boolean> возвращаемый тип `typeof(Nullable<bool>)` в C#, `Nullable<Boolean>::typeid` в C++, а также по `GetType(Nullable(Of Boolean))` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2532">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="92aaa-2533">В следующей таблице показаны синтаксис, используемом с `GetType` для различных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2533">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="92aaa-2534">Чтобы получить</span><span class="sxs-lookup"><span data-stu-id="92aaa-2534">To Get</span></span>|<span data-ttu-id="92aaa-2535">Использовать</span><span class="sxs-lookup"><span data-stu-id="92aaa-2535">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="92aaa-2536">Значение необязательной определенности <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="92aaa-2536">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="92aaa-2537">Неуправляемый указатель на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2537">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="92aaa-2538">Неуправляемый указатель на указатель на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2538">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="92aaa-2539">Управляемый указатель или ссылка на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2539">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="92aaa-2540">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2540">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="92aaa-2541">Обратите внимание, что ссылки, в отличие от указателей, ограничены одним уровнем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2541">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="92aaa-2542">Родительский и вложенный класс</span><span class="sxs-lookup"><span data-stu-id="92aaa-2542">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="92aaa-2543">Одномерный массив с нижней границей, равной 0</span><span class="sxs-lookup"><span data-stu-id="92aaa-2543">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="92aaa-2544">Одномерный массив с неизвестной нижней границей</span><span class="sxs-lookup"><span data-stu-id="92aaa-2544">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="92aaa-2545">N мерный массив</span><span class="sxs-lookup"><span data-stu-id="92aaa-2545">An n-dimensional array</span></span>|<span data-ttu-id="92aaa-2546">Запятая (,) внутри квадратных скобок n-1 раз.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2546">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="92aaa-2547">Например `System.Object[,,]` представляет трехмерный массив `Object` массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2547">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="92aaa-2548">Двумерный массив массива</span><span class="sxs-lookup"><span data-stu-id="92aaa-2548">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="92aaa-2549">Прямоугольный двухмерный массив с неизвестными нижними границами</span><span class="sxs-lookup"><span data-stu-id="92aaa-2549">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="92aaa-2550">Универсальный тип с одним аргументом типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2550">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="92aaa-2551">Универсальный тип с двумя аргументами типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2551">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="92aaa-2552">Универсальный тип с двумя аргументами типа сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2552">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="92aaa-2553">С указанием сборки универсального типа с аргументом типа сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2553">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="92aaa-2554">Универсальный тип, тип аргумента является универсальным типом с двумя аргументами типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2554">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-2555">В следующем примере извлекается тип `System.Int32` и используется для отображения этого объекта <xref:System.Type.FullName%2A> свойство `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2555">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="92aaa-2556">Если объект типа ссылается на сборку, которая не существует, этот пример создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2556">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2557"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2557"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-2558">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2558">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-2559"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и тип не найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2559"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="92aaa-2560">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2560">-or-</span></span> 
 <span data-ttu-id="92aaa-2561"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимые знаки, например внедренные табуляции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2561"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="92aaa-2562">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2562">-or-</span></span> 
 <span data-ttu-id="92aaa-2563"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> является пустой строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2563"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="92aaa-2564">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2564">-or-</span></span> 
 <span data-ttu-id="92aaa-2565"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> представляет тип массива с недопустимым размером.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2565"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="92aaa-2566">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2566">-or-</span></span> 
 <span data-ttu-id="92aaa-2567"><paramref name="typeName" /> представляет массив <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2567"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2568"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимый синтаксис.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2568"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span></span> <span data-ttu-id="92aaa-2569">Например, "MyType[,\*,]".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2569">For example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="92aaa-2570">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2570">-or-</span></span> 
 <span data-ttu-id="92aaa-2571"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2571"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2572">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2572">-or-</span></span> 
 <span data-ttu-id="92aaa-2573"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2573"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2574">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2574">-or-</span></span> 
 <span data-ttu-id="92aaa-2575"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2575"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="92aaa-2576"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и не удалось найти сборку либо одну из ее зависимостей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2576"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="92aaa-2577">Вместо этого в <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET для приложений Магазина Windows</see> или в <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.IO.IOException" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2577">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="92aaa-2578">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2578">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-2579">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2579">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-2580">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2580">-or-</span></span> 
<span data-ttu-id="92aaa-2581">В текущий момент загружена среда CLR версии 2.0 или более поздней версии. Сборка была скомпилирована в более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2581">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-2582">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2582">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-2583">Имя искомого типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2583">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="92aaa-2584">См. раздел <see cref="P:System.Type.AssemblyQualifiedName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2584">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="92aaa-2585">Если тип находится в выполняемой в данный момент сборке или библиотеке Mscorlib.dll, достаточно предоставить имя типа с указанием пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2585">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-2586">Значение <see langword="true" />, чтобы создать исключение, если тип не удается найти; значение <see langword="false" />, чтобы вернуть значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2586"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="92aaa-2587">Кроме того, при указании значения <see langword="false" /> подавляются некоторые другие условия возникновения исключений, но не все из них.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2587">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="92aaa-2588">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2588">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="92aaa-2589">Значение <see langword="true" />, чтобы не учитывать регистр при поиске <paramref name="typeName" />, значение <see langword="false" />, чтобы учитывать регистр при поиске <paramref name="typeName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2589"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-2590">Возвращает объект <see cref="T:System.Type" /> с указанным именем, позволяющий определить, будет ли создаваться исключение в случае невозможности найти тип и будет ли учитываться регистр при поиске.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2590">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2591">Тип с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2591">The type with the specified name.</span></span> <span data-ttu-id="92aaa-2592">Если тип не найден, параметр <paramref name="throwOnError" /> определяет дальнейшее действие — возврат значения <see langword="null" /> или создание исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2592">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="92aaa-2593">В некоторых случаях исключение создается независимо от значения параметра <paramref name="throwOnError" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2593">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="92aaa-2594">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2594">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2595">Можно использовать <xref:System.Type.GetType%2A> метод, чтобы получить <xref:System.Type> объекта для типа в другой сборке, если вы знаете его имя с указанием сборки, который можно получить из <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2595">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly if you know its assembly-qualified name, which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="92aaa-2596"><xref:System.Type.GetType%2A> приводит к загрузке сборки, указанной в `typeName`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2596"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="92aaa-2597">Вы также можете загрузить сборки с помощью <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> метод, а затем использовать <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> или <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> метод для получения <xref:System.Type> объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2597">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method, and then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method to get <xref:System.Type> objects.</span></span> <span data-ttu-id="92aaa-2598">Если тип находится в сборке во время компиляции неизвестен в программу, это более эффективно использовать `typeof` в C# или `GetType` оператор в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2598">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C# or the `GetType` operator in Visual Basic.</span></span>
  
 <span data-ttu-id="92aaa-2599">`GetType` работает только на сборки, загруженные с диска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2599">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="92aaa-2600">При вызове метода `GetType` для поиска типа, определенного в динамическую сборку с использованием <xref:System.Reflection.Emit> служб, могут быть неверными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2600">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="92aaa-2601">Поведение зависит от того, ли динамическая сборка является постоянным, то есть, созданные с помощью `RunAndSave` или `Save` режимов доступа <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2601">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="92aaa-2602">Если динамическая сборка сохраняется и будет записана на диск перед `GetType` — вызывается, загрузчик найдет сохраненную сборку на диске, загружает эту сборку и возвращает тип из этой сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2602">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="92aaa-2603">Если сборка не была сохранена на диск, когда `GetType` вызывается, метод возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2603">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="92aaa-2604">`GetType` не поддерживает временные динамические сборки; Таким образом, вызов `GetType` для извлечения типа во временную динамическую сборку возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2604">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="92aaa-2605">Чтобы использовать `GetType` для динамического модуля, Подпишитесь на <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> событий и вызовов `GetType` перед сохранением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2605">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="92aaa-2606">В противном случае вы получите две копии сборки в памяти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2606">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="92aaa-2607">`throwOnError` Параметр указывает, что произойдет, если тип не найден, а также подавляются некоторые другие условия исключения, как описано в раздел "исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2607">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="92aaa-2608">Некоторые исключения создаются независимо от значения `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2608">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="92aaa-2609">Например, если найден тип, но не может быть загружен <xref:System.TypeLoadException> возникает даже в том случае, если `throwOnError` является `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2609">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="92aaa-2610">В следующей таблице показаны, какие члены базового класса возвращаются `Get` методы при отражении типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2610">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="92aaa-2611">Тип члена</span><span class="sxs-lookup"><span data-stu-id="92aaa-2611">Member Type</span></span>|<span data-ttu-id="92aaa-2612">Static</span><span class="sxs-lookup"><span data-stu-id="92aaa-2612">Static</span></span>|<span data-ttu-id="92aaa-2613">Статическим</span><span class="sxs-lookup"><span data-stu-id="92aaa-2613">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="92aaa-2614">Конструктор</span><span class="sxs-lookup"><span data-stu-id="92aaa-2614">Constructor</span></span>|<span data-ttu-id="92aaa-2615">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2615">No</span></span>|<span data-ttu-id="92aaa-2616">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2616">No</span></span>|  
|<span data-ttu-id="92aaa-2617">Поле</span><span class="sxs-lookup"><span data-stu-id="92aaa-2617">Field</span></span>|<span data-ttu-id="92aaa-2618">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2618">No</span></span>|<span data-ttu-id="92aaa-2619">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2619">Yes.</span></span> <span data-ttu-id="92aaa-2620">Поле всегда равно по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2620">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2621">событие</span><span class="sxs-lookup"><span data-stu-id="92aaa-2621">Event</span></span>|<span data-ttu-id="92aaa-2622">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2622">Not applicable</span></span>|<span data-ttu-id="92aaa-2623">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2623">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2624">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2624">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2625">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2625">See note 2 below.</span></span>|  
|<span data-ttu-id="92aaa-2626">Метод</span><span class="sxs-lookup"><span data-stu-id="92aaa-2626">Method</span></span>|<span data-ttu-id="92aaa-2627">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2627">No</span></span>|<span data-ttu-id="92aaa-2628">Да.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2628">Yes.</span></span> <span data-ttu-id="92aaa-2629">Метод (виртуальные и невиртуальные) можно скрыть по имени или по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2629">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="92aaa-2630">Вложенный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-2630">Nested Type</span></span>|<span data-ttu-id="92aaa-2631">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2631">No</span></span>|<span data-ttu-id="92aaa-2632">Нет</span><span class="sxs-lookup"><span data-stu-id="92aaa-2632">No</span></span>|  
|<span data-ttu-id="92aaa-2633">Свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2633">Property</span></span>|<span data-ttu-id="92aaa-2634">Неприменимо</span><span class="sxs-lookup"><span data-stu-id="92aaa-2634">Not applicable</span></span>|<span data-ttu-id="92aaa-2635">Правило системы общих типов является то, что наследование осуществляется так же, как и для методов, реализующих свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2635">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="92aaa-2636">Отражении свойства по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2636">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2637">См. Примечание 2 ниже.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2637">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="92aaa-2638">По имени и подписи считает, что все части сигнатуры, включая настраиваемые модификаторы, возвращают типы, типы параметров, меток и соглашения о неуправляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2638">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="92aaa-2639">Это двоичное сравнение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2639">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="92aaa-2640">Для отражения свойства и события являются по имени и подписи.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2640">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="92aaa-2641">Если у вас есть свойство с get и set в базовом классе, но производный класс имеет только метод доступа get, свойство производного класса скрывает свойство базового класса, и вы не сможете получить доступ к методу set в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2641">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="92aaa-2642">Настраиваемые атрибуты не являются частью система общих типов CTS.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2642">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="92aaa-2643">Массивы или COM-типы не производится, если они уже были загружены в таблицу доступных классов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2643">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="92aaa-2644">`typeName` может быть имя типа с указанием его пространство имен или имя с указанием сборки, включающий спецификации имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2644">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="92aaa-2645">См. раздел <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2645">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="92aaa-2646">Если `typeName` включает в себя пространство имен, но не имя сборки, этот метод выполняет поиск только в сборке вызывающего объекта и библиотеки Mscorlib.dll, в указанном порядке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2646">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="92aaa-2647">Если полное имя сборки частичного или полного typeName, этот метод выполняет поиск в указанной сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2647">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="92aaa-2648">Если сборка имеет строгое имя, полное имя сборки не требуется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2648">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="92aaa-2649"><xref:System.Type.AssemblyQualifiedName%2A> Свойство возвращает полное имя, включая вложенные типы, имя сборки и аргументы типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2649">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="92aaa-2650">Все компиляторы, которые поддерживают среда CLR будет выдавать простое имя вложенного класса, а отражение создает искаженное имя при запросе, в соответствии со следующими соглашениями.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2650">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2651">В .NET Framework версии 2.0 архитектура процессора добавляется удостоверения сборки и может быть указан как часть строки имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2651">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="92aaa-2652">Например «ProcessorArchitecture = msil».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2652">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="92aaa-2653">Тем не менее, он не включен в строку, возвращаемую <xref:System.Type.AssemblyQualifiedName%2A> свойство, по соображениям совместимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2653">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="92aaa-2654">Можно также загрузить типы, создав <xref:System.Reflection.AssemblyName> объекта и передачи его в соответствующую перегрузку <xref:System.Reflection.Assembly.Load%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2654">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="92aaa-2655">Затем можно использовать <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> метод, чтобы загрузить типы из сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2655">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="92aaa-2656">См. также раздел <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2656">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="92aaa-2657">разделитель</span><span class="sxs-lookup"><span data-stu-id="92aaa-2657">Delimiter</span></span>|<span data-ttu-id="92aaa-2658">Значение</span><span class="sxs-lookup"><span data-stu-id="92aaa-2658">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="92aaa-2659">Обратная косая черта (\\)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2659">Backslash (\\)</span></span>|<span data-ttu-id="92aaa-2660">Escape-символ.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2660">Escape character.</span></span>|  
|<span data-ttu-id="92aaa-2661">Обратный апостроф (')</span><span class="sxs-lookup"><span data-stu-id="92aaa-2661">Backtick (\`)</span></span>|<span data-ttu-id="92aaa-2662">Предшествует одной или нескольких цифр, представляющее число параметров типа, находится в конце имени универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2662">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="92aaa-2663">Квадратные скобки ([])</span><span class="sxs-lookup"><span data-stu-id="92aaa-2663">Brackets ([])</span></span>|<span data-ttu-id="92aaa-2664">Заключите список аргументов универсального типа для сконструированного универсального типа; в список аргументов типа заключите типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2664">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="92aaa-2665">Запятая ()</span><span class="sxs-lookup"><span data-stu-id="92aaa-2665">Comma (,)</span></span>|<span data-ttu-id="92aaa-2666">Предшествует имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2666">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="92aaa-2667">Точка (.)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2667">Period (.)</span></span>|<span data-ttu-id="92aaa-2668">Определяет идентификаторы пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2668">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="92aaa-2669">Знак плюс (+)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2669">Plus sign (+)</span></span>|<span data-ttu-id="92aaa-2670">Перед вложенным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2670">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="92aaa-2671">Например полное имя класса может выглядеть следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2671">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="92aaa-2672">Если было TopNamespace.Sub+Namespace, то строка пришлось бы предшествовать знак плюс (+) с escape-символ (\\) для предотвращения его обрабатывались как разделитель вложений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2672">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="92aaa-2673">Отражение порождает эту строку следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2673">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="92aaa-2674">Объект «++» становится "\\+\\+» и"\\«становится»\\\\«.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2674">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="92aaa-2675">Это полное имя можно сохраняются и впоследствии использовать для загрузки <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2675">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="92aaa-2676">Чтобы найти и загрузить <xref:System.Type>, использовать <xref:System.Type.GetType%2A> либо с типом имя, либо только имя типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2676">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="92aaa-2677"><xref:System.Type.GetType%2A> с типом имя только будет искать <xref:System.Type> в сборке вызывающего, а затем в системную сборку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2677"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="92aaa-2678"><xref:System.Type.GetType%2A> в сборке будет искать имя типа с указанием <xref:System.Type> в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2678"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="92aaa-2679">Имена типов могут включать конечные символы, определяющие дополнительные сведения о типе, например, является ли тип ссылочным типом, тип указателя или тип массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2679">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="92aaa-2680">Получить имя типа без этих конечных символов, с помощью `t.GetElementType().ToString()`, где `t` — это тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2680">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="92aaa-2681">Пробелы учитываются во всех компонентах имени типа, за исключением имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2681">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="92aaa-2682">В имени сборки пробелы перед разделителем «,» существенны, но пробелы после разделителя «,» игнорируются.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2682">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="92aaa-2683">Имя универсального типа заканчивается — обратный апостроф (\`) следуют цифры, представляющее число аргументов универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2683">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="92aaa-2684">Искажение имени предназначена для обеспечения поддержки универсальных типов с одинаковым именем, но с разным числом параметров типа, происходящих в той же области.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2684">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="92aaa-2685">Например, отражения возвращает искаженные имена `Tuple`1` and `кортежа`2` из универсальных методов `Tuple(Of T)` и `Tuple(Of T0, T1)` в Visual Basic или `Tuple<T>` и кортежа`\<T0, T1>` в Visual C#.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2685">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="92aaa-2686">Для универсальных типов заключается в квадратные скобки список аргументов типа и аргументы типа разделяются запятыми.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2686">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="92aaa-2687">Например, универсальный <xref:System.Collections.Generic.Dictionary%602> имеет два параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2687">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="92aaa-2688">Объект <xref:System.Collections.Generic.Dictionary%602> из `MyType` с ключами типа <xref:System.String> может быть представлен следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2688">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="92aaa-2689">Для указания типа с указанием сборки в список аргументов типа, заключите его в квадратных скобках указывается тип с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2689">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="92aaa-2690">В противном случае запятых, разделяющих частей имени с указанием сборки, интерпретируются как разделители дополнительных аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2690">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="92aaa-2691">Например <xref:System.Collections.Generic.Dictionary%602> из `MyType` из MyAssembly.dll, с помощью ключей типа <xref:System.String>, может быть указан следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2691">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2692">Тип с указанием сборки могут быть заключены в квадратные скобки, только в том случае, когда он появится в списке параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2692">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="92aaa-2693">Правила поиска сборок для полных и неполных типов в список параметров типа совпадают с правила для полных и неполных неуниверсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2693">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="92aaa-2694">Обнуляемые типы представляют собой особый случай универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2694">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="92aaa-2695">Например, для типа <xref:System.Int32> представлена строкой «System.Nullable'1[System.Int32]».</span><span class="sxs-lookup"><span data-stu-id="92aaa-2695">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2696">В C#, C++ и Visual Basic можно также получить обнуляемые типы, с помощью операторов типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2696">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="92aaa-2697">Например, допускающий значение NULL <xref:System.Boolean> возвращаемый тип `typeof(Nullable<bool>)` в C#, `Nullable<Boolean>::typeid` в C++, а также по `GetType(Nullable(Of Boolean))` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2697">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="92aaa-2698">В следующей таблице показаны синтаксис, используемом с `GetType` для различных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2698">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="92aaa-2699">Чтобы получить</span><span class="sxs-lookup"><span data-stu-id="92aaa-2699">To Get</span></span>|<span data-ttu-id="92aaa-2700">Использовать</span><span class="sxs-lookup"><span data-stu-id="92aaa-2700">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="92aaa-2701">Значение необязательной определенности <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="92aaa-2701">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="92aaa-2702">Неуправляемый указатель на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2702">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="92aaa-2703">Неуправляемый указатель на указатель на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2703">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="92aaa-2704">Управляемый указатель или ссылка на `MyType`</span><span class="sxs-lookup"><span data-stu-id="92aaa-2704">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="92aaa-2705">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2705">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="92aaa-2706">Обратите внимание, что ссылки, в отличие от указателей, ограничены одним уровнем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2706">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="92aaa-2707">Родительский и вложенный класс</span><span class="sxs-lookup"><span data-stu-id="92aaa-2707">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="92aaa-2708">Одномерный массив с нижней границей, равной 0</span><span class="sxs-lookup"><span data-stu-id="92aaa-2708">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="92aaa-2709">Одномерный массив с неизвестной нижней границей</span><span class="sxs-lookup"><span data-stu-id="92aaa-2709">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="92aaa-2710">N мерный массив</span><span class="sxs-lookup"><span data-stu-id="92aaa-2710">An n-dimensional array</span></span>|<span data-ttu-id="92aaa-2711">Запятая (,) внутри квадратных скобок n-1 раз.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2711">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="92aaa-2712">Например `System.Object[,,]` представляет трехмерный массив `Object` массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2712">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="92aaa-2713">Двумерный массив массива</span><span class="sxs-lookup"><span data-stu-id="92aaa-2713">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="92aaa-2714">Прямоугольный двухмерный массив с неизвестными нижними границами</span><span class="sxs-lookup"><span data-stu-id="92aaa-2714">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="92aaa-2715">Универсальный тип с одним аргументом типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2715">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="92aaa-2716">Универсальный тип с двумя аргументами типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2716">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="92aaa-2717">Универсальный тип с двумя аргументами типа сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2717">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="92aaa-2718">С указанием сборки универсального типа с аргументом типа сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2718">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="92aaa-2719">Универсальный тип, тип аргумента является универсальным типом с двумя аргументами типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2719">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2720"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2720"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-2721">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2721">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-2722"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и тип не найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2722"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="92aaa-2723">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2723">-or-</span></span> 
 <span data-ttu-id="92aaa-2724"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимые знаки, например внедренные табуляции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2724"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="92aaa-2725">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2725">-or-</span></span> 
 <span data-ttu-id="92aaa-2726"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> является пустой строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2726"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="92aaa-2727">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2727">-or-</span></span> 
 <span data-ttu-id="92aaa-2728"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> представляет тип массива с недопустимым размером.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2728"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="92aaa-2729">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2729">-or-</span></span> 
 <span data-ttu-id="92aaa-2730"><paramref name="typeName" /> представляет массив <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2730"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2731"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимый синтаксис.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2731"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span></span> <span data-ttu-id="92aaa-2732">Например, "MyType[,\*,]".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2732">For example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="92aaa-2733">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2733">-or-</span></span> 
 <span data-ttu-id="92aaa-2734"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2734"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2735">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2735">-or-</span></span> 
 <span data-ttu-id="92aaa-2736"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2736"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2737">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2737">-or-</span></span> 
 <span data-ttu-id="92aaa-2738"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2738"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="92aaa-2739"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и не удалось найти сборку либо одну из ее зависимостей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2739"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="92aaa-2740">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2740">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-2741">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2741">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-2742">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2742">-or-</span></span> 
<span data-ttu-id="92aaa-2743">В текущий момент загружена среда CLR версии 2.0 или более поздней версии. Сборка была скомпилирована в более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2743">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-2744">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2744">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-2745">Имя получаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2745">The name of the type to get.</span></span> <span data-ttu-id="92aaa-2746">Если задан параметр <paramref name="typeResolver" />, имя типа может быть любой строкой, которую может разрешить объект <paramref name="typeResolver" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2746">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="92aaa-2747">Если задан параметр <paramref name="assemblyResolver" /> или если используется стандартное разрешение типов, параметр <paramref name="typeName" /> должен быть именем с указанием сборки (см. описание свойства <see cref="P:System.Type.AssemblyQualifiedName" />), кроме случаев, когда этот тип находится в текущей выполняемой сборке или в библиотеке Mscorlib.dll — тогда достаточно задать имя типа с указанием пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2747">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="92aaa-2748">Метод, находящий и возвращающий сборку, заданную в параметре <paramref name="typeName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2748">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="92aaa-2749">Имя сборки передается методу <paramref name="assemblyResolver" /> в виде объекта <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2749">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="92aaa-2750">Если объект <paramref name="typeName" /> не содержит имя сборки, метод <paramref name="assemblyResolver" /> не вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2750">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="92aaa-2751">Если метод <paramref name="assemblyResolver" /> не указан, выполняется стандартное разрешение сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2751">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="92aaa-2752">Внимание. Не передавайте методы от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2752">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="92aaa-2753">В противном случае возможно повышение привилегий для вредоносного кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2753">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="92aaa-2754">Рекомендуется использовать только методы, предоставленные пользователями или знакомые им.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2754">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="92aaa-2755">Метод, находящий и возвращающий тип, заданный в параметре <paramref name="typeName" />, из сборки, возвращенной методом <paramref name="assemblyResolver" /> или стандартным методом разрешения сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2755">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="92aaa-2756">Если сборка не предоставлена, ее может предоставить метод <paramref name="typeResolver" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2756">If no assembly is provided, the <paramref name="typeResolver" /> method can provide one.</span></span> <span data-ttu-id="92aaa-2757">Метод также принимает параметр, указывающий, следует ли выполнять поиск без учета регистра; этому параметру передается значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2757">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="92aaa-2758">Внимание. Не передавайте методы от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2758">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <summary><span data-ttu-id="92aaa-2759">Получает тип с указанным именем; дополнительно может предоставлять настраиваемые методы для разрешения сборки и типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2759">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2760">Тип с указанным именем или значение <see langword="null" />, если тип не найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2760">The type with the specified name, or <see langword="null" /> if the type is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2761">Сценарии использования для этого метода и сведения о `assemblyResolver` и `typeResolver` параметров можно найти в <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2761">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2762">Если `typeName` отсутствует, вызов <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> возвращает метод `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2762">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="92aaa-2763">Он не вызывает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2763">It does not throw an exception.</span></span> <span data-ttu-id="92aaa-2764">Для управления ли исключение, вызовите перегрузку <xref:System.Type.GetType%2A> метод, который имеет `throwOnError` параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2764">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="92aaa-2765">Вызов перегрузки этого метода равносилен вызову метода является <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> перегрузку метода с указанием `false` для `throwOnError` и `ignoreCase` параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2765">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2766"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2766"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-2767">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2767">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2768">Произошла ошибка при интерпретации <paramref name="typeName" /> в имя типа и имя сборки (например, если имя простого типа содержит неэкранированный специальный знак).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2768">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="92aaa-2769">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2769">-or-</span></span> 
 <span data-ttu-id="92aaa-2770"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2770"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2771">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2771">-or-</span></span> 
 <span data-ttu-id="92aaa-2772"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2772"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2773">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2773">-or-</span></span> 
 <span data-ttu-id="92aaa-2774"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2774"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-2775"><paramref name="typeName" /> представляет массив <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2775"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="92aaa-2776">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2776">The assembly or one of its dependencies was found, but could not be loaded.</span></span>  
  
<span data-ttu-id="92aaa-2777">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2777">-or-</span></span> 
 <span data-ttu-id="92aaa-2778"><paramref name="typeName" /> содержит недопустимое имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2778"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="92aaa-2779">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2779">-or-</span></span> 
 <span data-ttu-id="92aaa-2780"><paramref name="typeName" /> является допустимым именем сборки без имени типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2780"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-2781">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2781">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-2782">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2782">-or-</span></span> 
<span data-ttu-id="92aaa-2783">Сборка была скомпилирована в более поздней версии среды CLR, чем версия, загруженная в текущий момент.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2783">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-2784">Имя получаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2784">The name of the type to get.</span></span> <span data-ttu-id="92aaa-2785">Если задан параметр <paramref name="typeResolver" />, имя типа может быть любой строкой, которую может разрешить объект <paramref name="typeResolver" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2785">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="92aaa-2786">Если задан параметр <paramref name="assemblyResolver" /> или если используется стандартное разрешение типов, параметр <paramref name="typeName" /> должен быть именем с указанием сборки (см. описание свойства <see cref="P:System.Type.AssemblyQualifiedName" />), кроме случаев, когда этот тип находится в текущей выполняемой сборке или в библиотеке Mscorlib.dll — тогда достаточно задать имя типа с указанием пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2786">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="92aaa-2787">Метод, находящий и возвращающий сборку, заданную в параметре <paramref name="typeName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2787">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="92aaa-2788">Имя сборки передается методу <paramref name="assemblyResolver" /> в виде объекта <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2788">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="92aaa-2789">Если объект <paramref name="typeName" /> не содержит имя сборки, метод <paramref name="assemblyResolver" /> не вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2789">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="92aaa-2790">Если метод <paramref name="assemblyResolver" /> не указан, выполняется стандартное разрешение сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2790">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="92aaa-2791">Внимание. Не передавайте методы от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2791">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="92aaa-2792">В противном случае возможно повышение привилегий для вредоносного кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2792">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="92aaa-2793">Рекомендуется использовать только методы, предоставленные пользователями или знакомые им.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2793">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="92aaa-2794">Метод, находящий и возвращающий тип, заданный в параметре <paramref name="typeName" />, из сборки, возвращенной методом <paramref name="assemblyResolver" /> или стандартным методом разрешения сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2794">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="92aaa-2795">Если сборка не предоставлена, этот метод может предоставить ее.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2795">If no assembly is provided, the method can provide one.</span></span> <span data-ttu-id="92aaa-2796">Метод также принимает параметр, указывающий, следует ли выполнять поиск без учета регистра; этому параметру передается значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2796">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="92aaa-2797">Внимание. Не передавайте методы от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2797">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-2798">Значение <see langword="true" />, чтобы создать исключение, если тип не удается найти; значение <see langword="false" />, чтобы вернуть значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2798"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="92aaa-2799">Кроме того, при указании значения <see langword="false" /> подавляются некоторые другие условия возникновения исключений, но не все из них.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2799">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="92aaa-2800">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2800">See the Exceptions section.</span></span></param>
        <summary><span data-ttu-id="92aaa-2801">Возвращает тип с заданным именем и указывает, следует ли создавать исключение в случае невозможности найти тип, а также может предоставлять настраиваемые методы для разрешения сборки и типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2801">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2802">Тип с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2802">The type with the specified name.</span></span> <span data-ttu-id="92aaa-2803">Если тип не найден, параметр <paramref name="throwOnError" /> определяет дальнейшее действие — возврат значения <see langword="null" /> или создание исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2803">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="92aaa-2804">В некоторых случаях исключение создается независимо от значения параметра <paramref name="throwOnError" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2804">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="92aaa-2805">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2805">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2806">Сценарии использования для этого метода и сведения о `assemblyResolver` и `typeResolver` параметров можно найти в <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2806">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="92aaa-2807">Вызов перегрузки этого метода равносилен вызову метода является <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> перегрузку метода с указанием `false` для `ignoreCase` параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2807">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2808"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2808"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-2809">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2809">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-2810"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и тип не найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2810"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="92aaa-2811">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2811">-or-</span></span> 
 <span data-ttu-id="92aaa-2812"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимые знаки, например внедренные табуляции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2812"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="92aaa-2813">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2813">-or-</span></span> 
 <span data-ttu-id="92aaa-2814"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> является пустой строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2814"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="92aaa-2815">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2815">-or-</span></span> 
 <span data-ttu-id="92aaa-2816"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> представляет тип массива с недопустимым размером.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2816"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="92aaa-2817">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2817">-or-</span></span> 
 <span data-ttu-id="92aaa-2818"><paramref name="typeName" /> представляет массив <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2818"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-2819">Произошла ошибка при интерпретации <paramref name="typeName" /> в имя типа и имя сборки (например, если имя простого типа содержит неэкранированный специальный знак).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2819">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="92aaa-2820">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2820">-or-</span></span> 
 <span data-ttu-id="92aaa-2821"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимый синтаксис (например "MyType[,\*,]").</span><span class="sxs-lookup"><span data-stu-id="92aaa-2821"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span></span>  
  
<span data-ttu-id="92aaa-2822">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2822">-or-</span></span> 
 <span data-ttu-id="92aaa-2823"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2823"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2824">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2824">-or-</span></span> 
 <span data-ttu-id="92aaa-2825"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2825"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-2826">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2826">-or-</span></span> 
 <span data-ttu-id="92aaa-2827"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2827"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="92aaa-2828"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и не удалось найти сборку либо одну из ее зависимостей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2828"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span>  
  
<span data-ttu-id="92aaa-2829">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2829">-or-</span></span> 
 <span data-ttu-id="92aaa-2830"><paramref name="typeName" /> содержит недопустимое имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2830"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="92aaa-2831">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2831">-or-</span></span> 
 <span data-ttu-id="92aaa-2832"><paramref name="typeName" /> является допустимым именем сборки без имени типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2832"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="92aaa-2833">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2833">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-2834">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2834">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-2835">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-2835">-or-</span></span> 
<span data-ttu-id="92aaa-2836">Сборка была скомпилирована в более поздней версии среды CLR, чем версия, загруженная в текущий момент.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2836">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-2837">Имя получаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2837">The name of the type to get.</span></span> <span data-ttu-id="92aaa-2838">Если задан параметр <paramref name="typeResolver" />, имя типа может быть любой строкой, которую может разрешить объект <paramref name="typeResolver" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2838">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="92aaa-2839">Если задан параметр <paramref name="assemblyResolver" /> или если используется стандартное разрешение типов, параметр <paramref name="typeName" /> должен быть именем с указанием сборки (см. описание свойства <see cref="P:System.Type.AssemblyQualifiedName" />), кроме случаев, когда этот тип находится в текущей выполняемой сборке или в библиотеке Mscorlib.dll — тогда достаточно задать имя типа с указанием пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2839">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="92aaa-2840">Метод, находящий и возвращающий сборку, заданную в параметре <paramref name="typeName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2840">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="92aaa-2841">Имя сборки передается методу <paramref name="assemblyResolver" /> в виде объекта <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2841">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="92aaa-2842">Если объект <paramref name="typeName" /> не содержит имя сборки, метод <paramref name="assemblyResolver" /> не вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2842">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="92aaa-2843">Если метод <paramref name="assemblyResolver" /> не указан, выполняется стандартное разрешение сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2843">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="92aaa-2844">Внимание. Не передавайте методы от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2844">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="92aaa-2845">В противном случае возможно повышение привилегий для вредоносного кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2845">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="92aaa-2846">Рекомендуется использовать только методы, предоставленные пользователями или знакомые им.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2846">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="92aaa-2847">Метод, находящий и возвращающий тип, заданный в параметре <paramref name="typeName" />, из сборки, возвращенной методом <paramref name="assemblyResolver" /> или стандартным методом разрешения сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2847">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="92aaa-2848">Если сборка не предоставлена, этот метод может предоставить ее.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2848">If no assembly is provided, the method can provide one.</span></span> <span data-ttu-id="92aaa-2849">Метод также принимает параметр, указывающий, следует ли выполнять поиск без учета регистра; этому параметру передается значение <paramref name="ignoreCase" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2849">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <paramref name="ignoreCase" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="92aaa-2850">Внимание. Не передавайте методы от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2850">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-2851">Значение <see langword="true" />, чтобы создать исключение, если тип не удается найти; значение <see langword="false" />, чтобы вернуть значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2851"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="92aaa-2852">Кроме того, при указании значения <see langword="false" /> подавляются некоторые другие условия возникновения исключений, но не все из них.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2852">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="92aaa-2853">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2853">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="92aaa-2854">Значение <see langword="true" />, чтобы не учитывать регистр при поиске <paramref name="typeName" />, значение <see langword="false" />, чтобы учитывать регистр при поиске <paramref name="typeName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2854"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-2855">Получает тип с заданным именем и указывает, следует ли выполнять поиск без учета регистра и следует ли создавать исключение в случае невозможности найти тип, а также может предоставлять настраиваемые методы для разрешения сборки и типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2855">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-2856">Тип с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2856">The type with the specified name.</span></span> <span data-ttu-id="92aaa-2857">Если тип не найден, параметр <paramref name="throwOnError" /> определяет дальнейшее действие — возврат значения <see langword="null" /> или создание исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2857">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="92aaa-2858">В некоторых случаях исключение создается независимо от значения параметра <paramref name="throwOnError" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2858">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="92aaa-2859">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-2859">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-2860">Используйте эту перегрузку метода и связанные перегрузки (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> и <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) для замены используемой по умолчанию реализации <xref:System.Type.GetType%2A> метод с реализациями более гибким.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2860">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="92aaa-2861">Предоставляя собственные методы разрешения имен типов и имена сборок, содержащих их, сделайте следующее:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2861">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="92aaa-2862">Управлять какая версия типа загружается из сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2862">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="92aaa-2863">Укажите другое место для поиска имени типа, которая не включает имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2863">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="92aaa-2864">Загрузка сборок с помощью частичных имен сборок.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2864">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="92aaa-2865">Вернуть подклассы <xref:System.Type?displayProperty=nameWithType> , не создаются путем общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2865">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="92aaa-2866">Например в сериализации, независимой от версии этот метод позволяет найти сборку «best fit» с помощью часть имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2866">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="92aaa-2867">Другие перегрузки <xref:System.Type.GetType%2A> метод требует имя типа с указанием сборки, которое включает номер версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2867">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="92aaa-2868">Альтернативные реализации системы типов может потребоваться вернуть подклассы <xref:System.Type?displayProperty=nameWithType> , не создается в среде CLR, все типы, которые возвращаются другие перегрузки <xref:System.Type.GetType%2A> метод являются типами среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2868">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="92aaa-2869">Примечания об использовании</span><span class="sxs-lookup"><span data-stu-id="92aaa-2869">Usage Notes</span></span>  
 <span data-ttu-id="92aaa-2870">Эта перегрузка метода и связанные перегрузки проанализировать `typeName` в имя типа и имя сборки и затем разрешать имена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2870">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="92aaa-2871">Разрешение имени сборки предшествует разрешения имени типа, так как имя типа должно быть разрешено в контексте сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2871">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2872">Если вы не знакомы с концепцией имен типов с указанием сборки, см. в разделе <xref:System.Type.AssemblyQualifiedName%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2872">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="92aaa-2873">Если `typeName` , не является именем с указанием сборки, разрешение сборки пропускается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2873">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="92aaa-2874">Неполные имена типов может быть разрешен в контексте Mscorlib.dll или текущей выполняемой сборке или при необходимости можно указать сборку в `typeResolver` параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2874">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="92aaa-2875">Эффекты, включая или исключая имя сборки для различных видов разрешение имен, отображаются в виде таблицы [смешанной разрешение имен](#mixed_name_resolution) раздел.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2875">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="92aaa-2876">Общие примечания по использованию:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2876">General usage notes:</span></span>  
  
-   <span data-ttu-id="92aaa-2877">Не передавайте методы для `assemblyResolver` или `typeResolver` если они исходят от неизвестных или недоверенных вызывающих модулей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2877">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="92aaa-2878">Рекомендуется использовать только методы, предоставленные пользователями или знакомые им.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2878">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="92aaa-2879">С помощью методов из неизвестных или недоверенных вызывающих модулей может привести повышение привилегий для вредоносного кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2879">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="92aaa-2880">Если опустить `assemblyResolver` и/или `typeResolver` параметры, значение `throwOnError` параметр передается в методы, выполняющие разрешение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2880">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="92aaa-2881">Если `throwOnError` — `true`, этот метод вызывает исключение <xref:System.TypeLoadException> при `typeResolver` возвращает `null`и <xref:System.IO.FileNotFoundException> при `assemblyResolver` возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2881">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="92aaa-2882">Этот метод не перехватывает исключения, создаваемые `assemblyResolver` и `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2882">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="92aaa-2883">Вы несете ответственность за любые исключения, которые вызываются методами распознавателя.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2883">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="92aaa-2884">Разрешение сборок</span><span class="sxs-lookup"><span data-stu-id="92aaa-2884">Resolving Assemblies</span></span>  
 <span data-ttu-id="92aaa-2885">`assemblyResolver` Метод получает <xref:System.Reflection.AssemblyName> объект, который создается путем синтаксического анализа строковое имя сборки, включенный в `typeName`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2885">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="92aaa-2886">Если `typeName` не содержит имя сборки, `assemblyResolver` не вызывается и `null` передается `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2886">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="92aaa-2887">Если `assemblyResolver` не указан, стандартная сборкой проверка используется для обнаружения сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2887">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="92aaa-2888">Если `assemblyResolver` предоставляется, <xref:System.Type.GetType%2A> метод не выполняет стандартные проверки; в этом случае необходимо убедиться, что ваш `assemblyResolver` может обрабатывать все сборки, передайте в него.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2888">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="92aaa-2889">`assemblyResolver` Метод должен возвращать `null` Если сборка не может быть разрешена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2889">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="92aaa-2890">Если `assemblyResolver` возвращает `null`, `typeResolver` не вызывается и дальнейшая обработка не выполняется; Кроме того, если `throwOnError` — `true`, <xref:System.IO.FileNotFoundException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2890">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="92aaa-2891">Если <xref:System.Reflection.AssemblyName> передаваемый `assemblyResolver` является частичным имя, один или несколько из его частей, `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2891">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="92aaa-2892">Например, если он не имеет версии <xref:System.Reflection.AssemblyName.Version%2A> свойство `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2892">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="92aaa-2893">Если <xref:System.Reflection.AssemblyName.Version%2A> свойство, <xref:System.Reflection.AssemblyName.CultureInfo%2A> свойство и <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> метода возвращают `null`, а затем только простое имя сборки было указано.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2893">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="92aaa-2894">`assemblyResolver` Метод может использовать или игнорировать все части имени сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2894">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="92aaa-2895">Влияние различных параметров разрешения сборок, отображаются в виде таблицы [смешанной разрешение имен](#mixed_name_resolution) раздела, для имен типов простых и с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2895">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="92aaa-2896">Разрешение типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2896">Resolving Types</span></span>  
 <span data-ttu-id="92aaa-2897">Если `typeName` не указано имя сборки, `typeResolver` всегда вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2897">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="92aaa-2898">Если `typeName` указывает имя сборки, `typeResolver` вызывается только в том случае, если имя сборки успешно разрешено.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2898">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="92aaa-2899">Если `assemblyResolver` или стандартной сборки, проверки возвращает `null`, `typeResolver` не вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2899">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="92aaa-2900">`typeResolver` Метод принимает три аргумента:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2900">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="92aaa-2901">Сборка для поиска или `null` Если `typeName` не содержит имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2901">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="92aaa-2902">Простое имя типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2902">The simple name of the type.</span></span> <span data-ttu-id="92aaa-2903">В случае вложенный тип это внешний содержащий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2903">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="92aaa-2904">В случае универсального типа это простое имя универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2904">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="92aaa-2905">Логическое значение, которое является `true` Если нужно игнорировать регистр имен типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2905">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="92aaa-2906">Реализация определяет способ использования этих аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2906">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="92aaa-2907">`typeResolver` Метод должен возвращать `null` при невозможности разрешить тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2907">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="92aaa-2908">Если `typeResolver` возвращает `null` и `throwOnError` — `true`, эта перегрузка <xref:System.Type.GetType%2A> вызывает <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2908">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="92aaa-2909">Влияние различных параметров разрешения типов отображаются в виде таблицы [смешанной разрешение имен](#mixed_name_resolution) раздела, для имен типов простых и с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2909">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="92aaa-2910">Разрешение вложенных типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2910">Resolving Nested Types</span></span>  
 <span data-ttu-id="92aaa-2911">Если `typeName` является вложенным типом, только имя внешней содержащий тип передается `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2911">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="92aaa-2912">Когда `typeResolver` возвращает этот тип <xref:System.Type.GetNestedType%2A> метод вызывается рекурсивно, пока не будет устранена внутреннего вложенного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2912">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="92aaa-2913">Разрешение универсальных типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2913">Resolving Generic Types</span></span>  
 <span data-ttu-id="92aaa-2914"><xref:System.Type.GetType%2A> Вызывается рекурсивно для разрешения универсальных типов: Во-первых, чтобы определить общий тип, а затем его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2914">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="92aaa-2915">Если аргумент типа является универсальным, <xref:System.Type.GetType%2A> вызывается рекурсивно для устранения его аргументов типа и т. д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2915">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="92aaa-2916">Сочетание `assemblyResolver` и `typeResolver` предоставить должны быть способны все уровни Косвенная рекурсия.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2916">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="92aaa-2917">Например, предположим, вы предоставляете `assemblyResolver` загрузки, который управляет `MyAssembly`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2917">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="92aaa-2918">Предположим, что вы хотите определить общий тип `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2918">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="92aaa-2919">Можно передать следующее имя универсального типа:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2919">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="92aaa-2920">Обратите внимание, что `MyType` является аргументом типа, только с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2920">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="92aaa-2921">Имена <xref:System.Collections.Generic.Dictionary%602> и <xref:System.String> классы не с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2921">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="92aaa-2922">Ваш `typeResolver` должен быть дескриптор может либо сборки или `null`, так как он будет получать `null` для <xref:System.Collections.Generic.Dictionary%602> и <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2922">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="92aaa-2923">Он может обрабатывать такую ситуацию путем вызова перегрузки <xref:System.Type.GetType%2A> метод, который принимает строку, так как имена неполных типов находятся в библиотеке Mscorlib.dll:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2923">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="92aaa-2924">`assemblyResolver` Метод не вызывается для типа словаря и строкового типа, так как эти имена типов не с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2924">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="92aaa-2925">Теперь предположим, что вместо `System.String`, первый универсальный аргумент имеет тип `YourType`, из `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2925">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="92aaa-2926">Так как эта сборка не является ни Mscorlib.dll, ни текущей выполняемой сборке, не удается разрешить `YourType` без имени с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2926">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="92aaa-2927">Так как ваш `assemblyResolve` будет вызывается рекурсивно, он должен иметь возможность обрабатывать этот случай.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2927">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="92aaa-2928">Вместо возвращения `null` для сборок, отличных от `MyAssembly`, она теперь выполняет загрузка сборки с помощью предоставленного <xref:System.Reflection.AssemblyName> объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2928">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="92aaa-2929">К [примечания об использовании](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2929">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="92aaa-2930">Разрешение имен типов с помощью специальных символов</span><span class="sxs-lookup"><span data-stu-id="92aaa-2930">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="92aaa-2931">Некоторые символы имеют специальное значение в именах с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2931">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="92aaa-2932">Если имя простого типа содержит эти символы, они вызовут ошибки синтаксического анализа при простое имя является частью имени с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2932">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="92aaa-2933">Во избежание ошибки синтаксического анализа, необходимо экранировать специальные символы обратной косой чертой, прежде чем можно передать имя с указанием сборки для <xref:System.Type.GetType%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2933">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="92aaa-2934">Например, если тип имеет имя `Strange]Type`, escape-символ должны добавляться впереди квадратная скобка следующим образом: `Strange\]Type`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2934">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-2935">Имена с помощью таких специальных символов не может быть создан в Visual Basic или C#, но могут создаваться с помощью промежуточного языка Майкрософт (MSIL) или путем создания динамических сборок.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2935">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="92aaa-2936">В следующей таблице показаны специальные символы для имен типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2936">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="92aaa-2937">Знак</span><span class="sxs-lookup"><span data-stu-id="92aaa-2937">Character</span></span>|<span data-ttu-id="92aaa-2938">Значение</span><span class="sxs-lookup"><span data-stu-id="92aaa-2938">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="92aaa-2939">`,` (запятая)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2939">`,` (comma)</span></span>|<span data-ttu-id="92aaa-2940">Разделитель для имен с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2940">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="92aaa-2941">`[]` (квадратные скобки)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2941">`[]` (square brackets)</span></span>|<span data-ttu-id="92aaa-2942">Как пара суффикс указывает тип массива; как пара разделителей заключает списки универсальных аргументов и имена с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2942">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="92aaa-2943">`&` (амперсанд)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2943">`&` (ampersand)</span></span>|<span data-ttu-id="92aaa-2944">В качестве суффикса указывает, что тип является ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2944">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="92aaa-2945">`*` (звездочка)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2945">`*` (asterisk)</span></span>|<span data-ttu-id="92aaa-2946">В качестве суффикса указывает, что тип является типом указателя.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2946">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="92aaa-2947">`+` (плюс)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2947">`+` (plus)</span></span>|<span data-ttu-id="92aaa-2948">Разделитель вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2948">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="92aaa-2949">`\` (обратная косая черта)</span><span class="sxs-lookup"><span data-stu-id="92aaa-2949">`\` (backslash)</span></span>|<span data-ttu-id="92aaa-2950">Escape-символ.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2950">Escape character.</span></span>|  
  
 <span data-ttu-id="92aaa-2951">Свойства, такие как <xref:System.Type.AssemblyQualifiedName%2A> возврата правильно escape-строк.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2951">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="92aaa-2952">Необходимо передать правильно escape-строк для <xref:System.Type.GetType%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2952">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="92aaa-2953">В свою очередь <xref:System.Type.GetType%2A> метод передает правильно экранированные имена для `typeResolver` и методы разрешения типа по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2953">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="92aaa-2954">Если необходимо сравнить имя без escape-символов в имени `typeResolver`, необходимо удалить escape-символы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2954">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="92aaa-2955">К [примечания об использовании](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2955">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="92aaa-2956">Разрешение имен, смешанный</span><span class="sxs-lookup"><span data-stu-id="92aaa-2956">Mixed Name Resolution</span></span>  
 <span data-ttu-id="92aaa-2957">В следующей таблице перечислены взаимодействия между `assemblyResolver`, `typeResolver`и разрешение имен по умолчанию, для всех сочетаний имени типа и имени сборки в `typeName`:</span><span class="sxs-lookup"><span data-stu-id="92aaa-2957">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="92aaa-2958">Имя типа содержимого</span><span class="sxs-lookup"><span data-stu-id="92aaa-2958">Contents of type name</span></span>|<span data-ttu-id="92aaa-2959">Метод распознавателя сборок</span><span class="sxs-lookup"><span data-stu-id="92aaa-2959">Assembly resolver method</span></span>|<span data-ttu-id="92aaa-2960">Метод сопоставления имен типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-2960">Type resolver method</span></span>|<span data-ttu-id="92aaa-2961">Результат</span><span class="sxs-lookup"><span data-stu-id="92aaa-2961">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="92aaa-2962">тип сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2962">type, assembly</span></span>|<span data-ttu-id="92aaa-2963">null</span><span class="sxs-lookup"><span data-stu-id="92aaa-2963">null</span></span>|<span data-ttu-id="92aaa-2964">null</span><span class="sxs-lookup"><span data-stu-id="92aaa-2964">null</span></span>|<span data-ttu-id="92aaa-2965">Аналогичен вызову <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2965">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="92aaa-2966">тип сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2966">type, assembly</span></span>|<span data-ttu-id="92aaa-2967">предоставленный</span><span class="sxs-lookup"><span data-stu-id="92aaa-2967">provided</span></span>|<span data-ttu-id="92aaa-2968">null</span><span class="sxs-lookup"><span data-stu-id="92aaa-2968">null</span></span>|<span data-ttu-id="92aaa-2969">`assemblyResolver` Возвращает сборку, или возвращает `null` при невозможности разрешить сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2969">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="92aaa-2970">Если сборка не будет разрешена, <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> загрузить тип из сборки используется перегрузка метода; в противном случае отсутствует не пытается разрешить тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2970">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="92aaa-2971">тип сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2971">type, assembly</span></span>|<span data-ttu-id="92aaa-2972">null</span><span class="sxs-lookup"><span data-stu-id="92aaa-2972">null</span></span>|<span data-ttu-id="92aaa-2973">предоставленный</span><span class="sxs-lookup"><span data-stu-id="92aaa-2973">provided</span></span>|<span data-ttu-id="92aaa-2974">Эквивалентно преобразование имени сборки для <xref:System.Reflection.AssemblyName> объекта и вызывая метод <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> перегруженный метод для получения сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2974">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="92aaa-2975">Если сборка разрешается, он передается `typeResolver`; в противном случае `typeResolver` не вызывается и дальнейшая попытка разрешить тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2975">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="92aaa-2976">тип сборки</span><span class="sxs-lookup"><span data-stu-id="92aaa-2976">type, assembly</span></span>|<span data-ttu-id="92aaa-2977">предоставленный</span><span class="sxs-lookup"><span data-stu-id="92aaa-2977">provided</span></span>|<span data-ttu-id="92aaa-2978">предоставленный</span><span class="sxs-lookup"><span data-stu-id="92aaa-2978">provided</span></span>|<span data-ttu-id="92aaa-2979">`assemblyResolver` Возвращает сборку, или возвращает `null` при невозможности разрешить сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2979">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="92aaa-2980">Если сборка разрешается, он передается `typeResolver`; в противном случае `typeResolver` не вызывается и дальнейшая попытка разрешить тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2980">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="92aaa-2981">type</span><span class="sxs-lookup"><span data-stu-id="92aaa-2981">type</span></span>|<span data-ttu-id="92aaa-2982">значение NULL, в который</span><span class="sxs-lookup"><span data-stu-id="92aaa-2982">null, provided</span></span>|<span data-ttu-id="92aaa-2983">null</span><span class="sxs-lookup"><span data-stu-id="92aaa-2983">null</span></span>|<span data-ttu-id="92aaa-2984">Аналогичен вызову <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2984">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="92aaa-2985">Поскольку имя сборки не указан, производится поиск только библиотеки Mscorlib.dll и текущей выполняемой сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2985">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="92aaa-2986">Если `assemblyResolver` не указан, он игнорируется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2986">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="92aaa-2987">type</span><span class="sxs-lookup"><span data-stu-id="92aaa-2987">type</span></span>|<span data-ttu-id="92aaa-2988">значение NULL, в который</span><span class="sxs-lookup"><span data-stu-id="92aaa-2988">null, provided</span></span>|<span data-ttu-id="92aaa-2989">предоставленный</span><span class="sxs-lookup"><span data-stu-id="92aaa-2989">provided</span></span>|<span data-ttu-id="92aaa-2990">`typeResolver` вызывается, и `null` передается для сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2990">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="92aaa-2991">`typeResolver` можно предоставить тип из любой сборки, включая сборки, загружаемые для этой цели.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2991">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="92aaa-2992">Если `assemblyResolver` не указан, он игнорируется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2992">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="92aaa-2993">сборка</span><span class="sxs-lookup"><span data-stu-id="92aaa-2993">assembly</span></span>|<span data-ttu-id="92aaa-2994">значение NULL, в который</span><span class="sxs-lookup"><span data-stu-id="92aaa-2994">null, provided</span></span>|<span data-ttu-id="92aaa-2995">значение NULL, в который</span><span class="sxs-lookup"><span data-stu-id="92aaa-2995">null, provided</span></span>|<span data-ttu-id="92aaa-2996">Объект <xref:System.IO.FileLoadException> возникает исключение, так как имя сборки анализируется как будто имя типа с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2996">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="92aaa-2997">Это приводит к недопустимое имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2997">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="92aaa-2998">Вернуться: [Примечания об использовании](#usage_notes), [разрешение сборок](#resolving_assemblies), [разрешение типов](#resolving_types).</span><span class="sxs-lookup"><span data-stu-id="92aaa-2998">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-2999"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-2999"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-3000">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3000">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-3001"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и тип не найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3001"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="92aaa-3002">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3002">-or-</span></span> 
 <span data-ttu-id="92aaa-3003"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимые знаки, например внедренные табуляции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3003"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="92aaa-3004">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3004">-or-</span></span> 
 <span data-ttu-id="92aaa-3005"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> является пустой строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3005"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="92aaa-3006">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3006">-or-</span></span> 
 <span data-ttu-id="92aaa-3007"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> представляет тип массива с недопустимым размером.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3007"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="92aaa-3008">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3008">-or-</span></span> 
 <span data-ttu-id="92aaa-3009"><paramref name="typeName" /> представляет массив <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3009"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3010">Произошла ошибка при интерпретации <paramref name="typeName" /> в имя типа и имя сборки (например, если имя простого типа содержит неэкранированный специальный знак).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3010">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="92aaa-3011">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3011">-or-</span></span> 
 <span data-ttu-id="92aaa-3012"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимый синтаксис (например "MyType[,\*,]").</span><span class="sxs-lookup"><span data-stu-id="92aaa-3012"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span></span>  
  
<span data-ttu-id="92aaa-3013">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3013">-or-</span></span> 
 <span data-ttu-id="92aaa-3014"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3014"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-3015">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3015">-or-</span></span> 
 <span data-ttu-id="92aaa-3016"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3016"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-3017">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3017">-or-</span></span> 
 <span data-ttu-id="92aaa-3018"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3018"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="92aaa-3019"><paramref name="throwOnError" /> имеет значение <see langword="true" />, и не удалось найти сборку либо одну из ее зависимостей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3019"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="92aaa-3020">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3020">The assembly or one of its dependencies was found, but could not be loaded.</span></span>  
  
<span data-ttu-id="92aaa-3021">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3021">-or-</span></span> 
 <span data-ttu-id="92aaa-3022"><paramref name="typeName" /> содержит недопустимое имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3022"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="92aaa-3023">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3023">-or-</span></span> 
 <span data-ttu-id="92aaa-3024"><paramref name="typeName" /> является допустимым именем сборки без имени типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3024"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-3025">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3025">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-3026">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3026">-or-</span></span> 
<span data-ttu-id="92aaa-3027">Сборка была скомпилирована в более поздней версии среды CLR, чем версия, загруженная в текущий момент.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3027">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="92aaa-3028">Массив объектов, типы которых нужно определить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3028">An array of objects whose types to determine.</span></span></param>
        <summary><span data-ttu-id="92aaa-3029">Возвращает типы объектов в указанном массиве.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3029">Gets the types of the objects in the specified array.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3030">Массив объектов <see cref="T:System.Type" />, представляющих типы соответствующих элементов в массиве <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3030">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92aaa-3031">В следующем примере кода демонстрируется использование <xref:System.Type.GetTypeArray%2A> метод, чтобы получить список типов элементов массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3031">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-3032"><paramref name="args" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3032"><paramref name="args" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-3033">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3033">-or-</span></span> 
<span data-ttu-id="92aaa-3034">Один или несколько элементов в <paramref name="args" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3034">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-3035">Вызываются инициализаторы класса, и по крайней мере один из них создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3035">The class initializers are invoked and at least one throws an exception.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="92aaa-3036">Тип, код базового типа которого требуется получить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3036">The type whose underlying type code to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-3037">Возвращает код базового типа указанного объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3037">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3038">Код базового типа или <see cref="F:System.TypeCode.Empty" />, если <paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3038">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3039">При наследовании от <xref:System.Type>, поведение этого метода можно изменить, переопределив <xref:System.Type.GetTypeCodeImpl%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3039">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3040">В следующем примере кода показано, как <xref:System.TypeCode> перечисления может использоваться.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3040">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="92aaa-3041">В блоке решения внутри `WriteObjectInfo` метод, <xref:System.TypeCode> из <xref:System.Object> параметр проверяется, и в соответствующее сообщение записывается в консоль.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3041">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3042">Возвращает код базового типа этого экземпляра <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3042">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3043">Код типа базового типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3043">The type code of the underlying type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3044">Этот метод обеспечивает реализацию для `static` (в C#) или `Shared` (в Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3044">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="92aaa-3045">При наследовании от <xref:System.Type>, можно переопределить этот метод, чтобы предоставить свою собственную реализацию <xref:System.Type.GetTypeCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3045">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-3046">Возвращает тип, связанный с заданным кодом CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3046">Gets the type associated with the specified class identifier (CLSID).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="92aaa-3047">Код CLSID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3047">The CLSID of the type to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-3048">Возвращает тип, связанный с заданным кодом CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3048">Gets the type associated with the specified class identifier (CLSID).</span></span></summary>
        <returns><span data-ttu-id="92aaa-3049"><see langword="System.__ComObject" /> вне зависимости от того, допустим ли код CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3049"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3050"><xref:System.Type.GetTypeFromCLSID%2A> Метод поддерживает доступ с поздним связыванием неуправляемый COM-объекты из приложений .NET Framework, когда вы знаете идентификатор COM-объекта класса (CLSID).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3050">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="92aaa-3051">Идентификатор класса для классов COM определяется в разделе реестра HKEY_CLASSES_ROOT\CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3051">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="92aaa-3052">Можно получить значение <xref:System.Type.IsCOMObject%2A> свойства, чтобы определить, является ли тип возвращаемого этим методом COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3052">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="92aaa-3053">Вы можете вызвать <xref:System.Type.GetTypeFromProgID%2A> метод для доступа с поздним связыванием для COM объектов которого программный идентификатор (ProgID) вы знаете.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3053">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="92aaa-3054">Создание экземпляра неуправляемый COM-объект, из идентификатора CLSID — это двухэтапный процесс:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3054">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="92aaa-3055">Получить <xref:System.Type> , представляющий`__ComObject` , соответствующий идентификатор CLSID, вызвав <xref:System.Type.GetTypeFromCLSID%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3055">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="92aaa-3056">Вызовите <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> метод для создания экземпляра COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3056">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="92aaa-3057">См. пример для иллюстрации.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3057">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="92aaa-3058"><xref:System.Type.GetTypeFromCLSID%28System.Guid%29> Перегрузки не обрабатывает любое исключение, которое возникает при создании экземпляра <xref:System.Type> на основе `clsid` аргумент.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3058">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="92aaa-3059">Обратите внимание, что исключение не вызывается в том случае, если `clsid` не найден в реестре.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3059">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3060">В следующем примере используется идентификатор CLSID Microsoft Word [объекта приложения](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) для получения типа COM, который представляет экземпляр приложения Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3060">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="92aaa-3061">Затем код создает тип путем вызова <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> метод и закрывает его путем вызова [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3061">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="92aaa-3062">Этот метод предназначен для использования при работе с COM-объектами, а не с объектами .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3062">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="92aaa-3063">Все управляемые объекты, включая те, которые являются видимыми для COM (то есть их <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> атрибут <see langword="true" />) иметь идентификатор GUID, который возвращается <see cref="P:System.Type.GUID" /> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3063">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="92aaa-3064">Несмотря на то, что метод возвращает <see cref="T:System.Type" /> объектов, соответствующий идентификатор GUID для платформы .NET Framework, нельзя использовать этот <see cref="T:System.Type" /> объекта для создания экземпляра типа путем вызова <see cref="M:System.Activator.CreateInstance(System.Type)" /> метода, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3064">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="92aaa-3065">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="92aaa-3065">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="92aaa-3066">Вместо этого <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> следует использовать только для получения GUID неуправляемый объект COM и полученный в результате <see cref="T:System.Type" /> объект, который передается <see cref="M:System.Activator.CreateInstance(System.Type)" /> метод должен представлять неуправляемый COM-объект.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3066">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="92aaa-3067">Код CLSID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3067">The CLSID of the type to get.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-3068">Значение <see langword="true" /> для вызова любого возникшего исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3068"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="92aaa-3069">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3069">-or-</span></span> 
 <span data-ttu-id="92aaa-3070">Значение <see langword="false" /> для игнорирования всех происходящих исключений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3070"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="92aaa-3071">Возвращает тип, связанный с заданным кодом CLSID, позволяющий определить, будет ли выбрасываться исключение в случае происхождения ошибки при загрузке типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3071">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3072"><see langword="System.__ComObject" /> вне зависимости от того, допустим ли код CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3072"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3073"><xref:System.Type.GetTypeFromCLSID%2A> Метод поддерживает доступ с поздним связыванием неуправляемый COM-объекты из приложений .NET Framework, когда вы знаете идентификатор COM-объекта класса (CLSID).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3073">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="92aaa-3074">Идентификатор класса для классов COM определяется в разделе реестра HKEY_CLASSES_ROOT\CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3074">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="92aaa-3075">Можно получить значение <xref:System.Type.IsCOMObject%2A> свойства, чтобы определить, является ли тип возвращаемого этим методом COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3075">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="92aaa-3076">Вы можете вызвать <xref:System.Type.GetTypeFromProgID%2A> метод для доступа с поздним связыванием для COM объектов которого программный идентификатор (ProgID) вы знаете.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3076">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="92aaa-3077">Создание экземпляра неуправляемый COM-объект, из идентификатора CLSID — это двухэтапный процесс:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3077">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="92aaa-3078">Получить <xref:System.Type> , представляющий `__ComObject` , соответствующий идентификатор CLSID, вызвав <xref:System.Type.GetTypeFromCLSID%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3078">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="92aaa-3079">Вызовите <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> метод для создания экземпляра COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3079">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="92aaa-3080">См. пример для иллюстрации.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3080">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="92aaa-3081">Такие исключения, как <xref:System.OutOfMemoryException> возникает при указании `true` для `throwOnError`, но не заканчивается сбоем для незарегистрированных идентификаторов CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3081">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3082">В следующем примере используется идентификатор CLSID Microsoft Word [объекта приложения](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) для получения типа COM, который представляет экземпляр приложения Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3082">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="92aaa-3083">Затем код создает тип путем вызова <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> метод и закрывает его путем вызова [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3083">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="92aaa-3084">Исключение возникает в том случае, если произошла ошибка при загрузке типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3084">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="92aaa-3085">Этот метод предназначен для использования при работе с COM-объектами, а не с объектами .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3085">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="92aaa-3086">Все управляемые объекты, включая те, которые являются видимыми для COM (то есть их <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> атрибут <see langword="true" />) иметь идентификатор GUID, который возвращается <see cref="P:System.Type.GUID" /> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3086">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="92aaa-3087">Несмотря на то, что метод возвращает <see cref="T:System.Type" /> объектов, соответствующий идентификатор GUID для платформы .NET Framework, нельзя использовать этот <see cref="T:System.Type" /> объекта для создания экземпляра типа путем вызова <see cref="M:System.Activator.CreateInstance(System.Type)" /> метода, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3087">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="92aaa-3088">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="92aaa-3088">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="92aaa-3089">Вместо этого <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> следует использовать только для получения GUID неуправляемый объект COM и полученный в результате <see cref="T:System.Type" /> объект, который передается <see cref="M:System.Activator.CreateInstance(System.Type)" /> метод должен представлять неуправляемый COM-объект.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3089">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="server" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="92aaa-3090">Код CLSID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3090">The CLSID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="92aaa-3091">Сервер, с которого должен быть загружен тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3091">The server from which to load the type.</span></span> <span data-ttu-id="92aaa-3092">Если в качестве имени сервера задано значение <see langword="null" />, этот метод автоматически перейдет к поиску на локальном компьютере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3092">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <summary><span data-ttu-id="92aaa-3093">Возвращает с указанного сервера тип, связанный с заданным кодом CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3093">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3094"><see langword="System.__ComObject" /> вне зависимости от того, допустим ли код CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3094"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3095"><xref:System.Type.GetTypeFromCLSID%2A> Метод поддерживает доступ с поздним связыванием неуправляемый COM-объекты из приложений .NET Framework, когда вы знаете идентификатор COM-объекта класса (CLSID).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3095">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="92aaa-3096">Идентификатор класса для классов COM определяется в разделе реестра HKEY_CLASSES_ROOT\CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3096">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="92aaa-3097">Можно получить значение <xref:System.Type.IsCOMObject%2A> свойства, чтобы определить, является ли тип возвращаемого этим методом COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3097">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="92aaa-3098">Вы можете вызвать <xref:System.Type.GetTypeFromProgID%2A> метод для доступа с поздним связыванием для COM объектов которого программный идентификатор (ProgID) вы знаете.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3098">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="92aaa-3099">Создание экземпляра неуправляемый COM-объект, из идентификатора CLSID — это двухэтапный процесс:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3099">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="92aaa-3100">Получить <xref:System.Type> , представляющий `__ComObject` , соответствующий идентификатор CLSID, вызвав <xref:System.Type.GetTypeFromCLSID%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3100">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="92aaa-3101">Вызовите <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> метод для создания экземпляра COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3101">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3102">В следующем примере используется идентификатор CLSID Microsoft Word [объекта приложения](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) для получения типа COM, который представляет экземпляр приложения Microsoft Word с сервера с именем computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3102">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="92aaa-3103">Затем код создает тип путем вызова <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> метод и закрывает его путем вызова [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3103">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="92aaa-3104">Этот метод предназначен для использования при работе с COM-объектами, а не с объектами .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3104">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="92aaa-3105">Все управляемые объекты, включая те, которые являются видимыми для COM (то есть их <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> атрибут <see langword="true" />) иметь идентификатор GUID, который возвращается <see cref="P:System.Type.GUID" /> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3105">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="92aaa-3106">Несмотря на то, что метод возвращает <see cref="T:System.Type" /> объектов, соответствующий идентификатор GUID для платформы .NET Framework, нельзя использовать этот <see cref="T:System.Type" /> объекта для создания экземпляра типа путем вызова <see cref="M:System.Activator.CreateInstance(System.Type)" /> метода, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3106">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="92aaa-3107">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="92aaa-3107">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="92aaa-3108">Вместо этого <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> следует использовать только для получения GUID неуправляемый объект COM и полученный в результате <see cref="T:System.Type" /> объект, который передается <see cref="M:System.Activator.CreateInstance(System.Type)" /> метод должен представлять неуправляемый COM-объект.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3108">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="server" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="92aaa-3109">Код CLSID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3109">The CLSID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="92aaa-3110">Сервер, с которого должен быть загружен тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3110">The server from which to load the type.</span></span> <span data-ttu-id="92aaa-3111">Если в качестве имени сервера задано значение <see langword="null" />, этот метод автоматически перейдет к поиску на локальном компьютере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3111">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-3112">Значение <see langword="true" /> для вызова любого возникшего исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3112"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="92aaa-3113">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3113">-or-</span></span> 
 <span data-ttu-id="92aaa-3114">Значение <see langword="false" /> для игнорирования всех происходящих исключений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3114"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="92aaa-3115">Возвращает с указанного сервера тип, связанный с заданным кодом CLSID, позволяющий определить, будет ли выбрасываться исключение при происхождении ошибки во время загрузки типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3115">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3116"><see langword="System.__ComObject" /> вне зависимости от того, допустим ли код CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3116"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3117"><xref:System.Type.GetTypeFromCLSID%2A> Метод поддерживает доступ с поздним связыванием неуправляемый COM-объекты из приложений .NET Framework, когда вы знаете идентификатор COM-объекта класса (CLSID).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3117">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="92aaa-3118">Идентификатор класса для классов COM определяется в разделе реестра HKEY_CLASSES_ROOT\CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3118">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="92aaa-3119">Можно получить значение <xref:System.Type.IsCOMObject%2A> свойства, чтобы определить, является ли тип возвращаемого этим методом COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3119">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="92aaa-3120">Вы можете вызвать <xref:System.Type.GetTypeFromProgID%2A> метод для доступа с поздним связыванием для COM объектов которого программный идентификатор (ProgID) вы знаете.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3120">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="92aaa-3121">Создание экземпляра неуправляемый COM-объект, из идентификатора CLSID — это двухэтапный процесс:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3121">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="92aaa-3122">Получить <xref:System.Type> , представляющий `__ComObject` , соответствующий идентификатор CLSID, вызвав <xref:System.Type.GetTypeFromCLSID%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3122">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="92aaa-3123">Вызовите <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> метод для создания экземпляра COM-объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3123">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="92aaa-3124">Такие исключения, как <xref:System.OutOfMemoryException> возникает при указании `true` для `throwOnError`, но не заканчивается сбоем для незарегистрированных идентификаторов CLSID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3124">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3125">В следующем примере используется идентификатор CLSID Microsoft Word [объекта приложения](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) для получения типа COM, который представляет экземпляр приложения Microsoft Word с сервера с именем computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3125">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="92aaa-3126">Затем код создает тип путем вызова <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> метод и закрывает его путем вызова [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3126">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="92aaa-3127">Исключение возникает в том случае, если произошла ошибка при загрузке типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3127">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="92aaa-3128">Этот метод предназначен для использования при работе с COM-объектами, а не с объектами .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3128">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="92aaa-3129">Все управляемые объекты, включая те, которые являются видимыми для COM (то есть их <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> атрибут <see langword="true" />) иметь идентификатор GUID, который возвращается <see cref="P:System.Type.GUID" /> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3129">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="92aaa-3130">Несмотря на то что <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> возвращает <see cref="T:System.Type" /> объект, соответствующий идентификатор GUID для конкретного управляемого объекта, нельзя использовать этот <see cref="T:System.Type" /> объекта для создания экземпляра типа путем вызова <see cref="M:System.Activator.CreateInstance(System.Type)" /> метода, как приведенный ниже Показывает.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3130">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="92aaa-3131">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="92aaa-3131">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="92aaa-3132">Вместо этого <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> следует использовать только для получения GUID неуправляемый объект COM и полученный в результате <see cref="T:System.Type" /> объект, который передается <see cref="M:System.Activator.CreateInstance(System.Type)" /> метод должен представлять неуправляемый COM-объект.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3132">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="92aaa-3133">Объект, который ссылается на тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3133">The object that refers to the type.</span></span></param>
        <summary><span data-ttu-id="92aaa-3134">Возвращает тип, на который ссылается указанный дескриптор типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3134">Gets the type referenced by the specified type handle.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3135">Тип, на который ссылается заданный дескриптор <see cref="T:System.RuntimeTypeHandle" />, или значение <see langword="null" />, если значение свойства <see cref="P:System.RuntimeTypeHandle.Value" /> параметра <paramref name="handle" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3135">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3136">Дескрипторы доступны только в домене приложения, в котором они были получены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3136">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3137">В следующем примере используется <xref:System.Type.GetTypeFromHandle%2A> метод для получения <xref:System.Type> объекта из <xref:System.RuntimeTypeHandle> предоставляемые <xref:System.Type.GetTypeHandle%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3137">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-3138">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3138">A class initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-3139">Возвращает тип, связанный с заданным идентификатором ProgID.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3139">Gets the type associated with the specified program identifier (ProgID).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="92aaa-3140">Идентификатор ProgID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3140">The ProgID of the type to get.</span></span></param>
        <summary><span data-ttu-id="92aaa-3141">Возвращает тип, связанный с указанным идентификатором ProgID, и возвращает значение NULL, если при загрузке объекта <see cref="T:System.Type" /> возникла ошибка.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3141">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3142">Тип, связанный с указанным идентификатором ProgID, если идентификатор <paramref name="progID" /> является допустимой записью в реестре и с ним связан определенный тип; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3142">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3143">Этот метод предназначен для поддержки модели COM.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3143">This method is provided for COM support.</span></span> <span data-ttu-id="92aaa-3144">Идентификаторы ProgID не используются в Microsoft .NET Framework, так как они были заменены концепция пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3144">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3145"><paramref name="progID" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3145"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="92aaa-3146">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3146">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="92aaa-3147">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3147">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="92aaa-3148">Идентификатор ProgID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3148">The ProgID of the type to get.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-3149">Значение <see langword="true" /> для вызова любого возникшего исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3149"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="92aaa-3150">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3150">-or-</span></span> 
 <span data-ttu-id="92aaa-3151">Значение <see langword="false" /> для игнорирования всех происходящих исключений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3151"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="92aaa-3152">Возвращает тип, связанный с заданным идентификатором ProgID, позволяющим определить, будет ли выбрасываться исключение при происхождении ошибки во время загрузки типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3152">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3153">Тип, связанный с указанным идентификатором ProgID, если идентификатор <paramref name="progID" /> является допустимой записью в реестре и с ним связан определенный тип; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3153">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3154">Этот метод предназначен для поддержки модели COM.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3154">This method is provided for COM support.</span></span> <span data-ttu-id="92aaa-3155">Идентификаторы не используются в Microsoft .NET Framework, так как они были заменены концепция пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3155">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3156">В следующем примере извлекается тип, передав идентификатор ProgID, указывая, следует ли исключение, если идентификатор ProgID является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3156">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="92aaa-3157">Затем отображается идентификатор ClassID, связанный с ProgID, а также любой соответствующее сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3157">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3158"><paramref name="progID" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3158"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="92aaa-3159">Указанный идентификатор ProgID не зарегистрирован.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3159">The specified ProgID is not registered.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="92aaa-3160">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3160">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="92aaa-3161">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3161">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="server" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="92aaa-3162">Идентификатор ProgID извлекаемого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3162">The progID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="92aaa-3163">Сервер, с которого должен быть загружен тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3163">The server from which to load the type.</span></span> <span data-ttu-id="92aaa-3164">Если в качестве имени сервера задано значение <see langword="null" />, этот метод автоматически перейдет к поиску на локальном компьютере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3164">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <summary><span data-ttu-id="92aaa-3165">Возвращает с указанного сервера тип, связанный с заданным идентификатором ProgID, и возвращает значение NULL, если при загрузке типа произошла ошибка.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3165">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3166">Тип, связанный с заданным идентификатором ProgID, если идентификатор <paramref name="progID" /> является допустимой записью в реестре и с ним связан определенный тип; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3166">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3167">Этот метод предназначен для поддержки модели COM.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3167">This method is provided for COM support.</span></span> <span data-ttu-id="92aaa-3168">Идентификаторы не используются в Microsoft .NET Framework, так как они были заменены концепция пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3168">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3169">В следующем примере извлекается тип путем передачи имени ProgID и сервера.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3169">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="92aaa-3170">Затем в примере отображается идентификатор ClassID, связанный с ProgID, или создает исключение, если идентификатор ProgID или имя сервера является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3170">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3171"><paramref name="prodID" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3171"><paramref name="prodID" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="92aaa-3172">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3172">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="92aaa-3173">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3173">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="server" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="92aaa-3174">Идентификатор ProgID извлекаемого типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3174">The progID of the <see cref="T:System.Type" /> to get.</span></span></param>
        <param name="server"><span data-ttu-id="92aaa-3175">Сервер, с которого должен быть загружен тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3175">The server from which to load the type.</span></span> <span data-ttu-id="92aaa-3176">Если в качестве имени сервера задано значение <see langword="null" />, этот метод автоматически перейдет к поиску на локальном компьютере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3176">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="92aaa-3177">Значение <see langword="true" /> для вызова любого возникшего исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3177"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="92aaa-3178">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3178">-or-</span></span> 
 <span data-ttu-id="92aaa-3179">Значение <see langword="false" /> для игнорирования всех происходящих исключений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3179"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="92aaa-3180">Возвращает с указанного сервера тип, связанный с заданным идентификатором progID, который позволяет определить, будет ли выбрасываться исключение при происхождении ошибки во время загрузки типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3180">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3181">Тип, связанный с заданным идентификатором ProgID, если идентификатор <paramref name="progID" /> является допустимой записью в реестре и с ним связан определенный тип; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3181">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3182">Этот метод предназначен для поддержки модели COM.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3182">This method is provided for COM support.</span></span> <span data-ttu-id="92aaa-3183">Идентификаторы не используются в Microsoft .NET Framework, так как они были заменены концепция пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3183">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3184">В следующем примере извлекается тип путем передачи имени ProgID и сервера.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3184">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="92aaa-3185">Затем отображается идентификатор ClassID, связанный с ProgID, указывая, следует ли исключение, если идентификатор ProgID или имя сервера является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3185">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3186"><paramref name="progID" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3186"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="92aaa-3187">Указанный идентификатор progID не зарегистрирован.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3187">The specified progID is not registered.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="92aaa-3188">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3188">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="92aaa-3189">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3189">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="92aaa-3190">Объект, для которого требуется получить дескриптор типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3190">The object for which to get the type handle.</span></span></param>
        <summary><span data-ttu-id="92aaa-3191">Возвращает дескриптор <see cref="T:System.Type" /> для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3191">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3192">Дескриптор типа <see cref="T:System.Type" /> для указанного объекта <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3192">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3193">Дескрипторы доступны только в домене приложения, в котором они были получены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3193">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3194">В следующем примере определяется класс `MyClass1`, возвращает его экземпляр и извлекается дескриптор среды выполнения объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3194">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-3195"><paramref name="o" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3195"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3196">Возвращает идентификатор GUID, связанный с объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3196">Gets the GUID associated with the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-3197">Идентификатор GUID, связанный с объектом <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3197">The GUID associated with the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3198">GUID связан с типом с помощью <xref:System.Runtime.InteropServices.GuidAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3198">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3199">В следующем примере создается класс `MyClass1` в открытый метод создает `Type` объект, соответствующий `MyClass1`и возвращает <xref:System.Guid> структуры с помощью `GUID` свойство `Type` класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3199">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3200">Возвращает значение, позволяющее определить, содержит ли текущий объект <see cref="T:System.Type" /> в себе другой тип или ссылку на другой тип (иными словами, является ли текущий объект <see cref="T:System.Type" /> массивом, указателем либо параметром или же он передается по ссылке).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3200">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span></span></summary>
        <value><span data-ttu-id="92aaa-3201">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является массивом, указателем или параметром, переданным по ссылке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3201"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3202">Например, Type.GetType("Int32[]"). Возвращает HasElementType `true`, но Type.GetType("Int32"). Возвращает HasElementType `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3202">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="92aaa-3203">Также возвращает HasElementType `true` для «Int32 \*» и «Int32 &».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3203">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="92aaa-3204">Если текущий <xref:System.Type> представляет универсальный тип или параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3204">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3205">В следующем примере возвращается `true` или `false` в зависимости от того, является ли объект является массивом, ссылочный тип или указатель.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3205">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3206">При переопределении в производном классе реализует свойство <see cref="P:System.Type.HasElementType" /> и определяет, что содержится в текущем объекте <see cref="T:System.Type" />: непосредственно другой тип или же указывающая на него ссылка (иными словами, является ли текущий объект <see cref="T:System.Type" /> массивом, указателем или параметром или же он передается по ссылке).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3206">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3207">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является массивом, указателем или параметром, переданным по ссылке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3207"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3208">Например, Type.GetType("Int32[]"). Возвращает HasElementTypeImpl `true`, но Type.GetType("Int32"). Возвращает HasElementTypeImpl `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3208">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="92aaa-3209">Также возвращает HasElementTypeImpl `true` для «Int32 \*» и «Int32 &».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3209">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3210">В следующем примере определяется класс `MyTypeDelegator`, переопределяющий `HasElementTypeImpl` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3210">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="92aaa-3211">Главный класс проверяет `HasElementType` свойства и отображает тип элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3211">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-3212">Вызывает определенный член текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3212">Invokes a specific member of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="args" Type="System.Object[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-3213">Строка, содержащая имя вызываемого элемента — конструктора, метода, свойства или поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3213">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="92aaa-3214">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3214">-or-</span></span> 
<span data-ttu-id="92aaa-3215">Пустая строка ("") — в этом случае будет вызван член по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3215">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="92aaa-3216">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3216">-or-</span></span> 
<span data-ttu-id="92aaa-3217">Для членов <see langword="IDispatch" /> — строка, представляющая идентификатор DispID, например "[DispID=3]".</span><span class="sxs-lookup"><span data-stu-id="92aaa-3217">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="92aaa-3218">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3218">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span> <span data-ttu-id="92aaa-3219">Тип доступа может быть обозначен одним из флагов <see langword="BindingFlags" />, например <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> и т.д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3219">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="92aaa-3220">Тип поиска указывать необязательно.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3220">The type of lookup need not be specified.</span></span> <span data-ttu-id="92aaa-3221">Если тип поиска не указан, используются флаги <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3221">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-3222">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3222">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-3223">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3223">-or-</span></span> 
<span data-ttu-id="92aaa-3224">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3224">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="92aaa-3225">Обратите внимание, что для успешного вызова перегруженных версий метода с переменными аргументами может потребоваться явное объявление объекта <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3225">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="92aaa-3226">Объект, для которого следует вызвать указанный член.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3226">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="92aaa-3227">Массив с аргументами, передаваемыми вызываемому члену.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3227">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <summary><span data-ttu-id="92aaa-3228">Вызывает указанный член, соответствующий заданным ограничениям привязки и указанному списку аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3228">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3229">Объект, представляющий возвращаемое значение вызываемого элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3229">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3230">Нельзя использовать <xref:System.Type.InvokeMember%2A> для вызова универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3230">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="92aaa-3231">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3231">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-3232">Укажите `BindingFlags.Public` для включения в поиск открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3232">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-3233">Укажите `BindingFlags.NonPublic` с участием не являющиеся открытыми (то есть, закрытые и защищенные члены) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3233">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-3234">Укажите `BindingFlags.FlattenHierarchy` включать статические члены вверху иерархии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3234">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="92aaa-3235">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3235">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-3236">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3236">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-3237">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3237">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-3238">Следующие <xref:System.Reflection.BindingFlags> флаги вызова можно использовать для обозначения того, какое действие необходимо выполнить с элементом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3238">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="92aaa-3239">`CreateInstance` для вызова конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3239">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="92aaa-3240">`name` учитывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3240">`name` is ignored.</span></span> <span data-ttu-id="92aaa-3241">Не является допустимым с другими флагами вызова.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3241">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="92aaa-3242">`InvokeMethod` для вызова метода, но не конструктор или инициализатор типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3242">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="92aaa-3243">Не является допустимым с `SetField` или `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3243">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="92aaa-3244">Если `InvokeMethod` указан сам по себе `BindingFlags.Public`, `BindingFlags.Instance`, и `BindingFlags.Static` включаются автоматически.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3244">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="92aaa-3245">`GetField` Чтобы получить значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3245">`GetField` to get the value of a field.</span></span> <span data-ttu-id="92aaa-3246">Не является допустимым с `SetField`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3246">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="92aaa-3247">`SetField` Чтобы задать значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3247">`SetField` to set the value of a field.</span></span> <span data-ttu-id="92aaa-3248">Не является допустимым с `GetField`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3248">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="92aaa-3249">`GetProperty` Для получения свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3249">`GetProperty` to get a property.</span></span> <span data-ttu-id="92aaa-3250">Не является допустимым с `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3250">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="92aaa-3251">`SetProperty` Чтобы задать свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3251">`SetProperty` to set a property.</span></span> <span data-ttu-id="92aaa-3252">Не является допустимым с `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3252">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="92aaa-3253">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3253">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-3254">Метод будет вызван, если выполняются оба из следующих условий:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3254">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="92aaa-3255">Число параметров в объявлении метода равно количеству аргументов в `args` массива (если аргументы по умолчанию не определены в элементе и `BindingFlags.OptionalParamBinding` указан).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3255">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="92aaa-3256">Тип каждого аргумента можно преобразовать связывателем тип параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3256">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="92aaa-3257">Связыватель находит все совпадающие методы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3257">The binder will find all of the matching methods.</span></span> <span data-ttu-id="92aaa-3258">Эти методы находятся в зависимости от типа связывания (<xref:System.Reflection.BindingFlags> значения `InvokeMethod`, `GetProperty`, и так далее).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3258">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="92aaa-3259">Набор методов фильтруется по имени, количество аргументов и набора модификаторов поиска, определенных в модуле привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3259">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="92aaa-3260">После выбора метода он вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3260">After the method is selected, it is invoked.</span></span> <span data-ttu-id="92aaa-3261">На этом этапе проверяется доступность.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3261">Accessibility is checked at that point.</span></span> <span data-ttu-id="92aaa-3262">Средство поиска может управлять поиском на основе атрибута доступности, связанное с методом, какой набор методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3262">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="92aaa-3263"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Метод <xref:System.Reflection.Binder> класс отвечает за выбор вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3263">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="92aaa-3264">Связыватель по умолчанию выбирает наиболее точное соответствие.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3264">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="92aaa-3265">Ограничения доступа игнорируются для полностью доверенного кода; то есть закрытые конструкторы, методы, поля и свойства можно получить доступ и вызывать через <xref:System.Reflection> каждый раз, когда код имеет полное доверие.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3265">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="92aaa-3266">Можно использовать `Type.InvokeMember` присвоено конкретное значение поля, указав <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3266">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="92aaa-3267">Например, если вы хотите задать полю открытого экземпляра F класса C, а F — `String`, можно использовать код, такие как:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3267">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="92aaa-3268">Если F `String[]`, можно использовать код, такие как:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3268">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="92aaa-3269">который будет инициализировать поля F этот новый массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3269">which will initialize the field F to this new array.</span></span> <span data-ttu-id="92aaa-3270">Можно также использовать `Type.InvokeMember` задать для позиции в массиве, указав индекс значение, а затем следующее значение, используя следующий код:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3270">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="92aaa-3271">Это изменит строка «z» в массиве F строку «b».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3271">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="92aaa-3272">При вызове `IDispatch` member, укажите идентификатор DispID вместо имени члена, используя формат строки «[DispID = ##]».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3272">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="92aaa-3273">Например, если идентификатор DispID MyComMethod равно 3, можно указать строку «[DispID = 3]» вместо «MyComMethod».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3273">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="92aaa-3274">Вызов члена с DispID выполняется быстрее, чем поиск элемента по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3274">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="92aaa-3275">В сложных сценариях агрегирования идентификатор DispID иногда является единственным способом вызова необходимого члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3275">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3276">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающий объект получил <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг и если набор прав необщедоступные члены ограничена вызывающего предоставить набор или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3276">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="92aaa-3277">(См. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="92aaa-3277">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="92aaa-3278">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3278">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3279">В следующем примере используется `InvokeMember` для доступа к членам типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3279">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-3280"><paramref name="invokeAttr" /> не содержит <see langword="CreateInstance" />, а <paramref name="name" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3280"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3281"><paramref name="invokeAttr" /> не является допустимым атрибутом <see cref="T:System.Reflection.BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3281"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="92aaa-3282">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3282">-or-</span></span> 
 <span data-ttu-id="92aaa-3283"><paramref name="invokeAttr" /> не содержит одного из следующих флагов привязки: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3283"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3284">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3284">-or-</span></span> 
 <span data-ttu-id="92aaa-3285"><paramref name="invokeAttr" /> содержит <see langword="CreateInstance" /> в сочетании с <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3285"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3286">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3286">-or-</span></span> 
 <span data-ttu-id="92aaa-3287"><paramref name="invokeAttr" /> содержит как <see langword="GetField" />, так и <see langword="SetField" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3287"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="92aaa-3288">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3288">-or-</span></span> 
 <span data-ttu-id="92aaa-3289"><paramref name="invokeAttr" /> содержит как <see langword="GetProperty" />, так и <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3289"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3290">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3290">-or-</span></span> 
 <span data-ttu-id="92aaa-3291"><paramref name="invokeAttr" /> содержит <see langword="InvokeMethod" /> в сочетании с <see langword="SetField" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3291"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3292">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3292">-or-</span></span> 
 <span data-ttu-id="92aaa-3293"><paramref name="invokeAttr" /> содержит <see langword="SetField" />, а <paramref name="args" /> содержит более одного элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3293"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="92aaa-3294">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3294">-or-</span></span> 
<span data-ttu-id="92aaa-3295">Этот метод вызывается для объекта COM, и один из следующих флагов привязки не был передан: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> или <see langword="BindingFlags.PutRefDispProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3295">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3296">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3296">-or-</span></span> 
<span data-ttu-id="92aaa-3297">Один из массивов именованных параметров содержит строку, имеющую значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3297">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="92aaa-3298">Указанный член является инициализатором класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3298">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="92aaa-3299">Невозможно найти поле или свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3299">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="92aaa-3300">Невозможно найти метод, который соответствует аргументам в <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3300">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="92aaa-3301">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3301">-or-</span></span> 
<span data-ttu-id="92aaa-3302">Текущий объект <see cref="T:System.Type" /> представляет тип, содержащий параметры открытого типа, то есть <see cref="P:System.Type.ContainsGenericParameters" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3302">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="92aaa-3303">Невозможно вызвать указанный член для <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3303">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-3304">Несколько методов соответствуют критериям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3304">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-3305">Платформа .NET Compact Framework сейчас не поддерживает этот метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3305">The .NET Compact Framework does not currently support this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-3306">Метод, представленный <paramref name="name" />, имеет один или несколько незаданных параметров универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3306">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="92aaa-3307">То есть свойство <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> метода возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3307">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="92aaa-3308">для доступа к закрытым членам, независимо от их разрешений набора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3308">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="92aaa-3309">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="92aaa-3309">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="92aaa-3310">на вызов неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3310">to call unmanaged code.</span></span> <span data-ttu-id="92aaa-3311">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="92aaa-3311">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="args" Type="System.Object[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-3312">Строка, содержащая имя вызываемого элемента — конструктора, метода, свойства или поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3312">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="92aaa-3313">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3313">-or-</span></span> 
<span data-ttu-id="92aaa-3314">Пустая строка ("") — в этом случае будет вызван член по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3314">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="92aaa-3315">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3315">-or-</span></span> 
<span data-ttu-id="92aaa-3316">Для членов <see langword="IDispatch" /> — строка, представляющая идентификатор DispID, например "[DispID=3]".</span><span class="sxs-lookup"><span data-stu-id="92aaa-3316">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="92aaa-3317">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3317">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span> <span data-ttu-id="92aaa-3318">Тип доступа может быть обозначен одним из флагов <see langword="BindingFlags" />, например <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> и т.д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3318">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="92aaa-3319">Тип поиска указывать необязательно.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3319">The type of lookup need not be specified.</span></span> <span data-ttu-id="92aaa-3320">Если тип поиска не указан, используются флаги <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3320">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-3321">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3321">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-3322">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3322">-or-</span></span> 
<span data-ttu-id="92aaa-3323">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3323">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="92aaa-3324">Обратите внимание, что для успешного вызова перегруженных версий метода с переменными аргументами может потребоваться явное объявление объекта <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3324">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="92aaa-3325">Объект, для которого следует вызвать указанный член.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3325">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="92aaa-3326">Массив с аргументами, передаваемыми вызываемому члену.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3326">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="culture"><span data-ttu-id="92aaa-3327">Объект, представляющий используемые языковые стандарты глобализации. Его задание может понадобиться для выполнения преобразований, зависящих от языкового стандарта, например преобразования числовой строки <see cref="T:System.String" /> к типу <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3327">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span></span>  
  
<span data-ttu-id="92aaa-3328">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3328">-or-</span></span> 
<span data-ttu-id="92aaa-3329">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования объекта <see cref="T:System.Globalization.CultureInfo" /> текущего потока.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3329">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-3330">Вызывает указанный член, соответствующий заданным ограничениям привязки, списку аргументов, а также языку и региональным параметрам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3330">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3331">Объект, представляющий возвращаемое значение вызываемого элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3331">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3332">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Globalization.CultureInfo> ( `culture` параметр), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `culture`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3332">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3333">Нельзя использовать <xref:System.Type.InvokeMember%2A> для вызова универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3333">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="92aaa-3334">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3334">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-3335">Укажите `BindingFlags.Public` для включения в поиск открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3335">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-3336">Укажите `BindingFlags.NonPublic` с участием не являющиеся открытыми (то есть внутренней, закрытые и защищенные члены) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3336">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-3337">Укажите `BindingFlags.FlattenHierarchy` включать статические члены вверху иерархии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3337">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="92aaa-3338">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3338">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-3339">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3339">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-3340">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3340">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-3341">Следующие <xref:System.Reflection.BindingFlags> флаги вызова можно использовать для обозначения того, какое действие необходимо выполнить с элементом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3341">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="92aaa-3342">`CreateInstance` для вызова конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3342">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="92aaa-3343">`name` учитывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3343">`name` is ignored.</span></span> <span data-ttu-id="92aaa-3344">Не является допустимым с другими флагами вызова.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3344">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="92aaa-3345">`InvokeMethod` для вызова метода, но не конструктор или инициализатор типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3345">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="92aaa-3346">Не является допустимым с `SetField` или `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3346">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="92aaa-3347">Если `InvokeMethod` указан сам по себе `BindingFlags.Public`, `BindingFlags.Instance`, и `BindingFlags.Static` включаются автоматически.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3347">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="92aaa-3348">`GetField` Чтобы получить значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3348">`GetField` to get the value of a field.</span></span> <span data-ttu-id="92aaa-3349">Не является допустимым с `SetField`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3349">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="92aaa-3350">`SetField` Чтобы задать значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3350">`SetField` to set the value of a field.</span></span> <span data-ttu-id="92aaa-3351">Не является допустимым с `GetField`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3351">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="92aaa-3352">`GetProperty` Для получения свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3352">`GetProperty` to get a property.</span></span> <span data-ttu-id="92aaa-3353">Не является допустимым с `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3353">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="92aaa-3354">`SetProperty` Чтобы задать свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3354">`SetProperty` to set a property.</span></span> <span data-ttu-id="92aaa-3355">Не является допустимым с `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3355">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="92aaa-3356">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3356">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-3357">Метод будет вызван, если выполняются оба из следующих условий:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3357">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="92aaa-3358">Число параметров в объявлении метода равно количеству аргументов в `args` массива (если аргументы по умолчанию не определены в элементе и `BindingFlags.OptionalParamBinding` указан).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3358">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="92aaa-3359">Тип каждого аргумента можно преобразовать связывателем тип параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3359">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="92aaa-3360">Связыватель находит все совпадающие методы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3360">The binder will find all of the matching methods.</span></span> <span data-ttu-id="92aaa-3361">Эти методы находятся в зависимости от типа связывания (<xref:System.Reflection.BindingFlags> значения `InvokeMethod`, `GetProperty`, и так далее).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3361">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="92aaa-3362">Набор методов фильтруется по имени, количество аргументов и набора модификаторов поиска, определенных в модуле привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3362">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="92aaa-3363">После выбора метода он вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3363">After the method is selected, it is invoked.</span></span> <span data-ttu-id="92aaa-3364">На этом этапе проверяется доступность.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3364">Accessibility is checked at that point.</span></span> <span data-ttu-id="92aaa-3365">Средство поиска может управлять поиском на основе атрибута доступности, связанное с методом, какой набор методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3365">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="92aaa-3366"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Метод <xref:System.Reflection.Binder> класс отвечает за выбор вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3366">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="92aaa-3367">Связыватель по умолчанию выбирает наиболее точное соответствие.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3367">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="92aaa-3368">Ограничения доступа игнорируются для полностью доверенного кода; то есть закрытые конструкторы, методы, поля и свойства можно получить доступ к и вызывается через отражение, если код является полностью доверенным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3368">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="92aaa-3369">Можно использовать `Type.InvokeMember` присвоено конкретное значение поля, указав <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3369">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="92aaa-3370">Например, если вы хотите задать полю открытого экземпляра F класса C, а F — `String` можно использовать код, такие как:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3370">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="92aaa-3371">Если F `String[]`, можно использовать код, такие как:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3371">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="92aaa-3372">который будет инициализировать поля F этот новый массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3372">which will initialize the field F to this new array.</span></span> <span data-ttu-id="92aaa-3373">Можно также использовать `Type.InvokeMember` задать для позиции в массиве, указав индекс значение, а затем следующее значение, используя следующий код:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3373">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="92aaa-3374">Это изменит строка «z» в массиве F строку «b».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3374">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="92aaa-3375">При вызове `IDispatch` член, можно указать идентификатор DispID вместо имени члена, используя формат строки «[DispID = ##]».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3375">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="92aaa-3376">Например, если идентификатор DispID MyComMethod равно 3, можно указать строку «[DispID = 3]» вместо «MyComMethod».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3376">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="92aaa-3377">Вызов члена с DispID выполняется быстрее, чем поиск элемента по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3377">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="92aaa-3378">В сложных сценариях агрегирования идентификатор DispID иногда является единственным способом вызова необходимого члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3378">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3379">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающий объект получил <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг и если набор прав необщедоступные члены ограничена вызывающего предоставить набор или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3379">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="92aaa-3380">(См. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="92aaa-3380">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="92aaa-3381">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3381">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-3382"><paramref name="invokeAttr" /> не содержит <see langword="CreateInstance" />, а <paramref name="name" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3382"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3383"><paramref name="invokeAttr" /> не является допустимым атрибутом <see cref="T:System.Reflection.BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3383"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="92aaa-3384">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3384">-or-</span></span> 
 <span data-ttu-id="92aaa-3385"><paramref name="invokeAttr" /> не содержит одного из следующих флагов привязки: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3385"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3386">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3386">-or-</span></span> 
 <span data-ttu-id="92aaa-3387"><paramref name="invokeAttr" /> содержит <see langword="CreateInstance" /> в сочетании с <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3387"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3388">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3388">-or-</span></span> 
 <span data-ttu-id="92aaa-3389"><paramref name="invokeAttr" /> содержит как <see langword="GetField" />, так и <see langword="SetField" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3389"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="92aaa-3390">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3390">-or-</span></span> 
 <span data-ttu-id="92aaa-3391"><paramref name="invokeAttr" /> содержит как <see langword="GetProperty" />, так и <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3391"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3392">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3392">-or-</span></span> 
 <span data-ttu-id="92aaa-3393"><paramref name="invokeAttr" /> содержит <see langword="InvokeMethod" /> в сочетании с <see langword="SetField" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3393"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3394">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3394">-or-</span></span> 
 <span data-ttu-id="92aaa-3395"><paramref name="invokeAttr" /> содержит <see langword="SetField" />, а <paramref name="args" /> содержит более одного элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3395"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="92aaa-3396">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3396">-or-</span></span> 
<span data-ttu-id="92aaa-3397">Этот метод вызывается для объекта COM, и один из следующих флагов привязки не был передан: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> или <see langword="BindingFlags.PutRefDispProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3397">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3398">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3398">-or-</span></span> 
<span data-ttu-id="92aaa-3399">Один из массивов именованных параметров содержит строку, имеющую значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3399">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="92aaa-3400">Указанный член является инициализатором класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3400">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="92aaa-3401">Невозможно найти поле или свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3401">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="92aaa-3402">Невозможно найти метод, который соответствует аргументам в <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3402">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="92aaa-3403">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3403">-or-</span></span> 
<span data-ttu-id="92aaa-3404">Текущий объект <see cref="T:System.Type" /> представляет тип, содержащий параметры открытого типа, то есть <see cref="P:System.Type.ContainsGenericParameters" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3404">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="92aaa-3405">Невозможно вызвать указанный член для <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3405">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-3406">Несколько методов соответствуют критериям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3406">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-3407">Метод, представленный <paramref name="name" />, имеет один или несколько незаданных параметров универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3407">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="92aaa-3408">То есть свойство <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> метода возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3408">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="92aaa-3409">для доступа к закрытым членам, независимо от их разрешений набора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3409">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="92aaa-3410">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="92aaa-3410">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="92aaa-3411">на вызов неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3411">to call unmanaged code.</span></span> <span data-ttu-id="92aaa-3412">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="92aaa-3412">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Reflection.Binder" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="args" Type="System.Object[]" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="namedParameters" Type="System.String[]" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92aaa-3413">Строка, содержащая имя вызываемого элемента — конструктора, метода, свойства или поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3413">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="92aaa-3414">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3414">-or-</span></span> 
<span data-ttu-id="92aaa-3415">Пустая строка ("") — в этом случае будет вызван член по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3415">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="92aaa-3416">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3416">-or-</span></span> 
<span data-ttu-id="92aaa-3417">Для членов <see langword="IDispatch" /> — строка, представляющая идентификатор DispID, например "[DispID=3]".</span><span class="sxs-lookup"><span data-stu-id="92aaa-3417">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="92aaa-3418">Побитовое сочетание значений перечисления, указывающих способ проведения поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3418">A bitwise combination of the enumeration values that specify how the search is conducted.</span></span> <span data-ttu-id="92aaa-3419">Тип доступа может быть обозначен одним из флагов <see langword="BindingFlags" />, например <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> и т.д.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3419">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="92aaa-3420">Тип поиска указывать необязательно.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3420">The type of lookup need not be specified.</span></span> <span data-ttu-id="92aaa-3421">Если тип поиска не указан, используются флаги <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3421">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="92aaa-3422">Объект, определяющий набор свойств и разрешающий привязку, что может включать выбор перегруженных методов, приведение типов аргументов и вызов члена с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3422">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="92aaa-3423">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3423">-or-</span></span> 
<span data-ttu-id="92aaa-3424">Пустая ссылка (Nothing в Visual Basic) для использования свойства <see cref="P:System.Type.DefaultBinder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3424">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="92aaa-3425">Обратите внимание, что для успешного вызова перегруженных версий метода с переменными аргументами может потребоваться явное объявление объекта <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3425">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="92aaa-3426">Объект, для которого следует вызвать указанный член.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3426">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="92aaa-3427">Массив с аргументами, передаваемыми вызываемому члену.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3427">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="modifiers"><span data-ttu-id="92aaa-3428">Массив объектов <see cref="T:System.Reflection.ParameterModifier" />, представляющих атрибуты, связанные с соответствующим элементом в массиве <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3428">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array.</span></span> <span data-ttu-id="92aaa-3429">Атрибуты, связанные с параметром, хранятся в сигнатуре члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3429">A parameter's associated attributes are stored in the member's signature.</span></span>  
  
<span data-ttu-id="92aaa-3430">Связыватель по умолчанию обрабатывает этот параметр только при вызове COM-компонента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3430">The default binder processes this parameter only when calling a COM component.</span></span></param>
        <param name="culture"><span data-ttu-id="92aaa-3431">Объект <see cref="T:System.Globalization.CultureInfo" />, представляющий используемый языковой стандарт глобализации. Он может понадобиться для выполнения преобразований, зависящих от языкового стандарта, например приведения числа в строковом формате к типу Double.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3431">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="92aaa-3432">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3432">-or-</span></span> 
<span data-ttu-id="92aaa-3433">Пустая ссылка (<see langword="Nothing" /> в Visual Basic) для использования объекта <see cref="T:System.Globalization.CultureInfo" /> текущего потока.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3433">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="92aaa-3434">Массив, содержащий имена параметров, в которые передаются значения элементов массива <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3434">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</span></span></param>
        <summary><span data-ttu-id="92aaa-3435">При переопределении в производном классе вызывает указанный член, соответствующий заданным ограничениям привязки, списку аргументов, модификаторов, а также языку и региональным параметрам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3435">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3436">Объект, представляющий возвращаемое значение вызываемого элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3436">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3437">`InvokeMember` вызывает член-конструктор или метод, возвращает или задает свойство-член, Получает или задает элемент поля данных, или возвращает или задает элемент массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3437">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3438">Нельзя использовать <xref:System.Type.InvokeMember%2A> для вызова универсального метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3438">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="92aaa-3439">При вызове `IDispatch` член, можно указать идентификатор DispID вместо имени члена, используя формат строки «[DispID = ##]».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3439">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="92aaa-3440">Например, если идентификатор DispID MyComMethod равно 3, можно указать строку «[DispID = 3]» вместо «MyComMethod».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3440">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="92aaa-3441">Вызов члена с DispID выполняется быстрее, чем поиск элемента по имени.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3441">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="92aaa-3442">В сложных сценариях агрегирования идентификатор DispID иногда является единственным способом вызова необходимого члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3442">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="92aaa-3443">Несмотря на то, что связыватель по умолчанию не выполняет <xref:System.Reflection.ParameterModifier> или <xref:System.Globalization.CultureInfo> ( `modifiers` и `culture` параметров), можно использовать абстрактный <xref:System.Reflection.Binder?displayProperty=nameWithType> класс для написания пользовательский модуль привязки, который выполняет обработку `modifiers` и `culture`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3443">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="92aaa-3444">`ParameterModifier` используется только при вызове посредством COM-взаимодействия и обрабатываются только те параметры, которые передаются по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3444">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="92aaa-3445">Каждый параметр в массиве `namedParameters` получает значение в соответствующем элементе в массиве `args`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3445">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="92aaa-3446">Если длина `args` превышает длину `namedParameters`, оставшиеся значения аргументов передаются по порядку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3446">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="92aaa-3447">`namedParameters` Массива можно использовать для изменения порядка аргументов в входного массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3447">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="92aaa-3448">Например, если метод `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` в Visual Basic) и входной массив `{ 42, "x" }`, входной массив может передаваться в неизмененном виде `args` Если массив `{ "b", "a" }` предоставляется для `namedParameters`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3448">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="92aaa-3449">Следующие <xref:System.Reflection.BindingFlags> флаги фильтра можно использовать для определения, какие члены следует включить в поиск:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3449">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="92aaa-3450">Укажите `BindingFlags.Public` для включения в поиск открытых членов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3450">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-3451">Укажите `BindingFlags.NonPublic` с участием не являющиеся открытыми (то есть внутренней, закрытые и защищенные члены) для поиска.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3451">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="92aaa-3452">Укажите `BindingFlags.FlattenHierarchy` включать статические члены вверху иерархии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3452">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="92aaa-3453">Следующие <xref:System.Reflection.BindingFlags> флаги модификаторов, которые можно использовать для изменения условий поиска:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3453">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="92aaa-3454">`BindingFlags.IgnoreCase` Чтобы игнорировать регистр `name`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3454">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="92aaa-3455">`BindingFlags.DeclaredOnly` для поиска только члены, объявленные на <xref:System.Type>, не те члены, унаследованные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3455">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="92aaa-3456">Следующие <xref:System.Reflection.BindingFlags> флаги вызова можно использовать для обозначения того, какое действие необходимо выполнить с элементом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3456">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="92aaa-3457">`CreateInstance` для вызова конструктора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3457">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="92aaa-3458">`name` учитывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3458">`name` is ignored.</span></span> <span data-ttu-id="92aaa-3459">Не является допустимым с другими флагами вызова.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3459">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="92aaa-3460">`InvokeMethod` для вызова метода, но не конструктор или инициализатор типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3460">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="92aaa-3461">Не является допустимым с `SetField` или `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3461">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="92aaa-3462">Если `InvokeMethod` указан сам по себе `BindingFlags.Public`, `BindingFlags.Instance`, и `BindingFlags.Static` включаются автоматически.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3462">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="92aaa-3463">`GetField` Чтобы получить значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3463">`GetField` to get the value of a field.</span></span> <span data-ttu-id="92aaa-3464">Не является допустимым с `SetField`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3464">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="92aaa-3465">`SetField` Чтобы задать значение поля.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3465">`SetField` to set the value of a field.</span></span> <span data-ttu-id="92aaa-3466">Не является допустимым с `GetField`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3466">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="92aaa-3467">`GetProperty` Для получения свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3467">`GetProperty` to get a property.</span></span> <span data-ttu-id="92aaa-3468">Не является допустимым с `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3468">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="92aaa-3469">`SetProperty` Чтобы задать свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3469">`SetProperty` to set a property.</span></span> <span data-ttu-id="92aaa-3470">Не является допустимым с `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3470">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="92aaa-3471">Дополнительные сведения см. в разделе <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3471">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="92aaa-3472">Метод будет вызван, если выполняются оба из следующих условий:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3472">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="92aaa-3473">Число параметров в объявлении метода равно количеству аргументов в `args` массива (если аргументы по умолчанию не определены в элементе и `BindingFlags.OptionalParamBinding` указан).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3473">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="92aaa-3474">Тип каждого аргумента можно преобразовать связывателем тип параметра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3474">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="92aaa-3475">Связыватель находит все совпадающие методы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3475">The binder will find all of the matching methods.</span></span> <span data-ttu-id="92aaa-3476">Эти методы находятся в зависимости от типа связывания (<xref:System.Reflection.BindingFlags> значения `InvokeMethod`, `GetProperty`, и так далее).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3476">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="92aaa-3477">Набор методов фильтруется по имени, количество аргументов и набора модификаторов поиска, определенных в модуле привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3477">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="92aaa-3478">После выбора метода он вызывается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3478">After the method is selected, it is invoked.</span></span> <span data-ttu-id="92aaa-3479">На этом этапе проверяется доступность.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3479">Accessibility is checked at that point.</span></span> <span data-ttu-id="92aaa-3480">Средство поиска может управлять поиском на основе атрибута доступности, связанное с методом, какой набор методов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3480">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="92aaa-3481"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Метод <xref:System.Reflection.Binder> класс отвечает за выбор вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3481">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="92aaa-3482">Связыватель по умолчанию выбирает наиболее точное соответствие.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3482">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="92aaa-3483">`InvokeMember` можно использовать для вызова методов с параметрами, которые имеют значения по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3483">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="92aaa-3484">Чтобы привязать эти методы, требует отражения <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> указывать.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3484">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="92aaa-3485">Для параметра, который имеет значение по умолчанию, можно указать другое значение, или предоставить <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> использовать значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3485">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="92aaa-3486">Например, рассмотрим метод, например MyMethod (int x, y с плавающей запятой = 2.0).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3486">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="92aaa-3487">Чтобы вызвать этот метод только с первым аргументом, как MyMethod(4), передать один из упомянутых выше флагов привязки и два аргумента, а именно, 4 для первого аргумента и `Missing.Value` второго аргумента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3487">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="92aaa-3488">Если вы не используете `Missing.Value`, можно не опускать необязательные параметры с `Invoke` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3488">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="92aaa-3489">Если это необходимо сделать, используйте `InvokeMember` вместо этого.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3489">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="92aaa-3490">Ограничения доступа игнорируются для полностью доверенного кода; то есть закрытые конструкторы, методы, поля и свойства можно получить доступ и вызывать через <xref:System.Reflection> каждый раз, когда код имеет полное доверие.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3490">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="92aaa-3491">Можно использовать `Type.InvokeMember` присвоено конкретное значение поля, указав <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3491">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="92aaa-3492">Например, если вы хотите задать полю открытого экземпляра F класса C, а F — `String`, можно использовать код, такие как:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3492">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="92aaa-3493">Если F `String[]`, можно использовать код, такие как:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3493">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="92aaa-3494">который будет инициализировать поля F этот новый массив.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3494">which will initialize the field F to this new array.</span></span> <span data-ttu-id="92aaa-3495">Можно также использовать `Type.InvokeMember` задать для позиции в массиве, указав индекс значение, а затем следующее значение, используя следующий код:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3495">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="92aaa-3496">Это изменит строка «z» в массиве F строку «b».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3496">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3497">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающий объект получил <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг и если набор прав необщедоступные члены ограничена вызывающего предоставить набор или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3497">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="92aaa-3498">(См. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="92aaa-3498">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="92aaa-3499">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3499">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-3500"><paramref name="invokeAttr" /> не содержит <see langword="CreateInstance" />, а <paramref name="name" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3500"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3501"><paramref name="args" /> и <paramref name="modifiers" /> имеют разную длину.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3501"><paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span></span>  
  
<span data-ttu-id="92aaa-3502">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3502">-or-</span></span> 
 <span data-ttu-id="92aaa-3503"><paramref name="invokeAttr" /> не является допустимым атрибутом <see cref="T:System.Reflection.BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3503"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="92aaa-3504">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3504">-or-</span></span> 
 <span data-ttu-id="92aaa-3505"><paramref name="invokeAttr" /> не содержит одного из следующих флагов привязки: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3505"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3506">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3506">-or-</span></span> 
 <span data-ttu-id="92aaa-3507"><paramref name="invokeAttr" /> содержит <see langword="CreateInstance" /> в сочетании с <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3507"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3508">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3508">-or-</span></span> 
 <span data-ttu-id="92aaa-3509"><paramref name="invokeAttr" /> содержит как <see langword="GetField" />, так и <see langword="SetField" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3509"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="92aaa-3510">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3510">-or-</span></span> 
 <span data-ttu-id="92aaa-3511"><paramref name="invokeAttr" /> содержит как <see langword="GetProperty" />, так и <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3511"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3512">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3512">-or-</span></span> 
 <span data-ttu-id="92aaa-3513"><paramref name="invokeAttr" /> содержит <see langword="InvokeMethod" /> в сочетании с <see langword="SetField" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3513"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3514">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3514">-or-</span></span> 
 <span data-ttu-id="92aaa-3515"><paramref name="invokeAttr" /> содержит <see langword="SetField" />, а <paramref name="args" /> содержит более одного элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3515"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="92aaa-3516">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3516">-or-</span></span> 
<span data-ttu-id="92aaa-3517">Массив именованных параметров больше, чем массив аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3517">The named parameter array is larger than the argument array.</span></span>  
  
<span data-ttu-id="92aaa-3518">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3518">-or-</span></span> 
<span data-ttu-id="92aaa-3519">Этот метод вызывается для объекта COM, и один из следующих флагов привязки не был передан: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> или <see langword="BindingFlags.PutRefDispProperty" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3519">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="92aaa-3520">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3520">-or-</span></span> 
<span data-ttu-id="92aaa-3521">Один из массивов именованных параметров содержит строку, имеющую значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3521">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="92aaa-3522">Указанный член является инициализатором класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3522">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="92aaa-3523">Невозможно найти поле или свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3523">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="92aaa-3524">Невозможно найти метод, который соответствует аргументам в <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3524">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="92aaa-3525">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3525">-or-</span></span> 
<span data-ttu-id="92aaa-3526">Невозможно найти члены с именами аргументов, указанными в <paramref name="namedParameters" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3526">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span></span>  
  
<span data-ttu-id="92aaa-3527">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-3527">-or-</span></span> 
<span data-ttu-id="92aaa-3528">Текущий объект <see cref="T:System.Type" /> представляет тип, содержащий параметры открытого типа, то есть <see cref="P:System.Type.ContainsGenericParameters" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3528">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="92aaa-3529">Невозможно вызвать указанный член для <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3529">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="92aaa-3530">Несколько методов соответствуют критериям привязки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3530">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-3531">Метод, представленный <paramref name="name" />, имеет один или несколько незаданных параметров универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3531">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="92aaa-3532">То есть свойство <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> метода возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3532">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="92aaa-3533">для доступа к закрытым членам, независимо от их разрешений набора.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3533">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="92aaa-3534">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="92aaa-3534">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="92aaa-3535">на вызов неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3535">to call unmanaged code.</span></span> <span data-ttu-id="92aaa-3536">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="92aaa-3536">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3537">Возвращает значение, показывающее, является ли данный объект <see cref="T:System.Type" /> абстрактным объектом, который должен быть переопределен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3537">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span></span></summary>
        <value><span data-ttu-id="92aaa-3538">Значение <see langword="true" />, если класс <see cref="T:System.Type" /> является абстрактным; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3538"><see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3539"><xref:System.Type.IsAbstract%2A> Возвращает `true` в следующих случаях:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3539">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="92aaa-3540">Текущий тип является абстрактным. то есть он не может быть создан, но только может служить базовым классом для производных классов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3540">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="92aaa-3541">В C#, абстрактные классы отмечены [абстрактный](~/docs/csharp/language-reference/keywords/abstract.md) ключевого слова; в Visual Basic, они будут отмечены [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) ключевое слово.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3541">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="92aaa-3542">Текущий тип является интерфейсом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3542">The current type is an interface.</span></span>  
  
 <span data-ttu-id="92aaa-3543">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3543">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3544">В следующем примере создается массив <xref:System.Type> объекты, представляющие следующие типы: содержит возвращаемые значения типа `true` значение, если указанный объект `abstract`; в противном случае он возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3544">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="92aaa-3545">`AbstractClass`, абстрактный класс (класс, помеченный как `abstract` в C# и `MustInherit` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3545">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="92aaa-3546">`DerivedClass`, который наследует от класса `AbstractClass`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3546">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="92aaa-3547">`SingleClass`, класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3547">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="92aaa-3548">Он определяется как `sealed` в C# и `NotInheritable` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3548">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="92aaa-3549">`ITypeInfo`, интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3549">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="92aaa-3550">`ImplementingClass`, класс, реализующий `ITypeInfo` интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3550">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="92aaa-3551">Этот метод возвращает `true` только для `AbstractClass`, абстрактного класса, и `ITypeInfo`, интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3551">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3552">Возвращает значение, позволяющее определить, выбран ли для объекта <see langword="AnsiClass" /> атрибут формата строки <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3552">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-3553">Значение <see langword="true" />, если для данного объекта <see langword="AnsiClass" /> выбран атрибут формата строки <see cref="T:System.Type" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3553"><see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3554"><xref:System.Reflection.TypeAttributes.StringFormatMask> Выбирает атрибутов формата строки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3554">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="92aaa-3555">Атрибуты формата строки расширяют возможности взаимодействия, определяющий способ интерпретации строки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3555">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="92aaa-3556">Если текущий <xref:System.Type> представляет универсальный тип, это свойство относится к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3556">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3557">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3557">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3558">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3558">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3559">В следующем примере возвращаются сведения и проверяет наличие `AnsiClass` атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3559">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3560">Возвращает значение, показывающее, является ли тип массивом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3560">Gets a value that indicates whether the type is an array.</span></span></summary>
        <value><span data-ttu-id="92aaa-3561">Значение <see langword="true" />, если текущий тип является массивом; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3561"><see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3562"><xref:System.Type.IsArray%2A> Возвращает `false` для <xref:System.Array> класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3562">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="92aaa-3563">Он также возвращает `false` Если текущий экземпляр является <xref:System.Type> , представляющий тип коллекции или интерфейс предназначен для работы с коллекциями, такими как <xref:System.Collections.IEnumerable> или <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3563">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="92aaa-3564">Чтобы проверить наличие массива, используйте следующий код:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3564">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="92aaa-3565">Если текущий тип представляет универсальный тип или параметр типа в определении универсального типа или универсального метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3565">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3566">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3566">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3567">В следующем примере показано использование <xref:System.Type.IsArray%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3567">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3568">При переопределении в производном классе реализует свойство <see cref="P:System.Type.IsArray" /> и определяет, является ли данный объект <see cref="T:System.Type" /> массивом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3568">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3569">Значение <see langword="true" />, если <see cref="T:System.Type" /> является массивом; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3569"><see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3570">Экземпляр <xref:System.Array> должен возвращать класс `false` так, как это объект, не является массивом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3570">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3571">В следующем примере переопределяется `IsArrayImpl` метод в `MyTypeDelegator` класса, проверяется, если переменная является массивом и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3571">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="92aaa-3572">Тип для сравнения с текущим типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3572">The type to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="92aaa-3573">Определяет, можно ли присвоить экземпляр указанного типа переменной текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3573">Determines whether an instance of a specified type can be assigned to a variable of the current type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3574"><see langword="true" />, если истинно любое из следующих условий:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3574"><see langword="true" /> if any of the following conditions is true:</span></span> <span data-ttu-id="92aaa-3575">
-   <paramref name="c" /> и текущий экземпляр принадлежат к одному типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3575">
-   <paramref name="c" /> and the current instance represent the same type.</span></span>  
  <span data-ttu-id="92aaa-3576">
-   <paramref name="c" /> прямо или косвенно унаследован от текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3576">
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span></span> <span data-ttu-id="92aaa-3577">Параметр <paramref name="c" /> является производным непосредственно от текущего экземпляра, если он наследуется от него. Параметр <paramref name="c" /> является косвенно производным от текущего экземпляра, если он наследуется от последовательности одного или нескольких классов, наследуемых от текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3577"><paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span></span>  
  
<span data-ttu-id="92aaa-3578">– Текущий экземпляр является интерфейсом, который реализуется параметром <paramref name="c" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3578">-   The current instance is an interface that <paramref name="c" /> implements.</span></span>  
  <span data-ttu-id="92aaa-3579">
-   <paramref name="c" /> является параметром универсального типа, а текущий экземпляр представляет одно из ограничений, наложенных на параметр <paramref name="c" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3579">
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span></span>  
  
<span data-ttu-id="92aaa-3580">В приведенном ниже примере текущий экземпляр является объектом <see cref="T:System.Type" />, который представляет класс <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3580">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span></span> <span data-ttu-id="92aaa-3581"><c>GenericWithConstraint</c> — это универсальный тип, параметр универсального типа которого должен иметь тип <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3581"><c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="92aaa-3582">Передача этого параметра универсального типа в <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> означает, что экземпляр параметра универсального типа можно присвоить объекту <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3582">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span></span>  
  
<span data-ttu-id="92aaa-3583">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="92aaa-3583">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span></span> <span data-ttu-id="92aaa-3584">
-   <paramref name="c" /> представляет тип значения, а текущий экземпляр представляет <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3584">
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span></span>  
  
 <span data-ttu-id="92aaa-3585">Значение <see langword="false" />, если не выполняется ни одно из этих условий или значение параметра <paramref name="c" /> равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3585"><see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3586"><xref:System.Type.IsAssignableFrom%2A> Метод может использоваться, чтобы определить, является ли экземпляр `c` можно назначить к экземпляру текущего типа, метод, наиболее полезен при обработке объектов, типы которых неизвестны во время разработки и обеспечивает условный Назначение, как в примере ниже показано.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3586">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="92aaa-3587">Этот метод таким образом гарантирует, что строка кода, как следующие будет выполняться во время выполнения без генерации <xref:System.InvalidCastException> исключение или аналогичное исключение:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3587">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="92aaa-3588">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3588">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3589">Определение универсального типа не может быть назначен из закрытого сконструированного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3589">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="92aaa-3590">То есть нельзя назначить закрытым сконструированным типом `MyGenericList<int>` (`MyGenericList(Of Integer)` в Visual Basic) для переменной типа `MyGenericList<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3590">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3591">Если `c` принадлежит к типу <xref:System.Reflection.Emit.TypeBuilder>, то результат основан на тип, который выполняется построение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3591">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="92aaa-3592">В следующем примере кода демонстрируется это использование типа сборки с именем `B`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3592">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3593">В следующем примере демонстрируется `IsAssignableFrom` метод использование определенных классов, массива целых чисел и универсальные шаблоны.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3593">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3594">Возвращает значение, позволяющее определить, выбран ли для объекта <see langword="AutoClass" /> атрибут формата строки <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3594">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-3595">Значение <see langword="true" />, если для данного объекта <see langword="AutoClass" /> выбран атрибут формата строки <see cref="T:System.Type" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3595"><see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3596"><xref:System.Reflection.TypeAttributes.StringFormatMask> Выбирает атрибутов формата строки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3596">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="92aaa-3597">Атрибуты формата строки расширяют возможности взаимодействия, определяющий способ интерпретации строки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3597">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="92aaa-3598">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3598">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3599">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3599">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3600">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3600">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3601">Получает значение, указывающее, выкладываются ли поля текущего типа автоматически средой CLR.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3601">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span></span></summary>
        <value><span data-ttu-id="92aaa-3602">Значение <see langword="true" />, если свойство <see cref="P:System.Type.Attributes" /> текущего типа включает <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3602"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3603">Это свойство предоставляется для удобства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3603">This property is provided as a convenience.</span></span> <span data-ttu-id="92aaa-3604">Кроме того, можно использовать <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> значение перечисления для выбора атрибутов макета типа и проверьте наличие ли <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> имеет значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3604">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="92aaa-3605"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, И <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> значения перечисления определяют способ поля типа располагаются в памяти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3605">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="92aaa-3606">Для динамических типов, можно указать <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> при создании типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3606">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="92aaa-3607">В коде, применить <xref:System.Runtime.InteropServices.StructLayoutAttribute> атрибут <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> значение перечисления в тип, позволяющий определить подходящий способ размещения класса среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3607">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3608">Нельзя использовать <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> метод, чтобы определить, является ли <xref:System.Runtime.InteropServices.StructLayoutAttribute> был применен к типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3608">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="92aaa-3609">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3609">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3610">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="92aaa-3610">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="92aaa-3611">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3611">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3612">В следующем примере создается экземпляр типа и отображает <xref:System.Type.IsAutoLayout%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3612">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="92aaa-3613">Метаданные и компоненты с самоописанием</span><span class="sxs-lookup"><span data-stu-id="92aaa-3613">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3614">Возвращает значение, указывающее, передан ли объект <see cref="T:System.Type" /> по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3614">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span></span></summary>
        <value><span data-ttu-id="92aaa-3615">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> передан по ссылке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3615"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3616">Чтобы получить фактический тип, разыменования тип, который был передан по ссылке, а затем вызовите <xref:System.Type.GetElementType%2A> от конкретного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3616">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3617">В следующем примере показано использование `IsByRef` свойство для проверки, является ли указанный тип передается по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3617">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="92aaa-3618">В примере определяется класс `MyTypeDelegator`, переопределяющий `HasElementTypeImpl` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3618">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="92aaa-3619">Главный класс проверяет `HasElementType` свойства и отображает тип элемента.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3619">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3620">При переопределении в производном классе реализует свойство <see cref="P:System.Type.IsByRef" /> и определяет, передается ли данный объект <see cref="T:System.Type" /> по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3620">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3621">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> передан по ссылке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3621"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3622">Получает значение, позволяющее определить, является объект <see cref="T:System.Type" /> классом или делегатом (иными словами, не является типом значения или интерфейсом).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3622">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span></span></summary>
        <value><span data-ttu-id="92aaa-3623">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является классом; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3623"><see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3624">Это свойство возвращает `true` для классов, а также делегаты.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3624">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="92aaa-3625">Он возвращает `false` для типов значений (для структуры и перечисления) даже в том случае, если они упакованы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3625">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="92aaa-3626">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `true`. Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство возвращает `true` Если определение универсального типа является определение класса; то есть он не определяет интерфейс или типом значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3626">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3627">Это свойство возвращает `true` для `Type` экземпляры, представляющие <xref:System.Enum> и <xref:System.ValueType> классы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3627">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="92aaa-3628">Эти два класса — базовые типы для перечисления и типы значений, соответственно, но они не перечисления или тип значения, сами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3628">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="92aaa-3629">Дополнительные сведения см. в разделе <xref:System.Type.IsValueType%2A> и <xref:System.Type.IsEnum%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3629">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="92aaa-3630"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> Значение перечисления, являющийся отличительным признаком объявление типа, как класс или интерфейс. Тем не менее, классов и типов значений будут отмечены <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> атрибута.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3630">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="92aaa-3631">Если вы извлекаете значение свойства атрибуты типа и используйте <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> значение, чтобы определить, является ли тип класса, а не типом значения, необходимо также вызвать <xref:System.Type.IsValueType%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3631">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="92aaa-3632">Пример для <xref:System.Reflection.TypeAttributes> перечисление содержит дополнительные сведения, а также anexample.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3632">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="92aaa-3633">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3633">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3634">В следующем примере создается экземпляр типа и указывает, является ли тип классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3634">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3635">Возвращает значение, указывающее, является ли объект <see cref="T:System.Type" /> COM-объектом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3635">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span></span></summary>
        <value><span data-ttu-id="92aaa-3636">Значение <see langword="true" />, если <see cref="T:System.Type" /> является COM-объектом, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3636"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3637">Этот метод возвращает `false` для интерфейсов COM, так как они не являются объектами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3637">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="92aaa-3638">COM-интерфейсов может быть реализован объектами Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3638">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="92aaa-3639">Можно также загрузить класс COM и получить `Type` объект для этого класса COM с помощью [Tlbimp.exe (программа импорта библиотек типов)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) средство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3639">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="92aaa-3640">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3640">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3641">Например если текущий <xref:System.Type> представляет `MyGenericType<int`> (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3641">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3642">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3642">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3643">При переопределении в производном классе реализует свойство <see cref="P:System.Type.IsCOMObject" /> и определяет, является ли объект <see cref="T:System.Type" /> COM-объектом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3643">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3644">Значение <see langword="true" />, если <see cref="T:System.Type" /> является COM-объектом, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3644"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3645">Этот метод возвращает `false` для интерфейсов COM, так как они не являются объектами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3645">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="92aaa-3646">COM-интерфейсов может быть реализован объектами Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3646">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3647">Возвращает значение, указывающее, представляет ли этот данный объект сконструированный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3647">Gets a value that indicates whether this object represents a constructed generic type.</span></span> <span data-ttu-id="92aaa-3648">Можно создать экземпляры сконструированного универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3648">You can create instances of a constructed generic type.</span></span></summary>
        <value><span data-ttu-id="92aaa-3649">Значение <see langword="true" />, если этот объект представляет сконструированный универсальный тип; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3649"><see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3650">Сконструированный универсальный тип был явные типы, передаваемые для всех его параметров универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3650">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="92aaa-3651">Он также называется закрытого универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3651">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="92aaa-3652">Если этому свойству присвоено `true`, можно создавать экземпляры текущего типа; в этом случае `false`, вы не можете.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3652">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3653">Возвращает значение, позволяющее определить, можно ли поместить в контекст объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3653">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span></span></summary>
        <value><span data-ttu-id="92aaa-3654">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> может быть помещен в контекст; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3654"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3655">Контекст перехватывает вызовы к членам класса и принудительно применяет политики, которые применяются к классу, таким как синхронизация.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3655">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="92aaa-3656">Дополнительные сведения о контекстах удаленного взаимодействия, см. в разделе <xref:System.Runtime.Remoting.Contexts.Context>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3656">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="92aaa-3657">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3657">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3658">В следующем примере демонстрируется `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, и <xref:System.Type.IsPrimitive%2A> свойства <xref:System.Type> класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3658">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="92aaa-3659">Проверяется ли данный тип может размещаться в контексте, ли он может быть маршалирован по ссылке, и является ли тип примитивный тип данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3659">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3660">Реализует свойство <see cref="P:System.Type.IsContextful" /> и определяет, можно ли поместить в контекст данный объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3660">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3661">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> может быть помещен в контекст; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3661"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3662">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3662">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="92aaa-3663">Контекст перехватывает вызовы к членам класса и применять политики, которые применяются к классу, таким как синхронизация.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3663">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3664">В следующем примере показано использование `IsContextfulImpl` метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3664">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3665">Возвращает значение, позволяющее определить, представляет ли текущий объект <see cref="T:System.Type" /> перечисление.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3665">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span></span></summary>
        <value><span data-ttu-id="92aaa-3666">Значение <see langword="true" />, если текущий объект <see cref="T:System.Type" /> представляет перечисление; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3666"><see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3667">Это свойство возвращает `true` для перечисления, но не для <xref:System.Enum> сам тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3667">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="92aaa-3668">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3668">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3669">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3669">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3670">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3670">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3671">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3671">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3672">Следующий пример демонстрирует, как использовать `IsEnum` свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3672">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92aaa-3673">Проверяемое значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3673">The value to be tested.</span></span></param>
        <summary><span data-ttu-id="92aaa-3674">Возвращает значение, показывающее, имеется ли в текущем типе перечисления указанное значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3674">Returns a value that indicates whether the specified value exists in the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3675">Значение <see langword="true" />, если указанное значение является членом текущего типа перечисления; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3675"><see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-3676">Текущий тип не является перечислением.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3676">The current type is not an enumeration.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-3677"><paramref name="value" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3677"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-3678"><paramref name="value" /> имеет тип, который не может быть базовым типом перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3678"><paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="92aaa-3679">Тип модели COM, который проверяется на эквивалентность текущему типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3679">The COM type that is tested for equivalence with the current type.</span></span></param>
        <summary><span data-ttu-id="92aaa-3680">Определяет, имеют ли два типа модели COM одинаковые удостоверения и могут ли они считаться эквивалентными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3680">Determines whether two COM types have the same identity and are eligible for type equivalence.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3681">Значение <see langword="true" />, если типы модели COM эквивалентны; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3681"><see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="92aaa-3682">Этот метод также возвращает значение <see langword="false" />, если один тип находится в сборке, загружаемой для исполнения, а другой — в сборке, загружаемой в контекст, предназначенный только для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3682">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3683">Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], среда CLR поддерживает внедрение сведений о типах COM непосредственно в управляемые сборки и не требует получения управляемыми сборками, для получения сведений о типах COM из взаимодействия сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3683">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="92aaa-3684">Так как внедренные сведения о типах включают в себя только типы и члены, которые действительно используются в управляемой сборке, в двух управляемых сборках могут быть очень разные представления одного типа COM.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3684">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="92aaa-3685">Все управляемые сборки имеют разные объекты <xref:System.Type> для обозначения представления типа COM.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3685">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="92aaa-3686">Среда CLR поддерживает эквивалентность типов между этими разными представлениями для интерфейсов, структур, перечислений и делегатов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3686">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="92aaa-3687">Эквивалентность типов означает, что COM-объект, передаваемый из одной управляемой сборки в другую, можно привести к соответствующему управляемому типу в принимающей сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3687">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="92aaa-3688"><xref:System.Type.IsEquivalentTo%2A> Метод включает сборку определить, что COM-объект, полученный из другой сборки имеет то же удостоверение COM, как один из типов взаимодействия первой сборки собственные встроенные и таким образом, может быть приведен к этому типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3688">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="92aaa-3689">Дополнительные сведения см. в разделе [эквивалентность типов и внедренные типы взаимодействия](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3689">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3690">Возвращает значение, указывающее, выкладываются ли поля текущего типа с явно заданными смещениями.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3690">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span></span></summary>
        <value><span data-ttu-id="92aaa-3691">Значение <see langword="true" />, если свойство <see cref="P:System.Type.Attributes" /> текущего типа включает <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3691"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3692">Это свойство предоставляется для удобства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3692">This property is provided as a convenience.</span></span> <span data-ttu-id="92aaa-3693">Кроме того, можно использовать <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> значение перечисления для выбора атрибутов макета типа и проверьте наличие ли <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> имеет значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3693">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="92aaa-3694"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, И <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> значения перечисления определяют способ поля типа располагаются в памяти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3694">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="92aaa-3695">Для динамических типов, можно указать <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> при создании типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3695">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="92aaa-3696">В коде, применить <xref:System.Runtime.InteropServices.StructLayoutAttribute> атрибут <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> значение перечисления в тип, чтобы указать, что смещения, с которой начать поля задано явно.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3696">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3697">Нельзя использовать <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> метод, чтобы определить, является ли <xref:System.Runtime.InteropServices.StructLayoutAttribute> был применен к типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3697">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="92aaa-3698">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3698">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3699">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3699">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3700">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3700">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3701">В следующем примере создается экземпляр типа и отображает значение его <xref:System.Type.IsExplicitLayout%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3701">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="92aaa-3702">Она использует `MySystemTime` класс, который также находится в примере кода для <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3702">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="92aaa-3703">Метаданные и компоненты с самоописанием</span><span class="sxs-lookup"><span data-stu-id="92aaa-3703">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3704">Возвращает значение, позволяющее определить, представляет ли текущий объект <see cref="T:System.Type" /> параметр типа в определении универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3704">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span></span></summary>
        <value><span data-ttu-id="92aaa-3705">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> представляет параметр определения универсального типа; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3705"><see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3706"><xref:System.Type> объекты, представляющие параметры универсального типа можно получить, вызвав <xref:System.Type.GetGenericArguments%2A> метод <xref:System.Type> объект, представляющий определение универсального типа, или <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> метод <xref:System.Reflection.MethodInfo> объект, который представляет универсальный метод Определение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3706"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="92aaa-3707">Для универсального типа или определение метода <xref:System.Type.IsGenericParameter%2A> возвращает `true` для каждого элемента результирующего массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3707">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="92aaa-3708">Для закрытого сконструированного типа или метода <xref:System.Type.IsGenericParameter%2A> возвращает `false` для каждого элемента массива, возвращаемого <xref:System.Type.GetGenericArguments%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3708">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="92aaa-3709">Для открытого сконструированного типа или метода некоторые элементы массива могут быть определенные типы и другие могут быть параметрами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3709">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="92aaa-3710"><xref:System.Type.IsGenericParameter%2A> Возвращает `false` для типов и `true` для параметров типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3710"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="92aaa-3711">В примере кода для <xref:System.Type.ContainsGenericParameters%2A> свойство демонстрирует универсального класса, сочетающее типов и их параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3711">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="92aaa-3712">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3712">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3713">В следующем примере используется <xref:System.Type.IsGenericParameter%2A> свойство для проверки параметров универсального типа в универсальном типе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3713">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-3714">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-3714">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-3715">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3715">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3716">Возвращает значение, указывающее, является ли текущий тип универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3716">Gets a value indicating whether the current type is a generic type.</span></span></summary>
        <value><span data-ttu-id="92aaa-3717"><see langword="true" /> Если текущий тип является универсальным типом; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3717"><see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3718">Используйте <xref:System.Type.IsGenericType%2A> свойства, чтобы определить ли <xref:System.Type> объект представляет универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3718">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="92aaa-3719">Используйте <xref:System.Type.ContainsGenericParameters%2A> свойства, чтобы определить ли <xref:System.Type> представляет объект в открытом сконструированном типе или закрытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3719">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3720"><xref:System.Type.IsGenericType%2A> Возвращает `false` Если непосредственного типа не является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3720">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="92aaa-3721">Например, массив, элементы которого имеют тип `A<int>` (`A(Of Integer)` в Visual Basic) сама по себе не универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3721">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="92aaa-3722">В следующей таблице перечислены неизменяемых условий для общих терминов, используемых в отражении универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3722">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="92aaa-3723">Термин</span><span class="sxs-lookup"><span data-stu-id="92aaa-3723">Term</span></span>|<span data-ttu-id="92aaa-3724">Инвариант</span><span class="sxs-lookup"><span data-stu-id="92aaa-3724">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="92aaa-3725">определение универсального типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-3725">generic type definition</span></span>|<span data-ttu-id="92aaa-3726">Значение свойства <xref:System.Type.IsGenericTypeDefinition%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3726">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3727">Определяет универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3727">Defines a generic type.</span></span> <span data-ttu-id="92aaa-3728">Сконструированный тип создается путем вызова <xref:System.Type.MakeGenericType%2A> метод <xref:System.Type> объект, представляющий определение универсального типа и указав массив аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3728">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="92aaa-3729"><xref:System.Type.MakeGenericType%2A> может вызываться только для определений универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3729"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="92aaa-3730">Любое определение универсального типа является универсальным типом ( <xref:System.Type.IsGenericType%2A> свойство `true`), но обратное неверно.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3730">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="92aaa-3731">универсальный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-3731">generic type</span></span>|<span data-ttu-id="92aaa-3732">Значение свойства <xref:System.Type.IsGenericType%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3732">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3733">Может быть определением универсального типа, открытом сконструированном типе или закрытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3733">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="92aaa-3734">Обратите внимание, что тип массива, тип элементов которого является универсальным сама по себе не универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3734">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="92aaa-3735">То же самое относится и к <xref:System.Type> объект, представляющий указатель к универсальному типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3735">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="92aaa-3736">открытый сконструированный тип</span><span class="sxs-lookup"><span data-stu-id="92aaa-3736">open constructed type</span></span>|<span data-ttu-id="92aaa-3737">Значение свойства <xref:System.Type.ContainsGenericParameters%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3737">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3738">Примерами являются универсальный тип, который неназначенные параметры типа, тип, который вложен в определении универсального типа или в открытом сконструированном типе или универсальный тип, который имеет аргумент типа, для которого <xref:System.Type.ContainsGenericParameters%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3738">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3739">Не поддерживается для создания экземпляра открытого сконструированного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3739">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="92aaa-3740">Обратите внимание на то, что не все открытые сконструированные типы являются универсальными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3740">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="92aaa-3741">Например массив, тип элементов которого является определением универсального типа не является универсальным, и указатель на открытый сконструированный тип не является универсальным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3741">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="92aaa-3742">закрытым сконструированным типом</span><span class="sxs-lookup"><span data-stu-id="92aaa-3742">closed constructed type</span></span>|<span data-ttu-id="92aaa-3743">Значение свойства <xref:System.Type.ContainsGenericParameters%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3743">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="92aaa-3744">При рекурсивном тип не имеет неназначенные универсальных параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3744">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="92aaa-3745">параметр универсального типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-3745">generic type parameter</span></span>|<span data-ttu-id="92aaa-3746">Значение свойства <xref:System.Type.IsGenericParameter%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3746">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3747">Значение свойства <xref:System.Type.ContainsGenericParameters%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3747">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3748">В определении универсального типа это заполнитель для типа, который будет назначен более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3748">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="92aaa-3749">аргумент универсального типа</span><span class="sxs-lookup"><span data-stu-id="92aaa-3749">generic type argument</span></span>|<span data-ttu-id="92aaa-3750">Может быть любого типа, включая параметр универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3750">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="92aaa-3751">Аргументы типа указаны как массив <xref:System.Type> объекты передавать <xref:System.Type.MakeGenericType%2A> при создании сконструированному универсальному типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3751">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="92aaa-3752">Если экземпляры для результирующего типа создаваемой <xref:System.Type.ContainsGenericParameters%2A> свойство должно быть `false` для всех аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3752">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="92aaa-3753">Следующий пример кода и в таблице представлены некоторые из этих условий и инварианты.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3753">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="92aaa-3754">`Derived` Класс является особый интерес, так как его базовый тип является сконструированный тип, который содержит как типы и параметры типа в списке аргументов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3754">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="92aaa-3755">В следующей таблице показаны примеры используйте и сборки в классах `Base`, `Derived`, и `G`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3755">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="92aaa-3756">Когда кода C++ и C# является одинаковым, отображается только одна запись.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3756">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="92aaa-3757">Пример</span><span class="sxs-lookup"><span data-stu-id="92aaa-3757">Example</span></span>|<span data-ttu-id="92aaa-3758">Инварианты</span><span class="sxs-lookup"><span data-stu-id="92aaa-3758">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="92aaa-3759">Для этого типа:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3759">For this type:</span></span><br /><br /> <span data-ttu-id="92aaa-3760"><xref:System.Type.IsGenericType%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3760"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3761"><xref:System.Type.IsGenericTypeDefinition%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3761"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3762"><xref:System.Type.ContainsGenericParameters%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3762"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="92aaa-3763">Для этого типа:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3763">For this type:</span></span><br /><br /> <span data-ttu-id="92aaa-3764"><xref:System.Type.IsGenericType%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3764"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3765"><xref:System.Type.IsGenericTypeDefinition%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3765"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="92aaa-3766"><xref:System.Type.ContainsGenericParameters%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3766"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="92aaa-3767">Для типа переменной `d`:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3767">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="92aaa-3768"><xref:System.Type.IsGenericType%2A> — `false` поскольку `d` является массивом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3768"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="92aaa-3769"><xref:System.Type.IsGenericTypeDefinition%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3769"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="92aaa-3770"><xref:System.Type.ContainsGenericParameters%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3770"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="92aaa-3771">`T`, `U`, и `V` (где они отображаются)</span><span class="sxs-lookup"><span data-stu-id="92aaa-3771">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="92aaa-3772"><xref:System.Type.IsGenericParameter%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3772"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3773"><xref:System.Type.IsGenericType%2A> является `false` , так как нет способа ограничить параметр типа для универсальных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3773"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="92aaa-3774"><xref:System.Type.IsGenericTypeDefinition%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3774"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="92aaa-3775"><xref:System.Type.ContainsGenericParameters%2A> — `true` поскольку `T`, `U`, и `V` сами являются параметры универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3775"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="92aaa-3776">Это не означает, что-либо аргументы, которые им назначены более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3776">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="92aaa-3777">Тип поля `F`</span><span class="sxs-lookup"><span data-stu-id="92aaa-3777">The type of field `F`</span></span>|<span data-ttu-id="92aaa-3778"><xref:System.Type.IsGenericType%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3778"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="92aaa-3779"><xref:System.Type.IsGenericTypeDefinition%2A> — `false` так, как тип был назначен параметр типа `G`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3779"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="92aaa-3780">Обратите внимание, что это эквивалентно вызову <xref:System.Type.MakeGenericType%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3780">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="92aaa-3781"><xref:System.Type.ContainsGenericParameters%2A> — `true` так как тип поля `F` с аргументом типа, который является открытым сконструированным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3781"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="92aaa-3782">Сконструированный тип является открытым так как его аргумент типа (то есть `Base`) является определением универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3782">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="92aaa-3783">Это иллюстрирует рекурсивной природе <xref:System.Type.IsGenericType%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3783">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="92aaa-3784">Вложенный класс `Nested`</span><span class="sxs-lookup"><span data-stu-id="92aaa-3784">The nested class `Nested`</span></span>|<span data-ttu-id="92aaa-3785"><xref:System.Type.IsGenericType%2A> — `true`, даже если `Nested` класс не имеет универсальный тип параметров свои собственные, так как он является вложенным в универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3785"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="92aaa-3786"><xref:System.Type.IsGenericTypeDefinition%2A> — `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3786"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="92aaa-3787">То есть можно вызвать <xref:System.Type.MakeGenericType%2A> метод и задать параметр типа данного включающего типа `Derived`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3787">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="92aaa-3788"><xref:System.Type.ContainsGenericParameters%2A> — `true` поскольку включающий тип, `Derived`, имеет параметры универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3788"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="92aaa-3789">Это иллюстрирует рекурсивной природе <xref:System.Type.ContainsGenericParameters%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3789">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3790">В следующем примере кода отображает значение <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, и <xref:System.Type.ContainsGenericParameters%2A> свойств для типов, описанных в разделе "Примечания".</span><span class="sxs-lookup"><span data-stu-id="92aaa-3790">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="92aaa-3791">Объяснение значения свойств см в "Примечания".</span><span class="sxs-lookup"><span data-stu-id="92aaa-3791">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-3792">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-3792">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-3793">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3793">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3794">Возвращает значение, позволяющее определить, представляет ли текущий объект <see cref="T:System.Type" /> определение универсального типа, на основе которого можно сконструировать другие универсальные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3794">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span></span></summary>
        <value><span data-ttu-id="92aaa-3795">Значение <see langword="true" />, если этот объект <see cref="T:System.Type" /> представляет определение универсального типа; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3795"><see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3796">Определение универсального типа — это шаблон, из которого можно сконструировать другие типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3796">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="92aaa-3797">Например, из определения универсального типа `G<T>` (выражена в синтаксис C#; `G(Of T)` в Visual Basic или `generic <typename T> ref class G` в C++) можно создавать и создает экземпляр типа `G<int>` (`G(Of Integer)` в Visual Basic), путем вызова <xref:System.Type.MakeGenericType%2A> метод с универсальным аргументом список, содержащий <xref:System.Int32> типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3797">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="92aaa-3798">Учитывая <xref:System.Type> объект, представляющий это сконструированный тип, <xref:System.Type.GetGenericTypeDefinition%2A> метод получает определение универсального типа и обратно еще раз.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3798">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="92aaa-3799">Используйте <xref:System.Type.IsGenericTypeDefinition%2A> свойства, чтобы определить, можно ли создавать новые типы из текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3799">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="92aaa-3800">Если <xref:System.Type.IsGenericTypeDefinition%2A> возвращает `true`, можно вызвать <xref:System.Type.MakeGenericType%2A> метод, чтобы создать новые универсальные типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3800">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="92aaa-3801">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3801">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3802">Следующий пример отображает сведения о типе, включая ли он определением универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3802">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="92aaa-3803">Сведения отображаются для сконструированного типа, его определение универсального типа и обычный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3803">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-3804">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-3804">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-3805">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3805">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3806">Возвращает значение, позволяющее определить, есть ли у объекта <see cref="T:System.Type" /> атрибут <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />, свидетельствующий о том, что объект был импортирован из библиотеки COM-типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3806">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span></span></summary>
        <value><span data-ttu-id="92aaa-3807">Значение <see langword="true" />, если у <see cref="T:System.Type" /> есть атрибут <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3807"><see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3808">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3808">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3809">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="92aaa-3809">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="92aaa-3810">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3810">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="92aaa-3811">Объект, который требуется сравнить с текущим типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3811">The object to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="92aaa-3812">Определяет, является ли указанный объект экземпляром текущего типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3812">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3813">Значение <see langword="true" />, если текущий объект <see langword="Type" /> входит в иерархию наследования объекта, представленного параметром <paramref name="o" /> или если текущий объект <see langword="Type" /> является интерфейсом, реализуемым параметром <paramref name="o" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3813"><see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span></span> <span data-ttu-id="92aaa-3814">Значение <see langword="false" />, если не выполняется ни одно из перечисленных условий, параметр <paramref name="o" /> имеет значение <see langword="null" /> или текущий объект <see langword="Type" /> является открытым универсальным типом (то есть свойство <see cref="P:System.Type.ContainsGenericParameters" /> возвращает значение <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3814"><see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3815">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3815">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3816">Сконструированный тип не является экземпляром его определения универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3816">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="92aaa-3817">То есть `MyGenericList<int>` (`MyGenericList(Of Integer)` в Visual Basic) не является экземпляром `MyGenericList<T>` (`MyGenericList(Of T)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3817">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3818">В следующем примере иллюстрируется использование метода `IsInstanceOfType`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3818">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3819">Возвращает значение, позволяющее определить, является ли объект <see cref="T:System.Type" /> интерфейсом (иными словами, не является классом или типом значения).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3819">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span></span></summary>
        <value><span data-ttu-id="92aaa-3820">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является интерфейсом; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3820"><see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3821"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask> Отличает объявление типа как тип класса, интерфейса или значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3821">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="92aaa-3822">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3822">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3823">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3823">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3824">Следующий пример создает интерфейс, проверяет тип интерфейса и указывает, имеет ли класс `IsInterface` набор свойств.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3824">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3825">Возвращает значение, указывающее, выкладываются ли поля текущего типа последовательно, в том порядке, в котором они были определены, или выдаются в метаданные.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3825">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span></span></summary>
        <value><span data-ttu-id="92aaa-3826">Значение <see langword="true" />, если свойство <see cref="P:System.Type.Attributes" /> текущего типа включает <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3826"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3827">Это свойство предоставляется для удобства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3827">This property is provided as a convenience.</span></span> <span data-ttu-id="92aaa-3828">Кроме того, можно использовать <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> значение перечисления для выбора атрибутов макета типа и проверьте наличие ли <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> имеет значение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3828">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="92aaa-3829"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, И <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> значения перечисления определяют способ поля типа располагаются в памяти.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3829">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="92aaa-3830">Для динамических типов, можно указать <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> при создании типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3830">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="92aaa-3831">В коде, применить <xref:System.Runtime.InteropServices.StructLayoutAttribute> атрибут <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> значение перечисления в тип, чтобы указать, что макет является последовательным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3831">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3832">Нельзя использовать <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> метод, чтобы определить, является ли <xref:System.Runtime.InteropServices.StructLayoutAttribute> был применен к типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3832">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="92aaa-3833">Дополнительные сведения см. разделе 9.1.2 спецификации Common Language Infrastructure (CLI) документацию по «раздел II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="92aaa-3833">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="92aaa-3834">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3834">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="92aaa-3835">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3835">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-3836">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3836">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-3837">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3837">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3838">В следующем примере создается экземпляр класса, для которого <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> значение перечисления в <xref:System.Runtime.InteropServices.StructLayoutAttribute> класс было установлено, проверьте наличие <xref:System.Type.IsLayoutSequential%2A> свойство и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3838">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="92aaa-3839">Метаданные и компоненты с самоописанием</span><span class="sxs-lookup"><span data-stu-id="92aaa-3839">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3840">Возвращает значение, указывающее, маршалирован ли объект <see cref="T:System.Type" /> по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3840">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span></span></summary>
        <value><span data-ttu-id="92aaa-3841">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> маршалируется по ссылке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3841"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92aaa-3842">В следующем примере демонстрируется `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, и <xref:System.Type.IsPrimitive%2A> свойства <xref:System.Type> класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3842">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="92aaa-3843">Проверяется ли данный тип может размещаться в контексте, ли он может быть маршалирован по ссылке, и является ли тип примитивный тип данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3843">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3844">Реализует свойство <see cref="P:System.Type.IsMarshalByRef" /> и определяет, маршалируется ли объект <see cref="T:System.Type" /> по ссылке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3844">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3845">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> маршалируется по ссылке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3845"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3846">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3846">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3847">В следующем примере определяется ли данный тип маршалируется по ссылке и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3847">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3848">Возвращает значение, позволяющее определить, представляет ли текущий объект <see cref="T:System.Type" /> тип, определение которого вложено в определение другого типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3848">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span></span></summary>
        <value><span data-ttu-id="92aaa-3849">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> вложен в другой тип; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3849"><see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3850"><xref:System.Type.IsNested%2A> Возвращает `true` все вложенные типы, независимо от видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3850">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="92aaa-3851">Чтобы проверить вложение и видимость в то же время, используйте связанные свойства <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, или <xref:System.Type.IsNestedPublic%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3851">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3852"><xref:System.Reflection.TypeAttributes.VisibilityMask> Член перечисления выбирает атрибуты видимости для типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3852">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3853">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3853">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3854">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3854">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3855">Возвращает значение, позволяющее определить, является ли объект <see cref="T:System.Type" /> вложенным и видимым только в своей сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3855">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span></span></summary>
        <value><span data-ttu-id="92aaa-3856">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является вложенным и видимым только в своей сборке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3856"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3857">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3857">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3858"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3858"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3859">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3859">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3860">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3860">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3861">Возвращает значение, позволяющее определить, является ли объект <see cref="T:System.Type" /> вложенным и видимым только для классов, принадлежащих одновременно к семейству и сборке этого объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3861">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span></summary>
        <value><span data-ttu-id="92aaa-3862">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является вложенным и видимым только классам, принадлежащим одновременно к семейству и сборке этого объекта; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3862"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3863">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3863">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3864"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3864"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-3865">В языках C# и Visual Basic не включают семантики, вы можете определить вложенный тип, который является видимым только для защищенных типы в сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3865">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="92aaa-3866">`protected internal` видимость в C# и `Protected Friend` видимости в Visual Basic определяют вложенный тип, который является видимым, защищенные типы и типы в той же сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3866">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="92aaa-3867">Объект <xref:System.Type> семейство объекта определяется как все объекты в одной и той же <xref:System.Type> и из его подтипов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3867">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3868">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3868">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3869">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3869">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3870">Возвращает значение, позволяющее определить, является ли объект <see cref="T:System.Type" /> вложенным и видимым только в своем семействе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3870">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span></span></summary>
        <value><span data-ttu-id="92aaa-3871">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является вложенным и видимым только внутри собственного семейства; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3871"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3872">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3872">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3873"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3873"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="92aaa-3874">Объект <xref:System.Type> семейство объекта определяется как все объекты точного же <xref:System.Type> и из его подтипов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3874">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3875">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3875">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3876">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3876">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3877">Возвращает значение, позволяющее определить, является ли данный объект <see cref="T:System.Type" /> вложенным и видимым только для классов, принадлежащих либо к его семейству, либо к его сборке.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3877">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span></summary>
        <value><span data-ttu-id="92aaa-3878">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является вложенным и видимым только классам, принадлежащим его семейству или его сборке; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3878"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3879">Если видимость типа `protected internal` в C# или `Protected Friend` в Visual Basic, <xref:System.Type.IsNestedFamORAssem%2A> возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3879">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="92aaa-3880">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3880">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3881"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3881"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="92aaa-3882">Объект <xref:System.Type> семейство объекта определяется как все объекты точного же <xref:System.Type> и из его подтипов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3882">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3883">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3883">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3884">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3884">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3885">Возвращает значение, позволяющее определить, является ли объект <see cref="T:System.Type" /> вложенным и объявленным как закрытый.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3885">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span></span></summary>
        <value><span data-ttu-id="92aaa-3886">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является вложенным и объявленным как закрытый; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3886"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3887">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3887">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3888"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3888"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3889">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3889">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3890">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3890">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3891">Возвращает значение, позволяющее определить, является ли класс вложенным и объявленным как открытый.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3891">Gets a value indicating whether a class is nested and declared public.</span></span></summary>
        <value><span data-ttu-id="92aaa-3892">Значение <see langword="true" />, если данный класс является вложенным и объявленным как открытый; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3892"><see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3893">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3893">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3894"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3894"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3895">В следующем примере создается внешнего класса с количеством вложенные классы, которые имеют различные типы видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3895">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="92aaa-3896">Затем извлекается значение из нескольких связанных с видимостью <xref:System.Type> свойства для родительского типа и всех его вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3896">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3897">Возвращает значение, позволяющее определить, не был ли объект <see cref="T:System.Type" /> объявлен как открытый.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3897">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span></span></summary>
        <value><span data-ttu-id="92aaa-3898">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> не объявлен как открытый и не является вложенным типом; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3898"><see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3899">Не используйте это свойство для вложенных типов. Используйте <xref:System.Type.IsNestedPublic%2A> свойство вместо этого.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3899">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="92aaa-3900">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3900">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3901">В этом примере используется `IsNotPublic` свойство видимости типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3901">This example uses the `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="92aaa-3902">В следующем примере кода показано, почему не удается использовать `IsPublic` и `IsNotPublic` для вложенных классов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3902">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="92aaa-3903">Для вложенных классов игнорировать результаты `IsPublic` и `IsNotPublic` и обратите внимание только результаты `IsNestedPublic` и `IsNestedPrivate`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3903">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="92aaa-3904">Выходные данные отражения для этого фрагмента кода будет выглядеть следующим образом:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3904">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="92aaa-3905">Класс</span><span class="sxs-lookup"><span data-stu-id="92aaa-3905">Class</span></span>|<span data-ttu-id="92aaa-3906">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="92aaa-3906">IsNotPublic</span></span>|<span data-ttu-id="92aaa-3907">IsPublic</span><span class="sxs-lookup"><span data-stu-id="92aaa-3907">IsPublic</span></span>|<span data-ttu-id="92aaa-3908">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="92aaa-3908">IsNestedPublic</span></span>|<span data-ttu-id="92aaa-3909">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="92aaa-3909">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="92aaa-3910">А</span><span class="sxs-lookup"><span data-stu-id="92aaa-3910">A</span></span>|<span data-ttu-id="92aaa-3911">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3911">FALSE</span></span>|<span data-ttu-id="92aaa-3912">true</span><span class="sxs-lookup"><span data-stu-id="92aaa-3912">TRUE</span></span>|<span data-ttu-id="92aaa-3913">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3913">FALSE</span></span>|<span data-ttu-id="92aaa-3914">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3914">FALSE</span></span>|  
|<span data-ttu-id="92aaa-3915">С</span><span class="sxs-lookup"><span data-stu-id="92aaa-3915">B</span></span>|<span data-ttu-id="92aaa-3916">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3916">FALSE</span></span>|<span data-ttu-id="92aaa-3917">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3917">FALSE</span></span>|<span data-ttu-id="92aaa-3918">true</span><span class="sxs-lookup"><span data-stu-id="92aaa-3918">TRUE</span></span>|<span data-ttu-id="92aaa-3919">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3919">FALSE</span></span>|  
|<span data-ttu-id="92aaa-3920">В</span><span class="sxs-lookup"><span data-stu-id="92aaa-3920">C</span></span>|<span data-ttu-id="92aaa-3921">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3921">FALSE</span></span>|<span data-ttu-id="92aaa-3922">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3922">FALSE</span></span>|<span data-ttu-id="92aaa-3923">false</span><span class="sxs-lookup"><span data-stu-id="92aaa-3923">FALSE</span></span>|<span data-ttu-id="92aaa-3924">true</span><span class="sxs-lookup"><span data-stu-id="92aaa-3924">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3925">Возвращает значение, указывающее, является ли объект <see cref="T:System.Type" /> указателем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3925">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span></span></summary>
        <value><span data-ttu-id="92aaa-3926">Значение <see langword="true" />, если <see cref="T:System.Type" /> является указателем; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3926"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3927">Если текущий <xref:System.Type> представляет универсальный тип или параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3927">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="92aaa-3928">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3928">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3929">В следующем примере показано использование `IsPointer` свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3929">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3930">При переопределении в производном классе реализует свойство <see cref="P:System.Type.IsPointer" /> и определяет, является ли объект <see cref="T:System.Type" /> указателем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3930">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3931">Значение <see langword="true" />, если <see cref="T:System.Type" /> является указателем; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3931"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3932">Возвращает значение, указывающее, является ли <see cref="T:System.Type" /> одним из типов-примитивов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3932">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span></span></summary>
        <value><span data-ttu-id="92aaa-3933">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является одним из типов-примитивов; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3933"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3934">Примитивные типы являются <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, и <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3934">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="92aaa-3935">Если текущий <xref:System.Type> представляет универсальный тип или параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3935">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3936">В следующем примере демонстрируется `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, и <xref:System.Type.IsPrimitive%2A> свойства <xref:System.Type> класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3936">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="92aaa-3937">Проверяется ли данный тип может размещаться в контексте, ли он может быть маршалирован по ссылке, и является ли тип примитивный тип данных.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3937">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-3938">При переопределении в производном классе реализует свойство <see cref="P:System.Type.IsPrimitive" /> и определяет, является ли объект <see cref="T:System.Type" /> одним из типов-примитивов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3938">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span></span></summary>
        <returns><span data-ttu-id="92aaa-3939">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является одним из типов-примитивов; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3939"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3940">Примитивные типы являются <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, и <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3940">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3941">В следующем примере определяется ли данный тип является типом-примитивом и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3941">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3942">Возвращает значение, позволяющее определить, был ли объект <see cref="T:System.Type" /> объявлен как открытый.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3942">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span></span></summary>
        <value><span data-ttu-id="92aaa-3943">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> объявлен как открытый и не является вложенным типом; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3943"><see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3944">Не используйте для вложенных типов. Используйте <xref:System.Type.IsNestedPublic%2A> вместо этого.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3944">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="92aaa-3945">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3945">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="92aaa-3946"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> выбирает атрибуты видимости.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3946"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3947">В следующем примере создается экземпляр `MyTestClass`, проверяет наличие `IsPublic` свойство и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3947">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="92aaa-3948">Для вложенных классов игнорировать результаты `IsPublic` и `IsNotPublic` и обратите внимание только результаты <xref:System.Type.IsNestedPublic%2A> и <xref:System.Type.IsNestedPrivate%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3948">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3949">Возвращает значение, позволяющее определить, был ли объект <see cref="T:System.Type" /> объявлен как запечатанный.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3949">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span></span></summary>
        <value><span data-ttu-id="92aaa-3950">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> объявлен как запечатанный; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3950"><see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3951">Если текущий <xref:System.Type> представляет параметр типа универсального типа, это свойство всегда возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3951">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-3952">В следующем примере создается экземпляр `sealed` класса, проверяется `IsSealed` свойство и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3952">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3953">Возвращает значение, которое указывает, является ли текущий тип критически важным для безопасности или защищенным критически важным для безопасности на данном уровне доверия и, следовательно, может ли он выполнять критические операции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3953">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="92aaa-3954">Значение <see langword="true" />, если текущий тип является критически важным для безопасности или защищенным критически важным для безопасности на текущем уровне доверия; значение <see langword="false" />, если он является прозрачным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3954"><see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3955"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, И <xref:System.Type.IsSecurityTransparent%2A> свойства отчетов уровень прозрачности типа в его текущем уровне доверия, что определяется общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3955">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="92aaa-3956">В следующей таблице показаны сочетания этих свойств:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3956">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="92aaa-3957">Уровень безопасности</span><span class="sxs-lookup"><span data-stu-id="92aaa-3957">Security level</span></span>|<span data-ttu-id="92aaa-3958">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="92aaa-3958">IsSecurityCritical</span></span>|<span data-ttu-id="92aaa-3959">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="92aaa-3959">IsSecuritySafeCritical</span></span>|<span data-ttu-id="92aaa-3960">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="92aaa-3960">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="92aaa-3961">Critical</span><span class="sxs-lookup"><span data-stu-id="92aaa-3961">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="92aaa-3962">Надежным с точки зрения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3962">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="92aaa-3963">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="92aaa-3963">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="92aaa-3964">Использовать эти свойства гораздо проще, чем просматривать заметки о безопасности для сборки и ее типов, проверять текущий уровень доверия и пытаться дублировать правила среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3964">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="92aaa-3965">Для сборок с частичным доверием значение этого свойства зависит от текущего уровня доверия сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3965">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="92aaa-3966">Если сборка загружается в домен приложения с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3966">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="92aaa-3967">Сборка и все типы считаются прозрачными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3967">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="92aaa-3968">Среда выполнения уделяет внимание примечания безопасности сборки с частичным доверием, только в том случае, если эта сборка загружается в домен приложения с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3968">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="92aaa-3969">Напротив доверенная сборка (то есть со строгим именем сборки, которая установлена в глобальном кэше сборок) всегда загружена с полным доверием независимо от уровня доверия домена приложения, поэтому ее текущий уровень доверия всегда является полностью доверенным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3969">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="92aaa-3970">Текущие уровни доверия сборок и доменов приложений можно определить с помощью <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> и <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3970">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="92aaa-3971">Дополнительные сведения о отражение и прозрачность, см. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3971">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="92aaa-3972">Сведения о прозрачности, см. в разделе [изменения системы безопасности](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3972">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="92aaa-3973">Соображения о безопасности для отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3973">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="92aaa-3974">Изменения системы безопасности в .NET Framework</span><span class="sxs-lookup"><span data-stu-id="92aaa-3974">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3975">Возвращает значение, которое указывает, является ли текущий тип защищенным критически важным для безопасности на текущем уровне доверия и, следовательно, может ли он выполнять критические операции и предоставлять доступ прозрачному коду.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3975">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="92aaa-3976">Значение <see langword="true" />, если текущий тип является защищенным критически важным для безопасности на текущем уровне доверия; значение <see langword="false" />, если он является критически важным для безопасности или прозрачным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3976"><see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3977"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, И <xref:System.Type.IsSecurityTransparent%2A> свойства отчетов уровень прозрачности типа в его текущем уровне доверия, что определяется общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3977">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="92aaa-3978">В следующей таблице показаны сочетания этих свойств:</span><span class="sxs-lookup"><span data-stu-id="92aaa-3978">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="92aaa-3979">Уровень безопасности</span><span class="sxs-lookup"><span data-stu-id="92aaa-3979">Security level</span></span>|<span data-ttu-id="92aaa-3980">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="92aaa-3980">IsSecurityCritical</span></span>|<span data-ttu-id="92aaa-3981">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="92aaa-3981">IsSecuritySafeCritical</span></span>|<span data-ttu-id="92aaa-3982">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="92aaa-3982">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="92aaa-3983">Critical</span><span class="sxs-lookup"><span data-stu-id="92aaa-3983">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="92aaa-3984">Надежным с точки зрения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3984">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="92aaa-3985">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="92aaa-3985">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="92aaa-3986">Использовать эти свойства гораздо проще, чем просматривать заметки о безопасности для сборки и ее типов, проверять текущий уровень доверия и пытаться дублировать правила среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3986">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="92aaa-3987">Для сборок с частичным доверием значение этого свойства зависит от текущего уровня доверия сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3987">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="92aaa-3988">Если сборка загружается в домен приложения с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3988">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="92aaa-3989">Сборка и все типы считаются прозрачными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3989">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="92aaa-3990">Среда выполнения уделяет внимание примечания безопасности сборки с частичным доверием, только в том случае, если эта сборка загружается в домен приложения с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3990">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="92aaa-3991">Напротив доверенная сборка (то есть со строгим именем сборки, которая установлена в глобальном кэше сборок) всегда загружена с полным доверием независимо от уровня доверия домена приложения, поэтому ее текущий уровень доверия всегда является полностью доверенным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3991">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="92aaa-3992">Текущие уровни доверия сборок и доменов приложений можно определить с помощью <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> и <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3992">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="92aaa-3993">Дополнительные сведения о отражение и прозрачность, см. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3993">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="92aaa-3994">Сведения о прозрачности, см. в разделе [изменения системы безопасности](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-3994">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="92aaa-3995">Соображения о безопасности для отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-3995">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="92aaa-3996">Изменения системы безопасности в .NET Framework</span><span class="sxs-lookup"><span data-stu-id="92aaa-3996">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-3997">Получает значение, которое указывает, является ли текущий тип прозрачным на текущем уровне доверия и, следовательно, не может выполнять критические операции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3997">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="92aaa-3998">Значение <see langword="true" />, если текущий тип является прозрачным на текущем уровне доверия; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3998"><see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-3999">Если это свойство возвращает `true`, <xref:System.Type.IsSecurityCritical%2A> и <xref:System.Type.IsSecuritySafeCritical%2A> возвращают свойства `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-3999">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="92aaa-4000"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, И <xref:System.Type.IsSecurityTransparent%2A> свойства отчетов уровень прозрачности типа в его текущем уровне доверия, что определяется общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4000">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="92aaa-4001">Использовать эти свойства гораздо проще, чем просматривать заметки о безопасности для сборки и ее типов, проверять текущий уровень доверия и пытаться дублировать правила среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4001">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="92aaa-4002">Для сборок с частичным доверием значение этого свойства зависит от текущего уровня доверия сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4002">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="92aaa-4003">Если сборка загружается в домен приложения с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4003">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="92aaa-4004">Сборка и все типы считаются прозрачными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4004">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="92aaa-4005">Среда выполнения уделяет внимание примечания безопасности сборки с частичным доверием, только в том случае, если эта сборка загружается в домен приложения с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4005">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="92aaa-4006">Напротив доверенная сборка (то есть со строгим именем сборки, которая установлена в глобальном кэше сборок) всегда загружена с полным доверием независимо от уровня доверия домена приложения, поэтому ее текущий уровень доверия всегда является полностью доверенным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4006">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="92aaa-4007">Текущие уровни доверия сборок и доменов приложений можно определить с помощью <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> и <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4007">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="92aaa-4008">Дополнительные сведения о отражение и прозрачность, см. в разделе [соображения о безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4008">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="92aaa-4009">Сведения о прозрачности, см. в разделе [изменения системы безопасности](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4009">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="92aaa-4010">Соображения о безопасности для отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-4010">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="92aaa-4011">Изменения системы безопасности в .NET Framework</span><span class="sxs-lookup"><span data-stu-id="92aaa-4011">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4012">Возвращает значение, позволяющее определить, сериализуем ли объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4012">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span></span></summary>
        <value><span data-ttu-id="92aaa-4013">Значение <see langword="true" />, если объект <see cref="T:System.Type" /> является сериализуемым; в противным случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4013"><see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="92aaa-4014">Типы, которые определены в .NET Standard не отмечены <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4014">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="92aaa-4015">Вместо этого каждая реализация .NET определяет, является ли тип сериализуемым.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4015">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="92aaa-4016">Во время выполнения, можно использовать <xref:System.Type.IsSerializable%2A> свойства, чтобы определить, поддерживает ли эта реализация сериализации экземпляра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4016">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="92aaa-4017">Дополнительные сведения и пример см. в разделе [как определить, если объект .NET Standard является сериализуемым](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4017">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="92aaa-4018">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4018">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-4019">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4019">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-4020">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4020">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4021">В следующем примере создается экземпляр `MyTestClass` классе, задает атрибут [Serializable] и проверяет `IsSerializable` свойство для `true` или `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4021">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4022">Возвращает значение, позволяющее определить, требует ли имя данного объекта специальной обработки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4022">Gets a value indicating whether the type has a name that requires special handling.</span></span></summary>
        <value><span data-ttu-id="92aaa-4023">Значение <see langword="true" />, если имя типа требует специальной обработки; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4023"><see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4024">Имена, которые начинаются с или содержать символа подчеркивания (_), доступа к свойствам и методы перегрузки операторов приведены примеры типов, которые могут потребовать специальной обработки в некоторых компиляторах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4024">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="92aaa-4025">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4025">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-4026">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4026">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-4027">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4027">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="92aaa-4028">Тип для сравнения с текущим типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4028">The type to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="92aaa-4029">Определяет, является ли текущий <see cref="T:System.Type" /> производным от указанного <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4029">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4030">Значение <see langword="true" />, если текущий объект <see langword="Type" /> является производным от <paramref name="c" />; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4030"><see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="92aaa-4031">Этот метод также возвращает значение <see langword="false" />, если параметр <paramref name="c" /> и текущий объект <see langword="Type" /> равны.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4031">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4032">Вы можете вызвать <xref:System.Type.IsSubclassOf%2A> метод для определения любой из следующих:</span><span class="sxs-lookup"><span data-stu-id="92aaa-4032">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="92aaa-4033">Является ли один класс является производным от другого.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4033">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="92aaa-4034">Является ли один тип является производным от <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4034">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="92aaa-4035">Тем не менее <xref:System.Type.IsValueType%2A> — это более эффективный способ определить, является ли тип типом значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4035">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="92aaa-4036">Является ли один тип является производным от <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4036">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="92aaa-4037">Тем не менее <xref:System.Type.IsEnum%2A> метод является более эффективный способ определить, является ли тип перечисления.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4037">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="92aaa-4038">Является ли тип делегата, то есть ли он является производным от либо <xref:System.Delegate> или <xref:System.MulticastDelegate>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4038">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="92aaa-4039"><xref:System.Type.IsSubclassOf%2A> Метод не может использоваться для определения, является ли интерфейс производным от другого интерфейса или ли класс реализует интерфейс.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4039">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="92aaa-4040">Используйте <xref:System.Type.IsAssignableFrom%2A> метод для этой цели, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4040">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="92aaa-4041">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, он является производным от ограничения своего класса или из <xref:System.Object?displayProperty=nameWithType> если он не имеет ограничения класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4041">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-4042">За исключением случаев использования с интерфейсами, <xref:System.Type.IsSubclassOf%2A> является противоположностью <xref:System.Type.IsAssignableFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4042">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="92aaa-4043">То есть если `t1.IsSubclassOf(t2)` — `true`, затем `t2.IsAssignableFrom(t1)` также `true`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4043">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="92aaa-4044">Этот метод может быть переопределен производным классом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4044">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4045">В следующем примере создается класс с именем `Class1` и производный класс с именем `DerivedC1`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4045">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="92aaa-4046">Он вызывает <xref:System.Type.IsSubclassOf%2A> метод, чтобы показать, что `DerivedC1` является подклассом `Class1`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4046">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-4047"><paramref name="c" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4047"><paramref name="c" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4048">Возвращает значение, позволяющее определить, выбран ли для объекта <see langword="UnicodeClass" /> атрибут формата строки <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4048">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-4049">Значение <see langword="true" />, если для данного объекта <see langword="UnicodeClass" /> выбран атрибут формата строки <see cref="T:System.Type" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4049"><see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4050"><xref:System.Reflection.TypeAttributes.StringFormatMask> Используется для выбора атрибутов формата строки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4050">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="92aaa-4051">Атрибуты формата строки расширяют возможности взаимодействия, определяющий способ интерпретации строки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4051">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="92aaa-4052">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4052">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-4053">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4053">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-4054">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4054">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4055">Возвращает значение, позволяющее определить, является ли объект <see cref="T:System.Type" /> типом значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4055">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span></span></summary>
        <value><span data-ttu-id="92aaa-4056">Значение <see langword="true" />, если тип <see cref="T:System.Type" /> является типом значения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4056"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4057">Типы значений являются типы, которые отображаются в виде последовательности битов; типы значений не являются классами или интерфейсами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4057">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="92aaa-4058">Типы значений, называются «структуры» в некоторых языках программирования.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4058">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="92aaa-4059">Перечисления являются особым случаем типов значений.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4059">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="92aaa-4060">Это свойство возвращает `false` для <xref:System.ValueType> класса, так как <xref:System.ValueType> не является типом значения, сам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4060">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="92aaa-4061">Это базовый класс для всех типов значений, и таким образом любой тип значения можно присвоить его.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4061">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="92aaa-4062">Это было бы невозможным Если <xref:System.ValueType> сам был типом значения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4062">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="92aaa-4063">Типы значений упакованы в том случае, если они назначены поле типа <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4063">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="92aaa-4064">Это свойство возвращает `true` для перечислений, но не для <xref:System.Enum> сам тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4064">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="92aaa-4065">Пример, демонстрирующий такие действия, см. в разделе <xref:System.Type.IsEnum%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4065">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="92aaa-4066">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4066">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4067">В следующем примере создается переменная типа `MyEnum`, проверяет наличие `IsValueType` свойство и отображает результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4067">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-4068">Реализует свойство <see cref="P:System.Type.IsValueType" /> и определяет, является ли объект <see cref="T:System.Type" /> типом значения (иными словами, не является классом или интерфейсом).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4068">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4069">Значение <see langword="true" />, если тип <see cref="T:System.Type" /> является типом значения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4069"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4070">Этот метод предоставляется для обеспечения реализации альтернативных типов систем.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4070">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="92aaa-4071">Обычно он не используется в коде приложения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4071">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4072">Возвращает значение, позволяющее определить, можно ли получить доступ к объекту <see cref="T:System.Type" /> из кода за пределами сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4072">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span></span></summary>
        <value><span data-ttu-id="92aaa-4073">Значение <see langword="true" />, если текущий объект <see cref="T:System.Type" /> является открытым типом или открытым вложенным типом, все включающие типы которого также являются открытыми; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4073"><see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4074">Это свойство используется для определения, является ли тип частью открытого интерфейса сборки компонентов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4074">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4075">В следующем примере кода проверяются два класса, только один из которых является видимым извне.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4075">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92aaa-4076">Возвращает объект <see cref="T:System.Type" />, который представляет массив текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4076">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-4077">Возвращает объект <see cref="T:System.Type" />, представляющий одномерный массив текущего типа с нижней границей, равной нулю.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4077">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4078">Объект <see cref="T:System.Type" />, представляющий одномерный массив текущего типа с нижней границей, равной нулю.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4078">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4079"><xref:System.Type.MakeArrayType%2A> Метод предоставляет возможность создавать типы массивов, типы элементов которых вычисляются во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4079">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="92aaa-4080">**Примечание** среда CLR проводится различие между векторами (то есть одномерные массивы, которые всегда отсчитываемый от нуля) и многомерных массивов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4080">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="92aaa-4081">Вектор, который всегда имеет только одно измерение, не совпадает с многомерном массиве, который имеет только одно измерение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4081">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="92aaa-4082">Эта перегрузка метода может использоваться только для создания векторных типов, и это единственный способ создания векторных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4082">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="92aaa-4083">Используйте <xref:System.Type.MakeArrayType%28System.Int32%29> перегруженный метод для создания типов многомерного массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4083">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4084">В следующем примере кода создается массив, `ref` (`ByRef` в Visual Basic) и типы указателей для `Test` класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4084">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4085">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4085">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="92aaa-4086">Реализацию должны обеспечивать производные классы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4086">Derived classes must provide an implementation.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-4087">Текущий тип — <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4087">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="92aaa-4088">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4088">-or-</span></span> 
<span data-ttu-id="92aaa-4089">Текущий тип — <see langword="ByRef" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4089">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="92aaa-4090">То есть <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4090">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rank"><span data-ttu-id="92aaa-4091">Размерность массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4091">The number of dimensions for the array.</span></span> <span data-ttu-id="92aaa-4092">Это число должно быть меньше либо равно 32.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4092">This number must be less than or equal to 32.</span></span></param>
        <summary><span data-ttu-id="92aaa-4093">Возвращает объект <see cref="T:System.Type" />, представляющий массив текущего типа указанной размерности.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4093">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4094">Объект, представляющий массив текущего типа указанной размерности.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4094">An object representing an array of the current type, with the specified number of dimensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4095"><xref:System.Type.MakeArrayType%2A> Метод предоставляет возможность создавать типы массивов, типы элементов которых вычисляются во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4095">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-4096">Среда CLR проводится различие между векторами (то есть одномерные массивы, которые всегда отсчитываемый от нуля) и многомерных массивов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4096">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="92aaa-4097">Вектор, который всегда имеет только одно измерение, не совпадает с многомерном массиве, который имеет только одно измерение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4097">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="92aaa-4098">Эту перегрузку метода нельзя использовать для создания типа vector; Если `rank` равно 1, эта перегрузка метода возвращает тип многомерного массива, который имеет одно измерение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4098">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="92aaa-4099">Используйте <xref:System.Type.MakeArrayType> перегруженный метод для создания векторных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4099">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4100">В следующем примере кода создается массив, `ref` (`ByRef` в Visual Basic) и типы указателей для `Test` класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4100">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="92aaa-4101"><paramref name="rank" /> недопустим.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4101"><paramref name="rank" /> is invalid.</span></span> <span data-ttu-id="92aaa-4102">Например, 0 или отрицательное число.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4102">For example, 0 or negative.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4103">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4103">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-4104">Текущий тип — <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4104">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="92aaa-4105">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4105">-or-</span></span> 
<span data-ttu-id="92aaa-4106">Текущий тип — <see langword="ByRef" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4106">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="92aaa-4107">То есть <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4107">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span>  
  
<span data-ttu-id="92aaa-4108">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4108">-or-</span></span> 
 <span data-ttu-id="92aaa-4109">Значение <paramref name="rank" /> больше 32.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4109"><paramref name="rank" /> is greater than 32.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-4110">Возвращает объект <see cref="T:System.Type" />, который представляет текущий тип при передаче в качестве параметра <see langword="ref" /> (параметра <see langword="ByRef" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4110">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="92aaa-4111">Объект <see cref="T:System.Type" />, который представляет текущий тип при передаче в качестве параметра <see langword="ref" /> (параметра <see langword="ByRef" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4111">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4112"><xref:System.Type.MakeByRefType%2A> Метод предоставляет способ создания `ref` типов (`ByRef` в Visual Basic) для параметра перечислены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4112">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="92aaa-4113">С помощью синтаксиса промежуточного языка Майкрософт (MSIL), если текущий <xref:System.Type> представляет объект <xref:System.Int32>, этот метод возвращает <xref:System.Type> объект, представляющий `Int32&`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4113">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4114">В следующем примере кода создается массив, `ref` (`ByRef` в Visual Basic) и типы указателей для `Test` класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4114">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4115">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4115">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-4116">Текущий тип — <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4116">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="92aaa-4117">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4117">-or-</span></span> 
<span data-ttu-id="92aaa-4118">Текущий тип — <see langword="ByRef" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4118">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="92aaa-4119">То есть <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4119">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericSignatureType">
      <MemberSignature Language="C#" Value="public static Type MakeGenericSignatureType (Type genericTypeDefinition, params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericSignatureType(class System.Type genericTypeDefinition, class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericSignatureType(System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericSignatureType (genericTypeDefinition As Type, ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericSignatureType(Type ^ genericTypeDefinition, ... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="static member MakeGenericSignatureType : Type * Type[] -&gt; Type" Usage="System.Type.MakeGenericSignatureType (genericTypeDefinition, typeArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericTypeDefinition" Type="System.Type" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="typeArguments" Type="System.Type[]" Index="1" FrameworkAlternate="netcore-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="genericTypeDefinition">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="92aaa-4120">Массив типов, который должен быть замещен параметрами типа текущего универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4120">An array of types to be substituted for the type parameters of the current generic type.</span></span></param>
        <summary><span data-ttu-id="92aaa-4121">Замещает элементы массива типов для параметров определения текущего универсального типа и возвращает объект <see cref="T:System.Type" />, представляющий сконструированный результирующий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4121">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4122"><see cref="T:System.Type" /> представляет сконструированный тип, сформированный путем замещения элементов объекта <paramref name="typeArguments" /> параметрами текущего универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4122">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4123"><xref:System.Type.MakeGenericType%2A> Метод позволяет написать код, который назначает определенные типы параметров типа определения универсального типа, тем самым создавая <xref:System.Type> , представляющий определенный сконструированный тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4123">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="92aaa-4124">Это можно использовать <xref:System.Type> объект для создания экземпляров во время выполнения сконструированного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4124">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="92aaa-4125">Конструировать типы с <xref:System.Type.MakeGenericType%2A> могут быть открыты, то есть некоторые их аргументы могут быть параметры типа заключающих универсальные методы и типы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4125">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="92aaa-4126">Такие открытые сконструированные типы можно использовать при выпуске динамических сборок.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4126">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="92aaa-4127">Например, рассмотрим классы `Base` и `Derived` в следующем коде.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4127">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="92aaa-4128">Для создания `Derived` в динамической сборке, бывает необходимо построить его базовый тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4128">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="92aaa-4129">Чтобы сделать это, вызовите <xref:System.Type.MakeGenericType%2A> метод <xref:System.Type> объект, представляющий класс `Base`, используя аргументы универсального типа <xref:System.Int32> и параметр типа `V` из `Derived`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4129">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="92aaa-4130">Так как типы и параметры универсального типа, оба представлены <xref:System.Type> объектов, можно передать массив, содержащий оба <xref:System.Type.MakeGenericType%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4130">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-4131">Сконструированный тип, такой как `Base<int, V>` будет полезно при запуске выпуска кода, но нельзя вызывать <xref:System.Type.MakeGenericType%2A> метод для этого типа, так как он не является определением универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4131">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="92aaa-4132">Для создания закрытого сконструированного типа, которое может быть создано, сначала вызовите <xref:System.Type.GetGenericTypeDefinition%2A> метод для получения <xref:System.Type> объект, представляющий определение универсального типа, а затем вызвать <xref:System.Type.MakeGenericType%2A> с аргументами требуемому типу.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4132">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="92aaa-4133"><xref:System.Type> Объект, возвращаемый <xref:System.Type.MakeGenericType%2A> совпадает со значением <xref:System.Type> получен путем вызова <xref:System.Object.GetType%2A> метод итоговый сконструированный тип, или <xref:System.Object.GetType%2A> метод любого сконструированный тип, который был создан с использованием того же универсального Определение типа, с теми же аргументами типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4133">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92aaa-4134">Массив универсальных типов сама по себе не универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4134">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="92aaa-4135">Нельзя вызывать <xref:System.Type.MakeGenericType%2A> массива введите например `C<T>[]` (`Dim ac() As C(Of T)` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4135">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="92aaa-4136">Для создания закрытого универсального типа из `C<T>[]`, вызовите <xref:System.Type.GetElementType%2A> для получения определения универсального типа `C<T>`; вызвать <xref:System.Type.MakeGenericType%2A> в определении универсального типа для создания сконструированного типа; и Наконец вызовите <xref:System.Type.MakeArrayType%2A> метод сконструированный тип, чтобы создать тип массива.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4136">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="92aaa-4137">То же самое относится и к типы указателей и `ref` типов (`ByRef` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4137">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="92aaa-4138">Список неизменяемых условий для терминов, используемых в отражении универсальных типов, см. в примечаниях к описанию свойства <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4138">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="92aaa-4139">Вложенные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-4139">Nested Types</span></span>  
 <span data-ttu-id="92aaa-4140">Если универсальный тип определен с помощью C#, C++ или Visual Basic, его вложенные типы являются универсальными.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4140">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="92aaa-4141">Это справедливо, даже если вложенные типы не имеют тип параметров собственные, так как все три языка включают параметры типа заключающих типов в список параметров вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4141">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="92aaa-4142">Рассмотрим следующие классы:</span><span class="sxs-lookup"><span data-stu-id="92aaa-4142">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="92aaa-4143">Список параметров типа вложенного класса `Inner` имеет два параметра типа, `T` и `U`, первая из которых является параметром типа включающего класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4143">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="92aaa-4144">Аналогичным образом, список параметров типа вложенного класса `Innermost1` принимает три параметра типа, `T`, `U`, и `V`, с помощью `T` и `U` ожидается классами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4144">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="92aaa-4145">Вложенный класс `Innermost2` имеет два параметра типа, `T` и `U`, который поставляется с классами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4145">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="92aaa-4146">Если список параметров данного включающего типа имеет более одного параметра типа, все параметры типа в порядке будут включены в списке параметров типа вложенного типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4146">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="92aaa-4147">Для конструирования универсального типа из определения универсального типа для вложенного типа, вызовите <xref:System.Type.MakeGenericType%2A> метод с массивом, сформированном путем объединения всех заключающих типов, начиная с внешней универсального типа, и заканчивая массивов аргументов Массив аргументов типа вложенного типа, если он имеет свои собственные параметры типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4147">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="92aaa-4148">Чтобы создать экземпляр `Innermost1`, вызовите <xref:System.Type.MakeGenericType%2A> метод с массив, содержащий три типа, присваиваемое T, U и V. Чтобы создать экземпляр `Innermost2`, вызовите <xref:System.Type.MakeGenericType%2A> метод с массив, содержащий два типа, присваиваемое T и U.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4148">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="92aaa-4149">Языки программирования распространяют параметры типа заключающих типов таким образом, чтобы использовать параметры типа вмещающего типа для определения полей вложенных типов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4149">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="92aaa-4150">В противном случае параметры типа в области в телах вложенные типы не будет.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4150">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="92aaa-4151">Можно определить вложенные типы без распространения параметры типа заключающих типов, путем создания кода в динамических сборках, или с помощью [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4151">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="92aaa-4152">Рассмотрим следующий код для ассемблера MSIL.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4152">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="92aaa-4153">В этом примере не можно определить поля типа `T` или `U` в классе `Innermost`, так как таких параметров типа находятся вне области.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4153">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="92aaa-4154">Следующий код ассемблера определения вложенных классов, которые ведут себя так, определенных в C++, Visual Basic и C#.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4154">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="92aaa-4155">Можно использовать [Ildasm.exe (дизассемблер IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) для проверки вложенные классы, определенные в языках высокого уровня и наблюдать за такая схема именования.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4155">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4156">В следующем примере используется <xref:System.Type.MakeGenericType%2A> метод для создания сконструированного типа из определения универсального типа для <xref:System.Collections.Generic.Dictionary%602> типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4156">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="92aaa-4157">Представляет сконструированный тип <xref:System.Collections.Generic.Dictionary%602> из `Test` объектов со строковыми ключами.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4157">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92aaa-4158">Текущий тип не представляет определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4158">The current type does not represent a generic type definition.</span></span> <span data-ttu-id="92aaa-4159">То есть <see cref="P:System.Type.IsGenericTypeDefinition" /> возвращает <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4159">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-4160"><paramref name="typeArguments" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4160"><paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="92aaa-4161">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4161">-or-</span></span> 
<span data-ttu-id="92aaa-4162">Любой элемент <paramref name="typeArguments" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4162">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-4163">Количество элементов в <paramref name="typeArguments" /> не совпадает с количеством параметров типа в текущем определении универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4163">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span></span>  
  
<span data-ttu-id="92aaa-4164">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4164">-or-</span></span> 
<span data-ttu-id="92aaa-4165">Элементы <paramref name="typeArguments" /> не соответствуют ограничениям, указанным для соответствующего параметра типа текущего определения универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4165">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span></span>  
  
<span data-ttu-id="92aaa-4166">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4166">-or-</span></span> 
 <span data-ttu-id="92aaa-4167"><paramref name="typeArguments" /> содержит элемент, который является типом указателя (<see cref="P:System.Type.IsPointer" /> возвращает <see langword="true" />), типом доступа по ссылке (<see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />) или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4167"><paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4168">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4168">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="92aaa-4169">Реализацию должны обеспечивать производные классы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4169">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="92aaa-4170">Отражение и универсальные типы</span><span class="sxs-lookup"><span data-stu-id="92aaa-4170">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="92aaa-4171">Практическое руководство. Изучение универсальных типов и создание их экземпляров при помощи отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-4171">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-4172">Возвращает объект <see cref="T:System.Type" />, который представляет указатель на текущий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4172">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4173">Объект <see cref="T:System.Type" />, который представляет указатель на текущий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4173">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4174"><xref:System.Type.MakePointerType%2A> Метод предоставляет способ для создания типов указателя для списки параметров.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4174">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="92aaa-4175">С помощью синтаксиса промежуточного языка Майкрософт (MSIL), если текущий <xref:System.Type> представляет объект <xref:System.Int32>, этот метод возвращает <xref:System.Type> объект, представляющий `Int32*`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4175">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4176">В следующем примере кода создается массив, `ref` (`ByRef` в Visual Basic) и типы указателей для `Test` класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4176">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4177">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4177">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-4178">Текущий тип — <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4178">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="92aaa-4179">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4179">-or-</span></span> 
<span data-ttu-id="92aaa-4180">Текущий тип — <see langword="ByRef" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4180">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="92aaa-4181">То есть <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4181">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4182">Возвращает значение <see cref="T:System.Reflection.MemberTypes" />, позволяющее определить, каким типом является этот член: обычным или вложенным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4182">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></summary>
        <value><span data-ttu-id="92aaa-4183">Значение <see cref="T:System.Reflection.MemberTypes" />, позволяющее определить, каким типом является этот член: обычным или вложенным.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4183">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4184">Это свойство переопределяет <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4184">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="92aaa-4185">Таким образом, при анализе набора <xref:System.Reflection.MemberInfo> объектов: например, массив, возвращаемый <xref:System.Type.GetMembers%2A> - <xref:System.Reflection.MemberInfo.MemberType%2A> возвращает <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> когда данный элемент является вложенным типом.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4185">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="92aaa-4186">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство применяется к определению универсального типа, из которого был создан тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4186">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="92aaa-4187">Например если текущий <xref:System.Type> представляет `MyGenericType<int>` (`MyGenericType(Of Integer)` в Visual Basic), значение этого свойства определяется `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4187">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="92aaa-4188">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство всегда возвращает <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4188">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4189">В следующем коде показано в примере `MemberType` поле в качестве параметра `GetMember` метод:</span><span class="sxs-lookup"><span data-stu-id="92aaa-4189">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4190">Представляет отсутствующее значение в данных объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4190">Represents a missing value in the <see cref="T:System.Type" /> information.</span></span> <span data-ttu-id="92aaa-4191">Это поле доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4191">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4192">Используйте `Missing` для вызова через отражение для получения значения параметра по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4192">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="92aaa-4193">Если `Missing` передается в качестве значения параметра, а не значение по умолчанию для этого параметра <xref:System.ArgumentException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4193">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4194">В следующем примере кода показано использование `Missing` поля для вызова метода с аргументами по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4194">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="92aaa-4195">Этот код выводит следующие результаты:</span><span class="sxs-lookup"><span data-stu-id="92aaa-4195">This code produces the following output:</span></span>  
  
 <span data-ttu-id="92aaa-4196">= 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="92aaa-4196">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="92aaa-4197">= 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="92aaa-4197">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="92aaa-4198">= 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="92aaa-4198">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4199">Возвращает модуль (DLL), в котором определен текущий объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4199">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span></span></summary>
        <value><span data-ttu-id="92aaa-4200">Модуль, в котором определен текущий объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4200">The module in which the current <see cref="T:System.Type" /> is defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4201">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство возвращает модуль, в котором был определен определения универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4201">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="92aaa-4202">Например, если создать экземпляр `MyGenericStack<int>`, <xref:System.Type.Module%2A> свойство для сконструированного типа возвращает модуль, в котором `MyGenericStack<T>` определен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4202">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="92aaa-4203">Аналогично Если текущий <xref:System.Type> представляет универсальный параметр `T`, это свойство возвращает сборку, содержащую универсальный тип, который определяет `T`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4203">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4204">В следующем примере показано использование <xref:System.Type.Namespace%2A> и `Module` свойства и <xref:System.Type.ToString%2A> метод <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4204">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4205">При переопределении в производном классе получает имя текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4205">When overridden in a derived class, gets the name of the current type.</span></span></summary>
        <value><span data-ttu-id="92aaa-4206">Имя текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4206">The name of the current type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4207">Возвращает пространство имен объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4207">Gets the namespace of the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-4208">Пространство имен <see cref="T:System.Type" /> или значение <see langword="null" />, если текущий экземпляр не имеет пространства имен или представляет универсальный параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4208">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4209">Пространство имен — логический разработки именования удобства используется главным образом для определения области в приложении и организации классов и других типов в виде одного иерархической структуры.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4209">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="92aaa-4210">С точки зрения среды выполнения отсутствуют пространства имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4210">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="92aaa-4211">Если текущий <xref:System.Type> представляет сконструированный универсальный тип, это свойство возвращает пространство имен, содержащее определение универсального типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4211">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="92aaa-4212">Аналогично Если текущий <xref:System.Type> представляет универсальный параметр `T`, это свойство возвращает пространство имен, содержащее определение универсального типа, который определяет `T`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4212">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="92aaa-4213">Если текущий <xref:System.Type> представляет универсальный параметр, это свойство возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4213">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4214">В следующем примере показано использование `Namespace` и <xref:System.Type.Module%2A> свойства и <xref:System.Type.ToString%2A> метод <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4214">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-4215">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-4215">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="92aaa-4216">Первый из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4216">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="92aaa-4217">Второй из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4217">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="92aaa-4218">Определение равенства двух объектов <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4218">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4219"><see langword="true" />, если значения параметров <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4219"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="right" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="92aaa-4220">Первый из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4220">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="92aaa-4221">Второй из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4221">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="92aaa-4222">Определяет неравенство двух объектов <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4222">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4223"><see langword="true" />, если значения <paramref name="left" /> и <paramref name="right" /> не равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4223"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4224">Возвращает объект класса, который использовался для получения этого члена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4224">Gets the class object that was used to obtain this member.</span></span></summary>
        <value><span data-ttu-id="92aaa-4225">Объект <see langword="Type" />, с помощью которого был получен данный объект <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4225">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4226">Для <xref:System.Type> объекты, значение этого свойства всегда равно таким же, как значение <xref:System.Type.DeclaringType%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4226">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4227">В этом примере отраженный тип вложенного класса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4227">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="92aaa-4228">Имя искомого типа <see cref="T:System.Type" /> с указанием сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4228">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span></span></param>
        <param name="throwIfNotFound"><span data-ttu-id="92aaa-4229">Значение <see langword="true" />, чтобы в случае невозможности найти тип создавалось исключение <see cref="T:System.TypeLoadException" />; значение <see langword="false" />, чтобы при невозможности найти тип возвращалось значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4229"><see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span></span> <span data-ttu-id="92aaa-4230">Кроме того, при указании значения <see langword="false" /> подавляются некоторые другие условия возникновения исключений, но не все из них.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4230">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="92aaa-4231">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-4231">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="92aaa-4232">Значение <see langword="true" />, чтобы не учитывать регистр при поиске <paramref name="typeName" />, значение <see langword="false" />, чтобы учитывать регистр при поиске <paramref name="typeName" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4232"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />; <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="92aaa-4233">Возвращает объект <see cref="T:System.Type" /> с заданным именем, позволяющий определить, будет ли учитываться регистр при поиске, и будет ли создаваться исключение в случае невозможности найти тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4233">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span></span> <span data-ttu-id="92aaa-4234">Тип загружается не для выполнения, а только для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4234">The type is loaded for reflection only, not for execution.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4235">Тип с указанным именем, если он существует; в противном случае — значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4235">The type with the specified name, if found; otherwise, <see langword="null" />.</span></span> <span data-ttu-id="92aaa-4236">Если тип не найден, параметр <paramref name="throwIfNotFound" /> определяет дальнейшее действие — возврат значения <see langword="null" /> или создание исключения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4236">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="92aaa-4237">В некоторых случаях исключение создается независимо от значения параметра <paramref name="throwIfNotFound" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4237">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span></span> <span data-ttu-id="92aaa-4238">См. раздел "Исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-4238">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4239">Если сборка, содержащая тип еще не загружена в контекст только для отражения, с помощью <xref:System.Type.ReflectionOnlyGetType%2A> метод является эквивалентно первой загрузке сборки, а только для отражения с помощью <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> метода и затем загрузив тип путем вызова сборки <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4239">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="92aaa-4240">Сведения об именах, с указанием сборки см. в разделе <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4240">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="92aaa-4241">Дополнительные сведения об указании имен типов см. в разделе <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4241">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="92aaa-4242">Если сборка уже загружена для выполнения, другая копия загружается в контекст только для отражения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4242">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="92aaa-4243">`throwIfNotFound` Параметр указывает, что произойдет, если тип не найден, а также подавляются некоторые другие условия исключения, как описано в раздел "исключения".</span><span class="sxs-lookup"><span data-stu-id="92aaa-4243">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="92aaa-4244">Некоторые исключения создаются независимо от значения `throwIfNotFound`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4244">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="92aaa-4245">Например, если сборка не является допустимым <xref:System.BadImageFormatException> возникает даже в том случае, если `throwIfNotFound` является `false`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4245">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="92aaa-4246">Дополнительные сведения об использовании в контексте только для отражения, см. в разделе [как: Загрузка сборок в контекст, предназначенный только для отражения](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4246">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="92aaa-4247"><paramref name="typeName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4247"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="92aaa-4248">Инициализатор класса вызывается и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4248">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="92aaa-4249"><paramref name="throwIfNotFound" /> имеет значение <see langword="true" />, и тип не найден.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4249"><paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="92aaa-4250">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4250">-or-</span></span> 
 <span data-ttu-id="92aaa-4251"><paramref name="throwIfNotFound" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимые знаки, например внедренные табуляции.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4251"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="92aaa-4252">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4252">-or-</span></span> 
 <span data-ttu-id="92aaa-4253"><paramref name="throwIfNotFound" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> является пустой строкой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4253"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="92aaa-4254">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4254">-or-</span></span> 
 <span data-ttu-id="92aaa-4255"><paramref name="throwIfNotFound" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> представляет тип массива с недопустимым размером.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4255"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="92aaa-4256">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4256">-or-</span></span> 
 <span data-ttu-id="92aaa-4257"><paramref name="typeName" /> представляет массив объектов <see cref="T:System.TypedReference" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4257"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92aaa-4258"><paramref name="typeName" /> не включает имя сборки.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4258"><paramref name="typeName" /> does not include the assembly name.</span></span>  
  
<span data-ttu-id="92aaa-4259">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4259">-or-</span></span> 
 <span data-ttu-id="92aaa-4260"><paramref name="throwIfNotFound" /> имеет значение <see langword="true" />, и <paramref name="typeName" /> содержит недопустимый синтаксис (например, "MyType[,\*,]").</span><span class="sxs-lookup"><span data-stu-id="92aaa-4260"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="92aaa-4261">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4261">-or-</span></span> 
 <span data-ttu-id="92aaa-4262"><paramref name="typeName" /> представляет универсальный тип, имеющий тип указателя, тип <see langword="ByRef" /> или <see cref="T:System.Void" /> в качестве одного из его аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4262"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="92aaa-4263">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4263">-or-</span></span> 
 <span data-ttu-id="92aaa-4264"><paramref name="typeName" /> представляет универсальный тип, который содержит неправильное количество аргументов типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4264"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="92aaa-4265">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4265">-or-</span></span> 
 <span data-ttu-id="92aaa-4266"><paramref name="typeName" /> представляет универсальный тип, и один из его аргументов типа не удовлетворяет ограничениям для соответствующего параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4266"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="92aaa-4267"><paramref name="throwIfNotFound" /> имеет значение <see langword="true" />, и не удалось найти сборку либо одну из ее зависимостей.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4267"><paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="92aaa-4268">Сборка или одна из ее зависимостей найдена, но не может быть загружена.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4268">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="92aaa-4269">Сборка или одна из ее зависимостей является недопустимой.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4269">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="92aaa-4270">-или-</span><span class="sxs-lookup"><span data-stu-id="92aaa-4270">-or-</span></span> 
<span data-ttu-id="92aaa-4271">Сборка была скомпилирована в более поздней версии среды CLR, чем версия, загруженная в текущий момент.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4271">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="92aaa-4272">Указание полных имен типов</span><span class="sxs-lookup"><span data-stu-id="92aaa-4272">Specifying Fully Qualified Type Names</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md"><span data-ttu-id="92aaa-4273">Практическое руководство. Загрузка сборок в контекст, предназначенный только для отражения</span><span class="sxs-lookup"><span data-stu-id="92aaa-4273">How to: Load Assemblies into the Reflection-Only Context</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4274">Возвращает атрибут <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />, описывающий структуру текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4274">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span></span></summary>
        <value><span data-ttu-id="92aaa-4275">Возвращает атрибут <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />, описывающий общие особенности структуры текущего типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4275">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4276"><xref:System.Runtime.InteropServices.StructLayoutAttribute> не возвращаемый <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4276"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="92aaa-4277">Используйте это свойство для его получения.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4277">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4278">В следующем примере кода сначала определяет класс, структуру и структуру с особыми атрибутами размещения (структуры вложены в классе).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4278">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="92aaa-4279">Затем в примере используется <xref:System.Type.StructLayoutAttribute%2A> свойство для получения <xref:System.Runtime.InteropServices.StructLayoutAttribute> для каждого типа и отображает свойства атрибутов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4279">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4280">Вызванный метод не поддерживается в базовом классе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4280">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="92aaa-4281">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4281">Reserved for future use.</span></span> <span data-ttu-id="92aaa-4282">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4282">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="92aaa-4283">Переданный массив имен, которые необходимо сопоставить.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4283">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="92aaa-4284">Количество сопоставляемых имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4284">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="92aaa-4285">Контекст языкового стандарта для интерпретации имен.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4285">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="92aaa-4286">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4286">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="92aaa-4287">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4287">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4288">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4288">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="92aaa-4289">Дополнительные сведения о `IDispatch::GetIDsOfNames`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4289">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="92aaa-4290">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4290">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="92aaa-4291">Возвращаемые сведения о типе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4291">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="92aaa-4292">Идентификатор языкового стандарта для сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4292">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="92aaa-4293">Указатель на объект с запрошенными сведениями о типе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4293">A pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="92aaa-4294">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4294">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4295">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4295">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="92aaa-4296">Дополнительные сведения о `IDispatch::GetTypeInfo`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4296">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="92aaa-4297">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4297">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="92aaa-4298">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4298">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="92aaa-4299">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</span><span class="sxs-lookup"><span data-stu-id="92aaa-4299">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4300">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4300">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="92aaa-4301">Дополнительные сведения о `IDispatch::GetTypeInfoCount`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4301">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="92aaa-4302">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4302">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="92aaa-4303">Идентифицирует член.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4303">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="92aaa-4304">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4304">Reserved for future use.</span></span> <span data-ttu-id="92aaa-4305">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4305">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="92aaa-4306">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4306">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="92aaa-4307">Флаги, описывающие контекст вызова.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4307">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="92aaa-4308">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4308">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="92aaa-4309">Указатель, по которому будет сохранен результат.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4309">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="92aaa-4310">Указатель на структуру, содержащую сведения об исключении.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4310">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="92aaa-4311">Индекс первого аргумента, вызвавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4311">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="92aaa-4312">Предоставляет доступ к открытым свойствам и методам объекта.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4312">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4313">Этот метод предназначен для доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4313">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="92aaa-4314">Дополнительные сведения о `IDispatch::Invoke`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4314">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="92aaa-4315">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4315">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92aaa-4316">Возвращает объект типа <see langword="String" />, представляющий имя текущего объекта <see langword="Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4316">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span></span></summary>
        <returns><span data-ttu-id="92aaa-4317">Объект типа <see cref="T:System.String" />, представляющий имя текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4317">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4318">Этот метод возвращает полное распространенных пространством имен среды CLR и имя для всех типов-примитивов.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4318">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="92aaa-4319">Например, C# инструкция `(long)0.Type().ToString()` возвращает «System.Int64» вместо просто «Int64».</span><span class="sxs-lookup"><span data-stu-id="92aaa-4319">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="92aaa-4320">Если текущий <xref:System.Type> представляет универсальный тип, тип и его аргументов типа являются уточненными пространством имен и вложенного типа, но не сборку.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4320">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="92aaa-4321">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или универсального метода, этот метод возвращает неполное имя параметра типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4321">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4322">В следующем примере показано использование <xref:System.Type.Namespace%2A> и <xref:System.Type.Module%2A> свойства и `ToString` метод <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4322">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="92aaa-4323">В следующем примере сравниваются строки, возвращаемые <xref:System.Type.ToString%2A> метод и `Name`, <xref:System.Type.FullName%2A>, и <xref:System.Type.AssemblyQualifiedName%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4323">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4324">Возвращает дескриптор текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4324">Gets the handle for the current <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="92aaa-4325">Дескриптор текущего объекта <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4325">The handle for the current <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4326">`TypeHandle` Инкапсулирует указатель на внутреннюю структуру данных, представляющий тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4326">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="92aaa-4327">Этот дескриптор является уникальным во время существования процесса.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4327">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="92aaa-4328">Дескриптор действителен только в домене приложения, в котором они были получены.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4328">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92aaa-4329">В следующем примере возвращает дескриптор соответствующего типа и передает дескриптор методу, который возвращает тип из дескриптора и отображает его.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4329">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="92aaa-4330">Платформа .NET Compact Framework в настоящее время не поддерживает это свойство.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4330">The .NET Compact Framework does not currently support this property.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4331">Возвращает инициализатор типа.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4331">Gets the initializer for the type.</span></span></summary>
        <value><span data-ttu-id="92aaa-4332">Объект, содержащий имя конструктора класса <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4332">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92aaa-4333">Инициализаторы класса также доступны через <xref:System.Type.FindMembers%2A> метод, или с помощью перегрузки <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, и <xref:System.Type.GetConstructors%2A> методов, принимающих <xref:System.Reflection.BindingFlags> как параметр.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4333">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="92aaa-4334">Если текущий <xref:System.Type> представляет параметр типа в определении универсального типа или метода, это свойство возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4334">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92aaa-4335">Указывает на тип, предоставляемый средой CLR, представляющей этот тип.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4335">Indicates the type provided by the common language runtime that represents this type.</span></span></summary>
        <value><span data-ttu-id="92aaa-4336">Базовый системный тип текущего типа <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="92aaa-4336">The underlying system type for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>