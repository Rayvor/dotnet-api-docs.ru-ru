<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d577b6fe34c83add2d3a31468d7c3d5080dd02fc" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73400935" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет члены для задания и получения данных о контексте приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Класс <xref:System.AppContext> позволяет создателям библиотек предоставлять единообразный механизм отказа от новых функциональных возможностей для пользователей. Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ. Эта возможность обычно важна при внесении изменений в существующие функции. В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.

## <a name="appcontext-for-library-developers"></a>AppContext для разработчиков библиотек
 Библиотеки используют класс <xref:System.AppContext> для определения и предоставления переключателей совместимости, тогда как пользователи библиотеки могут задавать эти параметры для влияния на поведение библиотеки. По умолчанию библиотеки предоставляют новые функции и изменяют их (то есть предоставляют прежние функции) только в том случае, если установлен параметр.  Это позволяет библиотекам предоставлять новое поведение для существующего API, продолжая поддерживать вызывающие объекты, которые зависят от предыдущего поведения.

### <a name="defining-the-switch-name"></a>Определение имени коммутатора
 Самый распространенный способ разрешить пользователям вашей библиотеки отказаться от изменения поведения — определить именованный коммутатор.  Элемент `value` — это пара "имя-значение", которая состоит из имени переключателя и его <xref:System.Boolean>ного значения.  По умолчанию параметр всегда неявным образом `false`, что обеспечивает новое поведение (и по умолчанию создает новый вариант поведения). Присвоение параметру значения `true` включает его, что обеспечивает устаревшее поведение. Явное присвоение параметру значения `false` также обеспечивает новое поведение.

 Рекомендуется использовать единообразный формат для имен коммутаторов, так как они представляют собой формальный контракт, предоставляемый библиотекой. Ниже приведены два очевидных формата:

-   *параметр*.*пространство_имен* *имя_параметра*

-   *параметр*.*библиотека*.*имя_параметра*

 После определения и документирования переключателя вызывающие объекты могут использовать его с помощью реестра, добавив элемент [\<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) в файл конфигурации приложения или вызвав метод <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> программным способом. Дополнительные сведения о том, как вызывающие объекты используют и устанавливают значения параметров конфигурации <xref:System.AppContext>, см. в разделе " [потребители для потребителей библиотеки](#ForConsumers) ".

 Когда среда CLR запускает приложение, она автоматически считывает параметры совместимости реестра и загружает файл конфигурации приложения, чтобы заполнить экземпляр <xref:System.AppContext> приложения. Так как экземпляр <xref:System.AppContext> заполняется вызывающей стороной или средой выполнения, нет необходимости предпринимать какие-либо действия, такие как вызов метода <xref:System.AppContext.SetSwitch%2A>, для настройки экземпляра <xref:System.AppContext>.

### <a name="checking-the-setting"></a>Проверка параметра
 Затем можно проверить, объявил ли потребитель значение параметра, и выполнить действие соответствующим образом, вызвав метод <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType>. Метод возвращает `true`, если найден аргумент `switchName`, и когда метод возвращает значение, его `isEnabled` аргумент указывает параметр.  В противном случае метод возвращает значение `false`.

### <a name="an-example"></a>Пример
 В следующем примере показано использование класса <xref:System.AppContext>, позволяющего клиенту выбрать исходное поведение метода библиотеки.   Ниже приведена версия 1,0 библиотеки с именем `StringLibrary`. Он определяет `SubstringStartsAt` метод, который выполняет порядковое сравнение для определения начального индекса подстроки в более длинной строке.

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 В следующем примере библиотека используется для поиска начального индекса подстроки "арчæ" в "арчаеологист". Так как метод выполняет порядковое сравнение, не удается найти подстроку.

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 Однако версия 2 библиотеки изменяет метод `SubstringStartsAt` для использования сравнения с учетом языка и региональных параметров.

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 При повторной компиляции приложения для выполнения в новой версии библиотеки теперь сообщается о том, что подстрока "арчæ" найдена по индексу 4 в "арчаеологист".

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 Это изменение можно предотвратить, разбивая приложения, которые зависят от исходного поведения, определив [\<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) Switch. В этом случае параметр имеет имя `StringLibrary.DoNotUseCultureSensitiveComparison`. Значение по умолчанию `false`указывает, что библиотека должна выполнять сравнение с учетом языка и региональных параметров версии 2,0. `true` указывает, что в библиотеке должно выполняться порядковое сравнение версии 1,0.  Небольшое изменение предыдущего кода позволяет потребителю библиотеки установить переключатель для определения типа сравнения, выполняемого методом.

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 Если приложение может использовать следующий файл конфигурации для восстановления поведения версии 1,0.

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 При запуске приложения с файлом конфигурации выдается следующий результат:

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a>AppContext для потребителей библиотек
 Если вы являетесь потребителем библиотеки, класс <xref:System.AppContext> позволяет воспользоваться преимуществами механизма отказа библиотеки или библиотеки для новых функциональных возможностей.   Отдельные методы вызываемой библиотеки классов определяют конкретные переключатели, которые включают или отключают новое поведение. Значением параметра является логическое значение. Если это `false`, которое обычно является значением по умолчанию, новое поведение включено. Если это `true`, новое поведение будет отключено, а элемент — как раньше.

 Можно задать значение переключателя одним из четырех способов.

-   Путем вызова метода <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> в коде.  Аргумент `switchName` определяет имя переключателя, а свойство `isEnabled` определяет значение переключателя. Поскольку <xref:System.AppContext> является статическим классом, он доступен для каждого приложения в отдельном домене.

     Вызов <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> имеет область приложения; то есть он влияет только на приложение.

-   Добавив элемент `<AppContextSwitchOverrides>` в раздел [> среды выполнения\<](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) файла App. config. Параметр имеет один атрибут `value`, значение которого представляет собой строку, представляющую пару "ключ-значение", содержащую как имя коммутатора, так и его значение.

     Чтобы определить несколько переключателей, разделяйте пары "ключ-значение" каждого переключателя в `value` [\<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) элемента точкой с запятой. В этом случае элемент `<AppContextSwitchOverrides>` имеет следующий формат:

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     Использование элемента `<AppContextSwitchOverrides>` для определения параметра конфигурации имеет область приложения; то есть он влияет только на приложение.

    > [!NOTE]
    > Сведения о параметрах, определенных .NET Framework, см. в [\<элементе > AppContextSwitchOverrides](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).

-   Добавив строковое значение, имя которого является именем коммутатора, в `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` ключ в реестре. Его значение должно быть строковым представлением <xref:System.Boolean>, которое можно проанализировать с помощью метода <xref:System.Boolean.Parse%2A?displayProperty=nameWithType>. то есть он должен иметь значение "true", "true", "false" или "false". Если среда выполнения встречает любое другое значение, параметр игнорируется.

     Использование реестра для определения параметра <xref:System.AppContext> на уровне компьютера; то есть он влияет на каждое приложение, выполняющееся на компьютере.

- Для приложений ASP.NET вы добавляете [\<добавить >](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) элемент в раздел [\<appSettings >](~/docs/framework/configure-apps/file-schema/appsettings/index.md) файла Web. config. Например:

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

 Если один и тот же параметр задан несколькими способами, порядок приоритета для определения того, какой параметр переопределяет другие:

1.  Программный параметр.

2.  Параметр в файле конфигурации приложения или в файле Web. config.

3.  Параметр реестра.

 Ниже приведено простое приложение, которое передает универсальный код ресурса (URI) файла методу <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType>.  При запуске в .NET Framework 4,6 возникает исключение <xref:System.ArgumentException>, так как `file://` больше не является допустимой частью пути к файлу.

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 Чтобы восстановить предыдущее поведение метода и предотвратить его, можно добавить `Switch.System.IO.UseLegacyPathHandling` коммутатора в файл конфигурации приложения для примера:

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a>См. также
[AppContext, параметр](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd">Элемент&gt; среды выполнения &lt;</related>
    <related type="Article" href="https://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752">&lt;AppContextSwitchOverrides&gt; элемент</related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает путь к базовому каталогу, в котором сопоставитель сборок производит поиск.</summary>
        <value>Путь к базовому каталогу, в котором сопоставитель сборок производит поиск.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Это свойство для каждого домена приложения. Его значение соответствует свойству <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> текущего домена приложения.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Имя элемента данных.</param>
        <summary>Возвращает значение именованного элемента данных, назначенное текущему домену приложения.</summary>
        <returns>Значение <paramref name="name" />, если <paramref name="name" /> определяет именованное значение; в противном случае — <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">Имя переключателя.</param>
        <param name="isEnabled">Значение переключателя.</param>
        <summary>Задает значение переключателя.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Класс <xref:System.AppContext> позволяет создателям библиотек предоставлять единообразный механизм отказа от новых функциональных возможностей для пользователей. Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ. Эта возможность обычно важна при внесении изменений в существующие функции. В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.

 Метод <xref:System.AppContext.SetSwitch%2A> вызывается приложением (или библиотекой) для объявления значения параметра (который всегда является <xref:System.Boolean> значением), определяемым зависимой библиотекой. Параметр всегда неявно `false`, что обеспечивает новое поведение. Присвоение параметру значения `true` включает его, что обеспечивает устаревшее поведение. Явное присвоение параметру значения `false` также обеспечивает новое поведение. Зависимая библиотека может затем проверить значение переключателя, вызвав метод <xref:System.AppContext.TryGetSwitch%2A>.

> [!NOTE]
> Рекомендуется использовать единообразный формат для имен коммутаторов, так как они представляют собой формальный контракт, предоставляемый библиотекой. Ниже приведены два очевидных формата:
>
> -   *параметр*.*пространство_имен* *имя_параметра*
> -   *параметр*.*библиотека*.*имя_параметра*

 Для приложений, выполняющихся на .NET Framework, помимо установки значения переключателя программным способом, его можно также задать.

-   Добавив имя коммутатора и значение в элемент [\<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) в разделе [> среды выполнения\<](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) файла конфигурации приложения. Например, в следующем примере определяется переключатель с именем `Libraries.FPLibrary.UseExactFloatingPointComparison`, значение которого равно `False`.

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

-   Добавив строковое значение, имя которого является именем коммутатора, в `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` ключ в реестре. Его значение должно быть строковым представлением <xref:System.Boolean>, которое можно проанализировать с помощью метода <xref:System.Boolean.Parse%2A?displayProperty=nameWithType>. то есть он должен иметь значение "true", "true", "false" или "false".

 Если `switchName` уже существует, его значение перезаписывается аргументом `isEnabled`.  Это значит, что последний вызов метода <xref:System.AppContext.SetSwitch%2A> переопределяет значение, определенное в реестре, в файле конфигурации приложения или предыдущих вызовах метода <xref:System.AppContext.SetSwitch%2A>.

 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext. Сетсвитч и .NET Core

.NET Core поддерживает программные вызовы только с помощью метода <xref:System.AppContext.SetSwitch%2A>. Поддерживаются следующие параметры:

|Переключение|Значения|Описание|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|`true` или `false`|Указывает, включена ли поддержка протокола HTTP/2 (`true`) или отключена (`false`). Значение по умолчанию — disabled. Перед первым использованием <xref:System.Net.Http.HttpClient>необходимо задать параметр. Доступно начиная с версии .NET Core 3,0 Preview 4.|
|`System.Net.Http.UseSocketsHttpHandler` |`true` или `false`|Определяет, используются ли высокоуровневые API сети, такие как <xref:System.Net.Http.HttpClient>, <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) или <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).|

## Examples
 В следующей строке кода параметру с именем `Switch.AmazingLib.ThrowOnException` присваивается значение `true`, что позволяет выполнять устаревшее поведение. Затем библиотека может проверить, установил ли потребитель библиотеки значение переключателя, вызвав метод <xref:System.AppContext.TryGetSwitch%2A>.

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="switchName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="switchName" /> имеет значение <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя целевой версии платформы текущего приложения.</summary>
        <value>Имя целевой версии платформы текущего приложения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Имя целевой версии .NET Framework соответствует значению свойства <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType>. Список имен целевых платформ для .NET Framework см. в элементе [&lt;supportedRuntime&gt; element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) .

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string * bool -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">Имя переключателя.</param>
        <param name="isEnabled">При возвращении этого метода содержит значение для <paramref name="switchName" />, если <paramref name="switchName" /> найден, или <see langword="false" />, если <paramref name="switchName" /> не найден. Этот параметр передается неинициализированным.</param>
        <summary>Предпринимает попытку получения значения переключателя.</summary>
        <returns><see langword="true" />, если для <paramref name="switchName" /> задано значение и аргумент <paramref name="isEnabled" /> содержит значение переключателя; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Класс <xref:System.AppContext> позволяет создателям библиотек предоставлять единообразный механизм отказа от новых функциональных возможностей для пользователей. Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ. Эта возможность обычно важна при внесении изменений в существующие функции. В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.

 Среда CLR автоматически заполняет переключатели, назначенные экземпляру <xref:System.AppContext>, прочитав реестр и файл конфигурации приложения. Значения этих переключателей можно затем переопределить и добавить новые переключатели, вызвав метод <xref:System.AppContext.SetSwitch%2A>.

 Библиотека вызывает метод <xref:System.AppContext.TryGetSwitch%2A>, чтобы проверить, объявлены ли его потребители в значении параметра, а затем выполнить соответствующие действия.  По умолчанию, если параметр не определен, новые функции становятся доступными. Если параметр определен и его значение равно `false`, то также включается новая функциональность. Если его значение равно `true`, то унаследованное поведение включено.



## Examples
 В следующем примере определяется, был ли потребитель библиотеки установил переключатель с именем `Switch.AmazingLib.ThrowOnException`.

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="switchName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Свойство <paramref name="switchName" /> имеет значение <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
