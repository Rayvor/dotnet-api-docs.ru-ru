<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ad5ad967d190db85e1ed1595c011914829e054e" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67250102" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет члены для задания и получения данных о контексте приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.AppContext> Класс позволяет авторам библиотек предоставлять согласованный механизм явного отказа для новых функциональных возможностей для своих пользователей. Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ. Эта возможность обычно важна при внесении изменений в существующие функции. В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.

## <a name="appcontext-for-library-developers"></a>AppContext разработчикам библиотек
 Библиотеки используют <xref:System.AppContext> переключится на класс для определения и предоставления совместимости, время пользователи библиотеки могут задавать эти параметры для влияния на поведение библиотек. По умолчанию библиотеки предоставляют новые функции и изменяют их (то есть предоставляют прежние функции) только в том случае, если установлен параметр.  Это позволяет библиотекам предоставлять новое поведение для существующих API, продолжая поддерживать вызывающим объектам, которые зависят от прежнего поведения.

### <a name="defining-the-switch-name"></a>Определение имени параметра
 Наиболее распространенный способ разрешить потребители библиотеки отказаться от изменение поведения является определение именованного переключателя.  Его `value` элемент является парой имя/значение, состоящее из имени параметра и его <xref:System.Boolean> значение.  По умолчанию параметр всегда является неявно `false`, которое определяет новое поведение (и определяет новое поведение согласиться по умолчанию). Установив переключатель в `true` позволяет, которая предоставляет устаревшее поведение. Явно установив переключатель в `false` также определяет новое поведение.

 Это целесообразно использовать согласованный формат для имен параметров, так как они представляют собой формальный контракт, предоставляемый библиотекой. Ниже приведены два очевидных формата:

-   *параметр*.*пространство_имен* *имя_параметра*

-   *параметр*.*библиотека*.*имя_параметра*

 После определения и документировать переключателя, вызывающая сторона может использовать его с помощью реестра, добавив [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) элемент их файл конфигурации приложения или путем вызова <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> метод программным способом. См. в разделе [AppContext для пользователей библиотеки](#ForConsumers) Дополнительные сведения о способах вызывающим объектам использовать и установите для параметра <xref:System.AppContext> параметры конфигурации.

 Когда среда CLR запускает приложение, он автоматически считывает параметры реестра в режиме совместимости и загружает файл конфигурации приложения для заполнения приложения <xref:System.AppContext> экземпляра. Так как <xref:System.AppContext> экземпляр заполняется программным способом вызывающим или средой выполнения, не нужно предпринимать никаких действий, например, вызов <xref:System.AppContext.SetSwitch%2A> метод, чтобы настроить <xref:System.AppContext> экземпляра.

### <a name="checking-the-setting"></a>Проверка параметра
 Затем можно проверить, если объект-получатель объявило значение коммутатора и соответствующим образом путем вызова act <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> метод. Этот метод возвращает `true` Если `switchName` аргумента найдено, и при возвращении метода, ее `isEnabled` аргумент указывает значение переключателя.  В противном случае метод возвращает значение `false`.

### <a name="an-example"></a>Пример
 Следующий пример иллюстрирует использование <xref:System.AppContext> класс, позволяющий выбрать исходное поведение метода библиотеки клиент.   Ниже приведен версии 1.0 библиотеки с именем `StringLibrary`. Он определяет `SubstringStartsAt` метод, который выполняет порядковое сравнение для определения начальный индекс подстроки в строку большего размера.

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 Затем в следующем примере используется библиотека найти начальный индекс подстроки «archæ» в «archaeologist». Так как этот метод выполняет порядковое сравнение, не найден подстрока.

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 Тем не менее, изменении версии 2 библиотеки, `SubstringStartsAt` метод, чтобы использовать сравнение с учетом языка и региональных параметров.

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 При повторной компиляции приложения для работы с новой версией библиотеки, теперь сообщает, подстроку «archæ» найдено по индексу "4" в «archaeologist».

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 Это изменение можно предотвратить работу приложений, зависящих от исходное поведение, определив [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) переключения. В этом случае параметр с именем `StringLibrary.DoNotUseCultureSensitiveComparison`. Значение по умолчанию, `false`, указывает, что библиотеки должны выполнять его сравнение с учетом языка и региональных параметров версии 2.0. `true` Показывает, что библиотеки должны выполнять его сравнение по порядковому номеру версии 1.0.  Незначительное изменение предыдущего примера кода позволяет задать параметр, позволяющий определить используемый тип сравнения, которую выполняет метод потребителю библиотеки.

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 Если приложение затем может использовать следующий файл конфигурации для восстановления поведения версии 1.0.

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 При запуске приложения с помощью файла конфигурации, которые присутствуют, он выводит следующие результаты:

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a>AppContext для пользователей библиотеки
 Если вы являетесь потребитель библиотеки, <xref:System.AppContext> класс позволяет воспользоваться преимуществами библиотеки или метод библиотеки механизм явного отказа для новых функциональных возможностей.   Отдельные методы библиотеки классов, который вы вызываете определяют определенного переключатели для включения или отключения нового поведения. Логическое значение переключателя. Если это `false`, который обычно является значением по умолчанию, новое поведение включено; в случае `true`, новое поведение отключена, и член ведет себя по-другому.

 Значение параметра можно задать одним из четырех способов:

-   Путем вызова <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> метод в коде.  `switchName` Аргумент определяет имя коммутатора и `isEnabled` свойство определяет значение переключателя. Поскольку <xref:System.AppContext> является статическим классом, он доступен на основе на уровне домена приложения.

     Вызов <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> имеет область приложения; то есть затрагивает только приложения.

-   Добавив `<AppContextSwitchOverrides>` элемент [ \<среды выполнения >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) раздел файла app.config. Параметр имеет один атрибут, `value`, значение которого является строка, представляющая пару ключ/значение, содержащее имя параметра и его значение.

     Чтобы определить несколько коммутаторов, разделите пару ключ значение каждого переключателя в [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) элемента `value` атрибут точкой с запятой. В этом случае `<AppContextSwitchOverrides>` элемент имеет следующий формат:

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     С помощью `<AppContextSwitchOverrides>` для определения параметра конфигурации имеет область приложения; то есть он влияет на только приложение.

    > [!NOTE]
    > Сведения о переключателях, определенные платформой .NET Framework, см. в разделе [ \<AppContextSwitchOverrides > элемент](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).

-   Добавив строковое значение, имя которого является имя переключателя для `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` разделом реестра. Его значение должно быть строковым представлением <xref:System.Boolean> , может быть проанализировано по <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> метод, то есть он должен иметь значение «ИСТИНА», «true», «False» или «false». Если среда выполнения обнаруживает любое другое значение, он игнорирует ключ.

     С помощью реестра для определения <xref:System.AppContext> коммутатора есть области компьютера; то есть он влияет на каждое приложение, работающее на компьютере.

- Для приложений ASP.NET, добавить [ \<Добавить >](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) элемент [ \<appSettings >](~/docs/framework/configure-apps/file-schema/appsettings/index.md) раздел файла web.config. Например:

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

 Если вы задали тому же коммутатору в более чем одним способом, является порядок очередности для определения параметра, который переопределяет другие:

1.  Программный параметр.

2.  Параметр в файле конфигурации приложения или в файле web.config.

3.  Параметр реестра.

 Вот простое приложение, которое передает файл URI для <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> метод.  При выполнении в .NET Framework 4.6, он выдает <xref:System.ArgumentException> поскольку `file://` больше не является допустимой частью путь к файлу.

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 Чтобы восстановить прежнее поведение данного метода и избежать возникновения исключения, можно добавить `Switch.System.IO.UseLegacyPathHandling` переключитесь в файле конфигурации приложения, например:

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a>См. также
[Переключатель AppContext](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd">&lt;Среда выполнения&gt; элемент</related>
    <related type="Article" href="https://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752">&lt;AppContextSwitchOverrides&gt; элемент</related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает путь к базовому каталогу, в котором сопоставитель сборок производит поиск.</summary>
        <value>Путь к базовому каталогу, в котором сопоставитель сборок производит поиск.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Это связано с одного свойства домена приложения. Его значение соответствует <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> свойство текущего домена приложения.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Имя элемента данных.</param>
        <summary>Возвращает значение именованного элемента данных, назначенное текущему домену приложения.</summary>
        <returns>Значение <paramref name="name" />, если <paramref name="name" /> определяет именованное значение; в противном случае — <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">Имя переключателя.</param>
        <param name="isEnabled">Значение переключателя.</param>
        <summary>Задает значение переключателя.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.AppContext> Класс позволяет авторам библиотек предоставлять согласованный механизм явного отказа для новых функциональных возможностей для своих пользователей. Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ. Эта возможность обычно важна при внесении изменений в существующие функции. В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.

 <xref:System.AppContext.SetSwitch%2A> Метод вызывается приложения (или библиотека), чтобы объявить значение переключателя (который всегда имеет <xref:System.Boolean> значение), определяемое зависимой библиотекой. Параметр всегда является неявно `false`, который предоставляет новое поведение. Установив переключатель в `true` позволяет, которая предоставляет устаревшее поведение. Явно установив переключатель в `false` также определяет новое поведение. Зависимые библиотеки затем можно проверить значение переключателя, вызвав <xref:System.AppContext.TryGetSwitch%2A> метод.

> [!NOTE]
> Это целесообразно использовать согласованный формат для имен параметров, так как они представляют собой формальный контракт, предоставляемый библиотекой. Ниже приведены два очевидных формата:
>
> -   *параметр*.*пространство_имен* *имя_параметра*
> -   *параметр*.*библиотека*.*имя_параметра*

 Для приложений, работающих на платформе .NET Framework, в дополнение к установке значение переключателя программными средствами его также можно задать:

-   Путем добавления имени параметра и значение для [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) элемент в [ \<среды выполнения >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) раздел файла конфигурации приложения. Например, следующий код определяет параметр с именем `Libraries.FPLibrary.UseExactFloatingPointComparison` , значение которого равно `False`.

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

-   Добавив строковое значение, имя которого является имя переключателя для `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` разделом реестра. Его значение должно быть строковым представлением <xref:System.Boolean> , может быть проанализировано по <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> метод, то есть он должен иметь значение «ИСТИНА», «true», «False» или «false».

 Если `switchName` уже существует, его значение перезаписывается `isEnabled` аргумент.  То есть последний вызов <xref:System.AppContext.SetSwitch%2A> метод переопределяет значение, определенное в реестре, в файл конфигурации приложения или с предыдущими вызовами <xref:System.AppContext.SetSwitch%2A> метод.

 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext.SetSwitch и .NET Core

.NET core поддерживает программные вызовы с <xref:System.AppContext.SetSwitch%2A> только метод. Поддерживаются следующие параметры:

|Параметр|Значения|Описание|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|`true` или `false`|Указывает, следует ли поддержку включен протокол HTTP/2 (`true`) или отключена (`false`). Значение по умолчанию отключен. Параметр должен быть задан до первого использования <xref:System.Net.Http.HttpClient>. Доступно начиная с предварительной версии 4 .NET Core 3.0.|
|`System.Net.Http.UseSocketsHttpHandler` |`true` или `false`|Определяет, является ли общие сетевые интерфейсы API, такие как <xref:System.Net.Http.HttpClient> использовать <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) или <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).|

## Examples
 Следующий код задает параметр с именем `Switch.AmazingLib.ThrowOnException` для `true`, позволяющее устаревшее поведение. Библиотеку можно затем проверить, установлен ли потребитель библиотеки значение переключателя путем вызова <xref:System.AppContext.TryGetSwitch%2A> метод.

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> — <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя целевой версии платформы текущего приложения.</summary>
        <value>Имя целевой версии платформы текущего приложения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Имя целевой версии платформы, соответствует значению <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> свойство. Список имен целевой платформы для .NET Framework, см. в разделе [ &lt;supportedRuntime&gt; элемент](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) элемент.

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">Имя переключателя.</param>
        <param name="isEnabled">При возвращении этого метода содержит значение для <paramref name="switchName" />, если <paramref name="switchName" /> найден, или <see langword="false" />, если <paramref name="switchName" /> не найден. Этот параметр передается неинициализированным.</param>
        <summary>Предпринимает попытку получения значения переключателя.</summary>
        <returns><see langword="true" />, если для <paramref name="switchName" /> задано значение и аргумент <paramref name="isEnabled" /> содержит значение переключателя; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.AppContext> Класс позволяет авторам библиотек предоставлять согласованный механизм явного отказа для новых функциональных возможностей для своих пользователей. Он устанавливает слабо связанный контракт между компонентами для передачи запроса на явный отказ. Эта возможность обычно важна при внесении изменений в существующие функции. В свою очередь, режим неявного согласия для новых функциональных возможностей уже существует.

 Среда CLR автоматически заполняет переключатели, назначен <xref:System.AppContext> экземпляра путем чтения реестра и файл конфигурации приложения. Затем можно переопределить значения параметров, и добавить новые параметры, вызвав метод <xref:System.AppContext.SetSwitch%2A> метод.

 Вызывает библиотеку <xref:System.AppContext.TryGetSwitch%2A> метод для проверки ли ее пользователей было объявлено значение переключателя и затем соответствующим образом реагировать на него.  По умолчанию Если параметр не определен, новые функциональные возможности включены... Если параметр определен, его значение `false`, новые функциональные возможности включена. Если его значение равно `true`, устаревшее поведение включено.



## Examples
 В следующем примере определяется ли библиотека потребитель задал параметр с именем `Switch.AmazingLib.ThrowOnException`.

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> — <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>