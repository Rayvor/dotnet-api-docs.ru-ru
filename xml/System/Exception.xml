<Type Name="Exception" FullName="System.Exception">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f8c4ed5775a34bb16a0f7ce739be853145c3d86" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75042653" /></Metadata><TypeSignature Language="C#" Value="public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit Exception extends System.Object implements class System.Runtime.InteropServices._Exception, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Exception" />
  <TypeSignature Language="VB.NET" Value="Public Class Exception&#xA;Implements _Exception, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exception : System::Runtime::InteropServices::_Exception, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Exception = class&#xA;    interface ISerializable&#xA;    interface _Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Exception</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4d6ec-101">Представляет ошибки, происходящие во время выполнения приложения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-101">Represents errors that occur during application execution.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-102">Этот класс является базовым классом для всех исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-102">This class is the base class for all exceptions.</span></span> <span data-ttu-id="4d6ec-103">При возникновении ошибки система или выполняемое в настоящее время приложение сообщает о нем, вызывая исключение, которое содержит сведения об ошибке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-103">When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</span></span> <span data-ttu-id="4d6ec-104">После возникновения исключения оно обрабатывается приложением или обработчиком исключений по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-104">After an exception is thrown, it is handled by the application or by the default exception handler.</span></span>  
  
 <span data-ttu-id="4d6ec-105">Содержание</span><span class="sxs-lookup"><span data-stu-id="4d6ec-105">In this section:</span></span>  
  
 <span data-ttu-id="4d6ec-106">[Ошибки и исключения](#Errors) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-106">[Errors and exceptions](#Errors) </span></span>  
 <span data-ttu-id="4d6ec-107">[Блоки try/catch](#TryCatch) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-107">[Try/catch blocks](#TryCatch) </span></span>  
 <span data-ttu-id="4d6ec-108">[Функции типа исключения](#Features) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-108">[Exception type features](#Features) </span></span>  
 <span data-ttu-id="4d6ec-109">[Свойства класса исключений](#Properties) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-109">[Exception class properties](#Properties) </span></span>  
 <span data-ttu-id="4d6ec-110">[Вопросы производительности](#Performance) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-110">[Performance considerations](#Performance) </span></span>  
 <span data-ttu-id="4d6ec-111">[Повторное создание исключения](#Rethrow) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-111">[Re-throwing an exception](#Rethrow) </span></span>  
 <span data-ttu-id="4d6ec-112">[Выбор стандартных исключений](#Standard) </span><span class="sxs-lookup"><span data-stu-id="4d6ec-112">[Choosing standard exceptions](#Standard) </span></span>  
 [<span data-ttu-id="4d6ec-113">Реализация пользовательских исключений</span><span class="sxs-lookup"><span data-stu-id="4d6ec-113">Implementing custom exceptions</span></span>](#Custom)  
  
<a name="Errors"></a>   
## <a name="errors-and-exceptions"></a><span data-ttu-id="4d6ec-114">Ошибки и исключения</span><span class="sxs-lookup"><span data-stu-id="4d6ec-114">Errors and exceptions</span></span>  
 <span data-ttu-id="4d6ec-115">Ошибки времени выполнения могут возникать по разным причинам.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-115">Run-time errors can occur for a variety of reasons.</span></span> <span data-ttu-id="4d6ec-116">Однако не все ошибки должны обрабатываться как исключения в коде.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-116">However, not all errors should be handled as exceptions in your code.</span></span> <span data-ttu-id="4d6ec-117">Ниже приведены некоторые категории ошибок, которые могут возникать во время выполнения, и соответствующие способы реагирования на них.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-117">Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</span></span>  
  
-   <span data-ttu-id="4d6ec-118">**Ошибки использования.**</span><span class="sxs-lookup"><span data-stu-id="4d6ec-118">**Usage errors.**</span></span> <span data-ttu-id="4d6ec-119">Ошибка использования представляет ошибку в логике программы, которая может привести к исключению.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-119">A usage error represents an error in program logic that can result in an exception.</span></span> <span data-ttu-id="4d6ec-120">Однако эта ошибка должна быть решена не посредством обработки исключений, но путем изменения неисправного кода.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-120">However, the error should be addressed not through exception handling but by modifying the faulty code.</span></span> <span data-ttu-id="4d6ec-121">Например, переопределение метода <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> в следующем примере предполагает, что аргумент `obj` всегда должен иметь значение, отличное от NULL.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-121">For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method in the following example assumes that the `obj` argument must always be non-null.</span></span>  
  
     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]
     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  
  
     <span data-ttu-id="4d6ec-122"><xref:System.NullReferenceException> исключение, которое возникает, когда `obj` `null` можно устранить, изменив исходный код, чтобы явно проверить значение null перед вызовом переопределения <xref:System.Object.Equals%2A?displayProperty=nameWithType>, а затем выполнить повторную компиляцию.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-122">The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> override and then re-compiling.</span></span> <span data-ttu-id="4d6ec-123">В следующем примере содержится исправленный исходный код, обрабатывающий аргумент `null`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-123">The following example contains the corrected source code that handles a `null` argument.</span></span>  
  
     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]
     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  
  
     <span data-ttu-id="4d6ec-124">Вместо использования обработки исключений для ошибок использования можно использовать метод <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> для обнаружения ошибок использования в отладочных сборках и метод <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> для обнаружения ошибок использования в сборках отладки и выпуска.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-124">Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method to identify usage errors in both debug and release builds.</span></span> <span data-ttu-id="4d6ec-125">Дополнительные сведения см. в разделе [Утверждения в управляемом коде](/visualstudio/debugger/assertions-in-managed-code).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-125">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
-   <span data-ttu-id="4d6ec-126">**Ошибки программы.**</span><span class="sxs-lookup"><span data-stu-id="4d6ec-126">**Program errors.**</span></span> <span data-ttu-id="4d6ec-127">Ошибка программы — это ошибка во время выполнения, которую не всегда можно избежать путем написания кода без ошибок.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-127">A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</span></span>  
  
     <span data-ttu-id="4d6ec-128">В некоторых случаях ошибка программы может отражать ожидаемое или предполагаемое состояние ошибки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-128">In some cases, a program error may reflect an expected or routine error condition.</span></span> <span data-ttu-id="4d6ec-129">В этом случае может потребоваться избежать использования обработки исключений для устранения ошибок программы, а затем повторить операцию.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-129">In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</span></span> <span data-ttu-id="4d6ec-130">Например, если пользователь должен ввести дату в определенном формате, можно выполнить синтаксический анализ строки даты, вызвав метод <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>, который возвращает <xref:System.Boolean> значение, указывающее, была ли операция анализа успешной, вместо использования метода <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>, который вызывает исключение <xref:System.FormatException>, если строка даты не может быть преобразована в <xref:System.DateTime> значение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-130">For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="4d6ec-131">Аналогично, если пользователь пытается открыть несуществующий файл, можно сначала вызвать метод <xref:System.IO.File.Exists%2A?displayProperty=nameWithType>, чтобы проверить, существует ли файл, и, если нет, запросить у пользователя, нужно ли ему создать его.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-131">Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</span></span>  
  
     <span data-ttu-id="4d6ec-132">В других случаях ошибка программы отражает непредвиденное условие ошибки, которое может быть обработано в коде.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-132">In other cases, a program error reflects an unexpected error condition that can be handled in your code.</span></span> <span data-ttu-id="4d6ec-133">Например, даже если проверено, что файл существует, он может быть удален до его открытия или поврежден.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-133">For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</span></span> <span data-ttu-id="4d6ec-134">В этом случае попытка открыть файл путем создания экземпляра объекта <xref:System.IO.StreamReader> или вызова метода <xref:System.IO.File.Open%2A> может вызвать исключение <xref:System.IO.FileNotFoundException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-134">In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception.</span></span> <span data-ttu-id="4d6ec-135">В таких случаях для восстановления после ошибки следует использовать обработку исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-135">In these cases, you should use exception handling to recover from the error.</span></span>  
  
-   <span data-ttu-id="4d6ec-136">**Сбои системы.**</span><span class="sxs-lookup"><span data-stu-id="4d6ec-136">**System failures.**</span></span> <span data-ttu-id="4d6ec-137">Сбой системы — это ошибка времени выполнения, которая не может быть обработана программно понятным образом.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-137">A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</span></span> <span data-ttu-id="4d6ec-138">Например, любой метод может вызвать исключение <xref:System.OutOfMemoryException>, если среде CLR не удается выделить дополнительную память.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-138">For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory.</span></span> <span data-ttu-id="4d6ec-139">Обычно системные сбои не обрабатываются с помощью обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-139">Ordinarily, system failures are not handled by using exception handling.</span></span> <span data-ttu-id="4d6ec-140">Вместо этого можно использовать событие, например <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>, и вызвать метод <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> для ведения журнала сведений об исключениях и уведомить пользователя об ошибке до завершения работы приложения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-140">Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> and call the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to log exception information and notify the user of the failure before the application terminates.</span></span>  
  
<a name="TryCatch"></a>   
## <a name="trycatch-blocks"></a><span data-ttu-id="4d6ec-141">Блоки try/catch</span><span class="sxs-lookup"><span data-stu-id="4d6ec-141">Try/catch blocks</span></span>  
 <span data-ttu-id="4d6ec-142">Среда CLR предоставляет модель обработки исключений, основанную на представлении исключений в виде объектов, а также разделение программного кода и кода обработки исключений на блоки `try` и `catch`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-142">The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks.</span></span> <span data-ttu-id="4d6ec-143">Может существовать один или несколько блоков `catch`, каждый из которых предназначен для обработки определенного типа исключений, или один блок, предназначенный для перехвата более конкретного исключения, чем у другого блока.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-143">There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</span></span>  
  
 <span data-ttu-id="4d6ec-144">Если приложение обрабатывает исключения, происходящие во время выполнения блока кода приложения, код должен быть помещен в оператор `try` и называться `try`ным блоком.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-144">If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block.</span></span> <span data-ttu-id="4d6ec-145">Код приложения, обрабатывающий исключения, созданные блоком `try`, помещается в оператор `catch` и называется блоком `catch`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-145">Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block.</span></span> <span data-ttu-id="4d6ec-146">Несколько блоков `catch` связаны с блоком `try`, а каждый блок `catch` включает фильтр типа, который определяет типы исключений, которые он обрабатывает.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-146">Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.</span></span>  
  
 <span data-ttu-id="4d6ec-147">Когда исключение возникает в блоке `try`, система ищет связанные блоки `catch` в том порядке, в котором они отображаются в коде приложения, пока не обнаружит блок `catch`, обрабатывающий исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-147">When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception.</span></span> <span data-ttu-id="4d6ec-148">Блок `catch` обрабатывает исключение типа `T`, если фильтр типа блока catch указывает `T` или любой тип, который `T` является производным от.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-148">A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from.</span></span> <span data-ttu-id="4d6ec-149">Система прекратит поиск после того, как обнаружит первый блок `catch`, обрабатывающий исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-149">The system stops searching after it finds the first `catch` block that handles the exception.</span></span> <span data-ttu-id="4d6ec-150">По этой причине в коде приложения блок `catch`, обрабатывающий тип, должен быть указан перед блоком `catch`, который обрабатывает его базовые типы, как показано в примере, который следует за этим разделом.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-150">For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section.</span></span> <span data-ttu-id="4d6ec-151">Блок catch, обрабатывающий `System.Exception`, задается последним.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-151">A catch block that handles `System.Exception` is specified last.</span></span>  
  
 <span data-ttu-id="4d6ec-152">Если ни один из блоков `catch`, связанных с текущим блоком `try`, не обрабатывает исключение, а текущий блок `try` вложен в другие блоки `try` в текущем вызове, выполняется поиск блоков `catch`, связанных со следующим включающим блоком `try`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-152">If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched.</span></span> <span data-ttu-id="4d6ec-153">Если блок `catch` для исключения не найден, система выполняет поиск предыдущего уровня вложенности в текущем вызове.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-153">If no `catch` block for the exception is found, the system searches previous nesting levels in the current call.</span></span> <span data-ttu-id="4d6ec-154">Если в текущем вызове не найдено ни одного блока `catch` для исключения, то исключение передается вверх по стеку вызовов, а в предыдущем кадре стека выполняется поиск блока `catch`, обрабатывающего исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-154">If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception.</span></span> <span data-ttu-id="4d6ec-155">Поиск в стеке вызовов продолжится до тех пор, пока не будет обработано исключение или пока в стеке вызовов не будут существовать кадры.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-155">The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</span></span> <span data-ttu-id="4d6ec-156">Если начало стека вызовов достигается без поиска блока `catch`, обрабатывающего исключение, обработчик исключений по умолчанию обрабатывает его и завершает работу приложения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-156">If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.</span></span>  
  
<a name="Features"></a>   
## <a name="exception-type-features"></a><span data-ttu-id="4d6ec-157">Функции типов исключений</span><span class="sxs-lookup"><span data-stu-id="4d6ec-157">Exception type features</span></span>  
 <span data-ttu-id="4d6ec-158">Типы исключений поддерживают следующие функции.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-158">Exception types support the following features:</span></span>  
  
-   <span data-ttu-id="4d6ec-159">Понятный для человека текст, описывающий ошибку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-159">Human-readable text that describes the error.</span></span> <span data-ttu-id="4d6ec-160">При возникновении исключения среда выполнения предоставляет доступ к текстовому сообщению для информирования пользователя о характере ошибки и предложения действия для решения проблемы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-160">When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</span></span> <span data-ttu-id="4d6ec-161">Это текстовое сообщение хранится в свойстве <xref:System.Exception.Message%2A> объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-161">This text message is held in the <xref:System.Exception.Message%2A> property of the exception object.</span></span> <span data-ttu-id="4d6ec-162">Во время создания объекта исключения можно передать в конструктор текстовую строку для описания сведений об этом конкретном исключении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-162">During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</span></span> <span data-ttu-id="4d6ec-163">Если для конструктора не задан аргумент сообщения об ошибке, используется сообщение об ошибке по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-163">If no error message argument is supplied to the constructor, the default error message is used.</span></span> <span data-ttu-id="4d6ec-164">Дополнительные сведения см. в описании свойства <xref:System.Exception.Message%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-164">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="4d6ec-165">Состояние стека вызовов при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-165">The state of the call stack when the exception was thrown.</span></span> <span data-ttu-id="4d6ec-166">Свойство <xref:System.Exception.StackTrace%2A> несет трассировку стека, которую можно использовать для определения места возникновения ошибки в коде.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-166">The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code.</span></span> <span data-ttu-id="4d6ec-167">В трассировке стека перечислены все вызываемые методы и номера строк в исходном файле, где выполняются вызовы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-167">The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</span></span>  
  
<a name="Properties"></a>   
## <a name="exception-class-properties"></a><span data-ttu-id="4d6ec-168">Свойства класса Exception</span><span class="sxs-lookup"><span data-stu-id="4d6ec-168">Exception class properties</span></span>  
 <span data-ttu-id="4d6ec-169">Класс <xref:System.Exception> содержит ряд свойств, помогающих определить расположение кода, тип, файл справки и причину исключения: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>и <xref:System.Exception.Data%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-169">The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.</span></span>  
  
 <span data-ttu-id="4d6ec-170">Если между двумя или более исключениями существует отношение с причинами, то свойство <xref:System.Exception.InnerException%2A> поддерживает эти сведения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-170">When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information.</span></span> <span data-ttu-id="4d6ec-171">Внешнее исключение создается в ответ на это внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-171">The outer exception is thrown in response to this inner exception.</span></span> <span data-ttu-id="4d6ec-172">Код, обрабатывающий внешнее исключение, может использовать сведения из предыдущего внутреннего исключения для более адекватной обработки ошибки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-172">The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</span></span> <span data-ttu-id="4d6ec-173">Дополнительные сведения об исключении могут храниться в виде коллекции пар "ключ-значение" в свойстве <xref:System.Exception.Data%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-173">Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.</span></span>  
  
 <span data-ttu-id="4d6ec-174">Строка сообщения об ошибке, которая передается конструктору во время создания объекта исключения, должна быть локализована и может быть предоставлена из файла ресурсов с помощью класса <xref:System.Resources.ResourceManager>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-174">The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class.</span></span> <span data-ttu-id="4d6ec-175">Дополнительные сведения о локализованных ресурсах см. в разделах [Создание вспомогательных сборок](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) и [Упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) .</span><span class="sxs-lookup"><span data-stu-id="4d6ec-175">For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.</span></span>  
  
 <span data-ttu-id="4d6ec-176">Чтобы предоставить пользователю подробные сведения о причине возникновения исключения, свойство <xref:System.Exception.HelpLink%2A> может содержать URL-адрес (или URN) файла справки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-176">To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.</span></span>  
  
 <span data-ttu-id="4d6ec-177">Класс <xref:System.Exception> использует COR_E_EXCEPTION HRESULT, который имеет значение 0x80131500.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-177">The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</span></span>  
  
 <span data-ttu-id="4d6ec-178">Список начальных значений свойств для экземпляра класса <xref:System.Exception> см. в разделе Конструкторы <xref:System.Exception.%23ctor%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-178">For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.</span></span>  
  
<a name="Performance"></a>   
## <a name="performance-considerations"></a><span data-ttu-id="4d6ec-179">Особенности производительности</span><span class="sxs-lookup"><span data-stu-id="4d6ec-179">Performance considerations</span></span>  
 <span data-ttu-id="4d6ec-180">Создание или обработка исключения требует значительного количества системных ресурсов и времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-180">Throwing or handling an exception consumes a significant amount of system resources and execution time.</span></span> <span data-ttu-id="4d6ec-181">Вызывайте исключения только для обработки действительно неисключительных условий, а не для обработки прогнозируемых событий или управления потоком.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-181">Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</span></span> <span data-ttu-id="4d6ec-182">Например, в некоторых случаях, например при разработке библиотеки классов, разумно создать исключение, если аргумент метода является недопустимым, так как предполагается, что метод будет вызываться с допустимыми параметрами.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-182">For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</span></span> <span data-ttu-id="4d6ec-183">Недопустимый аргумент метода, если он не является результатом ошибки использования, означает, что возникла непредвиденная ошибка.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-183">An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</span></span> <span data-ttu-id="4d6ec-184">И наоборот, не вызывайте исключение, если ввод пользователя является недопустимым, так как вы можете рассчитывать, что пользователи иногда вводят недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-184">Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</span></span> <span data-ttu-id="4d6ec-185">Вместо этого предоставьте механизм повторных попыток, чтобы пользователи могли ввести допустимые входные данные.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-185">Instead, provide a retry mechanism so users can enter valid input.</span></span> <span data-ttu-id="4d6ec-186">Кроме того, не следует использовать исключения для обработки ошибок использования.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-186">Nor should you use exceptions to handle usage errors.</span></span> <span data-ttu-id="4d6ec-187">Вместо этого используйте [утверждения](/visualstudio/debugger/assertions-in-managed-code) для обнаружения и исправления ошибок использования.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-187">Instead, use [assertions](/visualstudio/debugger/assertions-in-managed-code) to identify and correct usage errors.</span></span>  
  
 <span data-ttu-id="4d6ec-188">Кроме того, не вызывайте исключение, если достаточно кода возврата; не преобразуйте код возврата в исключение; и не перехватывают исключение, игнорируйте его, а затем продолжайте обработку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-188">In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</span></span>  
  
<a name="Rethrow"></a>   
## <a name="re-throwing-an-exception"></a><span data-ttu-id="4d6ec-189">Повторное создание исключения</span><span class="sxs-lookup"><span data-stu-id="4d6ec-189">Re-throwing an exception</span></span>  
 <span data-ttu-id="4d6ec-190">Во многих случаях обработчик исключений просто хочет передать исключение в вызывающий объект.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-190">In many cases, an exception handler simply wants to pass the exception on to the caller.</span></span> <span data-ttu-id="4d6ec-191">Чаще всего это происходит в следующих случаях.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-191">This most often occurs in:</span></span>  
  
-   <span data-ttu-id="4d6ec-192">Библиотека классов, которая, в свою очередь, заключает вызовы методов в библиотеку классов .NET Framework или другие библиотеки классов.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-192">A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</span></span>  
  
-   <span data-ttu-id="4d6ec-193">Приложение или библиотека, вызывающая неустранимое исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-193">An application or library that encounters a fatal exception.</span></span> <span data-ttu-id="4d6ec-194">Обработчик исключений может зарегистрировать исключение, а затем повторно создать исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-194">The exception handler can log the exception and then re-throw the exception.</span></span>  
  
 <span data-ttu-id="4d6ec-195">Чтобы повторно создать исключение, рекомендуется просто использовать оператор [throw](~/docs/csharp/language-reference/keywords/throw.md) в C# и инструкцию [throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) в Visual Basic без включения выражения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-195">The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression.</span></span> <span data-ttu-id="4d6ec-196">Это гарантирует, что все сведения стека вызовов сохраняются при распространении исключения вызывающему объекту.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-196">This ensures that all call stack information is preserved when the exception is propagated to the caller.</span></span> <span data-ttu-id="4d6ec-197">Это показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-197">The following example illustrates this.</span></span> <span data-ttu-id="4d6ec-198">Метод расширения строки, `FindOccurrences`, заключает один или несколько вызовов <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> без проверки своих аргументов заранее.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-198">A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> without validating its arguments beforehand.</span></span>  
  
 [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]
 [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  
  
 <span data-ttu-id="4d6ec-199">Затем вызывающий объект вызывает `FindOccurrences` дважды.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-199">A caller then calls `FindOccurrences` twice.</span></span> <span data-ttu-id="4d6ec-200">Во втором вызове `FindOccurrences`вызывающий объект передает `null` в качестве строки поиска, в этом случае метод <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> вызывает исключение <xref:System.ArgumentNullException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-200">In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method to throw an <xref:System.ArgumentNullException> exception.</span></span> <span data-ttu-id="4d6ec-201">Это исключение обрабатывается методом `FindOccurrences` и передается обратно вызывающему объекту.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-201">This exception is handled by the `FindOccurrences` method and passed back to the caller.</span></span> <span data-ttu-id="4d6ec-202">Поскольку оператор throw используется без выражения, выходные данные в примере показывают, что стек вызовов сохранен.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-202">Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</span></span>  
  
 [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]
 [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  
  
 <span data-ttu-id="4d6ec-203">Напротив, если исключение создается повторно с помощью метода</span><span class="sxs-lookup"><span data-stu-id="4d6ec-203">In contrast, if the exception is re-thrown by using the</span></span>  
  
```csharp
throw e;
```  
  
```vb  
Throw e  
```  
  
 <span data-ttu-id="4d6ec-204">, полный стек вызовов не сохраняется, и в примере создается следующий результат:</span><span class="sxs-lookup"><span data-stu-id="4d6ec-204">statement, the full call stack is not preserved, and the example would generate the following output:</span></span>  
  
```Output  
  
'a' occurs at the following character positions: 4, 7, 15  
  
An exception (ArgumentNullException) occurred.  
Message:  
   Value cannot be null.  
Parameter name: value  
  
Stack Trace:  
      at Library.FindOccurrences(String s, String f)  
   at Example.Main()  
  
```  
  
 <span data-ttu-id="4d6ec-205">Немного более громоздкий альтернативой является вызов нового исключения и сохранение сведений стека вызовов исходного исключения во внутреннем исключении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-205">A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</span></span> <span data-ttu-id="4d6ec-206">Затем вызывающий объект может использовать свойство <xref:System.Exception.InnerException%2A> нового исключения для получения кадра стека и других сведений об исходном исключении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-206">The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception.</span></span> <span data-ttu-id="4d6ec-207">В этом случае оператор Throw будет следующим:</span><span class="sxs-lookup"><span data-stu-id="4d6ec-207">In this case, the throw statement is:</span></span>  
  
 [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]
 [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  
  
 <span data-ttu-id="4d6ec-208">Пользовательский код, обрабатывающий исключение, должен иметь представление о том, что свойство <xref:System.Exception.InnerException%2A> содержит сведения об исходном исключении, как показано в следующем обработчике исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-208">The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.</span></span>  
  
 [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]
 [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  
  
<a name="Standard"></a>   
## <a name="choosing-standard-exceptions"></a><span data-ttu-id="4d6ec-209">Выбор стандартных исключений</span><span class="sxs-lookup"><span data-stu-id="4d6ec-209">Choosing standard exceptions</span></span>  
 <span data-ttu-id="4d6ec-210">Если необходимо создать исключение, часто можно использовать существующий тип исключения в .NET Framework вместо реализации пользовательского исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-210">When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</span></span> <span data-ttu-id="4d6ec-211">В этих двух условиях следует использовать стандартный тип исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-211">You should use a standard exception type under these two conditions:</span></span>  
  
-   <span data-ttu-id="4d6ec-212">Создается исключение, вызванное ошибкой использования (то есть ошибкой в логике программы, выполняемой разработчиком, вызывающим метод).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-212">You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</span></span> <span data-ttu-id="4d6ec-213">Как правило, возникает исключение, например <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>или <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-213">Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="4d6ec-214">Строка, предоставляемая конструктору объекта исключения при создании объекта исключения, должна описывать ошибку, чтобы разработчик мог ее исправить.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-214">The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</span></span> <span data-ttu-id="4d6ec-215">Дополнительные сведения см. в описании свойства <xref:System.Exception.Message%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-215">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="4d6ec-216">Вы обрабатываете ошибку, которая может быть передана вызывающему объекту с существующим исключением .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-216">You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</span></span> <span data-ttu-id="4d6ec-217">Рекомендуется создавать наиболее производное исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-217">You should throw the most derived exception possible.</span></span> <span data-ttu-id="4d6ec-218">Например, если метод требует, чтобы аргумент был допустимым членом типа перечисления, следует создать <xref:System.ComponentModel.InvalidEnumArgumentException> (самый производный класс), а не <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-218">For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="4d6ec-219">В следующей таблице перечислены распространенные типы исключений и условия их создания.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-219">The following table lists common exception types and the conditions under which you would throw them.</span></span>  
  
|<span data-ttu-id="4d6ec-220">Исключение</span><span class="sxs-lookup"><span data-stu-id="4d6ec-220">Exception</span></span>|<span data-ttu-id="4d6ec-221">Условие</span><span class="sxs-lookup"><span data-stu-id="4d6ec-221">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="4d6ec-222">Непустой аргумент, передаваемый в метод, является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-222">A non-null argument that is passed to a method is invalid.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="4d6ec-223">Аргумент, передаваемый в метод, `null`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-223">An argument that is passed to a method is `null`.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="4d6ec-224">Аргумент находится за пределами диапазона допустимых значений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-224">An argument is outside the range of valid values.</span></span>|  
|<xref:System.IO.DirectoryNotFoundException>|<span data-ttu-id="4d6ec-225">Недопустимая часть пути к каталогу.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-225">Part of a directory path is not valid.</span></span>|  
|<xref:System.DivideByZeroException>|<span data-ttu-id="4d6ec-226">Знаменатель в целочисленной или <xref:System.Decimal>ной операции деления равен нулю.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-226">The denominator in an integer or <xref:System.Decimal> division operation is zero.</span></span>|  
|<xref:System.IO.DriveNotFoundException>|<span data-ttu-id="4d6ec-227">Диск недоступен или не существует.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-227">A drive is unavailable or does not exist.</span></span>|  
|<xref:System.IO.FileNotFoundException>|<span data-ttu-id="4d6ec-228">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-228">A file does not exist.</span></span>|  
|<xref:System.FormatException>|<span data-ttu-id="4d6ec-229">Значение не находится в соответствующем формате для преобразования из строки методом преобразования, например `Parse`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-229">A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.</span></span>|  
|<xref:System.IndexOutOfRangeException>|<span data-ttu-id="4d6ec-230">Индекс находится за пределами границ массива или коллекции.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-230">An index is outside the bounds of an array or collection.</span></span>|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="4d6ec-231">Вызов метода недопустим в текущем состоянии объекта.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-231">A method call is invalid in an object's current state.</span></span>|  
|<xref:System.Collections.Generic.KeyNotFoundException>|<span data-ttu-id="4d6ec-232">Не удается найти указанный ключ для доступа к элементу в коллекции.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-232">The specified key for accessing a member in a collection cannot be found.</span></span>|  
|<xref:System.NotImplementedException>|<span data-ttu-id="4d6ec-233">Метод или операция не реализованы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-233">A method or operation is not implemented.</span></span>|  
|<xref:System.NotSupportedException>|<span data-ttu-id="4d6ec-234">Метод или операция не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-234">A method or operation is not supported.</span></span>|  
|<xref:System.ObjectDisposedException>|<span data-ttu-id="4d6ec-235">Операция выполняется над объектом, который был ликвидирован.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-235">An operation is performed on an object that has been disposed.</span></span>|  
|<xref:System.OverflowException>|<span data-ttu-id="4d6ec-236">Арифметическое, приведение или операция преобразования приводят к переполнению.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-236">An arithmetic, casting, or conversion operation results in an overflow.</span></span>|  
|<xref:System.IO.PathTooLongException>|<span data-ttu-id="4d6ec-237">Длина пути или имени файла превышает максимальную длину, определенную системой.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-237">A path or file name exceeds the maximum system-defined length.</span></span>|  
|<xref:System.PlatformNotSupportedException>|<span data-ttu-id="4d6ec-238">Операция не поддерживается на текущей платформе.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-238">The operation is not supported on the current platform.</span></span>|  
|<xref:System.RankException>|<span data-ttu-id="4d6ec-239">В метод передается массив с неправильным числом измерений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-239">An array with the wrong number of dimensions is passed to a method.</span></span>|  
|<xref:System.TimeoutException>|<span data-ttu-id="4d6ec-240">Срок действия интервала времени, выделенного для операции, истек.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-240">The time interval allotted to an operation has expired.</span></span>|  
|<xref:System.UriFormatException>|<span data-ttu-id="4d6ec-241">Используется недопустимый универсальный код ресурса (URI).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-241">An invalid Uniform Resource Identifier (URI) is used.</span></span>|  
  
<a name="Custom"></a>   
## <a name="implementing-custom-exceptions"></a><span data-ttu-id="4d6ec-242">Реализация пользовательских исключений</span><span class="sxs-lookup"><span data-stu-id="4d6ec-242">Implementing custom exceptions</span></span>  
 <span data-ttu-id="4d6ec-243">В следующих случаях использование существующего исключения .NET Framework для обработки состояния ошибки неадекватно:</span><span class="sxs-lookup"><span data-stu-id="4d6ec-243">In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</span></span>  
  
-   <span data-ttu-id="4d6ec-244">Если исключение отражает уникальную ошибку программы, которая не может быть сопоставлена с существующим исключением .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-244">When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</span></span>  
  
-   <span data-ttu-id="4d6ec-245">Если для исключения требуется обработка, которая отличается от обработки, подходящей для существующего исключения .NET Framework, или исключение должно быть неоднозначной из аналогичного исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-245">When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</span></span> <span data-ttu-id="4d6ec-246">Например, если при синтаксическом анализе числового представления строки, находящейся за пределами диапазона целевого целочисленного типа, выдается исключение <xref:System.ArgumentOutOfRangeException>, то такое же исключение нежелательно использовать для ошибки, полученной от вызывающей стороны, не предоставляющей соответствующие значения с ограничениями при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-246">For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</span></span>  
  
 <span data-ttu-id="4d6ec-247">Класс <xref:System.Exception> является базовым классом всех исключений в .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-247">The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework.</span></span> <span data-ttu-id="4d6ec-248">Многие производные классы основываются на наследуемом поведении членов класса <xref:System.Exception>; они не переопределяют члены <xref:System.Exception>, а также не определяют уникальные члены.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-248">Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.</span></span>  
  
 <span data-ttu-id="4d6ec-249">Определение собственного класса исключений:</span><span class="sxs-lookup"><span data-stu-id="4d6ec-249">To define your own exception class:</span></span>  
  
1.  <span data-ttu-id="4d6ec-250">Определите класс, наследующий от <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-250">Define a class that inherits from <xref:System.Exception>.</span></span> <span data-ttu-id="4d6ec-251">При необходимости определите все уникальные элементы, необходимые для класса, чтобы предоставить дополнительные сведения об исключении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-251">If necessary, define any unique members needed by your class to provide additional information about the exception.</span></span> <span data-ttu-id="4d6ec-252">Например, класс <xref:System.ArgumentException> включает свойство <xref:System.ArgumentException.ParamName%2A>, которое указывает имя параметра, аргумент которого вызывал исключение, а свойство <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> включает свойство <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A>, указывающее интервал времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-252">For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.</span></span>  
  
2.  <span data-ttu-id="4d6ec-253">При необходимости переопределите все унаследованные члены, функциональность которых требуется изменить или изменить.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-253">If necessary, override any inherited members whose functionality you want to change or modify.</span></span> <span data-ttu-id="4d6ec-254">Обратите внимание, что большинство существующих производных классов <xref:System.Exception> не переопределяют поведение наследуемых членов.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-254">Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.</span></span>  
  
3.  <span data-ttu-id="4d6ec-255">Определите, является ли пользовательский объект исключения сериализуемым.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-255">Determine whether your custom exception object is serializable.</span></span> <span data-ttu-id="4d6ec-256">Сериализация позволяет сохранять сведения об исключении и позволяет совместно использовать данные исключений сервером и прокси клиента в контексте удаленного взаимодействия.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-256">Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</span></span> <span data-ttu-id="4d6ec-257">Чтобы сделать объект исключения сериализуемым, пометьте его атрибутом <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-257">To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
4.  <span data-ttu-id="4d6ec-258">Определите конструкторы класса исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-258">Define the constructors of your exception class.</span></span> <span data-ttu-id="4d6ec-259">Как правило, классы исключений имеют один или несколько следующих конструкторов:</span><span class="sxs-lookup"><span data-stu-id="4d6ec-259">Typically, exception classes have one or more of the following constructors:</span></span>  
  
    -   <span data-ttu-id="4d6ec-260"><xref:System.Exception.%23ctor>, который использует значения по умолчанию для инициализации свойств нового объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-260"><xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.</span></span>  
  
    -   <span data-ttu-id="4d6ec-261"><xref:System.Exception.%23ctor%28System.String%29>, который инициализирует новый объект исключения с указанным сообщением об ошибке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-261"><xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.</span></span>  
  
    -   <span data-ttu-id="4d6ec-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, который инициализирует новый объект исключения с указанным сообщением об ошибке и внутренним исключением.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.</span></span>  
  
    -   <span data-ttu-id="4d6ec-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>— конструктор `protected`, который инициализирует новый объект исключения из сериализованных данных.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data.</span></span> <span data-ttu-id="4d6ec-264">Этот конструктор следует реализовать, если вы решили сделать объект исключения сериализуемым.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-264">You should implement this constructor if you've chosen to make your exception object serializable.</span></span>  
  
 <span data-ttu-id="4d6ec-265">В следующем примере показано использование класса пользовательского исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-265">The following example illustrates the use of a custom exception class.</span></span> <span data-ttu-id="4d6ec-266">Он определяет `NotPrimeException` исключение, возникающее, когда клиент пытается получить последовательность простых чисел, указав начальный номер, который не является простым.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-266">It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</span></span> <span data-ttu-id="4d6ec-267">Исключение определяет новое свойство `NonPrime`, которое возвращает непростое число, вызвавшее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-267">The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception.</span></span> <span data-ttu-id="4d6ec-268">Помимо реализации защищенного конструктора без параметров и конструктора с параметрами <xref:System.Runtime.Serialization.SerializationInfo> и <xref:System.Runtime.Serialization.StreamingContext> для сериализации, класс `NotPrimeException` определяет три дополнительных конструктора для поддержки свойства `NonPrime`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-268">Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.</span></span>  <span data-ttu-id="4d6ec-269">Каждый конструктор вызывает конструктор базового класса, а также сохраняет значение непростого числа.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-269">Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</span></span> <span data-ttu-id="4d6ec-270">Класс `NotPrimeException` также помечен атрибутом <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-270">The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]
 [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  
  
 <span data-ttu-id="4d6ec-271">Класс `PrimeNumberGenerator`, показанный в следующем примере, использует Сиеве из Ератоссенес для вычисления последовательности простых чисел из 2 в предел, заданный клиентом при вызове его конструктора класса.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-271">The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</span></span> <span data-ttu-id="4d6ec-272">Метод `GetPrimesFrom` возвращает все простые числа, которые больше или равны указанному нижнему пределу, но выдает исключение `NotPrimeException`, если нижний предел не является простым числом.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-272">The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.</span></span>  
  
 [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]
 [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  
  
 <span data-ttu-id="4d6ec-273">В следующем примере выполняется два вызова метода `GetPrimesFrom` с непростыми числами, один из которых пересекают границы домена приложения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-273">The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries.</span></span> <span data-ttu-id="4d6ec-274">В обоих случаях исключение вызывается и успешно обрабатывается в клиентском коде.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-274">In both cases, the exception is thrown and successfully handled in client code.</span></span>  
  
 [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]
 [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  
  
## <a name="windows-runtime-and-includenet_v451includesnet-v451-mdmd"></a><span data-ttu-id="4d6ec-275">Среда выполнения Windows и [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="4d6ec-275">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="4d6ec-276">В [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] для [!INCLUDE[win8](~/includes/win8-md.md)]некоторые сведения об исключении обычно теряются при распространении исключения через кадры стека non-.NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-276">In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</span></span> <span data-ttu-id="4d6ec-277">Начиная с [!INCLUDE[net_v451](~/includes/net-v451-md.md)] и [!INCLUDE[win81](~/includes/win81-md.md)], среда CLR по-своему использует исходный объект <xref:System.Exception>, который был создан, если это исключение не было изменено в кадре стека non-.NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-277">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-278">В следующем примере показан блок `catch`, определенный для обработки ошибок <xref:System.ArithmeticException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-278">The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors.</span></span> <span data-ttu-id="4d6ec-279">Этот блок `catch` также перехватывает ошибки <xref:System.DivideByZeroException>, так как <xref:System.DivideByZeroException> является производным от <xref:System.ArithmeticException> и отсутствует `catch`ный блок, явно определенный для <xref:System.DivideByZeroException> ошибок.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-279">This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.</span></span>  
  
 [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]
 [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]
 [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="4d6ec-280">Обработка и создание исключений</span><span class="sxs-lookup"><span data-stu-id="4d6ec-280">Handling and Throwing Exceptions</span></span></related>
    <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md"><span data-ttu-id="4d6ec-281">Упаковка и развертывание ресурсов в приложениях для настольных систем</span><span class="sxs-lookup"><span data-stu-id="4d6ec-281">Packaging and Deploying Resources in Desktop Apps</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1"><span data-ttu-id="4d6ec-282">Утверждения в управляемом коде</span><span class="sxs-lookup"><span data-stu-id="4d6ec-282">Assertions in Managed Code</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d6ec-283">Инициализирует новый экземпляр класса <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-283">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d6ec-284">Инициализирует новый экземпляр класса <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-284">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-285">Этот конструктор инициализирует свойство <xref:System.Exception.Message%2A> нового экземпляра, используя системное сообщение, которое описывает ошибку и учитывает текущий язык и региональные параметры системы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-285">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="4d6ec-286">Все производные классы должны предоставлять этот конструктор без параметров.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-286">All the derived classes should provide this parameterless constructor.</span></span> <span data-ttu-id="4d6ec-287">В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-287">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="4d6ec-288">Свойство.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-288">Property</span></span>|<span data-ttu-id="4d6ec-289">Значение</span><span class="sxs-lookup"><span data-stu-id="4d6ec-289">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="4d6ec-290">Пустая ссылка (`Nothing` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-290">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="4d6ec-291">Локализованное описание, предоставляемое системой.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-291">A system-supplied localized description.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-292">В следующем примере кода формируется `Exception`, использующий предопределенное сообщение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-292">The following code example derives an `Exception` that uses a predefined message.</span></span> <span data-ttu-id="4d6ec-293">В коде демонстрируется использование конструктора без параметров для производного класса и базового класса `Exception`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-293">The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]
 [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]
 [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new Exception : string -&gt; Exception" Usage="new System.Exception message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="4d6ec-294">Сообщение, описывающее ошибку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-294">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="4d6ec-295">Инициализирует новый экземпляр класса <see cref="T:System.Exception" /> с указанным сообщением об ошибке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-295">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-296">Этот конструктор инициализирует свойство <xref:System.Exception.Message%2A> нового экземпляра с помощью параметра `message`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-296">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter.</span></span> <span data-ttu-id="4d6ec-297">Если параметр `message` имеет значение `null`, то это то же самое, что и вызов конструктора <xref:System.Exception.%23ctor%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-297">If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="4d6ec-298">В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-298">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="4d6ec-299">Свойство.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-299">Property</span></span>|<span data-ttu-id="4d6ec-300">Значение</span><span class="sxs-lookup"><span data-stu-id="4d6ec-300">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="4d6ec-301">Пустая ссылка (`Nothing` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-301">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="4d6ec-302">Строка сообщения об ошибке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-302">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-303">В следующем примере кода формируется `Exception` для определенного условия.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-303">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="4d6ec-304">В коде демонстрируется использование конструктора, который принимает в качестве параметра сообщение, указанное вызывающим объектом, как для производного класса, так и для базового класса `Exception`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-304">The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]
 [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]
 [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new Exception : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; Exception" Usage="new System.Exception (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="4d6ec-305">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-305">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="4d6ec-306">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-306">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="4d6ec-307">Инициализирует новый экземпляр класса <see cref="T:System.Exception" /> с сериализованными данными.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-307">Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-308">Данный конструктор вызывается в процессе десериализации для воссоздания объекта исключения, переданного в потоке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-308">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="4d6ec-309">Дополнительные сведения см. в разделе [сериализация XML и SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-309">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-310">В следующем примере кода определяется производный сериализуемый `Exception` класс.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-310">The following code example defines a derived serializable `Exception` class.</span></span> <span data-ttu-id="4d6ec-311">Код вызывает ошибку деления на 0, а затем создает экземпляр производного исключения с помощью конструктора (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-311">The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor.</span></span> <span data-ttu-id="4d6ec-312">Код сериализует экземпляр в файл, десериализует его в новое исключение, которое оно создает, а затем перехватывает и отображает данные исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-312">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d6ec-313"><paramref name="info" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-313"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="4d6ec-314">Имя класса — <see langword="null" />, или <see cref="P:System.Exception.HResult" /> равно нулю (0).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-314">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="4d6ec-315">Сериализация XML и SOAP</span><span class="sxs-lookup"><span data-stu-id="4d6ec-315">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new Exception : string * Exception -&gt; Exception" Usage="new System.Exception (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="4d6ec-316">Сообщение об ошибке, указывающее причину создания исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-316">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="4d6ec-317">Исключение, вызвавшее текущее исключение, или пустая ссылка (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-317">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</span></span></param>
        <summary><span data-ttu-id="4d6ec-318">Инициализирует новый экземпляр класса <see cref="T:System.Exception" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-318">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-319">Исключение, созданное как прямой результат предыдущего исключения, должно содержать в свойстве <xref:System.Exception.InnerException%2A> ссылку на предыдущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-319">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="4d6ec-320">Свойство <xref:System.Exception.InnerException%2A> возвращает то же значение, которое передается конструктору, или пустую ссылку (`Nothing` в Visual Basic), если свойство <xref:System.Exception.InnerException%2A> не предоставляет конструктору значение внутреннего исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-320">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="4d6ec-321">В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-321">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="4d6ec-322">Свойство.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-322">Property</span></span>|<span data-ttu-id="4d6ec-323">Значение</span><span class="sxs-lookup"><span data-stu-id="4d6ec-323">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="4d6ec-324">Ссылка на внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-324">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="4d6ec-325">Строка сообщения об ошибке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-325">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-326">В следующем примере кода формируется `Exception` для определенного условия.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-326">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="4d6ec-327">В коде демонстрируется использование конструктора, который принимает сообщение и внутреннее исключение как параметры как для производного класса, так и для базового класса `Exception`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-327">The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]
 [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]
 [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Data" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::IDictionary ^ Data { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Collections.IDictionary" Usage="System.Exception.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-328">Возвращает коллекцию пар ключ/значение, предоставляющие дополнительные сведения об исключении, определяемые пользователем.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-328">Gets a collection of key/value pairs that provide additional user-defined information about the exception.</span></span></summary>
        <value><span data-ttu-id="4d6ec-329">Объект, который реализует интерфейс <see cref="T:System.Collections.IDictionary" /> и содержит коллекцию заданных пользователем пар «ключ — значение».</span><span class="sxs-lookup"><span data-stu-id="4d6ec-329">An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs.</span></span> <span data-ttu-id="4d6ec-330">По умолчанию является пустой коллекцией.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-330">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-331">Используйте объект <xref:System.Collections.IDictionary?displayProperty=nameWithType>, возвращенный свойством <xref:System.Exception.Data%2A>, для хранения и получения дополнительных сведений, относящихся к исключению.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-331">Use the <xref:System.Collections.IDictionary?displayProperty=nameWithType> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception.</span></span> <span data-ttu-id="4d6ec-332">Сведения представляются в виде произвольного числа пар "ключ-значение", определяемых пользователем.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-332">The information is in the form of an arbitrary number of user-defined key/value pairs.</span></span> <span data-ttu-id="4d6ec-333">Ключевым компонентом каждой пары «ключ-значение» обычно является идентифицирующая строка, тогда как компонент value пары может быть любым типом объекта.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-333">The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</span></span>  
  
## <a name="keyvalue-pair-security"></a><span data-ttu-id="4d6ec-334">Безопасность пар "ключ — значение"</span><span class="sxs-lookup"><span data-stu-id="4d6ec-334">Key/Value Pair Security</span></span>  
 <span data-ttu-id="4d6ec-335">Пары "ключ-значение", хранящиеся в коллекции, возвращаемой свойством <xref:System.Exception.Data%2A>, не являются безопасными.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-335">The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure.</span></span> <span data-ttu-id="4d6ec-336">Если приложение вызывает вложенную последовательность подпрограмм и каждая подпрограммы содержит обработчики исключений, результирующий стек вызовов содержит иерархию этих обработчиков исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-336">If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</span></span> <span data-ttu-id="4d6ec-337">Если подпрограммы более низкого уровня выдают исключение, любой обработчик исключений верхнего уровня в иерархии стека вызовов может считывать и (или) изменять пары "ключ-значение", хранящиеся в коллекции любым другим обработчиком исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-337">If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</span></span> <span data-ttu-id="4d6ec-338">Это означает, что вы должны гарантировать, что информация в парах "ключ-значение" не является конфиденциальной и что приложение будет работать правильно, если информация в парах "ключ-значение" повреждена.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-338">This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</span></span>  
  
## <a name="key-conflicts"></a><span data-ttu-id="4d6ec-339">Конфликты ключей</span><span class="sxs-lookup"><span data-stu-id="4d6ec-339">Key Conflicts</span></span>  
 <span data-ttu-id="4d6ec-340">Конфликт ключей возникает, когда разные обработчики исключений задают один и тот же ключ для доступа к паре «ключ-значение».</span><span class="sxs-lookup"><span data-stu-id="4d6ec-340">A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</span></span> <span data-ttu-id="4d6ec-341">Будьте внимательны при разработке приложения, поскольку следствием конфликта ключей является то, что обработчики исключений низкого уровня могут случайно взаимодействовать с обработчиками исключений более высокого уровня, и это взаимодействие может привести к незаметному возникновению ошибок программы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-341">Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</span></span> <span data-ttu-id="4d6ec-342">Тем не менее, если вы соблюдаем осторожность, можно использовать конфликты ключей для улучшения приложения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-342">However, if you are cautious you can use key conflicts to enhance your application.</span></span>  
  
## <a name="avoiding-key-conflicts"></a><span data-ttu-id="4d6ec-343">Предотвращение конфликтов ключей</span><span class="sxs-lookup"><span data-stu-id="4d6ec-343">Avoiding Key Conflicts</span></span>  
 <span data-ttu-id="4d6ec-344">Избегайте конфликтов ключей, принимая соглашение об именовании для создания уникальных ключей для пар "ключ-значение".</span><span class="sxs-lookup"><span data-stu-id="4d6ec-344">Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</span></span> <span data-ttu-id="4d6ec-345">Например, соглашение об именовании может дать ключ, состоящий из имени приложения, разделенного точками, метода, который предоставляет дополнительные сведения о паре, и уникальный идентификатор.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-345">For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</span></span>  
  
 <span data-ttu-id="4d6ec-346">Предположим, что два приложения, именуемые Products и поставщики, имеют метод с именем Sales.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-346">Suppose two applications, named Products and Suppliers, each has a method named Sales.</span></span> <span data-ttu-id="4d6ec-347">Метод Sales в приложении Products предоставляет идентификационный номер (единицу складского учета или номер SKU) продукта.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-347">The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</span></span> <span data-ttu-id="4d6ec-348">Метод Sales в приложении поставщики предоставляет идентификационный номер или идентификатор безопасности поставщика.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-348">The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</span></span> <span data-ttu-id="4d6ec-349">Следовательно, в соглашении об именовании в этом примере выдаются ключи «Products. Sales. SKU» и «поставщики. Sales. SID».</span><span class="sxs-lookup"><span data-stu-id="4d6ec-349">Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</span></span>  
  
## <a name="exploiting-key-conflicts"></a><span data-ttu-id="4d6ec-350">Использование конфликтов ключей</span><span class="sxs-lookup"><span data-stu-id="4d6ec-350">Exploiting Key Conflicts</span></span>  
 <span data-ttu-id="4d6ec-351">Конфликты ключей эксплойтов с помощью наличия одного или нескольких специальных, предопределенных ключей для управления обработкой.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-351">Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</span></span> <span data-ttu-id="4d6ec-352">Предположим, что в одном сценарии обработчик исключений высшего уровня в иерархии стека вызовов перехватывает все исключения, порождаемые обработчиками исключений низкого уровня.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-352">Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</span></span> <span data-ttu-id="4d6ec-353">Если пара ключ-значение с особым ключом существует, обработчик исключений высокого уровня форматирует оставшиеся пары "ключ-значение" в объекте <xref:System.Collections.IDictionary> нестандартным образом; в противном случае остальные пары "ключ-значение" форматируются обычным способом.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-353">If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</span></span>  
  
 <span data-ttu-id="4d6ec-354">Теперь предположим, что в другом сценарии обработчик исключений на каждом уровне иерархии стека вызовов перехватывает исключение, выдаваемое следующим обработчиком исключений более низкого уровня.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-354">Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</span></span> <span data-ttu-id="4d6ec-355">Кроме того, каждый обработчик исключений знает, что коллекция, возвращенная свойством <xref:System.Exception.Data%2A>, содержит набор пар "ключ-значение", доступ к которым можно получить с помощью предустановленного набора ключей.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-355">In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</span></span>  
  
 <span data-ttu-id="4d6ec-356">Каждый обработчик исключений использует предустановленный набор ключей, чтобы обновить компонент значения соответствующей пары «ключ-значение» данными, уникальными для этого обработчика исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-356">Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</span></span> <span data-ttu-id="4d6ec-357">После завершения процесса обновления обработчик исключений создает исключение для следующего обработчика исключений более высокого уровня.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-357">After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</span></span> <span data-ttu-id="4d6ec-358">Наконец, обработчик исключений самого высокого уровня обращается к парам "ключ-значение" и отображает объединенные сведения об обновлении из всех обработчиков исключений нижнего уровня.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-358">Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-359">В следующем примере показано, как добавлять и получать сведения с помощью свойства <xref:System.Exception.Data%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-359">The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.</span></span>  
  
 [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]
 [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]
 [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.DictionaryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetBaseException">
      <MemberSignature Language="C#" Value="public virtual Exception GetBaseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetBaseException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetBaseException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBaseException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetBaseException();" />
      <MemberSignature Language="F#" Value="abstract member GetBaseException : unit -&gt; Exception&#xA;override this.GetBaseException : unit -&gt; Exception" Usage="exception.GetBaseException " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetBaseException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d6ec-360">При переопределении в производном классе возвращает исключение <see cref="T:System.Exception" />, которое является первопричиной одного или нескольких последующих исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-360">When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</span></span></summary>
        <returns><span data-ttu-id="4d6ec-361">В цепочке исключений создается первое исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-361">The first exception thrown in a chain of exceptions.</span></span> <span data-ttu-id="4d6ec-362">Если значением свойства <see cref="P:System.Exception.InnerException" /> текущего исключения является пустая ссылка (<see langword="Nothing" /> в Visual Basic), это свойство возвращает текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-362">If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-363">Цепочка исключений состоит из набора исключений таким образом, что каждое исключение в цепочке было создано как прямой результат исключения, указанного в свойстве `InnerException`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-363">A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property.</span></span> <span data-ttu-id="4d6ec-364">Для данной цепочки может существовать только одно исключение, которое является основной причиной всех других исключений в цепочке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-364">For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</span></span> <span data-ttu-id="4d6ec-365">Это исключение называется базовым исключением, а его свойство `InnerException` всегда содержит пустую ссылку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-365">This exception is called the base exception and its `InnerException` property always contains a null reference.</span></span>  
  
 <span data-ttu-id="4d6ec-366">Для всех исключений в цепочке исключений метод `GetBaseException` должен возвращать один и тот же объект (базовое исключение).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-366">For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).</span></span>  
  
 <span data-ttu-id="4d6ec-367">Используйте метод `GetBaseException`, если необходимо найти основную причину исключения, но не требуются сведения об исключениях, которые могли возникнуть между текущим исключением и первым исключением.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-367">Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-368">В следующем примере кода определяются два производных класса `Exception`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-368">The following code example defines two derived `Exception` classes.</span></span> <span data-ttu-id="4d6ec-369">Он вызывает исключение, а затем снова создает его с каждым из производных классов.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-369">It forces an exception and then throws it again with each of the derived classes.</span></span> <span data-ttu-id="4d6ec-370">В коде показано использование метода `GetBaseException` для получения исходного исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-370">The code shows the use of the `GetBaseException` method to retrieve the original exception.</span></span>  
  
 [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]
 [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]
 [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d6ec-371">Метод <see langword="GetBaseException" /> переопределяется в классах, которым требуется контроль над содержимым или форматом исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-371">The <see langword="GetBaseException" /> method is overridden in classes that require control over the exception content or format.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="exception.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="4d6ec-372">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-372">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="4d6ec-373">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-373">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="4d6ec-374">При переопределении в производном классе задает объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> со сведениями об исключении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-374">When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-375">Метод `GetObjectData` загружает в объект <xref:System.Runtime.Serialization.SerializationInfo> все данные объекта исключения, предназначенные для сериализации.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-375">`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="4d6ec-376">В процессе десериализации исключение воссоздается из объекта `SerializationInfo`, переданного в потоке.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-376">During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-377">В следующем примере кода определяется производный сериализуемый `Exception` класс, реализующий `GetObjectData`, который вносит небольшие изменения в два свойства, а затем вызывает базовый класс для выполнения сериализации.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-377">The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization.</span></span> <span data-ttu-id="4d6ec-378">В примере вызывается ошибка деления на 0, а затем создается экземпляр производного исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-378">The example forces a divide-by-0 error and then creates an instance of the derived exception.</span></span> <span data-ttu-id="4d6ec-379">Код сериализует экземпляр в файл, десериализует его в новое исключение, которое оно создает, а затем перехватывает и отображает данные исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-379">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d6ec-380">Значением параметра <paramref name="info" /> является пустая ссылка (<see langword="Nothing" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-380">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="4d6ec-381">требуется полное доверие для немедленного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-381">requires full trust for the immediate caller.</span></span> <span data-ttu-id="4d6ec-382">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-382">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="exception.GetType " />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d6ec-383">Возвращает тип среды выполнения текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-383">Gets the runtime type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="4d6ec-384">Объект <see cref="T:System.Type" />, представляющий точный тип среды выполнения текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-384">A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-385">Для поддержки инфраструктуры .NET Framework существует метод <xref:System.Exception.GetType%2A>, который внутренне вызывает основной метод <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-385">The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="HelpLink">
      <MemberSignature Language="C#" Value="public virtual string HelpLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpLink" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HelpLink" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpLink As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpLink { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpLink : string with get, set" Usage="System.Exception.HelpLink" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.HelpLink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-386">Получает или задает ссылку на файл справки, связанный с этим исключением.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-386">Gets or sets a link to the help file associated with this exception.</span></span></summary>
        <value><span data-ttu-id="4d6ec-387">URN или URL-адрес.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-387">The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-388">Возвращаемым значением, представляющим файл справки, является URN или URL-адрес.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-388">The return value, which represents a help file, is a URN or URL.</span></span> <span data-ttu-id="4d6ec-389">Например, значение `HelpLink` может быть следующим:</span><span class="sxs-lookup"><span data-stu-id="4d6ec-389">For example, the `HelpLink` value could be:</span></span>  
  
 <span data-ttu-id="4d6ec-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span><span class="sxs-lookup"><span data-stu-id="4d6ec-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-391">В следующем примере кода создается `Exception`, который задает свойство `HelpLink` в конструкторе, а затем перехватывает исключение и отображает `HelpLink`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-391">The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HResult">
      <MemberSignature Language="C#" Value="public int HResult { get; protected set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HResult" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HResult" />
      <MemberSignature Language="VB.NET" Value="Public Property HResult As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:  property int HResult {  public:&#xA;int get(); protected:&#xA; void set(int value); };" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.HResult : int with get, set" Usage="System.Exception.HResult" />
      <MemberSignature Language="C#" Value="public int HResult { get; set; }" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HResult { int get(); void set(int value); };" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="protected int HResult { get; set; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Protected Property HResult As Integer" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int HResult { int get(); void set(int value); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-392">Возвращает или задает HRESULT — кодированное числовое значение, присвоенное определенному исключению.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-392">Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</span></span></summary>
        <value><span data-ttu-id="4d6ec-393">Значение HRESULT.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-393">The HRESULT value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-394">HRESULT — это 32-разрядное значение, разделенное на три разных поля: код серьезности, код средства и код ошибки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-394">HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</span></span> <span data-ttu-id="4d6ec-395">Код серьезности указывает, представляет ли возвращенное значение сведения, предупреждение или ошибку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-395">The severity code indicates whether the return value represents information, warning, or error.</span></span> <span data-ttu-id="4d6ec-396">Код устройства определяет область системы, из-за которой возникла ошибка.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-396">The facility code identifies the area of the system responsible for the error.</span></span> <span data-ttu-id="4d6ec-397">Код ошибки ― это уникальный номер, представляющий исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-397">The error code is a unique number that is assigned to represent the exception.</span></span> <span data-ttu-id="4d6ec-398">Каждое исключение сопоставляется с отдельным значением HRESULT.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-398">Each exception is mapped to a distinct HRESULT.</span></span> <span data-ttu-id="4d6ec-399">Когда управляемый код создает исключение, среда выполнения передает HRESULT клиенту COM.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-399">When managed code throws an exception, the runtime passes the HRESULT to the COM client.</span></span> <span data-ttu-id="4d6ec-400">Если неуправляемый код возвращает ошибку, значение HRESULT преобразуется в исключение, которое затем выдается средой выполнения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-400">When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</span></span> <span data-ttu-id="4d6ec-401">Сведения о значениях HRESULT и соответствующих .NET Framework исключениях см. [в разделе как сопоставлять значения HRESULT и исключения](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-401">For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span> <span data-ttu-id="4d6ec-402">Список наиболее часто встречающихся значений см. в разделе [Общие значения HRESULT](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) в документации по Windows.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-402">See [Common HRESULT Values](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.</span></span>  
  
 <span data-ttu-id="4d6ec-403">Начиная с [!INCLUDE[net_v45](~/includes/net-v45-md.md)]метод задания свойства <xref:System.Exception.HResult%2A> защищен, в то время как его метод получения является открытым.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-403">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.</span></span>  <span data-ttu-id="4d6ec-404">В предыдущих версиях .NET Framework и метод получения, и метод задания защищены.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-404">In previous versions of the .NET Framework, both getter and setter are protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-405">В следующем примере кода определяется производный класс `Exception`, который задает для свойства `HResult` пользовательское значение в конструкторе.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-405">The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.</span></span>  
  
 [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]
 [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]
 [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/610b364b-2761-429d-9c4a-afbc3e66f1b9"><span data-ttu-id="4d6ec-406">Практическое руководство. Сопоставление значений HRESULT и исключений</span><span class="sxs-lookup"><span data-stu-id="4d6ec-406">How to: Map HRESULTs and Exceptions</span></span></related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx"><span data-ttu-id="4d6ec-407">Общие значения HRESULT</span><span class="sxs-lookup"><span data-stu-id="4d6ec-407">Common HRESULT Values</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public Exception InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception InnerException" />
      <MemberSignature Language="DocId" Value="P:System.Exception.InnerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ InnerException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerException : Exception" Usage="System.Exception.InnerException" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.InnerException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-408">Возвращает экземпляр класса <see cref="T:System.Exception" />, который вызвал текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-408">Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</span></span></summary>
        <value><span data-ttu-id="4d6ec-409">Объект, описывающий ошибку, которая вызвала текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-409">An object that describes the error that caused the current exception.</span></span> <span data-ttu-id="4d6ec-410">Свойство <see cref="P:System.Exception.InnerException" /> возвращает то же значение, что было передано в конструктор <see cref="M:System.Exception.#ctor(System.String,System.Exception)" />, или значение <see langword="null" />, если конструктору не было передано значение внутреннего исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-410">The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor.</span></span> <span data-ttu-id="4d6ec-411">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-411">This property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-412">Если исключение `X` возникает как прямой результат предыдущего исключения `Y`, свойство <xref:System.Exception.InnerException%2A> объекта `X` должно содержать ссылку на `Y`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-412">When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.</span></span>  
  
 <span data-ttu-id="4d6ec-413">Свойство <xref:System.Exception.InnerException%2A> используется, чтобы получить набор исключений, ставших причиной текущего исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-413">Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.</span></span>  
  
 <span data-ttu-id="4d6ec-414">Можно создать новое исключение, которое перехватывает предыдущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-414">You can create a new exception that catches an earlier exception.</span></span> <span data-ttu-id="4d6ec-415">Код, обрабатывающий второе исключение, может использовать дополнительные сведения из предыдущего исключения для более адекватной обработки ошибки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-415">The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</span></span>  
  
 <span data-ttu-id="4d6ec-416">Предположим, что имеется функция, которая считывает файл и форматирует данные из этого файла.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-416">Suppose that there is a function that reads a file and formats the data from that file.</span></span> <span data-ttu-id="4d6ec-417">В этом примере, когда код пытается прочитать файл, выдается <xref:System.IO.IOException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-417">In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown.</span></span> <span data-ttu-id="4d6ec-418">Функция перехватывает <xref:System.IO.IOException> и создает исключение <xref:System.IO.FileNotFoundException>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-418">The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="4d6ec-419"><xref:System.IO.IOException> можно сохранить в свойстве <xref:System.Exception.InnerException%2A> <xref:System.IO.FileNotFoundException>, включив код, который перехватывает <xref:System.IO.FileNotFoundException>, чтобы проверить причину первоначальной ошибки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-419">The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.</span></span>  
  
 <span data-ttu-id="4d6ec-420">Свойство <xref:System.Exception.InnerException%2A>, содержащее ссылку на внутреннее исключение, задается при инициализации объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-420">The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-421">В следующем примере демонстрируется создание и перехват исключения, ссылающегося на внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-421">The following example demonstrates throwing and catching an exception that references an inner exception.</span></span>  
  
 [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]
 [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]
 [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public virtual string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Exception.Message" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Message</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-422">Возвращает сообщение, описывающее текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-422">Gets a message that describes the current exception.</span></span></summary>
        <value><span data-ttu-id="4d6ec-423">Сообщение об ошибке с объяснением причин исключения или пустая строка ("").</span><span class="sxs-lookup"><span data-stu-id="4d6ec-423">The error message that explains the reason for the exception, or an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-424">Сообщения об ошибках предназначены для разработчика, который обрабатывает исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-424">Error messages target the developer who is handling the exception.</span></span> <span data-ttu-id="4d6ec-425">Текст свойства <xref:System.Exception.Message%2A> должен полностью описывать ошибку и, по возможности, также объяснить, как исправить ошибку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-425">The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error.</span></span> <span data-ttu-id="4d6ec-426">Обработчики исключений верхнего уровня могут отображать сообщение для конечных пользователей, поэтому следует убедиться, что оно грамматически правильно и каждое предложение сообщения заканчивается точкой.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-426">Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</span></span> <span data-ttu-id="4d6ec-427">Не используйте вопросительные знаки или восклицательные точки.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-427">Do not use question marks or exclamation points.</span></span> <span data-ttu-id="4d6ec-428">Если приложение использует локализованные сообщения об исключениях, следует убедиться, что они правильно переведены.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-428">If your application uses localized exception messages, you should ensure that they are accurately translated.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d6ec-429">Не раскрывайте конфиденциальные данные в сообщениях об исключениях без проверки соответствующих разрешений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-429">Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</span></span>  
  
 <span data-ttu-id="4d6ec-430">Значение свойства <xref:System.Exception.Message%2A> включается в сведения, возвращаемые <xref:System.Exception.ToString%2A>. Свойство <xref:System.Exception.Message%2A> задается только при создании <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-430">The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>.</span></span> <span data-ttu-id="4d6ec-431">Если в конструктор для текущего экземпляра не было предоставлено сообщение, система предоставляет сообщение по умолчанию, которое форматируется с использованием текущего языка и региональных параметров системы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-431">If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</span></span>  
  
## <a name="windows-runtime-and-includenet_v451includesnet-v451-mdmd"></a><span data-ttu-id="4d6ec-432">Среда выполнения Windows и [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="4d6ec-432">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="4d6ec-433">Начиная с [!INCLUDE[net_v451](~/includes/net-v451-md.md)] и [!INCLUDE[win81](~/includes/win81-md.md)], улучшена точность сообщений об ошибках из исключений, распространяемых из среда выполнения Windows типов и членов, которые не являются частью .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-433">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</span></span> <span data-ttu-id="4d6ec-434">В частности, сообщения об исключениях C++ из расширений визуальных компонентов (C++/CX) теперь передаются обратно в .NET Framework объекты <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-434">In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-435">В следующем примере кода создается исключение <xref:System.Exception> и отображается текстовое сообщение исключения с помощью свойства <xref:System.Exception.Message%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-435">The following code example throws and then catches an <xref:System.Exception> exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.</span></span>
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d6ec-436">Если исключение создается из свойства и необходимо сослаться на текст <see cref="P:System.Exception.Message" /> к заданному или полученному аргументу свойства, используйте значение "value" в качестве имени аргумента свойства.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-436">If you throw an exception from a property, and you need to refer in the text of <see cref="P:System.Exception.Message" /> to the property argument that you set or get, use "value" as the name of the property argument.</span></span></para></block>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d6ec-437">Свойство <see cref="P:System.Exception.Message" /> переопределяется в классах, требующих управления содержимым сообщений или форматом.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-437">The <see cref="P:System.Exception.Message" /> property is overridden in classes that require control over message content or format.</span></span> <span data-ttu-id="4d6ec-438">Код приложения обычно получает доступ к этому свойству, когда ему требуется отобразить сведения об исключении, которое было перехвачено.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-438">Application code typically accesses this property when it needs to display information about an exception that has been caught.</span></span>  
  
<span data-ttu-id="4d6ec-439">Сообщение об ошибке должно быть локализовано.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-439">The error message should be localized.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SerializeObjectState">
      <MemberSignature Language="C#" Value="protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState" />
      <MemberSignature Language="DocId" Value="E:System.Exception.SerializeObjectState" />
      <MemberSignature Language="VB.NET" Value="Protected Custom Event SerializeObjectState As EventHandler(Of SafeSerializationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; event EventHandler&lt;System::Runtime::Serialization::SafeSerializationEventArgs ^&gt; ^ SerializeObjectState;" />
      <MemberSignature Language="F#" Value="member this.SerializeObjectState : EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " Usage="member this.SerializeObjectState : System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-440">Возникает, когда исключение сериализовано для создания объекта состояния исключения, содержащего сериализованные данные об исключении.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-440">Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-441">Объект состояния исключения реализует интерфейс <xref:System.Runtime.Serialization.ISafeSerializationData>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-441">The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 <span data-ttu-id="4d6ec-442">Когда на событие <xref:System.Exception.SerializeObjectState> подписывается, исключение десериализуется и создается как пустое исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-442">When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception.</span></span> <span data-ttu-id="4d6ec-443">Конструктор исключения не выполняется, и состояние исключения также десериализуется.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-443">The exception's constructor is not run, and the exception state is also deserialized.</span></span> <span data-ttu-id="4d6ec-444">Затем метод обратного вызова <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> объекта состояния исключения получает уведомление, чтобы он мог передать десериализованные данные в пустое исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-444">The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</span></span>  
  
 <span data-ttu-id="4d6ec-445">Событие <xref:System.Exception.SerializeObjectState> позволяет выполнять прозрачные типы исключений для сериализации и десериализации данных исключений.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-445">The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data.</span></span> <span data-ttu-id="4d6ec-446">Прозрачный код может выполнять команды внутри границ набора разрешений, в котором он работает, но не может выполнять, вызывать, наследовать от или содержать критически важный код.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-446">Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</span></span>  
  
 <span data-ttu-id="4d6ec-447">Если событие <xref:System.Exception.SerializeObjectState> не подписано на, то десериализация выполняется как обычно с помощью конструктора <xref:System.Exception.%23ctor%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-447">If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="4d6ec-448">Как правило, обработчик события <xref:System.Exception.SerializeObjectState> добавляется в конструктор исключения для предоставления его сериализации.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-448">Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization.</span></span> <span data-ttu-id="4d6ec-449">Но поскольку конструктор не выполняется при выполнении обработчика <xref:System.Exception.SerializeObjectState> событий, сериализация десериализованного исключения может вызвать исключение <xref:System.Runtime.Serialization.SerializationException> при попытке десериализовать исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-449">But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception.</span></span> <span data-ttu-id="4d6ec-450">Чтобы избежать этого, следует также добавить обработчик для события <xref:System.Exception.SerializeObjectState> в методе <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-450">To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4d6ec-451">Иллюстрации см. в разделе "примеры".</span><span class="sxs-lookup"><span data-stu-id="4d6ec-451">See the Examples section for an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-452">В следующем примере определяется `BadDivisionException`, обрабатывающая событие <xref:System.Exception.SerializeObjectState>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-452">The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event.</span></span> <span data-ttu-id="4d6ec-453">Он также содержит объект состояния, который является вложенной структурой с именем `BadDivisionExceptionState`, реализующей интерфейс <xref:System.Runtime.Serialization.ISafeSerializationData>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-453">It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]
 [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  
  
 <span data-ttu-id="4d6ec-454">Исключение `BadDivisionException` возникает при возникновении деления на ноль с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-454">The `BadDivisionException` exception is thrown when a floating-point division by zero occurs.</span></span> <span data-ttu-id="4d6ec-455">Во время первого деления на ноль в примере создается объект `BadDivisionException`, сериализуется и создается исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-455">During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception.</span></span> <span data-ttu-id="4d6ec-456">При последующих делениях на ноль в примере выполняется десериализация ранее сериализованного объекта, повторная сериализация и исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-456">When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</span></span> <span data-ttu-id="4d6ec-457">Чтобы обеспечить сериализацию объектов, десериализацию, сериализацию и десериализацию, в примере добавляется обработчик событий <xref:System.Exception.SerializeObjectState> как в конструкторе класса `BadDivisionException`, так и в реализации <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-457">To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d6ec-458">Если это событие подписано и используется, все производные типы, следующие за иерархией наследования, должны реализовывать тот же механизм сериализации.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-458">If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public virtual string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Source" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Exception.Source" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Source</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-459">Возвращает или задает имя приложения или объекта, вызывавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-459">Gets or sets the name of the application or the object that causes the error.</span></span></summary>
        <value><span data-ttu-id="4d6ec-460">Имя приложения или объекта, вызвавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-460">The name of the application or the object that causes the error.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-461">Если свойство <xref:System.Exception.Source%2A> не задано явным образом, среда выполнения автоматически задает для него имя сборки, в которой было создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-461">If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-462">В следующем примере создается `Exception`, которая задает свойство `Source` в конструкторе, а затем перехватывает исключение и отображает `Source`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-462">The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4d6ec-463">Объект должен быть объектом среды выполнения <see cref="N:System.Reflection" />.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-463">The object must be a runtime <see cref="N:System.Reflection" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public virtual string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Exception.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StackTrace : string" Usage="System.Exception.StackTrace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.StackTrace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-464">Получает строковое представление непосредственных кадров в стеке вызова.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-464">Gets a string representation of the immediate frames on the call stack.</span></span></summary>
        <value><span data-ttu-id="4d6ec-465">Строка, описывающая непосредственные фреймы стека вызова.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-465">A string that describes the immediate frames of the call stack.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-466">В стеке выполнения отслеживаются все методы, выполняемые в данный момент времени.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-466">The execution stack keeps track of all the methods that are in execution at a given instant.</span></span> <span data-ttu-id="4d6ec-467">Трассировка вызовов метода называется трассировкой стека.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-467">A trace of the method calls is called a stack trace.</span></span> <span data-ttu-id="4d6ec-468">Список трассировки стека позволяет отслеживать стек вызовов до номера строки в методе, где возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-468">The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</span></span>  
  
 <span data-ttu-id="4d6ec-469">Свойство <xref:System.Exception.StackTrace%2A> возвращает кадры стека вызовов, которые происходят в том месте, где было создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-469">The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown.</span></span> <span data-ttu-id="4d6ec-470">Сведения о дополнительных кадрах в стеке вызовов можно получить, создав новый экземпляр класса <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> и используя метод <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-470">You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="4d6ec-471">Среда CLR обновляет трассировку стека всякий раз, когда в коде приложения создается исключение (с помощью ключевого слова `throw`).</span><span class="sxs-lookup"><span data-stu-id="4d6ec-471">The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword).</span></span> <span data-ttu-id="4d6ec-472">Если исключение было повторно создано в методе, отличном от метода, в котором он был изначально вызван, трассировка стека содержит как расположение в методе, где было создано исключение, и расположение в методе, где возникло исключение. снова.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-472">If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</span></span> <span data-ttu-id="4d6ec-473">Если возникло исключение, а позднее повторно выбрасывается в том же методе, трассировка стека содержит только расположение, в котором было повторно создано исключение, и не включает место первоначального возникновения исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-473">If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</span></span>  
  
 <span data-ttu-id="4d6ec-474">Свойство <xref:System.Exception.StackTrace%2A> может не сообщать столько вызовов методов, сколько ожидалось, поскольку преобразования кода, такие как встраивание, происходят во время оптимизации.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-474">The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-475">В следующем примере кода создается `Exception`, а затем перехватывается и отображается трассировка стека с помощью свойства `StackTrace`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-475">The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d6ec-476">Свойство <see langword="StackTrace" /> переопределяется в классах, требующих управления содержимым или форматом трассировки стека.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-476">The <see langword="StackTrace" /> property is overridden in classes that require control over the stack trace content or format.</span></span>  
  
<span data-ttu-id="4d6ec-477">По умолчанию трассировка стека записывается непосредственно перед созданием объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-477">By default, the stack trace is captured immediately before an exception object is thrown.</span></span> <span data-ttu-id="4d6ec-478">Используйте <see cref="P:System.Environment.StackTrace" />, чтобы получить сведения о трассировке стека, когда исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-478">Use <see cref="P:System.Environment.StackTrace" /> to get stack trace information when no exception is being thrown.</span></span></para></block>
        <altmember cref="P:System.Environment.StackTrace" />
      </Docs>
    </Member>
    <Member MemberName="TargetSite">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodBase TargetSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase TargetSite" />
      <MemberSignature Language="DocId" Value="P:System.Exception.TargetSite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetSite As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodBase ^ TargetSite { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetSite : System.Reflection.MethodBase" Usage="System.Exception.TargetSite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.TargetSite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d6ec-479">Возвращает метод, создавший текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-479">Gets the method that throws the current exception.</span></span></summary>
        <value><span data-ttu-id="4d6ec-480">Метод <see cref="T:System.Reflection.MethodBase" />, вызвавший текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-480">The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-481">Если метод, который создает это исключение, недоступен и трассировка стека не является пустой ссылкой (`Nothing` в Visual Basic), <xref:System.Exception.TargetSite%2A> получает метод из трассировки стека.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-481">If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace.</span></span> <span data-ttu-id="4d6ec-482">Если трассировка стека является нулевой ссылкой, то <xref:System.Exception.TargetSite%2A> также возвращает нулевую ссылку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-482">If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d6ec-483">Свойство <xref:System.Exception.TargetSite%2A> может неточно сообщать имя метода, в котором было создано исключение, если обработчик исключений обрабатывает исключение через границы домена приложения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-483">The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-484">В следующем примере кода создается `Exception`, а затем перехватывается и отображается исходный метод с помощью свойства `TargetSite`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-484">The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exception.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d6ec-485">Создает и возвращает строковое представление текущего исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-485">Creates and returns a string representation of the current exception.</span></span></summary>
        <returns><span data-ttu-id="4d6ec-486">Строковое представление текущего исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-486">A string representation of the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d6ec-487"><xref:System.Exception.ToString%2A> возвращает представление текущего исключения, которое должно быть понятным для человека.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-487"><xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans.</span></span> <span data-ttu-id="4d6ec-488">Если исключение содержит данные, зависящие от языка и региональных параметров, то строковое представление, возвращаемое `ToString`, должно учитывать текущий язык и региональные параметры системы.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-488">Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture.</span></span> <span data-ttu-id="4d6ec-489">Хотя нет точных требований к формату возвращаемой строки, она должна попытаться отразить значение объекта, принятое пользователем.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-489">Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</span></span>  
  
 <span data-ttu-id="4d6ec-490">Реализация <xref:System.Exception.ToString%2A> по умолчанию получает имя класса, который выдал текущее исключение, сообщение, результат вызова <xref:System.Exception.ToString%2A> внутреннего исключения и результат вызова <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-490">The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4d6ec-491">Если какой-либо из этих членов имеет `null`, его значение не включается в возвращаемую строку.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-491">If any of these members is `null`, its value is not included in the returned string.</span></span>  
  
 <span data-ttu-id="4d6ec-492">Если сообщение об ошибке отсутствует или является пустой строкой (""), сообщение об ошибке не возвращается.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-492">If there is no error message or if it is an empty string (""), then no error message is returned.</span></span> <span data-ttu-id="4d6ec-493">Имя внутреннего исключения и трассировка стека возвращаются только в том случае, если они не `null`.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-493">The name of the inner exception and the stack trace are returned only if they are not `null`.</span></span>  
  
 <span data-ttu-id="4d6ec-494">Этот метод переопределяет метод <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-494">This method overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d6ec-495">В следующем примере вызывается исключение и выводится результат вызова <xref:System.Exception.ToString%2A> для этого исключения.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-495">The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception.</span></span> <span data-ttu-id="4d6ec-496">Обратите внимание, что метод <xref:System.Exception.ToString%2A?displayProperty=nameWithType> вызывается неявно, когда экземпляр класса Exception появляется в списке аргументов метода <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4d6ec-496">Note that the <xref:System.Exception.ToString%2A?displayProperty=nameWithType> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]
 [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]
 [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
