<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fcae00acfa7690a177a9ae3923d64e925291729" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420296" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Тип объектов для сравнения.</typeparam>
    <summary>Определяет обобщенный метод, который реализуется типом значения или классом для создания метода с целью определения экземпляров.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется типами, значения которых могут быть эквивалентны (например, числовые и строковые классы). Тип значения или класс реализует <xref:System.IEquatable%601.Equals%2A> метод для создания метода, зависящего от типа, который подходит для определения равенства экземпляров.  
  
> [!NOTE]
>  <xref:System.IComparable%601> Интерфейс<xref:System.IComparable%601.CompareTo%2A> определяет метод, который определяет порядок сортировки экземпляров реализующего типа. <xref:System.IEquatable%601> Интерфейс<xref:System.IEquatable%601.Equals%2A> определяет метод, который определяет равенство экземпляров реализующего типа.  
  
 `Contains` <xref:System.Collections.Generic.Dictionary%602> `LastIndexOf` `Remove` `IndexOf` <xref:System.Collections.Generic.LinkedList%601> Интерфейс используется объектами универсальной коллекции, такими как, <xref:System.Collections.Generic.List%601>, и при проверке на равенство в таких методах, как,, и. <xref:System.IEquatable%601> Он должен быть реализован для любого объекта, который может храниться в универсальной коллекции.  
  
   
  
## Examples  
 См. пример для <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> метода.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Замените параметр <see cref="T:System.IEquatable`1" /> типа интерфейса типом, реализующим этот интерфейс.  
  
При реализации <see cref="T:System.IEquatable`1" />необходимо также переопределить реализации <see cref="M:System.Object.Equals(System.Object)" /> базового класса и <see cref="M:System.Object.GetHashCode" /> , чтобы <see cref="M:System.IEquatable`1.Equals(`0)" /> их поведение согласуется с методом. При переопределении переопределенная реализация также вызывается в вызовах статического <see langword="Equals(System.Object, System.Object)" /> метода класса. <see cref="M:System.Object.Equals(System.Object)" /> Кроме того, следует перегружать <see langword="op_Equality" /> операторы и. <see langword="op_Inequality" /> Это гарантирует, что все тесты на равенство возвращали результаты.  
  
 <block subset="none" type="note"><para>  
 Дополнительные сведения о переопределении <see cref="M:System.Object.Equals(System.Object)" />см. в <see cref="M:System.Object.Equals(System.Object)" /> статье.  
  
</para></block>  
  
 Для типа значения следует всегда реализовывать <see cref="T:System.IEquatable`1" /> и переопределять <see cref="M:System.Object.Equals(System.Object)" /> для повышения производительности. <see cref="M:System.Object.Equals(System.Object)" />типы значений полей и основаны на отражении для сравнения двух значений на равенство. Реализация <see cref="M:System.IEquatable`1.Equals(`0)" /> и<see cref="M:System.Object.Equals(System.Object)" /> переопределение должны возвращать последовательные результаты.  
  
Если реализуется <see cref="T:System.IEquatable`1" />, следует также реализовать <see cref="T:System.IComparable`1" /> , если экземпляры типа могут быть упорядочены или отсортированы. Если тип реализует <see cref="T:System.IComparable`1" />, почти всегда реализуется <see cref="T:System.IEquatable`1" />и.</para>
      <para>Обратите внимание, что существуют некоторые конструкции, в которых тип поддерживает связь заказа, но равенство может отличаться от связи упорядочения. Рассмотрим класс `Person` , в котором сортируются по алфавиту. Два человека с одинаковым именем сортируют одно и то же, но не совпадают.</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Объект, который требуется сравнить с данным объектом.</param>
        <summary>Указывает, равен ли текущий объект другому объекту того же типа.</summary>
        <returns><see langword="true" />, если текущий объект равен параметру <paramref name="other" />, в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация <xref:System.IEquatable%601.Equals%2A> метода предназначена для выполнения проверки на равенство с другим объектом типа `T`, который имеет тот же тип, что и текущий объект. <xref:System.IEquatable%601.Equals(%600)> Метод вызывается в следующих случаях:  
  
-   При вызове `other`метода, Если аргумент является строго типизированным объектом типа `T`. `Equals` (Если `other` не относится к типу `T`, вызывается <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> базовый метод. Из двух методов <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> обеспечивает немного более высокую производительность.)  
  
-   При вызове методов поиска для нескольких объектов универсальной коллекции. Ниже перечислены некоторые из этих типов и их методы.  
  
    -   Некоторые из универсальных перегрузок <xref:System.Array.BinarySearch%2A> метода.  
  
    -   Методы <xref:System.Collections.Generic.List%601> поиска класса, включая <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>и. <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>  
  
    -   Методы <xref:System.Collections.Generic.Dictionary%602> поиска класса, включая <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> и <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Методы поиска универсального <xref:System.Collections.Generic.LinkedList%601> класса, включая <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> и <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 Иными словами, для обработки вероятности того, что объекты класса будут храниться в массиве или объекте универсальной коллекции, рекомендуется реализовать <xref:System.IEquatable%601> , чтобы объект можно было легко идентифицировать и манипулировать.  
  
 При реализации <xref:System.IEquatable%601.Equals%2A> метода определяйте равенство соответствующим образом для типа, указанного в аргументе универсального типа. Например, если аргумент типа имеет значение <xref:System.Int32>, определяйте равенство соответствующим образом для сравнения 2 32-разрядных целых чисел со знаком.  
  
   
  
## Examples  
 В следующем примере показана частичная `Person` реализация класса, который реализует <xref:System.IEquatable%601> и имеет два свойства: `LastName` и. `SSN` `SSN` `Person` Метод возвращает `True` значение, если свойство двух объектов идентично; в противном случае возвращается `False`значение. <xref:System.IEquatable%601.Equals%2A>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person`Затем объекты могут храниться в <xref:System.Collections.Generic.List%601> объекте и могут идентифицироваться `Contains` методом, как показано в следующем примере.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>При реализации <see cref="M:System.IEquatable`1.Equals(`0)" />необходимо также переопределить реализации <see cref="M:System.Object.Equals(System.Object)" /> базового класса и <see cref="M:System.Object.GetHashCode" /> , чтобы <see cref="M:System.IEquatable`1.Equals(`0)" /> их поведение согласуется с методом. При переопределении переопределенная реализация также вызывается в вызовах статического <see langword="Equals(System.Object, System.Object)" /> метода класса. <see cref="M:System.Object.Equals(System.Object)" /> Кроме того, следует перегружать <see langword="op_Equality" /> операторы и. <see langword="op_Inequality" /> Это гарантирует, что все тесты на равенство возвращали результаты, которые показаны в примере.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
