<Type Name="IComparable" FullName="System.IComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0177d972b5cbe72cebc55370b0db86925bdfaa4d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75041430" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable" />
  <TypeSignature Language="DocId" Value="T:System.IComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет обобщенный метод сравнения, который реализуется типом значения или классом для упорядочения или сортировки экземпляров.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот интерфейс реализуется типами, значения которых могут быть упорядочены или отсортированы. Для этого требуется, чтобы реализующие типы определяли один метод, <xref:System.IComparable.CompareTo%28System.Object%29>, который указывает, находится ли текущее вхождение в порядке сортировки до, после или аналогично второму объекту того же типа. Реализация <xref:System.IComparable> экземпляра вызывается автоматически такими методами, как <xref:System.Array.Sort%2A?displayProperty=nameWithType> и <xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType>.  
  
 Реализация метода <xref:System.IComparable.CompareTo%28System.Object%29> должна возвращать <xref:System.Int32> с одним из трех значений, как показано в следующей таблице.  
  
|Значение|Значение|  
|-----------|-------------|  
|Меньше нуля|Текущий экземпляр предшествует объекту, указанному методом <xref:System.IComparable.CompareTo%2A> в порядке сортировки.|  
|Нуль|Текущий экземпляр находится в том же положении в порядке сортировки, что и объект, указанный методом <xref:System.IComparable.CompareTo%2A>.|  
|Больше нуля|Этот текущий экземпляр следует за объектом, заданным методом <xref:System.IComparable.CompareTo%2A> в порядке сортировки.|  
  
 Все числовые типы (такие как <xref:System.Int32> и <xref:System.Double>) реализуют <xref:System.IComparable>, как <xref:System.String>, <xref:System.Char>и <xref:System.DateTime>. Пользовательские типы также должны предоставлять собственную реализацию <xref:System.IComparable>, чтобы разрешить упорядочивание или сортировку экземпляров объектов.  
  
   
  
## Examples  
 В следующем примере показана реализация <xref:System.IComparable> и <xref:System.IComparable.CompareTo%2A>ного метода.  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int" Usage="iComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для сравнения с данным экземпляром.</param>
        <summary>Сравнивает текущий экземпляр с другим объектом того же типа и возвращает целое число, которое показывает, расположен ли текущий экземпляр перед, после или на той же позиции в порядке сортировки, что и другой объект.</summary>
        <returns>Значение, указывающее, каков относительный порядок сравниваемых объектов. Возвращаемые значения представляют следующие результаты сравнения. 
 <list type="table"><listheader><term> Значение 
 </term><description> Значение 
 </description></listheader><item><term> Меньше нуля 
 </term><description> Данный экземпляр предшествует параметру <paramref name="obj" /> в порядке сортировки.  
  
 </description></item><item><term> Нуль 
 </term><description> Данный экземпляр занимает ту же позицию в порядке сортировки, что и параметр <paramref name="obj" />.  
  
 </description></item><item><term> Больше нуля 
 </term><description> Данный экземпляр следует за параметром <paramref name="obj" /> в порядке сортировки.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.IComparable.CompareTo%2A> реализуется типами, значения которых могут быть упорядочены или отсортированы. Он вызывается автоматически методами объектов неуниверсальной коллекции, например <xref:System.Array.Sort%2A?displayProperty=nameWithType>, для упорядочения каждого элемента массива. Если пользовательский класс или структура не реализует <xref:System.IComparable>, то его члены не могут быть упорядочены, а операция сортировки может вызывать <xref:System.InvalidOperationException>.  
  
 Этот метод является только определением и должен быть реализован конкретным классом или типом значения, чтобы иметь результат. Значение сравнений, указанных в разделе возвращаемое значение ("предшествует", "выполняется в той же области, что и", а "ниже"), зависит от конкретной реализации.  
  
 По определению любой объект сравнивается с `null`больше (или следует за ним), а две пустые ссылки сравнивают равными друг другу.  
  
 Параметр `obj`должен быть того же типа, что и класс или тип значения, который реализует этот интерфейс. в противном случае создается <xref:System.ArgumentException>.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.IComparable.CompareTo%2A> для сравнения объекта `Temperature`, реализующего <xref:System.IComparable> с другим объектом. Объект `Temperature` реализует <xref:System.IComparable.CompareTo%2A>, просто упаковывая вызов метода <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType>.  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Тип значения параметра <paramref name="obj" /> отличается от типа данного экземпляра.</exception>
        <block subset="none" type="overrides"><para>Для объектов A, B и C должны выполняться следующие условия: 
 <c>А. CompareTo (a)</c> должен возвращать ноль.  
  
Если <c>A. CompareTo (B)</c> возвращает ноль, то <c>B. CompareTo (A)</c> должно возвращать ноль.  
  
Если <c>a. CompareTo (B)</c> возвращает ноль, а <c>B. CompareTo (c)</c> возвращает ноль, то <c>A. CompareTo (c)</c> должен возвращать ноль.  
  
Если <c>A. CompareTo (B)</c> возвращает значение, отличное от нуля, то <c>B. CompareTo (A)</c> должно возвращать значение противоположного знака.  
  
Если <c>a. CompareTo (B)</c> возвращает значение <paramref name="x" /> не равно нулю, а <c>B. CompareTo (c)</c> возвращает значение <paramref name="y" /> того же знака, что и <paramref name="x" />, то <c>A. CompareTo (c)</c> должен возвращать значение того же знака, что и <paramref name="x" /> и <paramref name="y" />.</para></block>
        <block subset="none" type="usage"><para>Используйте метод <see cref="M:System.IComparable.CompareTo(System.Object)" />, чтобы определить порядок экземпляров класса.</para></block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
  </Members>
</Type>
