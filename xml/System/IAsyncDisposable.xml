<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5091a2d0242c3592559a7ebd15927112cee76d5a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70523255" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет механизм для асинхронного освобождения неуправляемых ресурсов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

В .NET классы, владеющие неуправляемыми ресурсами, обычно реализуют <xref:System.IDisposable> интерфейс для предоставления механизма для синхронного освобождения неуправляемых ресурсов. Однако в некоторых случаях необходимо предоставить асинхронный механизм для освобождения неуправляемых ресурсов в дополнение к синхронному (или наоборот). Предоставление такого механизма позволяет потребителю выполнять ресурсоемкие операции удаления, не блокируя основной поток приложения с графическим пользовательским интерфейсом в течение длительного времени.

Метод этого интерфейса возвращает объект <xref:System.Threading.Tasks.ValueTask> , представляющий асинхронную операцию удаления. <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> Классы, владеющие неуправляемыми ресурсами, реализуют этот метод, и потребитель этих классов вызывает этот метод для объекта, если он больше не нужен.

Асинхронные методы используются в сочетании с `async` ключевыми словами и `await` в C# Visual Basic. Дополнительные инсформатион см. в статье [асинхронная модель программирования задач C# в](/dotnet/csharp/programming-guide/concepts/async/index) или [Асинхронное программирование с использованием Async и await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).

### <a name="using-an-object-that-implements-iasyncdisposable"></a>Использование объекта, реализующего Иасинкдиспосабле

Если приложение использует объект, реализующий `IAsyncDisposable`, следует вызвать <xref:System.IAsyncDisposable.DisposeAsync%2A> реализацию объекта, когда вы завершите его использование. Чтобы обеспечить освобождение ресурсов даже в случае исключения, вызовите <xref:System.IAsyncDisposable.DisposeAsync%2A> метод `finally` внутри предложения `try` / `finally` инструкции. Дополнительные сведения о шаблоне `try` см / . `finally` в разделе [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) или [try... Перехватить... Оператор finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).

### <a name="implementing-iasyncdisposable"></a>Реализация Иасинкдиспосабле   
    
Вы можете реализовать `IAsyncDisposable` в следующих ситуациях:

- При разработке асинхронного перечислителя, который владеет неуправляемыми ресурсами. Асинхронные перечислители используются с C# функцией асинхронных потоков 8,0. Дополнительные сведения о асинхронных потоках см. в разделе [учебник. Создание и использование C# асинхронных потоков с помощью 8,0 и .NET Core 3,0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).

- Если класс владеет неуправляемыми ресурсами и для их освобождения требуется операция ввода-вывода с интенсивным использованием ресурсов, например сброс содержимого промежуточного буфера в файл или отправка пакета по сети для закрытия соединения.

<xref:System.IAsyncDisposable.DisposeAsync%2A> Используйте метод для выполнения любой очистки, необходимой после использования неуправляемых ресурсов, таких как освобождение, освобождение или сброс неуправляемых ресурсов. Дополнительные сведения о неуправляемых ресурсах в .NET см. в разделе [Очистка неуправляемых ресурсов](/dotnet/standard/garbage-collection/unmanaged).
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов асинхронно.</summary>
        <returns>Задача, представляющая асинхронную операцию закрытия.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Используйте этот метод для асинхронного закрытия или освобождения неуправляемых ресурсов, таких как файлы, потоки и дескрипторы, удерживаемые экземпляром класса, реализующего этот интерфейс. Использование этого метода вместо <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> позволяет выполнять ресурсоемкие операции удаления без блокирования основного потока приложения с графическим пользовательским интерфейсом в течение длительного времени.

> [!WARNING]
>  Если используется класс, реализующий <xref:System.IAsyncDisposable> интерфейс, следует вызвать его `DisposeAsync` реализацию по завершении использования класса. Дополнительные сведения см. в разделе <xref:System.IAsyncDisposable> "использование объекта, реализующего иасинкдиспосабле" статьи.

При реализации этого метода убедитесь, что все удерживаемые ресурсы освобождаются путем распространения вызова через иерархию вложений. Например, если объект A выделяет объект b, а объект б выделяет объект C, то `DisposeAsync` реализация метода должна вызываться `DisposeAsync` в B, который должен в свою очередь вызывать `DisposeAsync` на языке c. Объект также должен вызывать `DisposeAsync` метод своего базового класса, если базовый класс реализует. <xref:System.IAsyncDisposable>

Если `DisposeAsync` метод объекта вызывается более одного раза, объект должен пропускать все вызовы после первого и синхронно возвращать успешно завершенные <xref:System.Threading.Tasks.ValueTask>. Объект не должен вызывать исключение, если его `DisposeAsync` метод вызывается несколько раз. Методы экземпляра, отличные `DisposeAsync` от, могут <xref:System.ObjectDisposedException> вызывать исключение, когда ресурсы уже удалены.
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
