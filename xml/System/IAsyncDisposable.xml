<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b281543e944f0f143783d5ca393fbbc6218dc985" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68434567" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="02f85-101">Предоставляет механизм для асинхронного освобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="02f85-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="02f85-102">В .NET классы, владеющие неуправляемыми ресурсами, обычно реализуют <xref:System.IDisposable> интерфейс для предоставления механизма для синхронного освобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="02f85-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="02f85-103">Однако в некоторых случаях необходимо предоставить асинхронный механизм для освобождения неуправляемых ресурсов в дополнение к синхронному (или наоборот).</span><span class="sxs-lookup"><span data-stu-id="02f85-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="02f85-104">Предоставление такого механизма позволяет потребителю выполнять ресурсоемкие операции удаления, не блокируя основной поток приложения с графическим пользовательским интерфейсом в течение длительного времени.</span><span class="sxs-lookup"><span data-stu-id="02f85-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="02f85-105">Метод этого интерфейса возвращает объект <xref:System.Threading.Tasks.ValueTask> , представляющий асинхронную операцию удаления. <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="02f85-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="02f85-106">Классы, владеющие неуправляемыми ресурсами, реализуют этот метод, и потребитель этих классов вызывает этот метод для объекта, если он больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="02f85-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="02f85-107">Асинхронные методы используются в сочетании с `async` ключевыми словами и `await` в C# Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02f85-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="02f85-108">Дополнительные инсформатион см. в статье [асинхронная модель программирования задач C# в](/dotnet/csharp/programming-guide/concepts/async/index) или [Асинхронное программирование с использованием Async и await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span><span class="sxs-lookup"><span data-stu-id="02f85-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="02f85-109">Использование объекта, реализующего Иасинкдиспосабле</span><span class="sxs-lookup"><span data-stu-id="02f85-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="02f85-110">Если приложение использует объект, реализующий `IAsyncDisposable`, следует вызвать <xref:System.IAsyncDisposable.DisposeAsync%2A> реализацию объекта, когда вы завершите его использование.</span><span class="sxs-lookup"><span data-stu-id="02f85-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="02f85-111">Чтобы обеспечить освобождение ресурсов даже в случае исключения, вызовите <xref:System.IAsyncDisposable.DisposeAsync%2A> метод `finally` внутри предложения `try` / `finally` инструкции.</span><span class="sxs-lookup"><span data-stu-id="02f85-111">To make sure resources are released even in case of an exception, call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="02f85-112">Дополнительные сведения о шаблоне `try` см / . `finally` в разделе [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) или [try... Перехватить... Оператор finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="02f85-112">For more information about the `try`/`finally` pattern, see [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) or [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="02f85-113">Реализация Иасинкдиспосабле</span><span class="sxs-lookup"><span data-stu-id="02f85-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="02f85-114">Вы можете реализовать `IAsyncDisposable` в следующих ситуациях:</span><span class="sxs-lookup"><span data-stu-id="02f85-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="02f85-115">При разработке асинхронного перечислителя, который владеет неуправляемыми ресурсами.</span><span class="sxs-lookup"><span data-stu-id="02f85-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="02f85-116">Асинхронные перечислители используются с C# функцией асинхронных потоков 8,0.</span><span class="sxs-lookup"><span data-stu-id="02f85-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="02f85-117">Дополнительные сведения о асинхронных потоках см [. в разделе Учебник. Создание и использование асинхронных потоков C# с использованием 8,0 и .net](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)Core 3,0.</span><span class="sxs-lookup"><span data-stu-id="02f85-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="02f85-118">Если класс владеет неуправляемыми ресурсами и для их освобождения требуется операция ввода-вывода с интенсивным использованием ресурсов, например сброс содержимого промежуточного буфера в файл или отправка пакета по сети для закрытия соединения.</span><span class="sxs-lookup"><span data-stu-id="02f85-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="02f85-119"><xref:System.IAsyncDisposable.DisposeAsync%2A> Используйте метод для выполнения любой очистки, необходимой после использования неуправляемых ресурсов, таких как освобождение, освобождение или сброс неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="02f85-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="02f85-120">Дополнительные сведения о неуправляемых ресурсах в .NET см. в разделе [Очистка неуправляемых ресурсов](/dotnet/standard/garbage-collection/unmanaged).</span><span class="sxs-lookup"><span data-stu-id="02f85-120">For more information about unmanaged resources in .NET, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="02f85-121">Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов асинхронно.</span><span class="sxs-lookup"><span data-stu-id="02f85-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="02f85-122">Задача, представляющая асинхронную операцию закрытия.</span><span class="sxs-lookup"><span data-stu-id="02f85-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="02f85-123">Используйте этот метод для асинхронного закрытия или освобождения неуправляемых ресурсов, таких как файлы, потоки и дескрипторы, удерживаемые экземпляром класса, реализующего этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="02f85-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="02f85-124">Использование этого метода вместо <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> позволяет выполнять ресурсоемкие операции удаления без блокирования основного потока приложения с графическим пользовательским интерфейсом в течение длительного времени.</span><span class="sxs-lookup"><span data-stu-id="02f85-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="02f85-125">Если используется класс, реализующий <xref:System.IAsyncDisposable> интерфейс, следует вызвать его `DisposeAsync` реализацию по завершении использования класса.</span><span class="sxs-lookup"><span data-stu-id="02f85-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="02f85-126">Дополнительные сведения см. в разделе <xref:System.IAsyncDisposable> "использование объекта, реализующего иасинкдиспосабле" статьи.</span><span class="sxs-lookup"><span data-stu-id="02f85-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="02f85-127">При реализации этого метода убедитесь, что все удерживаемые ресурсы освобождаются путем распространения вызова через иерархию вложений.</span><span class="sxs-lookup"><span data-stu-id="02f85-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="02f85-128">Например, если объект A выделяет объект b, а объект б выделяет объект C, то `DisposeAsync` реализация метода должна вызываться `DisposeAsync` в B, который должен в свою очередь вызывать `DisposeAsync` на языке c. Объект также должен вызывать `DisposeAsync` метод своего базового класса, если базовый класс реализует. <xref:System.IAsyncDisposable></span><span class="sxs-lookup"><span data-stu-id="02f85-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="02f85-129">Если `DisposeAsync` метод объекта вызывается более одного раза, объект должен пропускать все вызовы после первого и синхронно возвращать успешно завершенные <xref:System.Threading.Tasks.ValueTask>.</span><span class="sxs-lookup"><span data-stu-id="02f85-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="02f85-130">Объект не должен вызывать исключение, если его `DisposeAsync` метод вызывается несколько раз.</span><span class="sxs-lookup"><span data-stu-id="02f85-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="02f85-131">Методы экземпляра, отличные `DisposeAsync` от, могут <xref:System.ObjectDisposedException> вызывать исключение, когда ресурсы уже удалены.</span><span class="sxs-lookup"><span data-stu-id="02f85-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>