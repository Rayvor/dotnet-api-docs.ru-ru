<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="82cd5c9467041839fb2a2b2ffffd03ea382f82f6" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/14/2019" /><Meta Name="ms.locfileid" Value="67134673" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3e933-101">Предоставляет механизм для асинхронного освобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="3e933-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="3e933-102">В .NET, которыми обычно владеют неуправляемые ресурсы классах <xref:System.IDisposable> интерфейс, чтобы предоставить механизм для освобождения неуправляемых ресурсов, синхронно.</span><span class="sxs-lookup"><span data-stu-id="3e933-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="3e933-103">Однако в некоторых случаях они должны предоставить асинхронный механизм для освобождения неуправляемых ресурсов, в дополнение к (или instead of) синхронной один.</span><span class="sxs-lookup"><span data-stu-id="3e933-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="3e933-104">Предоставление такой механизм позволяет потребителю dispose ресурсоемкие операции без блокирования основного потока приложения с графическим Интерфейсом в течение длительного времени.</span><span class="sxs-lookup"><span data-stu-id="3e933-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="3e933-105"><xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> Метод этого интерфейса возвращает <xref:System.Threading.Tasks.ValueTask> , представляющий операцию асинхронной dispose.</span><span class="sxs-lookup"><span data-stu-id="3e933-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="3e933-106">Классы, собственные неуправляемые ресурсы, реализуют этот метод, а потребитель этих классов вызывает этот метод для объекта, когда он больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="3e933-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="3e933-107">Асинхронные методы используются в сочетании с `async` и `await` ключевые слова в C# и Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="3e933-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="3e933-108">Дополнительные сведения см. в разделе [Task модели асинхронного программирования в C# ](/dotnet/csharp/programming-guide/concepts/async/index) или [асинхронное программирование с использованием Async и Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span><span class="sxs-lookup"><span data-stu-id="3e933-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="3e933-109">С помощью объекта, реализующего IAsyncDisposable</span><span class="sxs-lookup"><span data-stu-id="3e933-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="3e933-110">Если приложение использует объект, реализующий `IAsyncDisposable`, следует вызвать для объекта <xref:System.IAsyncDisposable.DisposeAsync%2A> реализации, когда вы закончите, с его помощью.</span><span class="sxs-lookup"><span data-stu-id="3e933-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="3e933-111">Чтобы убедиться, что ресурсы освобождены даже в случае исключения, вызовите <xref:System.IAsyncDisposable.DisposeAsync%2A> метод внутри `finally` предложении `try` / `finally` инструкции.</span><span class="sxs-lookup"><span data-stu-id="3e933-111">To make sure resources are released even in case of an exception, call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="3e933-112">Дополнительные сведения о `try` / `finally` шаблонов, см. в разделе [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) или [попробуйте... CATCH... Оператор Finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="3e933-112">For more information about the `try`/`finally` pattern, see [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) or [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="3e933-113">Реализация IAsyncDisposable</span><span class="sxs-lookup"><span data-stu-id="3e933-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="3e933-114">Можно реализовать `IAsyncDisposable` в следующих ситуациях:</span><span class="sxs-lookup"><span data-stu-id="3e933-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="3e933-115">При разработке асинхронного перечислителя, который является владельцем неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="3e933-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="3e933-116">Асинхронные перечислители используются с C# 8.0 возможности async потоков.</span><span class="sxs-lookup"><span data-stu-id="3e933-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="3e933-117">Дополнительные сведения о потоках async см. в разделе [руководства: Создание и использование асинхронных потоков с использованием C# 8.0 и .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span><span class="sxs-lookup"><span data-stu-id="3e933-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="3e933-118">Когда ваш класс является владельцем неуправляемых ресурсов и последующего их отпускания требует — ресурсоемкая операция ввода-вывода, таких как очистка содержимого промежуточный буфер в файл или отправки пакета по сети, чтобы закрыть соединение.</span><span class="sxs-lookup"><span data-stu-id="3e933-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="3e933-119">Используйте <xref:System.IAsyncDisposable.DisposeAsync%2A> метод для выполнения любой очистки необходим после использования неуправляемых ресурсов, например удалением, высвобождением или сбросом неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="3e933-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="3e933-120">Дополнительные сведения о неуправляемых ресурсов в .NET, см. в разделе [очистки неуправляемых ресурсов](/dotnet/standard/garbage-collection/unmanaged).</span><span class="sxs-lookup"><span data-stu-id="3e933-120">For more information about unmanaged resources in .NET, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>
 
 ]]></format>
</remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e933-121">Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов асинхронно.</span><span class="sxs-lookup"><span data-stu-id="3e933-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="3e933-122">Задача, представляющая асинхронную операцию закрытия.</span><span class="sxs-lookup"><span data-stu-id="3e933-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="3e933-123">Этот метод позволяет асинхронно закрытия или высвобождения неуправляемых ресурсов, например файлы, потоки и обработчики, занятые экземплярами класса, который реализует этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="3e933-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="3e933-124">С помощью этого метода, а не <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> позволяет выполнять операции dispose ресурсоемких без блокирования основного потока приложения с графическим Интерфейсом в течение длительного времени.</span><span class="sxs-lookup"><span data-stu-id="3e933-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="3e933-125">Если вы используете класс, реализующий <xref:System.IAsyncDisposable> интерфейса, необходимо вызвать его `DisposeAsync` реализации, когда вы закончите, с помощью класса.</span><span class="sxs-lookup"><span data-stu-id="3e933-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="3e933-126">Дополнительные сведения см. в разделе «Использование объект, реализующий IAsyncDisposable» <xref:System.IAsyncDisposable> раздела.</span><span class="sxs-lookup"><span data-stu-id="3e933-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="3e933-127">При реализации этого метода убедитесь, что все занятые ресурсы освобождаются путем передачи вызова по иерархии вложений.</span><span class="sxs-lookup"><span data-stu-id="3e933-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="3e933-128">Например, если объект А размещает объект B, а объект B размещает объекта C, А затем `DisposeAsync` реализация должна вызывать `DisposeAsync` на B, который в свою очередь вызывают `DisposeAsync` в C. Необходимо также вызвать объект `DisposeAsync` метод его базового класса, если базовый класс реализует <xref:System.IAsyncDisposable>.</span><span class="sxs-lookup"><span data-stu-id="3e933-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="3e933-129">Если объекта `DisposeAsync` был вызван несколько раз, то объект должен игнорировать все вызовы после первого и синхронно вернуть успешно завершенных <xref:System.Threading.Tasks.ValueTask>.</span><span class="sxs-lookup"><span data-stu-id="3e933-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="3e933-130">Объект не должен создания исключения, если его `DisposeAsync` был вызван несколько раз.</span><span class="sxs-lookup"><span data-stu-id="3e933-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="3e933-131">Методы экземпляра отличное от `DisposeAsync` может вызвать исключение <xref:System.ObjectDisposedException> при ресурсы уже удален.</span><span class="sxs-lookup"><span data-stu-id="3e933-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
