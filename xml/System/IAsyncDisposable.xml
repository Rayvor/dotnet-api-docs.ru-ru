<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bbd87cb9c175eb0c4d5aa893ad32101018b03b5b" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67245144" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет механизм для асинхронного освобождения неуправляемых ресурсов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

В .NET, которыми обычно владеют неуправляемые ресурсы классах <xref:System.IDisposable> интерфейс, чтобы предоставить механизм для освобождения неуправляемых ресурсов, синхронно. Однако в некоторых случаях они должны предоставить асинхронный механизм для освобождения неуправляемых ресурсов, в дополнение к (или instead of) синхронной один. Предоставление такой механизм позволяет потребителю dispose ресурсоемкие операции без блокирования основного потока приложения с графическим Интерфейсом в течение длительного времени.

<xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> Метод этого интерфейса возвращает <xref:System.Threading.Tasks.ValueTask> , представляющий операцию асинхронной dispose. Классы, собственные неуправляемые ресурсы, реализуют этот метод, а потребитель этих классов вызывает этот метод для объекта, когда он больше не нужен.

Асинхронные методы используются в сочетании с `async` и `await` ключевые слова в C# и Visual Basic. Дополнительные сведения см. в разделе [Task модели асинхронного программирования в C# ](/dotnet/csharp/programming-guide/concepts/async/index) или [асинхронное программирование с использованием Async и Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).

### <a name="using-an-object-that-implements-iasyncdisposable"></a>С помощью объекта, реализующего IAsyncDisposable

Если приложение использует объект, реализующий `IAsyncDisposable`, следует вызвать для объекта <xref:System.IAsyncDisposable.DisposeAsync%2A> реализации, когда вы закончите, с его помощью. Чтобы убедиться, что ресурсы освобождены даже в случае исключения, вызовите <xref:System.IAsyncDisposable.DisposeAsync%2A> метод внутри `finally` предложении `try` / `finally` инструкции. Дополнительные сведения о `try` / `finally` шаблонов, см. в разделе [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) или [попробуйте... CATCH... Оператор Finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).

### <a name="implementing-iasyncdisposable"></a>Реализация IAsyncDisposable   
    
Можно реализовать `IAsyncDisposable` в следующих ситуациях:

- При разработке асинхронного перечислителя, который является владельцем неуправляемых ресурсов. Асинхронные перечислители используются с C# 8.0 возможности async потоков. Дополнительные сведения о потоках async см. в разделе [руководства: Создание и использование асинхронных потоков с использованием C# 8.0 и .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).

- Когда ваш класс является владельцем неуправляемых ресурсов и последующего их отпускания требует — ресурсоемкая операция ввода-вывода, таких как очистка содержимого промежуточный буфер в файл или отправки пакета по сети, чтобы закрыть соединение.

Используйте <xref:System.IAsyncDisposable.DisposeAsync%2A> метод для выполнения любой очистки необходим после использования неуправляемых ресурсов, например удалением, высвобождением или сбросом неуправляемых ресурсов. Дополнительные сведения о неуправляемых ресурсов в .NET, см. в разделе [очистки неуправляемых ресурсов](/dotnet/standard/garbage-collection/unmanaged).
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов асинхронно.</summary>
        <returns>Задача, представляющая асинхронную операцию закрытия.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Этот метод позволяет асинхронно закрытия или высвобождения неуправляемых ресурсов, например файлы, потоки и обработчики, занятые экземплярами класса, который реализует этот интерфейс. С помощью этого метода, а не <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> позволяет выполнять операции dispose ресурсоемких без блокирования основного потока приложения с графическим Интерфейсом в течение длительного времени.

> [!WARNING]
>  Если вы используете класс, реализующий <xref:System.IAsyncDisposable> интерфейса, необходимо вызвать его `DisposeAsync` реализации, когда вы закончите, с помощью класса. Дополнительные сведения см. в разделе «Использование объект, реализующий IAsyncDisposable» <xref:System.IAsyncDisposable> раздела.

При реализации этого метода убедитесь, что все занятые ресурсы освобождаются путем передачи вызова по иерархии вложений. Например, если объект А размещает объект B, а объект B размещает объекта C, А затем `DisposeAsync` реализация должна вызывать `DisposeAsync` на B, который в свою очередь вызывают `DisposeAsync` в C. Необходимо также вызвать объект `DisposeAsync` метод его базового класса, если базовый класс реализует <xref:System.IAsyncDisposable>.

Если объекта `DisposeAsync` был вызван несколько раз, то объект должен игнорировать все вызовы после первого и синхронно вернуть успешно завершенных <xref:System.Threading.Tasks.ValueTask>. Объект не должен создания исключения, если его `DisposeAsync` был вызван несколько раз. Методы экземпляра отличное от `DisposeAsync` может вызвать исключение <xref:System.ObjectDisposedException> при ресурсы уже удален.
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>