<Type Name="Func&lt;T1,T2,T3,T4,T5,T6,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,T6,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="260199924ce48f97d83c28a0a02edd37900b0e0a" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172964" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,in T6,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`7&lt;- T1, - T2, - T3, - T4, - T5, - T6, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`7" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, In T6, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T2">Тип второго параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg4">Четвертый параметр метода, инкапсулируемого этим делегатом.</param>
    <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод, который принимает шесть параметров и возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</summary>
    <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат можно использовать для представления метода, который можно передать в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь шесть параметров, каждый из которых передается в него по значению и должен возвращать значение.  
  
> [!NOTE]
>  Для ссылки на метод, который имеет шесть параметров и возвращает `void` (или в Visual Basic, который объявляется как `Sub`, а не как `Function`), вместо него следует использовать универсальный делегат <xref:System.Action%606>.  
  
 Можно также использовать делегат <xref:System.Func%607> с анонимными методами и лямбда-выражениями.  
  
 Базовый тип лямбда-выражения является одним из универсальных делегатов `Func`. Это дает возможность передавать лямбда-выражение в качестве параметра без явного присвоения его делегату.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`6" />
  </Docs>
</Type>
