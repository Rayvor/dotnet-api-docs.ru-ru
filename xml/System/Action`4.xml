<Type Name="Action&lt;T1,T2,T3,T4&gt;" FullName="System.Action&lt;T1,T2,T3,T4&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c0ef7e8ae42367776538f1d1b3f73f5366f29f1" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75173666" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`4&lt;- T1, - T2, - T3, - T4&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg4" Type="T4" Index="3" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg4">Четвертый параметр метода, инкапсулируемого этим делегатом.</param>
    <summary>Инкапсулирует метод, который имеет четыре параметра и не возвращает значений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать делегат <xref:System.Action%604>, чтобы передать метод в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь четыре параметра, которые передаются ему по значению и не должны возвращать значение. (В C#метод должен возвращать `void`. В Visual Basic он должен быть определен `Sub`...`End Sub` создания. Это также может быть метод, возвращающий значение, которое игнорируется.) Как правило, такой метод используется для выполнения операции.  
  
> [!NOTE]
>  Для ссылки на метод, который имеет четыре параметра и возвращает значение, используйте вместо него универсальный делегат <xref:System.Func%605>.  
  
 При использовании делегата <xref:System.Action%604> нет необходимости явно определять делегат, инкапсулирующий метод с четырьмя параметрами. Например, следующий код явно объявляет делегат с именем `StringCopy` и присваивает ссылку на метод `CopyStrings` его экземпляру делегата.  
  
 [!code-csharp[System.Action~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Delegate.cs#1)]
 [!code-vb[System.Action~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Delegate.vb#1)]  
  
 В следующем примере этот код упрощается путем создания экземпляра делегата <xref:System.Action%604> вместо явного определения нового делегата и назначения ему именованного метода.  
  
 [!code-csharp[System.Action~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Action4.cs#2)]
 [!code-vb[System.Action~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/Action4.vb#2)]  
  
 Также можно использовать делегат <xref:System.Action%604> с анонимными методами в C#, как показано в следующем примере. (Общие сведения о анонимных методах см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Anon.cs#3)]  
  
 Можно также присвоить лямбда-выражение экземпляру делегата <xref:System.Action%604>, как показано в следующем примере. (Общие сведения о лямбда-выражениях см. в разделе [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~4/cs/Lambda.cs#4)]
 [!code-vb[System.Action~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~4/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`5" />
  </Docs>
</Type>
