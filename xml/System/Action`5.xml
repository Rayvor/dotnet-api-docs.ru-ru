<Type Name="Action&lt;T1,T2,T3,T4,T5&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3620e8b3f82801c6684fcd0c2147668473ad134d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69439343" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`5&lt;- T1, - T2, - T3, - T4, - T5&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод, который принимает пять параметров и не возвращает значений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Action%605> Делегат можно использовать для передачи метода в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь пять параметров, которые передаются ему по значению и не должны возвращать значение. (В C#метод должен возвращать `void`. В Visual Basic он должен быть определен `Sub`с помощью...`End Sub` создания. Это также может быть метод, возвращающий значение, которое игнорируется.) Как правило, такой метод используется для выполнения операции.  
  
> [!NOTE]
>  Для ссылки на метод, который имеет пять параметров и возвращает значение, вместо него следует <xref:System.Func%606> использовать универсальный делегат.  
  
 <xref:System.Action%605> Делегат также можно использовать с анонимными методами и лямбда-выражениями.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`6" />
  </Docs>
</Type>
