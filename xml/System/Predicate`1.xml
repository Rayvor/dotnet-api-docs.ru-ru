<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2807c60dd598b1659c5585f8fb52e07d73619806" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75039974" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Тип сравниваемого объекта.</typeparam>
    <param name="obj">Объект, проверяемый на соответствие критериям, заданным в методе, который представлен его делегатом.</param>
    <summary>Представляет метод, определяющий набор критериев и соответствие указанного объекта этим критериям.</summary>
    <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> удовлетворяет критериям, заданным в методе, который представляет этот делегат; в противном случае — значение <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат используется несколькими методами классов <xref:System.Array> и <xref:System.Collections.Generic.List%601> для поиска элементов в коллекции.  
  
 Как правило, делегат <xref:System.Predicate%601> представлен лямбда-выражением. Так как переменные в локальной области доступны для лямбда-выражения, легко проверить условие, которое не было точно известно во время компиляции. Это имитируется в следующем примере, который определяет класс `HockeyTeam`, содержащий сведения о команде национального хоккейная клюшка отличаются и год, в котором она была основания. В примере определяется массив целочисленных значений, представляющих годы, и случайным образом назначается один элемент массива для `foundedBeforeYear`, который представляет собой переменную, которая находится в локальной области для метода `Main` в примере. Так как переменные в локальной области доступны для лямбда-выражения, лямбда-выражение, передаваемое методу <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType>, может возвращать объект `HockeyTeam` для каждой группы, основанной на этом году.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 В следующем примере кода используется делегат <xref:System.Predicate%601> с методом <xref:System.Array.Find%2A?displayProperty=nameWithType> для поиска в массиве структур <xref:System.Drawing.Point>. В примере явно определяется <xref:System.Predicate%601> делегат с именем `predicate` и назначается метод с именем `FindPoints`, который возвращает значение `true`, если значение полей <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> и <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> превышает 100 000. Обратите внимание, что можно использовать лямбда-выражение вместо явного определения делегата типа <xref:System.Predicate%601>, как показано во втором примере.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 Следующий пример идентичен предыдущему, за исключением того, что он использует лямбда-выражение для представления делегата <xref:System.Predicate%601>.  Каждый элемент массива `points` передается лямбда-выражению до тех пор, пока выражение не обнаружит элемент, соответствующий условиям поиска. В этом случае лямбда-выражение возвращает `true`, если произведение полей X и Y превышает 100 000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
