<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb5fc5b302f7803870d563f96c660b043c9450c0" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70571605" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="bb26b-101">Тип сравниваемого объекта.</span><span class="sxs-lookup"><span data-stu-id="bb26b-101">The type of the object to compare.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="bb26b-102">Объект, проверяемый на соответствие критериям, заданным в методе, который представлен его делегатом.</span><span class="sxs-lookup"><span data-stu-id="bb26b-102">The object to compare against the criteria defined within the method represented by this delegate.</span></span></param>
    <summary><span data-ttu-id="bb26b-103">Представляет метод, в котором задан набор критериев и который позволяет определить, удовлетворяет ли этим критериям заданный объект.</span><span class="sxs-lookup"><span data-stu-id="bb26b-103">Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</span></span></summary>
    <returns><span data-ttu-id="bb26b-104">Значение <see langword="true" />, если объект <paramref name="obj" /> удовлетворяет критериям, заданным в методе, который представляет этот делегат; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bb26b-104"><see langword="true" /> if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, <see langword="false" />.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb26b-105">Этот делегат используется несколькими методами <xref:System.Array> классов и <xref:System.Collections.Generic.List%601> для поиска элементов в коллекции.</span><span class="sxs-lookup"><span data-stu-id="bb26b-105">This delegate is used by several methods of the <xref:System.Array> and <xref:System.Collections.Generic.List%601> classes to search for elements in the collection.</span></span>  
  
 <span data-ttu-id="bb26b-106">Как правило, <xref:System.Predicate%601> делегат представлен лямбда-выражением.</span><span class="sxs-lookup"><span data-stu-id="bb26b-106">Typically, the <xref:System.Predicate%601> delegate is represented by a lambda expression.</span></span> <span data-ttu-id="bb26b-107">Так как переменные в локальной области доступны для лямбда-выражения, легко проверить условие, которое не было точно известно во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="bb26b-107">Because locally scoped variables are available to the lambda expression, it is easy to test for a condition that is not precisely known at compile time.</span></span> <span data-ttu-id="bb26b-108">Это имитируется в следующем примере, который определяет `HockeyTeam` класс, содержащий сведения о команде национального хоккейная клюшка отличаются и год, в котором она была основания.</span><span class="sxs-lookup"><span data-stu-id="bb26b-108">This is simulated in the following example, which defines a `HockeyTeam` class that contains information about a National Hockey League team and the year in which it was founded.</span></span> <span data-ttu-id="bb26b-109">В примере определяется массив целочисленных значений, представляющих годы, и случайным образом назначается один элемент массива `foundedBeforeYear`, который представляет собой переменную, которая находится в локальной области для `Main` метода примера.</span><span class="sxs-lookup"><span data-stu-id="bb26b-109">The example defines an array of integer values that represent years, and randomly assigns one element of the array to `foundedBeforeYear`, which is a variable that is locally scoped to the example's `Main` method.</span></span> <span data-ttu-id="bb26b-110">Так как переменные в локальной области доступны для лямбда-выражения, лямбда-выражение, передаваемое <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> в метод, может `HockeyTeam` возвращать объект для каждой группы, созданной в течение года или до него.</span><span class="sxs-lookup"><span data-stu-id="bb26b-110">Because locally scoped variables are available to a lambda expression, the lambda expression passed to the <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> method is able to return a `HockeyTeam` object for each team founded on or before that year.</span></span>  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="bb26b-111">В следующем примере кода <xref:System.Predicate%601> делегат <xref:System.Array.Find%2A?displayProperty=nameWithType> с методом используется <xref:System.Drawing.Point> для поиска массива структур.</span><span class="sxs-lookup"><span data-stu-id="bb26b-111">The following code example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A?displayProperty=nameWithType> method to search an array of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="bb26b-112">В примере <xref:System.Predicate%601> явно определяется делегат с именем `predicate` и назначается метод с именем `FindPoints` , который возвращает `true` , если произведение <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> полей и <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> превышает 100 000.</span><span class="sxs-lookup"><span data-stu-id="bb26b-112">The example explicitly defines a <xref:System.Predicate%601> delegate named `predicate` and assigns it a method named `FindPoints` that returns `true` if the product of the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> and <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> fields is greater than 100,000.</span></span> <span data-ttu-id="bb26b-113">Обратите внимание, что можно использовать лямбда-выражение вместо явного определения делегата типа <xref:System.Predicate%601>, как показано во втором примере.</span><span class="sxs-lookup"><span data-stu-id="bb26b-113">Note that it is customary to use a lambda expression rather than to explicitly define a delegate of type <xref:System.Predicate%601>, as the second example illustrates.</span></span>  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 <span data-ttu-id="bb26b-114">Следующий пример идентичен предыдущему, за исключением того, что он использует лямбда-выражение для представления <xref:System.Predicate%601> делегата.</span><span class="sxs-lookup"><span data-stu-id="bb26b-114">The following example is identical to the previous example, except that it uses a lambda expression to represent the <xref:System.Predicate%601> delegate.</span></span>  <span data-ttu-id="bb26b-115">Каждый элемент `points` массива передается в лямбда-выражение до тех пор, пока выражение не обнаружит элемент, соответствующий условиям поиска.</span><span class="sxs-lookup"><span data-stu-id="bb26b-115">Each element of the `points` array is passed to the lambda expression until the expression finds an element that meets the search criteria.</span></span> <span data-ttu-id="bb26b-116">В этом случае лямбда-выражение возвращает `true` , если произведение полей X и Y превышает 100 000.</span><span class="sxs-lookup"><span data-stu-id="bb26b-116">In this case, the lambda expression returns `true` if the product of the X and Y fields is greater than 100,000.</span></span>  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
