<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b4c2b2ff4644657d360d5e38c46223a2e1a4e3aa" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75039155" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет любой часовой пояс в мире.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Часовой пояс — это географическая область, в которой действует одно и то же время.  
  
 Класс <xref:System.TimeZoneInfo> предлагает значительные улучшения по сравнению с классом <xref:System.TimeZone>, который обеспечивает только ограниченную функциональность.  
  
 Класс <xref:System.TimeZone> распознает только местный часовой пояс и может преобразовывать время между временем в формате UTC и местным временем. Объект <xref:System.TimeZoneInfo> может представлять любой часовой пояс, а методы класса <xref:System.TimeZoneInfo> можно использовать для преобразования времени в одном часовом поясе в соответствующее время в любом другом часовом поясе. Члены класса <xref:System.TimeZoneInfo> поддерживают следующие операции:  
  
-   Получение часового пояса, который уже определен операционной системой.  
  
-   Перечисление часовых поясов, доступных в системе.  
  
-   Преобразование времени между различными часовыми поясами.  
  
-   Создание нового часового пояса, который еще не определен операционной системой.  
  
-   Сериализация часового пояса для последующего извлечения.  
  
> [!NOTE]
>  Экземпляр класса <xref:System.TimeZoneInfo> является неизменяемым. После создания экземпляра объекта его значения нельзя изменить.  
  
 Нельзя создать экземпляр объекта <xref:System.TimeZoneInfo> с помощью ключевого слова `new`. Вместо этого необходимо вызвать один из статических членов класса <xref:System.TimeZoneInfo>, как показано в следующей таблице.  
  
|Имя статического члена|Описание|  
|------------------------|-----------------|  
|Метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Создает пользовательский часовой пояс на основе данных, предоставляемых приложением.|  
|Метод <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Создает часовой пояс на основе его идентификатора.|  
|Метод <xref:System.TimeZoneInfo.FromSerializedString%2A>|Десериализует строковое значение для повторного создания ранее сериализованного <xref:System.TimeZoneInfo> объекта.|  
|Метод <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Возвращает перечисляемое <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.TimeZoneInfo> объектов, представляющих все часовые пояса, доступные в локальной системе.|  
|Свойство <xref:System.TimeZoneInfo.Local%2A>|Создает объект <xref:System.TimeZoneInfo>, представляющий местный часовой пояс.|  
|Свойство <xref:System.TimeZoneInfo.Utc%2A>|Создает объект <xref:System.TimeZoneInfo>, представляющий часовой пояс в формате UTC.|  
  
 Можно использовать метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> для создания часового пояса, не определенного в локальном системном реестре в системах Windows или в классах часовых поясов в [библиотеке ICU](http://userguide.icu-project.org/datetime/timezone) в Linux или macOS. Затем можно использовать свойство <xref:System.TimeZoneInfo.ToSerializedString%2A>, чтобы сохранить сведения об объекте часового пояса в виде строки, которая может храниться в некоторой форме, доступной для приложения. Можно использовать метод <xref:System.TimeZoneInfo.FromSerializedString%2A> для преобразования сериализованной строки обратно в объект <xref:System.TimeZoneInfo>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает разницу между зимним временем в текущем часовом поясе и временем в формате UTC.</summary>
        <value>Объект, указывающий разницу между зимним временем в текущем часовом поясе и временем в формате UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интервал времени, возвращаемый свойством <xref:System.TimeZoneInfo.BaseUtcOffset%2A>, может находиться в диапазоне от 14 часов (для часового пояса с 14 часов до времени в формате UTC) до-14 часов (для часового пояса, который составляет 14 часов в формате UTC). Часовые пояса, предшествующие UTC, имеют положительный сдвиг; Часовые пояса, которые находятся за временем UTC, имеют отрицательное смещение.  
  
 Значение <xref:System.TimeZoneInfo.BaseUtcOffset%2A> представляется в виде целого числа минут. Оно не может включать дробное число минут.  
  
> [!NOTE]
>  Поскольку <xref:System.TimeZoneInfo.BaseUtcOffset%2A> является свойством объекта <xref:System.TimeZoneInfo>, а не объектом <xref:System.TimeZoneInfo.AdjustmentRule>, класс <xref:System.TimeZoneInfo> применяет одно смещение от времени UTC ко всем корректировкам часового пояса. Чтобы отразить часовой пояс, в котором изменилось смещение относительно времени в формате UTC, необходимо создать новый часовой пояс с помощью метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>.  
  
 Свойство <xref:System.TimeZoneInfo.BaseUtcOffset%2A> отличается от метода <xref:System.TimeZoneInfo.GetUtcOffset%2A> следующими способами.  
  
-   Свойство <xref:System.TimeZoneInfo.BaseUtcOffset%2A> возвращает разницу между временем в формате UTC и стандартным временем часового пояса; метод <xref:System.TimeZoneInfo.GetUtcOffset%2A> возвращает разницу между UTC и временем часового пояса в определенный момент времени.  
  
-   Метод <xref:System.TimeZoneInfo.GetUtcOffset%2A> отражает применение любых правил коррекции к часовому поясу; Свойство <xref:System.TimeZoneInfo.BaseUtcOffset%2A> не имеет значение.  
  
   
  
## Examples  
 В следующем примере свойство <xref:System.TimeZoneInfo.BaseUtcOffset%2A> используется для вывода разницы между местным временем и временем в формате UTC.  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет кэшированные данные о часовом поясе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кэшированные данные часового пояса включают данные по местному часовому поясу и часовой пояс в формате UTC.  
  
 Можно вызвать метод `ClearCachedData`, чтобы уменьшить объем памяти, выделяемой для кэша приложения по сведениям о часовом поясе, или отразить факт изменения часового пояса локальной системы.  
  
 Не рекомендуется хранить ссылки на локальные и часовые пояса в формате UTC. После вызова метода `ClearCachedData` эти объектные переменные будут неопределенными <xref:System.TimeZoneInfo> объекты, которые больше не являются ссылками на <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Например, в следующем коде второй вызов метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> создает исключение <xref:System.ArgumentException>, так как переменная `local` больше не считается <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует время во время в заданном часовом поясе.</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время во время в заданном часовом поясе.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> применяет все правила коррекции, действующие в `destinationTimeZone` часовом поясе.  
  
 Эта перегрузка метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> определяет исходный часовой пояс из значения свойства <xref:System.DateTime.Kind%2A> `dateTime` параметра, как показано в следующей таблице.  
  
|Значение свойства Kind|Исходный часовой пояс|Поведение метода|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Преобразует местное время во время в `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Преобразует время в формате UTC в `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Предполагается <xref:System.TimeZoneInfo.Local%2A>.|Преобразует местное время во время в `destinationTimeZone`.|  
  
 Свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> задается, как показано в следующей таблице.  
  
|Условие|Возвращаемое значение свойства Kind|  
|---------------|----------------------------------|  
|Свойство `destinationTimeZone` имеет значение <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Свойство `destinationTimeZone` имеет значение <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Все остальные значения даты и времени и часовые пояса назначения.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Если значение параметра `dateTime` является неоднозначным местным временем, оно интерпретируется как стандартное время. Если параметр `dateTime` является недопустимым местным временем, этот метод создает исключение <xref:System.ArgumentException>.  
  
 Если преобразование `dateTime` приводит к значению даты и времени, которое предшествует <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздним, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>соответственно.  
  
 Можно также преобразовать в UTC или из него, вызвав методы <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> и <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>.  
  
   
  
## Examples  
 В следующем примере массив значений даты и времени преобразуется в значения времени в Восточном часовом поясе США и Канады. Он показывает, что исходный часовой пояс зависит от свойства <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> исходного <xref:System.DateTime> значения. Также показано, что метод <xref:System.TimeZoneInfo.ConvertTime%2A> принимает корректировки часового пояса, так как корректировка часового пояса происходит как в исходном, так и в часовом поясе назначения в 2:00 утра. 7 ноября 2010 г.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="dateTime" /> представляет недопустимое время.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationTimeZone" /> — <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время во время в заданном часовом поясе.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> применяет все правила коррекции, действующие в `destinationTimeZone` часовом поясе.  
  
 Эта перегрузка отличается от других перегрузок метода <xref:System.TimeZoneInfo.ConvertTime%2A>, принимая <xref:System.DateTimeOffset> значение в качестве первого параметра. Это определяет дату и время в виде смещения относительно времени в формате UTC, а не даты и времени в определенном часовом поясе. В результате параметр `dateTimeOffset` не может представлять либо неоднозначное, либо недопустимое время.  
  
 При преобразовании значения `dateTimeOffset` во время в часовом поясе назначения этот метод учитывает все правила коррекции, действующие в целевом часовом поясе.  
  
 Если преобразование `dateTimeOffset` приводит к значению даты и времени, которое предшествует <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или более поздним, чем <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>соответственно.  
  
   
  
## Examples  
 В следующем примере <xref:System.DateTimeOffset> массив значений преобразуется в значения времени в Восточном часовом поясе США и Канады. Показано, что метод <xref:System.TimeZoneInfo.ConvertTime%2A> принимает корректировки часового пояса, так как корректировка часового пояса происходит как в исходном, так и в часовом поясе назначения в 2:00 утра. 7 ноября 2010 г.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationTimeZone" /> — <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="sourceTimeZone">Часовой пояс, соответствующий значению <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время в одном часовом поясе во время в другом.</summary>
        <returns>Дата и время в часовом поясе назначения, которые соответствуют значению параметра <paramref name="dateTime" /> в исходном часовом поясе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTime%2A> применяет все правила коррекции, действующие в `destinationTimeZone` часовом поясе.  
  
 Значение свойства <xref:System.DateTime.Kind%2A> параметра `dateTime` должно соответствовать параметру `sourceTimeZone`, как показано в следующей таблице.  
  
|Значение DateTime. Kind|значение Саурцетимезоне|Поведение метода|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Равно <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Преобразует `dateTime` в время часового пояса назначения.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Равно <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Преобразует `dateTime` в время часового пояса назначения.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Всеми.|Преобразует `dateTime` в время часового пояса назначения.|  
  
 Можно также преобразовать в время в формате UTC или из него, вызвав методы <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> и <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>.  
  
 Свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> задается, как показано в следующей таблице.  
  
|Условие|Возвращаемое значение свойства Kind|  
|---------------|----------------------------------|  
|Аргумент `destinationTimeZone` равен пустой ссылке (<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Аргумент `destinationTimeZone` равен пустой ссылке (<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>).|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Все остальные значения даты и времени, исходные Часовые пояса и часовые пояса назначения.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Если значение параметра `dateTime` является неоднозначным временем в исходном часовом поясе, оно интерпретируется как стандартное время. Если параметр `dateTime` является недопустимым временем в исходном часовом поясе, этот метод создает исключение <xref:System.ArgumentException>.  
  
 Если преобразование `dateTime` приводит к значению даты и времени, которое предшествует <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздним, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>соответственно.  
  
 Метод <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> вызывает исключение <xref:System.ArgumentException>, если свойство <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> аргумента `dateTime` имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType> но аргумент `sourceTimeZone` не <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Чтобы определить, является ли исходный часовой пояс локальным часовым поясом или универсальным часовым поясом, метод проверяет наличие на равенство ссылок вместо того, чтобы проверять равенство значений с помощью метода <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>. Обратите внимание, что <xref:System.TimeZoneInfo> объекты, представляющие местный часовой пояс и получаемые путем вызова метода <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>, не имеют ссылочного равенства с <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Кроме того, <xref:System.TimeZoneInfo> объекты, представляющие локальный или универсальный часовой пояс и получаемые путем итерации коллекции, возвращаемой методом <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>, не имеют ссылочного равенства с <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. В качестве альтернативы можно вызвать метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29>.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> для преобразования из Гавайского стандартного времени в местное время.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Local" />, но параметр <paramref name="sourceTimeZone" /> не равен <see cref="F:System.DateTimeKind.Local" />.  
  
-или- 
Свойство <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Utc" />, но параметр <paramref name="sourceTimeZone" /> не равен <see cref="P:System.TimeZoneInfo.Utc" />.  
  
-или- 
Параметр <paramref name="dateTime" /> является недопустимым временем (то есть он представляет время, которое не существует из-за правил коррекции часового пояса).</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceTimeZone" /> содержит значение <see langword="null" />.  
  
-или- 
Параметр <paramref name="destinationTimeZone" /> содержит значение <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует время во время в другом часовом поясе, исходя из идентификатора этого пояса.</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZoneId">Идентификатор часового пояса назначения.</param>
        <summary>Преобразует время во время в другом часовом поясе, исходя из идентификатора этого пояса.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> применяет все правила коррекции, действующие в `destinationTimeZoneId` часовом поясе.  
  
 Эта перегрузка во многом аналогична вызову метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>, за исключением того, что он позволяет указать часовой пояс назначения по идентификатору, а не по ссылке на объект. Этот метод наиболее удобен, когда необходимо преобразовать время, не извлекая объект часового пояса, который соответствует ему, и вам не нужно знать, является ли преобразованное время стандартным или летним.  
  
 Метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> определяет исходный часовой пояс из значения свойства <xref:System.DateTime.Kind%2A> параметра `dateTime`, как показано в следующей таблице.  
  
|Значение свойства Kind|Исходный часовой пояс|Поведение метода|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Преобразует местное время во время в `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Преобразует время в формате UTC в `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Предполагается <xref:System.TimeZoneInfo.Local%2A>.|Преобразует местное время во время в `destinationTimeZone`.|  
  
 Свойство <xref:System.DateTime.Kind%2A> возвращаемого значения <xref:System.DateTime> задается, как показано в следующей таблице.  
  
|Условие|Возвращаемое значение свойства Kind|  
|---------------|----------------------------------|  
|Свойство `destinationTimeZone` имеет значение `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Любое другое значение `destinationTimeZone`.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Если значение параметра `dateTime` является неоднозначным местным временем, оно интерпретируется как стандартное время. Если параметр `dateTime` является недопустимым местным временем, этот метод создает исключение <xref:System.ArgumentException>.  
  
 Если преобразование `dateTime` приводит к значению даты и времени, которое предшествует <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздним, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>соответственно.  
  
 Этот метод получает сведения о часовом поясе, идентификатор которого указан параметром `destinationTimeZoneId` из реестра в системах Windows и из [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Он не может получить объект часового пояса, созданный с помощью метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>. Параметр `destinationTimeZoneId` должен точно соответствовать идентификатору часового пояса в длине, но не в случае успешного сопоставления. то есть при сравнении `destinationTimeZoneId` с идентификаторами часовых поясов регистр не учитывается.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationTimeZoneId" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификатор часового пояса найден, однако данные реестра повреждены.</exception>
        <exception cref="T:System.Security.SecurityException">Процесс не имеет разрешений, необходимых для чтения из раздела реестра, который содержит сведения о часовом поясе.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Идентификатор <paramref name="destinationTimeZoneId" /> не найден в локальной системе.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZoneId">Идентификатор часового пояса назначения.</param>
        <summary>Преобразует время во время в другом часовом поясе, исходя из идентификатора этого пояса.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> применяет все правила коррекции, действующие в `destinationTimeZoneId` часовом поясе.  
  
 Эта перегрузка идентична вызову метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>, за исключением того, что он позволяет указать часовой пояс назначения по его идентификатору, а не по ссылке на объект. Этот метод наиболее удобен, когда необходимо преобразовать время, не извлекая объект часового пояса, который соответствует ему, и вам не нужно знать, является ли преобразованное время стандартным или летним.  
  
 Поскольку параметр `dateTimeOffset` представляет дату и время вместе со смещением этого времени относительно времени в формате UTC, оно не может представлять неоднозначное или недопустимое время.  
  
 Этот метод извлекает часовой пояс, идентификатор которого указан параметром `destinationTimeZoneId` из реестра в системах Windows и из [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Он не может получить объект часового пояса, созданный с помощью метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>. Параметр `destinationTimeZoneId` должен точно соответствовать идентификатору часового пояса в длине, но не в случае успешного сопоставления. то есть при сравнении `destinationTimeZoneId` с идентификаторами часовых поясов регистр не учитывается.  
  
 При преобразовании значения `dateTimeOffset` во время в часовом поясе назначения метод учитывает все правила коррекции, действующие в целевом часовом поясе.  
  
 Если преобразование `dateTimeOffset` приводит к значению даты и времени, которое предшествует <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или более поздним, чем <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>соответственно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationTimeZoneId" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификатор часового пояса найден, однако данные реестра повреждены.</exception>
        <exception cref="T:System.Security.SecurityException">Процесс не имеет разрешений, необходимых для чтения из раздела реестра, который содержит сведения о часовом поясе.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Идентификатор <paramref name="destinationTimeZoneId" /> не найден в локальной системе.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="sourceTimeZoneId">Идентификатор исходного часового пояса.</param>
        <param name="destinationTimeZoneId">Идентификатор часового пояса назначения.</param>
        <summary>Преобразует время в одном часовом поясе во время в другом, исходя из идентификаторов этих поясов.</summary>
        <returns>Дата и время в часовом поясе назначения, которые соответствуют значению параметра <paramref name="dateTime" /> в исходном часовом поясе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> применяет все правила коррекции, действующие в `destinationTimeZoneId` часовом поясе.  
  
 Хотя он аналогичен методу <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>, можно использовать <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>, чтобы указать исходные и целевые Часовые пояса, используя идентификаторы вместо объектов <xref:System.TimeZoneInfo>. Этот метод наиболее удобен, когда необходимо преобразовать время, не извлекая объект часового пояса, который соответствует ему, и вам не нужно знать, является ли преобразованное время стандартным или летним.  
  
 Этот метод извлекает Часовые пояса, идентификаторы которых являются `sourceTimeZoneId` и `destinationTimeZoneId` параметры из реестра в системах Windows и из [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Он не может получить объекты часового пояса, созданные с помощью метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>.  
  
 Значение свойства <xref:System.DateTime.Kind%2A> параметра `dateTime` должно соответствовать параметру `sourceTimeZoneId`, как показано в следующей таблице.  
  
|Значение DateTime. Kind|значение Саурцетимезоне|Поведение метода|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Равно `TimeZoneInfo.Utc.Id`.|Преобразует `dateTime` в время часового пояса назначения.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Utc.Id`.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Равно `TimeZoneInfo.Local.Id`.|Преобразует `dateTime` в время часового пояса назначения.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Local.Id`.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Всеми.|Преобразует `dateTime` в время часового пояса назначения.|  
  
 Поскольку он основывается на вызовах метода <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>, метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> выполняет поиск с учетом регистра, чтобы найти Часовые пояса, соответствующие `sourceTimeZoneId` и `destinationTimeZoneId`.  
  
 Если значение параметра `dateTime` является неоднозначным временем в исходном часовом поясе, оно интерпретируется как стандартное время. Если параметр `dateTime` является недопустимым временем в исходном часовом поясе, этот метод создает исключение <xref:System.ArgumentException>.  
  
 Свойству <xref:System.DateTime.Kind%2A> возвращаемого <xref:System.DateTime> присваивается значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, если часовой пояс назначения не имеет значения в формате UTC, в этом случае устанавливается значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере метод <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> используется для вывода времени, соответствующего времени локальной системы в восьми городах мира.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение свойства <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> не соответствует исходному часовому поясу.  
  
-или- 
 Значение <paramref name="dateTime" /> является недопустимым временем в исходном часовом поясе.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="sourceTimeZoneId" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="destinationTimeZoneId" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификаторы часового пояса найдены, однако данные реестра повреждены.</exception>
        <exception cref="T:System.Security.SecurityException">У пользователя нет разрешений, необходимых для чтения из разделов реестра, которые содержат сведения о часовом поясе.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Идентификатор <paramref name="sourceTimeZoneId" /> не найден в локальной системе.  
  
-или- 
Идентификатор <paramref name="destinationTimeZoneId" /> не найден в локальной системе.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Время в формате UTC.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время в формате UTC во время в указанном часовом поясе.</summary>
        <returns>Дата и время в часовом поясе назначения. Его свойство <see cref="P:System.DateTime.Kind" /> равно <see cref="F:System.DateTimeKind.Utc" />, если значение <paramref name="destinationTimeZone" /> равно <see cref="P:System.TimeZoneInfo.Utc" />; в противном случае — значение свойства <see cref="P:System.DateTime.Kind" /> равно <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении преобразования метод <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> применяет все правила коррекции, действующие в `destinationTimeZone` часовом поясе.  
  
 Точное поведение этого метода зависит от значения свойства <xref:System.DateTime.Kind%2A> параметра `dateTime`, как показано в следующей таблице.  
  
|Свойство DateTime. Kind|Преобразование|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> или <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразовывает время в формате UTC.|  
  
 Если преобразование `dateTime` приводит к значению даты и времени, которое предшествует <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздним, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>соответственно.  
  
   
  
## Examples  
 В следующем примере время в формате UTC преобразуется в центральное время.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойству <see cref="P:System.DateTime.Kind" /> объекта <paramref name="dateTime" /> присвоено значение <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="destinationTimeZone" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует дату и время в формат UTC.</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <summary>Преобразует указанные дату и время в формат UTC.</summary>
        <returns>Время в формате UTC, соответствующее значению параметра <paramref name="dateTime" />. Свойству <see cref="T:System.DateTime" /> значения <see cref="P:System.DateTime.Kind" /> всегда присваивается значение <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точное преобразование зависит от значения свойства <xref:System.DateTime.Kind%2A> параметра `dateTime`, как показано в следующей таблице.  
  
|Свойство DateTime. Kind|Преобразование|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Преобразует местное время в время в формате UTC.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Предполагается, `dateTime` является местным временем и преобразуется из местного времени в время в формате UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Возвращает `dateTime` без изменений.|  
  
 Если `dateTime` соответствует неоднозначному местному времени, этот метод предполагает, что это стандартное местное время. Если `dateTime` соответствует недопустимому местному времени, метод создает исключение <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Если местный часовой пояс текущего компьютера содержит несколько правил коррекции, эта перегрузка метода <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> может возвращать результаты, отличные от методов <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> и <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> всегда применяет текущее правило коррекции к конвертации часовых поясов, независимо от того, находится ли `dateTime` в пределах диапазона дат. А при выполнении на [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> также применяет текущее правило коррекции к преобразованию часовых поясов, независимо от того, находится ли `dateTime` в пределах своего диапазона дат.  
  
 Если в формате UTC, эквивалентном `dateTime`, предшествует <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, то этот метод возвращает <xref:System.DateTime.MinValue> или <xref:System.DateTime.MaxValue>соответственно.  
  
   
  
## Examples  
 В следующем примере показано преобразование значений времени, свойством <xref:System.DateTime.Kind%2A> которых является <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>и <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>соответственно. Он также иллюстрирует преобразование неоднозначных и недопустимых значений времени.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> возвращает <see langword="true" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="sourceTimeZone">Часовой пояс, соответствующий значению <paramref name="dateTime" />.</param>
        <summary>Преобразует время в указанном часовом поясе в формат UTC.</summary>
        <returns>Время в формате UTC, соответствующее значению параметра <paramref name="dateTime" />. Свойству <see cref="T:System.DateTime" /> объекта <see cref="P:System.DateTime.Kind" /> всегда присваивается значение <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если свойство <xref:System.DateTime.Kind%2A> параметра `dateTime` равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> и параметр `sourceTimeZone` равен <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, этот метод возвращает `dateTime` без выполнения каких либо преобразований.  
  
 Если `dateTime` соответствует неоднозначному времени, этот метод предполагает, что это стандартное время исходного часового пояса. Если `dateTime` соответствует недопустимому времени, этот метод создает исключение <xref:System.ArgumentException>.  
  
 Если в формате UTC, эквивалентном `dateTime`, предшествует <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>этот метод возвращает <xref:System.DateTime.MinValue> или <xref:System.DateTime.MaxValue>соответственно.  
  
   
  
## Examples  
 В следующем примере извлекается текущая дата из локальной системы и преобразуется в формат UTC, а затем преобразуется в значение по Гринвичу в Токио (зима) и, наконец, преобразуется обратно в время в формате UTC. Обратите внимание, что два времени в формате UTC идентичны.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> равно <see cref="F:System.DateTimeKind.Utc" />, а <paramref name="sourceTimeZone" /> не равняется <see cref="P:System.TimeZoneInfo.Utc" />.  
  
-или- 
 <paramref name="dateTime" />.<see langword="Kind" /> равно <see cref="F:System.DateTimeKind.Local" />, а <paramref name="sourceTimeZone" /> не равняется <see cref="P:System.TimeZoneInfo.Local" />.  
  
-или- 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> возвращает <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="sourceTimeZone" /> имеет значение <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет часовой пояс, который не удалось найти на локальном компьютере.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса.</param>
        <param name="baseUtcOffset">Объект, представляющий разность между значением времени в данном часовом поясе и временем в формате UTC.</param>
        <param name="displayName">Отображаемое имя нового часового пояса.</param>
        <param name="standardDisplayName">Имя зимнего времени нового часового пояса.</param>
        <summary>Создает пользовательский часовой пояс с указанным идентификатором, смещением от времени в формате UTC, отображаемым именем, а также отображаемым именем зимнего времени.</summary>
        <returns>Новый часовой пояс.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> подходит для создания часового пояса, не имеющего корректировок (то есть часового пояса, не поддерживающего летнее время). Чтобы определить часовой пояс, включающий корректировки перехода на летнее время, используйте метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>.  
  
 В следующей таблице показана связь между параметрами, предоставленными методу <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>, и свойствами объекта <xref:System.TimeZoneInfo>, возвращаемого вызовом метода.  
  
|Креатекустомтимезоне, параметр|TimeZoneInfo, свойство|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Как правило, имя стандартного времени часового пояса и его идентификатор одинаковы. Однако длина идентификатора часового пояса не должна превышать 32 символов. Строка, передаваемая в параметр `displayName`, соответствует довольно стандартному формату. Первая часть отображаемого имени — это базовое смещение часового пояса относительно универсального всемирного времени, которое обозначается аббревиатурой GMT (для среднего времени по Гринвичу), заключенной в круглые скобки. За ним следует строка, идентифицирующая часовой пояс, или один или несколько городов, регионов или стран часового пояса. Например:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 В следующем примере создается пользовательский часовой пояс для регионов Моусон и холм отсека Антарктида. Затем он отображает результат преобразования местного времени во время в новом часовом поясе.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> содержит значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="id" /> представляет собой пустую строку ("").  
  
-или- 
Параметр <paramref name="baseUtcOffset" /> не представляет целое число минут.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="baseUtcOffset" /> больше 14 часов или меньше –14 часов.</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md">Практическое руководство. Создание часовых поясов без правил коррекции</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса.</param>
        <param name="baseUtcOffset">Объект, представляющий разность между значением времени в данном часовом поясе и временем в формате UTC.</param>
        <param name="displayName">Отображаемое имя нового часового пояса.</param>
        <param name="standardDisplayName">Имя зимнего времени нового часового пояса.</param>
        <param name="daylightDisplayName">Имя летнего времени нового часового пояса.</param>
        <param name="adjustmentRules">Массив, который прибавляет базовое смещение относительно UTC для определенного периода.</param>
        <summary>Создает пользовательский часовой пояс с указанным идентификатором, смещением от времени в формате UTC, отображаемым именем, именем зимнего времени, именем летнего времени и правилами коррекции для летнего времени.</summary>
        <returns>Объект <see cref="T:System.TimeZoneInfo" />, представляющий новый часовой пояс.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> подходит для создания часового пояса, поддерживающего переход на летнее время. Чтобы определить часовой пояс, который не поддерживает летнее время, используйте метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>.  
  
 В следующей таблице показана связь между параметрами, предоставленными методу <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>, и элементами объекта <xref:System.TimeZoneInfo>, которые возвращаются вызовом метода.  
  
|Креатекустомтимезоне, параметр|TimeZoneInfo, элемент|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Массив объектов <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>, возвращаемых методом <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>.|  
  
 Как правило, имя стандартного времени часового пояса и его идентификатор одинаковы. Однако длина идентификатора часового пояса не должна превышать 32 символов. Строка, передаваемая в параметр `displayName`, соответствует довольно стандартному формату. Первая часть отображаемого имени — это базовое смещение часового пояса относительно универсального всемирного времени, которое обозначается аббревиатурой GMT (для среднего времени по Гринвичу), заключенной в круглые скобки. За ним следует строка, идентифицирующая часовой пояс, или один или несколько городов, регионов или стран часового пояса. Например:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Параметр `baseUtcOffset` определяет смещение пользовательского часового пояса относительно времени в формате UTC для всех правил коррекции часового пояса. Иными словами, объектная модель <xref:System.TimeZoneInfo> предполагает, что смещение часового пояса от времени UTC является константой в течение всего времени существования часового пояса и существует независимо от конкретных правил коррекции. Чтобы отразить часовой пояс, в котором изменилось смещение относительно времени в формате UTC, необходимо создать новый объект часового пояса.  
  
 Правила коррекции часового пояса определяются следующим образом.  
  
1.  Вызов метода <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> или <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> для определения начального и конечного времени перехода для каждого правила коррекции.  
  
2.  Вызов метода <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> для каждого правила коррекции.  
  
3.  Присвоение правил коррекции массиву, который можно передать в качестве параметра `adjustmentRules`.  
  
   
  
## Examples  
 В следующем примере создается пользовательский часовой пояс для станции Палмер и остров Анверс в Антарктида. Затем оно преобразует местное время во время в новом часовом поясе и отображает результат.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> содержит значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="id" /> представляет собой пустую строку ("").  
  
-или- 
Параметр <paramref name="baseUtcOffset" /> не представляет целое число минут.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="baseUtcOffset" /> больше 14 часов или меньше –14 часов.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Правила коррекции, заданные в параметре <paramref name="adjustmentRules" />, перекрываются.  
  
-или- 
Последовательность правил коррекции, заданных в параметре <paramref name="adjustmentRules" />, не является хронологической.  
  
-или- 
Один или несколько элементов в <paramref name="adjustmentRules" /> имеют значение <see langword="null" />.  
  
-или- 
К одной дате может быть применено несколько правил коррекции.  
  
-или- 
Сумма параметра <paramref name="baseUtcOffset" /> и значения свойства <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> одного или нескольких объектов в массиве <paramref name="adjustmentRules" /> больше 14 часов или меньше –14 часов.</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md">Практическое руководство. Создание часовых поясов с правилами коррекции</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса.</param>
        <param name="baseUtcOffset">Объект <see cref="T:System.TimeSpan" />, представляющий разность между значением времени в данном часовом поясе и временем в формате UTC.</param>
        <param name="displayName">Отображаемое имя нового часового пояса.</param>
        <param name="standardDisplayName">Имя зимнего времени нового часового пояса.</param>
        <param name="daylightDisplayName">Имя летнего времени нового часового пояса.</param>
        <param name="adjustmentRules">Массив объектов <see cref="T:System.TimeZoneInfo.AdjustmentRule" />, которые прибавляют базовое смещение относительно UTC для определенного периода.</param>
        <param name="disableDaylightSavingTime">Значение <see langword="true" /> для сброса в новом объекте всех связанных с летним временем сведений, представленных в параметре <paramref name="adjustmentRules" />; в противном случае — <see langword="false" />.</param>
        <summary>Создает пользовательский часовой пояс с указанным идентификатором, смещением от времени в формате UTC, отображаемым именем, именем зимнего времени, именем летнего времени, правилами коррекции для летнего времени и значением, позволяющим определить, отражает ли возвращаемый объект сведения о летнем времени.</summary>
        <returns>Новый часовой пояс. Если значение параметра <paramref name="disableDaylightSavingTime" /> равно <see langword="true" />, в возвращаемом объекте отсутствуют данные о летнем времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эту перегрузку метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> можно использовать для создания пользовательского часового пояса, поддержка которого может быть определена условиями во время выполнения.  
  
 В следующей таблице показана связь между параметрами, предоставленными методу <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>, и элементами объекта <xref:System.TimeZoneInfo>, которые возвращаются вызовом метода.  
  
|Креатекустомтимезоне, параметр|TimeZoneInfo, свойство|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>, если `disableDaylightSavingTime` `false`; <xref:System.String.Empty?displayProperty=nameWithType>, если `disableDaylightSavingTime` `true`.|  
|`adjustmentRules`|Массив объектов <xref:System.TimeZoneInfo.AdjustmentRule>, возвращаемых методом <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>, если `disableDaylightSavingTime` `false`; пустой массив, возвращенный методом <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>, если `disableDaylightSavingTime` `true`.|  
|`disableDaylightSavingTime`|Не <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Как правило, имя стандартного времени часового пояса и его идентификатор одинаковы. Однако длина идентификатора часового пояса не должна превышать 32 символов. Строка, передаваемая в параметр `displayName`, соответствует довольно стандартному формату. Первая часть отображаемого имени — это базовое смещение часового пояса относительно универсального всемирного времени, которое обозначается аббревиатурой GMT (для среднего времени по Гринвичу), заключенной в круглые скобки. За ним следует строка, идентифицирующая часовой пояс, или один или несколько городов, регионов или стран часового пояса. Например:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Правила коррекции часового пояса определяются следующим образом.  
  
1.  Вызов метода <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> или <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> для определения начального и конечного правил перехода для каждого правила коррекции.  
  
2.  Вызов метода <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> для каждого правила коррекции.  
  
3.  Присвоение правил коррекции массиву, который можно передать в качестве параметра `adjustmentRules`.  
  
 Если `disableDaylightSavingTime` параметр имеет значение `false`, операция этого метода идентична перегрузке <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>. Если `disableDaylightSavingTime` `true`, возвращаемый объект не включает правила коррекции и свойство <xref:System.TimeZoneInfo.DaylightName%2A>, значение которого равно пустой строке.  
  
   
  
## Examples  
 В следующем примере создается пользовательский часовой пояс для станции Палмер и остров Анверс в Антарктида. Он устанавливает параметр `disableDaylightSavingTime` в вызове метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> для `true`. Затем он отображает имя летнего времени для нового часового пояса, если оно существует, и число правил коррекции для подтверждения того, что в новом часовом поясе нет информации о летнем времени.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> содержит значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="id" /> представляет собой пустую строку ("").  
  
-или- 
Параметр <paramref name="baseUtcOffset" /> не представляет целое число минут.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="baseUtcOffset" /> больше 14 часов или меньше –14 часов.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Правила коррекции, заданные в параметре <paramref name="adjustmentRules" />, перекрываются.  
  
-или- 
Последовательность правил коррекции, заданных в параметре <paramref name="adjustmentRules" />, не является хронологической.  
  
-или- 
Один или несколько элементов в <paramref name="adjustmentRules" /> имеют значение <see langword="null" />.  
  
-или- 
К одной дате может быть применено несколько правил коррекции.  
  
-или- 
Сумма параметра <paramref name="baseUtcOffset" /> и значения свойства <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> одного или нескольких объектов в массиве <paramref name="adjustmentRules" /> больше 14 часов или меньше –14 часов.</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md">Практическое руководство. Создание часовых поясов без правил коррекции</related>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md">Практическое руководство. Создание часовых поясов с правилами коррекции</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает отображаемое имя для летнего времени текущего часового пояса.</summary>
        <value>Отображаемое имя для летнего времени текущего часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отображаемое имя локализуется на основе языка и региональных параметров, установленных в операционной системе Windows.  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> свойство, значение которого не <xref:System.String.Empty?displayProperty=nameWithType> или `null` не обязательно указывает, что часовой пояс поддерживает летнее время. Чтобы определить, поддерживает ли часовой пояс летнее время, проверьте значение свойства <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.  
  
 В большинстве случаев свойство `DaylightName` определяемого системой часового пояса не <xref:System.String.Empty?displayProperty=nameWithType> или `null`. Однако свойству <xref:System.TimeZoneInfo.DaylightName%2A> настраиваемого часового пояса можно присвоить значение <xref:System.String.Empty?displayProperty=nameWithType>. Это происходит, когда пользовательские Часовые пояса создаются <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>ом или перегрузкой <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType>, а параметром `disableDaylightSavingTime` — `true`. Поэтому в коде никогда не следует рассчитывать, что значение свойства <xref:System.TimeZoneInfo.DaylightName%2A> не `null` или пустое.  
  
 Свойство <xref:System.TimeZoneInfo.DaylightName%2A> эквивалентно свойству <xref:System.TimeZone.DaylightName%2A> класса <xref:System.TimeZone>.  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `DisplayDateWithTimeZoneName`, который использует метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>, чтобы определить, следует ли отображать имя стандартного времени часового пояса или имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает универсальное отображаемое имя, представляющее часовой пояс.</summary>
        <value>Общее отображаемое имя часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отображаемое имя локализуется на основе языка и региональных параметров, установленных в операционной системе Windows.  
  
 Отображаемые имена часовых поясов для часовых поясов системы Windows имеют довольно стандартный формат. Первая часть отображаемого имени — это базовое смещение часового пояса относительно универсального всемирного времени, которое обозначается аббревиатурой GMT (для среднего времени по Гринвичу), заключенной в круглые скобки. Для всеобщего скоординированного времени акроним GMT без смещения заключается в круглые скобки.  За ним следует строка, идентифицирующая часовой пояс или один или несколько городов, регионов или стран часового пояса. Например:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 В следующем примере извлекается объект <xref:System.TimeZoneInfo>, представляющий местный часовой пояс, и выводится его отображаемое имя, имя стандартного времени и имя перехода на летнее время. Выходные данные отображаются для системы в стандартном тихоокеанском часовом поясе США.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, равны ли два объекта <see cref="T:System.TimeZoneInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="obj">Второй объект, сравниваемый с текущим объектом.</param>
        <summary>Определяет, равен ли текущий объект <see cref="T:System.TimeZoneInfo" /> другому объекту.</summary>
        <returns><see langword="true" />, если параметр <paramref name="obj" /> является объектом <see cref="T:System.TimeZoneInfo" />, который равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует или приводит `obj` к <xref:System.TimeZoneInfo> объекту и сравнивает его с текущим экземпляром. Проверка на равенство основана на сравнении значений. Текущий экземпляр <xref:System.TimeZoneInfo> и `obj` считаются равными в следующих случаях:  
  
-   Тип `obj` времени выполнения <xref:System.TimeZoneInfo>.  
  
-   Два объекта имеют одно и то же значение <xref:System.TimeZoneInfo.Id%2A> свойства.  
  
-   Эти два объекта имеют одинаковые правила коррекции.  
  
 Если значением параметра `obj` является `null`, метод возвращает `false`.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.TimeZoneInfo.Equals%28System.Object%29> для определения местного часового пояса (Тихоокеанское время или Восточное время).  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Второй объект, сравниваемый с текущим объектом.</param>
        <summary>Определяет, равен ли текущий объект <see cref="T:System.TimeZoneInfo" /> другому объекту <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если два объекта <see cref="T:System.TimeZoneInfo" /> равны; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Равенство основано на сравнении значений. Два <xref:System.TimeZoneInfo> объектов считаются равными при следующих условиях.  
  
-   Значение свойства <xref:System.TimeZoneInfo.Id%2A> одинаково.  
  
-   Они имеют одинаковые правила коррекции.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> возвращает логическое значение, полученное в результате вычисления следующего выражения:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Если параметр `other` является неинициализированным <xref:System.TimeZoneInfo> объектом, этот метод возвращает `false`.  
  
   
  
## Examples  
 В следующем примере используется метод <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> для определения местного часового пояса (Тихоокеанское время или Восточное время).  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса, соответствующий свойству <see cref="P:System.TimeZoneInfo.Id" />.</param>
        <summary>Создает новый экземпляр объекта <see cref="T:System.TimeZoneInfo" /> на основе его идентификатора.</summary>
        <returns>Объект, идентификатор которого равен значению параметра <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр `id` должен точно соответствовать идентификатору часового пояса в длине, но не в случае успешного сопоставления. то есть при сравнении `id` с идентификаторами часовых поясов регистр не учитывается. Если требуется получить объекты часового пояса на основе частичных совпадений, можно написать пользовательские процедуры, работающие с коллекцией <xref:System.TimeZoneInfo> объектов, предназначенных только для чтения, возвращаемых методом <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  
  
 В системах Windows `FindSystemTimeZoneById` пытается сопоставить `id` с именами подразделов ветви HKEY_LOCAL_MACHINE \Софтваре\микрософт\виндовс Nt\currentversion\time Zones Zones реестра. В Linux и macOS используются сведения о часовом поясе, доступные в [библиотеке ICU](http://userguide.icu-project.org/datetime/timezone). Если в реестре или библиотеке отсутствуют сведения о требуемом часовом поясе, можно создать определенный часовой пояс либо путем вызова одной из перегрузок метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>, либо путем вызова <xref:System.TimeZoneInfo.FromSerializedString%2A> для десериализации объекта <xref:System.TimeZoneInfo>, представляющего требуемый часовой пояс. Однако часовые пояса, созданные этими вызовами метода, не определяются системой и не могут быть получены с помощью метода <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>. Доступ к этим пользовательским часовым поясам можно получить только через ссылку на объект, возвращенную вызовом метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> или <xref:System.TimeZoneInfo.FromSerializedString%2A>.  
  
Этот метод возвращает новый экземпляр <xref:System.TimeZoneInfo> для каждого вызова метода; Он не возвращает кэшированные объекты. Это может повлиять на производительность в приложениях, которые вызывают метод `FindSystemTimeZoneById` многократно с тем же идентификатором.   
  
## Examples  
 В следующем примере метод <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> используется для получения часового пояса в Токио Standard. Затем этот <xref:System.TimeZoneInfo> объект используется для преобразования местного времени во время в Токио и для определения того, является ли он стандартным временем или временем в Токио (лето).  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">В системе недостаточно памяти для хранения сведений о часовом поясе.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> содержит значение <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Не найден идентификатор часового пояса, заданный параметром <paramref name="id" />. Это означает, что идентификатор часового пояса, имя которого соответствует <paramref name="id" />, не существует, или что идентификатор существует, но не содержит данных о часовом поясе.</exception>
        <exception cref="T:System.Security.SecurityException">Процесс не имеет разрешений, необходимых для чтения из раздела реестра, который содержит сведения о часовом поясе.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификатор часового пояса найден, однако данные реестра повреждены.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="~/docs/standard/datetime/instantiate-time-zone-info.md">Практическое руководство. Создание экземпляра объекта TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">Строковое представление сериализованного объекта <see cref="T:System.TimeZoneInfo" />.</param>
        <summary>Десериализует строку для повторного создания исходного сериализованного объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Исходный сериализованный объект.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Существует альтернативный способ предоставления всего кода, необходимого для создания часового пояса, не найденного в реестре Windows или в [библиотеке ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Можно определить пользовательский часовой пояс и либо использовать метод <xref:System.TimeZoneInfo.ToSerializedString%2A> в автономном исполняемом файле, либо использовать программу установки приложения для сохранения часового пояса в виде строки. Затем приложение может извлечь эту строку из своего места хранения и создать ее экземпляр с помощью метода <xref:System.TimeZoneInfo.FromSerializedString%2A>.  
  
   
  
## Examples  
 В следующем примере предпринимается попытка извлечь часовой пояс Антарктида/Южной полюса из локальной системы. В случае сбоя код пытается получить сведения о часовом поясе из текстового файла в каталоге приложения. Если эта попытка завершается неудачно, код создает часовой пояс и записывает сведения о часовом поясе в текстовый файл.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="source" /> содержит значение <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> является пустой строкой.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Исходный параметр нельзя десериализовать обратно в объект <see cref="T:System.TimeZoneInfo" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="~/docs/standard/datetime/restore-time-zones-from-an-embedded-resource.md">Практическое руководство. Восстановление часовых поясов из внедренного ресурса</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Извлекает массив объектов <see cref="T:System.TimeZoneInfo.AdjustmentRule" />, который применяется к текущему объекту <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Массив объектов для данного часового пояса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> извлекает массив объектов <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>. Каждый объект в массиве определяет действующие дату начала и окончания этой корректировки часового пояса, а также его Дельта (Точная величина, на которую изменяется время изменения). Кроме того, два свойства возвращают <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> объекты, которые определяют, когда происходит каждый ежегодный переход к стандартному времени и от него.  
  
 Если часовой пояс имеет несколько правил коррекции, они обычно упорядочиваются от самого раннего (с индексом 0) до последней (в индексе <xref:System.Array.Length%2A>-1).  
  
 Если часовой пояс не содержит правил коррекции, метод <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> возвращает пустой массив (массив, <xref:System.Array.Length%2A> которого равен нулю).  
  
 Любые изменения элементов массива, возвращаемого методом <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>, не отражаются в правилах коррекции, относящихся к определенному часовому поясу. Чтобы изменить правила коррекции часового пояса (например, для отражения переходного перехода на летнее время), необходимо создать новый часовой пояс с соответствующими правилами коррекции, а не изменять существующий.  
  
   
  
## Examples  
 В следующем примере извлекаются все часовые пояса, определенные в локальной системе, и отображаются полные сведения о их правилах коррекции в консоли.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">В системе недостаточно памяти для создания копии правил коррекции в памяти.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает сведения о возможных датах и времени, с которыми можно сопоставить неоднозначные значения этих величин.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Дата и время.</param>
        <summary>Возвращает сведения о возможных датах и времени, с которыми можно сопоставить неоднозначные значения этих величин.</summary>
        <returns>Массив объектов, представляющий возможные смещения относительно времени UTC, которым может соответствовать определенная дата и время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точное поведение этого метода зависит от связи между свойством <xref:System.DateTime.Kind%2A> и объектом <xref:System.TimeZoneInfo>, как показано в следующей таблице.  
  
|Тип объекта TimeZoneInfo|Значение свойства Kind|Поведение|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Возвращает неоднозначные смещения времени для `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` в местное время, а затем возвращает неоднозначные смещения времени для этого времени.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Любое значение.|Создает <xref:System.ArgumentException>.|  
|Любой другой часовой пояс.|<xref:System.DateTimeKind.Local> или <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` в указанный часовой пояс, а затем определяет, является ли это время неоднозначным.|  
|Любой другой часовой пояс.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Определяет, является ли `dateTime` неоднозначным в указанном часовом поясе.|  
  
 Порядок <xref:System.TimeSpan> объектов в массиве, возвращаемом этим методом, не определен. Однако можно определить, какой элемент представляет смещение от стандартного времени часового пояса, сравнив его значение со свойством <xref:System.TimeZoneInfo.BaseUtcOffset%2A> часового пояса. Сведения о том, как сопоставить неоднозначное время со стандартным часовым поясом, см. [в разделе как разрешить неоднозначные времена](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `ShowPossibleUtcTimes`, который использует метод <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> для согласования неоднозначного времени со своим возможным временем в формате UTC.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Затем метод можно вызвать с помощью следующего кода:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="dateTime" /> не является неоднозначным временем.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="~/docs/standard/datetime/resolve-ambiguous-times.md">Практическое руководство. Разрешение проблемы неоднозначности времени</related>
        <related type="Article" href="~/docs/standard/datetime/let-users-resolve-ambiguous-times.md">Практическое руководство. Предоставление пользователям возможности разрешения неоднозначности времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Дата и время.</param>
        <summary>Возвращает сведения о возможных датах и времени, с которыми можно сопоставить неоднозначные значения этих величин.</summary>
        <returns>Массив объектов, представляющий возможные смещения относительно времени UTC, которым может соответствовать определенная дата и время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точное поведение этого метода зависит от связи между свойством <xref:System.DateTimeOffset.Offset%2A> параметра `dateTimeOffset` и объектом <xref:System.TimeZoneInfo>. Если значение свойства <xref:System.DateTimeOffset.Offset%2A> соответствует возможным смещениям текущего часового пояса относительно времени в формате UTC для этой даты и времени, метод возвращает возможные смещения. В противном случае он преобразует `dateTimeOffset` в время в текущем часовом поясе, а затем возвращает возможные смещения этой даты и времени.  
  
 Порядок <xref:System.TimeSpan> объектов в массиве, возвращаемом этим методом, не определен. Однако можно определить, какой элемент представляет смещение от стандартного времени часового пояса, сравнив его значение со свойством <xref:System.TimeZoneInfo.BaseUtcOffset%2A> часового пояса. Сведения о том, как сопоставить неоднозначное время со стандартным часовым поясом, см. [в разделе как разрешить неоднозначные времена](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="dateTimeOffset" /> не является неоднозначным временем.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="~/docs/standard/datetime/resolve-ambiguous-times.md">Практическое руководство. Разрешение проблемы неоднозначности времени</related>
        <related type="Article" href="~/docs/standard/datetime/let-users-resolve-ambiguous-times.md">Практическое руководство. Предоставление пользователям возможности разрешения неоднозначности времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Служит хэш-функцией для алгоритмов хэширования и таких структур данных, как хэш-таблицы.</summary>
        <returns>32-битовое знаковое целое число, выступающее в роли хэш-кода данного объекта <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о методе <xref:System.TimeZoneInfo.GetHashCode%2A> см. в разделе <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает отсортированную коллекцию всех часовых поясов, сведения о которых доступны в локальной системе.</summary>
        <returns>Доступная только для чтения коллекция объектов <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> извлекает все доступные сведения о часовом поясе из подразделов раздела реестра HKEY_LOCAL_MACHINE \Софтваре\микрософт\виндовс Nt\currentversion\time Zones Zones в системах Windows и из [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Если не удается успешно получить и проанализировать значения конкретных строковых свойств отдельных объектов <xref:System.TimeZoneInfo>, этот метод задает для своего значения пустую строку ("").  
  
> [!IMPORTANT]
>  Метод <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Возвращает коллекцию объектов <xref:System.TimeZoneInfo> только для часовых поясов, определенных в реестре Windows или в библиотеке ICU. Он не включает Часовые пояса, созданные с помощью перегрузок метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>. Они доступны только через ссылку на объект, возвращенную методом создания часового пояса.  
  
 Коллекция, возвращаемая этим методом, сортируется по времени UTC и (для часовых поясов с одинаковым смещением в формате UTC) отображаемым именем, использующим текущий язык и региональные параметры. Сведения о отображаемом имени см. в разделе <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 Объект <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, возвращаемый этим методом, поддерживает интерфейс <xref:System.Collections.Generic.IEnumerable%601>, что означает возможность его итерации с помощью операторов `foreach` (in C#) или `For Each…Next` (in Visual Basic). Каждая итерация цикла предоставляет следующий объект <xref:System.TimeZoneInfo> в коллекции.  
  
 Коллекция объектов <xref:System.TimeZoneInfo> представляет Часовые пояса, определенные на локальном компьютере. она не обязательно предоставляет полные сведения обо всех часовых поясах в течение всех периодов времени. Если для приложения требуется, чтобы Часовые пояса не были найдены на локальном компьютере, можно создать пользовательские Часовые пояса с помощью перегрузок метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>. Дополнительные сведения см. в статьях [как создавать Часовые пояса без правил коррекции](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) и [как создавать Часовые пояса с правилами коррекции](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Можно также определить, определен ли отдельный часовой пояс на локальном компьютере, вызвав метод <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> и указав идентификатор часового пояса, который требуется получить в качестве параметра.  
  
   
  
## Examples  
 В следующем примере извлекается коллекция объектов часового пояса, представляющих Часовые пояса, определенные на компьютере, и записываются сведения о них в текстовый файл.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Недостаточно памяти для хранения всех сведений о часовом поясе.</exception>
        <exception cref="T:System.Security.SecurityException">Пользователь не имеет разрешений на чтение из разделов реестра, которые содержат сведения о часовом поясе.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вычисляет для определенной даты и времени смещение или разность между временем в данном часовом поясе и временем в формате UTC.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Дата и время, для которых необходимо определить смещение.</param>
        <summary>Вычисляет для определенной даты и времени смещение или разность между временем в данном часовом поясе и временем в формате UTC.</summary>
        <returns>Объект, в котором указывается разность во времени между двумя часовыми поясами.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращенный промежуток времени включает все различия из-за применения правил коррекции к текущему часовому поясу. Он отличается от свойства <xref:System.TimeZoneInfo.BaseUtcOffset%2A>, которое возвращает разницу между временем в формате UTC и стандартным временем часового пояса и, следовательно, не учитывает правила коррекции.  
  
 Если свойство <xref:System.DateTime.Kind%2A> параметра `dateTime` не соответствует объекту часового пояса, этот метод выполняет необходимое преобразование перед возвратом результата. Например, это может произойти, если свойство <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, но объект часового пояса не является местным часовым поясом. Если `dateTime` является неоднозначным или если преобразованное время неоднозначно, этот метод интерпретирует неоднозначное время как стандартное время. Если `dateTime` является недопустимым, этот метод возвращает объект <xref:System.TimeSpan>, отражающий разницу между временем в формате UTC и стандартным временем часового пояса.  
  
 Метод <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> аналогичен методу <xref:System.TimeZone.GetUtcOffset%2A> класса <xref:System.TimeZone>.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> с различными часовыми поясами и значениями дат, которые имеют разные значения свойств <xref:System.DateTime.Kind%2A>.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Дата и время, для которых необходимо определить смещение.</param>
        <summary>Вычисляет для определенной даты и времени смещение или разность между временем в данном часовом поясе и временем в формате UTC.</summary>
        <returns>Объект, в котором указывается разность между временем в формате UTC и временем в текущем часовом поясе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращенный промежуток времени включает все различия из-за применения правил коррекции к текущему часовому поясу. Он отличается от свойства <xref:System.TimeZoneInfo.BaseUtcOffset%2A>, которое возвращает разницу между временем в формате UTC и стандартным временем часового пояса и, следовательно, не учитывает правила коррекции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="other">Второй объект, сравниваемый с текущим объектом <see cref="T:System.TimeZoneInfo" />.</param>
        <summary>Указывает, совпадают ли правила коррекции текущего объекта и другого объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если правила коррекции и базовые смещения двух часовых поясов совпадают; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как и метод <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>, метод <xref:System.TimeZoneInfo.HasSameRules%2A> указывает, имеют ли два часовых пояса одно и то же базовое смещение (как определено свойством <xref:System.TimeZoneInfo.BaseUtcOffset%2A>) и те же правила коррекции. В отличие от метода <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>, <xref:System.TimeZoneInfo.HasSameRules%2A> не сравнивает идентификаторы часовых поясов (как определено свойством <xref:System.TimeZoneInfo.Id%2A>).  
  
   
  
## Examples  
 Как правило, ряд часовых поясов, определенных в реестре Windows и [библиотеке ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS, имеют одинаковое смещение относительно времени в формате UTC и тех же правил коррекции. В следующем примере на консоль выводится список этих часовых поясов.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="other" /> содержит значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификатор часового пояса.</summary>
        <value>Идентификатор часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификатор часового пояса — это строка ключа, однозначно определяющая конкретный часовой пояс. В системах Windows она соответствует подразделам ветви HKEY_LOCAL_MACHINE \Софтваре\микрософт\виндовс Nt\currentversion\time Zones Zone раздела реестра в системах Windows и из [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Его можно передать в качестве параметра методу <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> для создания экземпляра объекта <xref:System.TimeZoneInfo>, представляющего определенный часовой пояс.  
  
> [!IMPORTANT]
>  Хотя имя ключа в реестре Windows может быть не длиннее 255 символов, рекомендуется, чтобы идентификатор, назначаемый пользовательскому часовому поясу, состоять не более чем из 32 символов. Чем длиннее идентификатор, тем выше вероятность того, что при его извлечении будет передано неправильное имя ключа.  
  
 Значение свойства <xref:System.TimeZoneInfo.Id%2A> обычно, но не всегда, идентично значению свойства <xref:System.TimeZoneInfo.StandardName%2A>. Идентификатор всеобщего скоординированного часового пояса — UTC.  
  
   
  
## Examples  
 В следующем примере выводится идентификатор каждого часового пояса, определенного на локальном компьютере.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, являются ли заданная дата и время в заданном часовом поясе неоднозначными и можно ли им сопоставить два и более момента времени в формате UTC.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Значение даты и времени.</param>
        <summary>Определяет, являются ли заданная дата и время в заданном часовом поясе неоднозначными и можно ли им сопоставить два и более момента времени в формате UTC.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="dateTime" /> неоднозначен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Неоднозначное время попадает в диапазон времени для текущего часового пояса. Это означает, что это может быть либо стандартное время, либо время, полученное в результате применения правила коррекции. Обычно неоднозначные значения времени, когда часы задаются на зимнее время с летнего времени. Иллюстрации см. в разделе "пример".  
  
 Всеобщее скоординированное время (UTC) не имеет неоднозначных значений времени; ни один из часовых поясов не поддерживает летнее время. Таким образом, эти часовые пояса не имеют правил коррекции и вызовы метода <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> всегда возвращают `false`.  
  
 Для часовых поясов, которые выполняют летнее время, точное поведение этого метода зависит от связи между свойством <xref:System.DateTime.Kind%2A> и объектом <xref:System.TimeZoneInfo>, как показано в следующей таблице.  
  
|Тип объекта TimeZoneInfo|Значение свойства Kind|Поведение|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Определяет, является ли параметр `dateTime` неоднозначным.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` в местное время, а затем определяет, является ли это время неоднозначным.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Возвращает `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Если `dateTime` является неоднозначным, предполагается, что это стандартное время, преобразует его в формат UTC и возвращает `false`.|  
|Любой другой часовой пояс.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` в время в указанном часовом поясе, а затем определяет, является ли это время неоднозначным.|  
|Любой другой часовой пояс.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Определяет, является ли `dateTime` неоднозначным.|  
  
   
  
## Examples  
 В тихоокеанском часовом поясе летнее время заканчивается на 2:00 утра. 4 ноября 2007 г. В следующем примере время передается через одну минуту с 12:59 утра. 4 ноября 2007 г. до 2:01 утра 4 ноября 2007 к методу <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> объекта <xref:System.TimeZoneInfo>, представляющего тихоокеанское значение часового пояса. Выходные данные консоли показывают, что все значения времени с 1:00 утра 4 ноября 2007 г. до 1:59 утра 4 ноября 2007 не являются неоднозначными.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> значения <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Local" />, а <paramref name="dateTime" /> — недопустимое время.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Дата и время.</param>
        <summary>Определяет, являются ли заданная дата и время в заданном часовом поясе неоднозначными и можно ли им сопоставить два и более момента времени в формате UTC.</summary>
        <returns>Значение <see langword="true" />, если значение параметра <paramref name="dateTimeOffset" /> в текущем часовом поясе является неоднозначным; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Неоднозначное время попадает в диапазон времени для текущего часового пояса. Это означает, что это может быть либо стандартное время, либо время, полученное в результате применения правила коррекции. Обычно неоднозначные значения времени, когда часы задаются на зимнее время с летнего времени. Всеобщее скоординированное время (UTC) не имеет неоднозначных значений времени; ни один из часовых поясов не поддерживает летнее время.  
  
 Точное поведение метода зависит от связи между свойством <xref:System.DateTimeOffset.Offset%2A> параметра `dateTimeOffset` и текущим часовым поясом. Если значение свойства <xref:System.DateTimeOffset.Offset%2A> является возможным смещением относительно времени в формате UTC текущего часового пояса, метод определяет, является ли дата и время неоднозначными. В противном случае он преобразует `dateTimeOffset` в время в текущем часовом поясе, а затем определяет, является ли дата и время неоднозначными.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Указывает, попадают ли заданные дата и время в диапазон летнего времени для часового пояса текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Значение даты и времени.</param>
        <summary>Указывает, попадают ли заданные дата и время в диапазон летнего времени для часового пояса текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="dateTime" /> относится к летнему времени; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 На возвращаемое значение <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> влияет связь между часовым поясом, представленным объектом <xref:System.TimeZoneInfo>, и свойством <xref:System.DateTime.Kind%2A> параметра `dateTime`, как показано в следующей таблице.  
  
|Объект TimeZoneInfo|Свойство DateTime. Kind|Результат|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Определяет, относится ли `dateTime` к летнему времени.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Преобразует `dateTime` из времени в формате UTC в местное время и определяет, является ли он летним временем.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Предполагается, что `dateTime` представляет местное время и определяет, является ли он летним временем.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`или `DateTimeKind.Utc`|Возвращает `false` (UTC не поддерживает летнее время).|  
|Любой другой объект <xref:System.TimeZoneInfo>.|`DateTimeKind.Local`|Преобразует местное время в эквивалентное время объекта <xref:System.TimeZoneInfo>, а затем определяет, является ли Последнее летнее время.|  
|Любой другой объект <xref:System.TimeZoneInfo>.|`DateTimeKind.Utc`|Преобразует время в формате UTC в эквивалентное время объекта <xref:System.TimeZoneInfo>, а затем определяет, является ли Последнее летним.|  
|Любой другой объект <xref:System.TimeZoneInfo>.|`DateTimeKind.Unspecified`|Определяет, относится ли `dateTime` к летнему времени.|  
  
 Если часовой пояс, представленный объектом <xref:System.TimeZoneInfo>, не поддерживает переход на летнее время, метод всегда возвращает `false`. Несколько часовых поясов, включая <xref:System.TimeZoneInfo.Utc%2A>, не наблюдают переход на летнее время.  Чтобы определить, поддерживает ли часовой пояс летнее время, извлеките значение его свойства <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.  
  
 Если параметр `dateTime` задает неоднозначное время в часовом поясе текущего объекта, метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> интерпретирует `dateTime` как стандартное время и возвращает `false`, если его свойство <xref:System.DateTime.Kind%2A> имеет значение <xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если свойство <xref:System.DateTime.Kind%2A> имеет значение <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, этот метод выберет правильное неоднозначное время и сообщит, является ли это летним временем.  
  
 Так как метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> может возвращать `false` для даты и времени, которые являются неоднозначными (то есть дата и время, которые могут представлять стандартное время или летнее время в определенном часовом поясе), метод <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> можно связать с методом <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>, чтобы определить, может ли время переходить на летнее время. Поскольку неоднозначное время — это время, которое может быть как летним, так и стандартным временем, метод <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> может быть вызван первым, чтобы определить, может ли дата и время быть переходом на летнее время. Если метод возвращает `false`, можно вызвать метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>, чтобы определить, является ли значение <xref:System.DateTime> переходом на летнее время. Этот метод показан в следующем примере.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Если параметр `dateTime` задает недопустимое время, вызов метода вызывает исключение <xref:System.ArgumentException>, если значение свойства <xref:System.DateTime.Kind%2A> `dateTime` параметра равно <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; в противном случае метод возвращает `false`.  
  
 Вызовите метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>, чтобы определить, следует ли использовать значение часового пояса <xref:System.TimeZoneInfo.StandardName%2A> или его значение <xref:System.TimeZoneInfo.DaylightName%2A> при отображении имени часового пояса. Иллюстрации см. в разделе "пример".  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `DisplayDateWithTimeZoneName`, который использует метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>, чтобы определить, следует ли отображать имя стандартного времени часового пояса или имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> значения <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Local" />, а <paramref name="dateTime" /> — недопустимое время.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Значение даты и времени.</param>
        <summary>Указывает, попадают ли заданные дата и время в диапазон летнего времени для часового пояса текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="dateTimeOffset" /> относится к летнему времени; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 На возвращаемое значение <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> влияет связь между часовым поясом, представленным объектом <xref:System.TimeZoneInfo>, и свойством <xref:System.DateTimeOffset.Offset%2A> параметра `dateTimeOffset`. Если `dateTimeOffset` не соответствует смещению текущего часового пояса относительно времени в формате UTC, метод преобразует это время во время в текущем часовом поясе. Затем он определяет, является ли дата и время летним временем.  
  
 Если часовой пояс, представленный объектом <xref:System.TimeZoneInfo>, не поддерживает переход на летнее время, метод всегда возвращает `false`. Чтобы определить, поддерживает ли часовой пояс летнее время, извлеките значение его свойства <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Значение даты и времени.</param>
        <summary>Указывает, являются ли определенная дата и время допустимыми.</summary>
        <returns>Значение <see langword="true" />, если значение <paramref name="dateTime" /> недопустимо; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Недопустимое время попадает в диапазон времени для текущего часового пояса, который не может быть сопоставлен с временем в формате UTC из-за применения правила коррекции. Как правило, при переходе на летнее время происходит неверное время. Иллюстрации см. в разделе "пример".  
  
 Значение свойства <xref:System.DateTime.Kind%2A> параметра `dateTime` влияет на то, представляет ли `dateTime` недопустимое время, как показано в следующей таблице.  
  
|Свойство DateTime. Kind|Объект TimeZoneInfo (если применимо)|Поведение|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Определяет, является ли время недопустимым.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> или неместный часовой пояс.|Преобразует `dateTime` во время <xref:System.TimeZoneInfo> объекта и возвращает `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Неприменимо.|Предполагается, `dateTime` является временем <xref:System.TimeZoneInfo> объекта и определяет, является ли он недопустимым.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Неприменимо.|Возвращает `false`.|  
  
   
  
## Examples  
 В тихоокеанском часовом поясе летнее время начинается с 2:00 утра. 2 апреля 2006 г. Следующий код передает время с интервалом в 1 минуту с 1:59 утра. от 2 апреля 2006 г. до 3:01 утра с 2 апреля 2006 к методу <xref:System.TimeZoneInfo.IsInvalidTime%2A> объекта <xref:System.TimeZoneInfo>, представляющего тихоокеанский часовой пояс. Выходные данные консоли показывают, что все значения времени с 2:00 утра от 2 апреля 2006 г. до 2:59 утра 2 апреля 2006 не являются допустимыми.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.TimeZoneInfo" />, представляющий местный часовой пояс.</summary>
        <value>Объект, представляющий местный часовой пояс.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Местный часовой пояс — это часовой пояс на компьютере, на котором выполнялся код.  
  
> [!IMPORTANT]
>  Необходимо всегда обращаться к локальному часовому поясу через свойство <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>, а не назначать местный часовой пояс переменной объекта <xref:System.TimeZoneInfo>. Это предотвращает невозможность сделать недействительным <xref:System.TimeZoneInfo>ную переменную объекта при вызове метода <xref:System.TimeZoneInfo.ClearCachedData%2A>.  
  
 В системах Windows объект <xref:System.TimeZoneInfo>, возвращаемый свойством <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>, отражает флажок **автоматически регулировать часы для летнего времени** в приложении " **Дата и время** " панели управления. Если флажок снят, кэшированная копия местного часового пояса не содержит сведений о летнем времени. Это означает следующее.  
  
-   Метод <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> локального часового пояса возвращает массив, длина которого равна нулю.  
  
-   Свойство <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> местного часового пояса возвращает `false`.  
  
-   Местный часовой пояс не имеет однозначного или недопустимого времени (все вызовы <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> или <xref:System.TimeZoneInfo.IsInvalidTime%2A> возвращают `false`).  
  
-   Все вызовы <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> с отдельным местным временем возвращают значение false.  
  
 Однако это не верно, если ссылка на местный часовой пояс извлекается с помощью метода <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>.  
  
 Свойство <xref:System.TimeZoneInfo.Local%2A> соответствует свойству <xref:System.TimeZone.CurrentTimeZone%2A> класса <xref:System.TimeZone>.  
  
   
  
## Examples  
 В следующем примере извлекается объект <xref:System.TimeZoneInfo>, представляющий местный часовой пояс, и выводится его отображаемое имя, имя стандартного времени и имя перехода на летнее время.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/access-utc-and-local.md">Практическое руководство. Доступ к предварительно определенным объектам UTC и объектам местных часовых поясов</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает отображаемое имя для зимнего времени часового пояса.</summary>
        <value>Отображаемое имя для зимнего времени часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отображаемое имя локализуется на основе языка и региональных параметров, установленных в операционной системе Windows.  
  
 Свойство <xref:System.TimeZoneInfo.StandardName%2A> идентично свойству <xref:System.TimeZone.StandardName%2A> класса <xref:System.TimeZone>.  
  
 Если языком операционной системы является английский, значение свойства <xref:System.TimeZoneInfo.StandardName%2A> обычно, но не всегда, идентично свойству <xref:System.TimeZoneInfo.Id%2A>.  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `DisplayDateWithTimeZoneName`, который использует метод <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>, чтобы определить, следует ли отображать имя стандартного времени часового пояса или имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, заданы ли для часового пояса какие-либо правила перехода на летнее время.</summary>
        <value>Значение <see langword="true" />, если часовой пояс поддерживает летнее время; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение свойства <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> для местного часового пояса, возвращаемого свойством <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>, отражает установленный на панели управления флажок приложения **даты и времени** , который определяет, будет ли система автоматически корректировать переход на летнее время. Если флажок не установлен или для часового пояса не отображается флажок, значение этого свойства равно `false`.  
  
   
  
## Examples  
 В следующем примере извлекается коллекция всех часовых поясов, доступных в локальной системе, и отображаются имена тех, которые не поддерживают переход на летнее время.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, который инициировал обратный вызов. Данная функциональная возможность для этого параметра в настоящее время не реализуется.</param>
        <summary>Выполняется после завершения десериализации объекта.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Объект <see cref="T:System.TimeZoneInfo" /> содержит недопустимые или поврежденные данные.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который требуется заполнить данными.</param>
        <param name="context">Целевой объект сериализации (см. раздел, посвященный структуре <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="info" /> содержит значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для немедленного вызывающего объекта. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует текущий объект <see cref="T:System.TimeZoneInfo" /> в сериализованную строку.</summary>
        <returns>Строка, представляющая текущий объект <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложения, зависящие от часовых поясов, которые обычно не определяются в реестре систем Windows или [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и макоскан, могут использовать метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> для создания экземпляров необходимых часовых поясов как <xref:System.TimeZoneInfo> объектов. Затем приложение может вызвать метод <xref:System.TimeZoneInfo.ToSerializedString%2A> для преобразования объекта часового пояса в строку.  
  
 Объект <xref:System.TimeZoneInfo> также должен храниться в расположении, где приложение может получить его при необходимости. Возможные расположения:  
  
-   Реестр систем Windows.  
  
-   Файл ресурсов приложения.  
  
-   Внешний файл, например текстовый файл.  
  
   
  
## Examples  
 В следующем примере предпринимается попытка извлечь часовой пояс Антарктида/Южной полюса из локальной системы. В случае сбоя код пытается получить сведения о часовом поясе из текстового файла в каталоге приложения. Если эта попытка завершается неудачно, код создает часовой пояс и записывает сведения о нем в текстовый файл.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="~/docs/standard/datetime/save-time-zones-to-an-embedded-resource.md">Практическое руководство. Сохранение часовых поясов во внедренном ресурсе</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает отображаемое имя текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение свойства <see cref="P:System.TimeZoneInfo.DisplayName" /> текущего объекта <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При назначении коллекции, содержащей <xref:System.TimeZoneInfo> объекты, в элемент управления "список", например элемент управления <xref:System.Windows.Forms.ListBox>, элемент управления автоматически вызывает метод <xref:System.TimeZoneInfo.ToString%2A> для извлечения строки, описывающей каждый объект, который должен быть представлен в списке. В результате не нужно хранить осмысленное описание объекта в виде строки, и пользователю не нужно использовать эту строку для извлечения объекта из коллекции. Дополнительные сведения см. в разделе [руководство. перечисление часовых поясов, имеющихся на компьютере](~/docs/standard/datetime/enumerate-time-zones.md) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.TimeZoneInfo" />, представляющий часовой пояс UTC.</summary>
        <value>Объект, представляющий часовой пояс UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это встроенный объект; сведения об этом <xref:System.TimeZoneInfo>ном объекте не извлекаются из реестра в системах Windows и из [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS.  
  
> [!IMPORTANT]
>  Всегда следует обращаться к зоне времени в формате UTC через свойство <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, вместо того чтобы назначать часовой пояс UTC в переменную объекта <xref:System.TimeZoneInfo>. Это предотвращает невозможность сделать недействительным <xref:System.TimeZoneInfo>ную переменную объекта при вызове метода <xref:System.TimeZoneInfo.ClearCachedData%2A>.  
  
 Время в формате UTC раньше называлось временем по Гринвичу (GMT).  
  
   
  
## Examples  
 В следующем примере извлекается объект <xref:System.TimeZoneInfo>, представляющий время в формате UTC, и выводится его отображаемое имя, имя стандартного времени и имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/access-utc-and-local.md">Практическое руководство. Доступ к предварительно определенным объектам UTC и объектам местных часовых поясов</related>
      </Docs>
    </Member>
  </Members>
</Type>
