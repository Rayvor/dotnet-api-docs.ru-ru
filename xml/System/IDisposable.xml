<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a86a39d23ff33ea43e699c68a046a3058b4a37d9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70568755" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для освобождения неуправляемых ресурсов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В основном этот интерфейс используется для высвобождения неуправляемых ресурсов. Сборщик мусора автоматически освобождает память, выделенную управляемому объекту, если этот объект больше не используется. Однако невозможно предсказать, когда произойдет сборка мусора. Более того, сборщик мусора не имеет сведений о неуправляемых ресурсах, таких как дескрипторы окон, или открытых файлах и потоках.  
  
 <xref:System.IDisposable.Dispose%2A> Используйте метод этого интерфейса для явного освобождения неуправляемых ресурсов в сочетании с сборщиком мусора. Потребитель объекта может вызвать этот метод, если объект больше не нужен.  
  
> [!WARNING]
>  Это коренное изменение для добавления <xref:System.IDisposable> интерфейса в существующий класс. Поскольку уже существующие потребители типа не могут вызывать <xref:System.IDisposable.Dispose%2A>, нельзя быть уверенным, что неуправляемые ресурсы, удерживаемые типом, будут освобождены.  
  
 Поскольку реализация вызывается потребителем типа, когда ресурсы, принадлежащие экземпляру, больше не нужны, необходимо либо заключить управляемый объект <xref:System.Runtime.InteropServices.SafeHandle> в (рекомендуемый альтернативный вариант), либо переопределить <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> <xref:System.Object.Finalize%2A?displayProperty=nameWithType>значение, чтобы освободить неуправляемые ресурсы в событии, которое пользователь забыл вызвать <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  В .NET Framework C++ компилятор поддерживает детерминированное удаление ресурсов и не допускает прямую реализацию <xref:System.IDisposable.Dispose%2A> метода.  
  
 Подробное обсуждение использования этого интерфейса и <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метода см. в разделах [сборка мусора](~/docs/standard/garbage-collection/index.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) .  
  
## <a name="using-an-object-that-implements-idisposable"></a>Использование объекта, реализующего IDisposable  
 Если приложение просто использует объект, реализующий <xref:System.IDisposable> интерфейс, следует вызвать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализацию объекта, когда вы завершите его использование. В зависимости от языка программирования это можно сделать одним из двух способов:  
  
-   С помощью языковой конструкции, такой как `using` оператор в C# и Visual Basic.  
  
-   Путем заключения вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> в / реализацию `try` в блоке. `finally`  
  
> [!NOTE]
>  Документация по типам, которые <xref:System.IDisposable> реализуют, обратите внимание на то, что <xref:System.IDisposable.Dispose%2A> в действительности и включает напоминание для вызова его реализации.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>Оператор C# и Visual Basic using  
 Если язык поддерживает конструкцию, такую как оператор [using](~/docs/csharp/language-reference/keywords/using.md) в C# , и оператор [using](~/docs/visual-basic/language-reference/statements/using-statement.md) в Visual Basic, его можно использовать вместо явного вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> . В следующем примере этот подход используется при определении `WordCount` класса, сохраняющего сведения о файле и количестве слов в нем.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 Эта `using` инструкция на самом деле является синтаксическим удобством. Во время компиляции языковой компилятор реализует промежуточный язык (IL) для `try` / `finally` блока.  
  
 Дополнительные сведения об `using` инструкции см. в разделах [инструкция using](~/docs/visual-basic/language-reference/statements/using-statement.md) или [инструкции по использованию](~/docs/csharp/language-reference/keywords/using-statement.md) .  
  
### <a name="the-tryfinally-block"></a>Блок try/finally  
 Если язык программирования не `using` поддерживает конструкцию, подобную инструкции в C# или Visual Basic, или если вы предпочитаете не использовать ее, можно вызвать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализацию из блока `try` `finally`  / оператор. `finally` Следующий пример заменяет `using` блок в предыдущем / примере `try` `finally` блоком.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Дополнительные сведения о шаблоне `try` см. в / `finally` разделе [try... Перехватить... Оператор finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)или [try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Использование IDisposable  
 Следует реализовывать <xref:System.IDisposable> , только если тип использует неуправляемые ресурсы напрямую. Потребители вашего типа могут вызывать вашу <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализацию для освобождения ресурсов, когда экземпляр больше не нужен. Чтобы обрабатывать случаи, в которых они не вызывают <xref:System.IDisposable.Dispose%2A>ошибку, следует использовать класс, производный от <xref:System.Runtime.InteropServices.SafeHandle> , чтобы создать оболочку для неуправляемых ресурсов, <xref:System.Object.Finalize%2A?displayProperty=nameWithType> или переопределить метод для ссылочного типа. В любом случае используется <xref:System.IDisposable.Dispose%2A> метод для выполнения любой очистки, необходимой после использования неуправляемых ресурсов, таких как освобождение, освобождение или сброс неуправляемых ресурсов.  
  
> [!IMPORTANT]
>  При определении базового класса, использующего неуправляемые ресурсы и имеющего или, скорее всего, подклассов, которые должны быть удалены, следует реализовать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> метод и предоставить вторую `Dispose`перегрузку, как обсуждалось в следующей раздела.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable и иерархия наследования  
 Базовый класс с подклассами, которые должны быть уничтожены, <xref:System.IDisposable> должен реализовываться следующим образом. Этот шаблон следует использовать при реализации <xref:System.IDisposable> любого типа, который не является `sealed` (`NotInheritable` в Visual Basic).  
  
-   Он должен предоставлять один открытый, не виртуальный <xref:System.IDisposable.Dispose> метод и защищенный виртуальный `Dispose(Boolean disposing)` метод.  
  
-   Метод должен вызывать `Dispose(true)` и отключать завершение для повышения производительности. <xref:System.IDisposable.Dispose>  
  
-   Базовый тип не должен содержать все завершения.  
  
 Следующий фрагмент кода отражает шаблон удаления для базовых классов. Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 При переопределении <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метода класс должен реализовать следующий шаблон.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Подклассы должны реализовывать удаляемый шаблон следующим образом:  
  
-   Они должны переопределить `Dispose(Boolean)` и вызвать реализацию базового класса `Dispose(Boolean)`.  
  
-   Они могут предоставлять завершение при необходимости. Метод завершения должен вызвать `Dispose(false)`.  
  
 Обратите внимание, что производные классы сами <xref:System.IDisposable> по себе не реализуют интерфейс и не <xref:System.IDisposable.Dispose%2A> включают метод без параметров. Они переопределяют только метод базового `Dispose(Boolean)` класса.  
  
 Следующий фрагмент кода отражает шаблон удаления для производных классов. Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 В следующем примере показано, как создать класс ресурсов, реализующий <xref:System.IDisposable> интерфейс.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет определяемые приложением задачи, связанные с удалением, высвобождением или сбросом неуправляемых ресурсов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы закрыть или освободить неуправляемые ресурсы, такие как файлы, потоки и дескрипторы, удерживаемые экземпляром класса, реализующего этот интерфейс. По соглашению этот метод используется для всех задач, связанных с освобождением ресурсов, удерживаемых объектом, или подготовки объекта к повторному использованию.  
  
> [!WARNING]
>  Если используется класс, реализующий <xref:System.IDisposable> интерфейс, следует вызвать его <xref:System.IDisposable.Dispose%2A> реализацию по завершении использования класса. Дополнительные сведения см. в разделе <xref:System.IDisposable> "использование объекта, реализующего интерфейс IDisposable" статьи.  
  
 При реализации этого метода убедитесь, что все удерживаемые ресурсы освобождаются путем распространения вызова через иерархию вложений. Например, если объект A выделяет объект b, а объект б выделяет объект C, то <xref:System.IDisposable.Dispose%2A> реализация метода должна вызываться <xref:System.IDisposable.Dispose%2A> в B, который должен в свою очередь вызывать <xref:System.IDisposable.Dispose%2A> на языке c.  
  
> [!IMPORTANT]
>  C++ Компилятор поддерживает детерминированное удаление ресурсов и не допускает прямой реализации <xref:System.IDisposable.Dispose%2A> метода.  
  
 Объект также должен вызывать <xref:System.IDisposable.Dispose%2A> метод своего базового класса, если базовый класс реализует. <xref:System.IDisposable> Дополнительные сведения о реализации <xref:System.IDisposable> в базовом классе и его подклассах см. в подразделе <xref:System.IDisposable> "IDisposable и иерархия наследования" статьи.  
  
 Если <xref:System.IDisposable.Dispose%2A> метод объекта вызывается более одного раза, объект должен игнорировать все вызовы после первого. Объект не должен вызывать исключение, если его <xref:System.IDisposable.Dispose%2A> метод вызывается несколько раз. Методы экземпляра, отличные <xref:System.IDisposable.Dispose%2A> от, могут <xref:System.ObjectDisposedException> вызывать исключение, когда ресурсы уже удалены.  
  
 Пользователи могут ожидать, что тип ресурса будет использовать определенное соглашение для обозначения выделенного состояния в сравнении с освобожденным состоянием. Примером этого являются классы потоков, которые обычно считаются открытыми или закрытыми. Разработчик класса, имеющего такое соглашение, может выбрать реализацию открытого метода с настроенным именем, например `Close`, который <xref:System.IDisposable.Dispose%2A> вызывает метод.  
  
 Поскольку метод должен вызываться явным образом, всегда существует опасность того, что неуправляемые ресурсы не будут освобождены, так как потребитель объекта не может вызвать его <xref:System.IDisposable.Dispose%2A> метод. <xref:System.IDisposable.Dispose%2A> Избежать этого можно двумя способами:  
  
-   Заключите управляемый ресурс в объект, производный от <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Затем <xref:System.IDisposable.Dispose%2A> реализация <xref:System.IDisposable.Dispose%2A> вызывает метод <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>  экземпляров. Дополнительные сведения см. в <xref:System.Object.Finalize%2A?displayProperty=nameWithType> разделе "альтернативное число SafeHandle" статьи.  
  
-   Реализуйте метод завершения для освобождения ресурсов, <xref:System.IDisposable.Dispose%2A> если не вызывается. По умолчанию сборщик мусора автоматически вызывает метод завершения объекта перед освобождением его памяти. Однако при <xref:System.IDisposable.Dispose%2A> вызове метода обычно не требуется, чтобы сборщик мусора вызывал метод завершения Dispose объекта. Чтобы предотвратить автоматическое завершение, <xref:System.IDisposable.Dispose%2A> реализации могут <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> вызывать метод.  
  
 При использовании объекта, обращающегося к неуправляемым ресурсам, например <xref:System.IO.StreamWriter>, рекомендуется создать экземпляр `using` с помощью инструкции. Инструкция автоматически закрывает поток и вызывает <xref:System.IDisposable.Dispose%2A> объект, когда код, который его использует, завершился. `using` Пример см. в <xref:System.IO.StreamWriter> описании класса.  
  
   
  
## Examples  
 В следующем примере показано, как можно реализовать <xref:System.IDisposable.Dispose%2A> метод.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
      </Docs>
    </Member>
  </Members>
</Type>
