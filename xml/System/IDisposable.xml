<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a86a39d23ff33ea43e699c68a046a3058b4a37d9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70568755" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7bff2-101">Предоставляет механизм для освобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7bff2-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bff2-102">В основном этот интерфейс используется для высвобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7bff2-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="7bff2-103">Сборщик мусора автоматически освобождает память, выделенную управляемому объекту, если этот объект больше не используется.</span><span class="sxs-lookup"><span data-stu-id="7bff2-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="7bff2-104">Однако невозможно предсказать, когда произойдет сборка мусора.</span><span class="sxs-lookup"><span data-stu-id="7bff2-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="7bff2-105">Более того, сборщик мусора не имеет сведений о неуправляемых ресурсах, таких как дескрипторы окон, или открытых файлах и потоках.</span><span class="sxs-lookup"><span data-stu-id="7bff2-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="7bff2-106"><xref:System.IDisposable.Dispose%2A> Используйте метод этого интерфейса для явного освобождения неуправляемых ресурсов в сочетании с сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="7bff2-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="7bff2-107">Потребитель объекта может вызвать этот метод, если объект больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="7bff2-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7bff2-108">Это коренное изменение для добавления <xref:System.IDisposable> интерфейса в существующий класс.</span><span class="sxs-lookup"><span data-stu-id="7bff2-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="7bff2-109">Поскольку уже существующие потребители типа не могут вызывать <xref:System.IDisposable.Dispose%2A>, нельзя быть уверенным, что неуправляемые ресурсы, удерживаемые типом, будут освобождены.</span><span class="sxs-lookup"><span data-stu-id="7bff2-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="7bff2-110">Поскольку реализация вызывается потребителем типа, когда ресурсы, принадлежащие экземпляру, больше не нужны, необходимо либо заключить управляемый объект <xref:System.Runtime.InteropServices.SafeHandle> в (рекомендуемый альтернативный вариант), либо переопределить <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> <xref:System.Object.Finalize%2A?displayProperty=nameWithType>значение, чтобы освободить неуправляемые ресурсы в событии, которое пользователь забыл вызвать <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7bff2-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7bff2-111">В .NET Framework C++ компилятор поддерживает детерминированное удаление ресурсов и не допускает прямую реализацию <xref:System.IDisposable.Dispose%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="7bff2-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7bff2-112">Подробное обсуждение использования этого интерфейса и <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метода см. в разделах [сборка мусора](~/docs/standard/garbage-collection/index.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) .</span><span class="sxs-lookup"><span data-stu-id="7bff2-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="7bff2-113">Использование объекта, реализующего IDisposable</span><span class="sxs-lookup"><span data-stu-id="7bff2-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="7bff2-114">Если приложение просто использует объект, реализующий <xref:System.IDisposable> интерфейс, следует вызвать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализацию объекта, когда вы завершите его использование.</span><span class="sxs-lookup"><span data-stu-id="7bff2-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="7bff2-115">В зависимости от языка программирования это можно сделать одним из двух способов:</span><span class="sxs-lookup"><span data-stu-id="7bff2-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="7bff2-116">С помощью языковой конструкции, такой как `using` оператор в C# и Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7bff2-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="7bff2-117">Путем заключения вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> в / реализацию `try` в блоке. `finally`</span><span class="sxs-lookup"><span data-stu-id="7bff2-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7bff2-118">Документация по типам, которые <xref:System.IDisposable> реализуют, обратите внимание на то, что <xref:System.IDisposable.Dispose%2A> в действительности и включает напоминание для вызова его реализации.</span><span class="sxs-lookup"><span data-stu-id="7bff2-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="7bff2-119">Оператор C# и Visual Basic using</span><span class="sxs-lookup"><span data-stu-id="7bff2-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="7bff2-120">Если язык поддерживает конструкцию, такую как оператор [using](~/docs/csharp/language-reference/keywords/using.md) в C# , и оператор [using](~/docs/visual-basic/language-reference/statements/using-statement.md) в Visual Basic, его можно использовать вместо явного вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="7bff2-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="7bff2-121">В следующем примере этот подход используется при определении `WordCount` класса, сохраняющего сведения о файле и количестве слов в нем.</span><span class="sxs-lookup"><span data-stu-id="7bff2-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="7bff2-122">Эта `using` инструкция на самом деле является синтаксическим удобством.</span><span class="sxs-lookup"><span data-stu-id="7bff2-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="7bff2-123">Во время компиляции языковой компилятор реализует промежуточный язык (IL) для `try` / `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="7bff2-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="7bff2-124">Дополнительные сведения об `using` инструкции см. в разделах [инструкция using](~/docs/visual-basic/language-reference/statements/using-statement.md) или [инструкции по использованию](~/docs/csharp/language-reference/keywords/using-statement.md) .</span><span class="sxs-lookup"><span data-stu-id="7bff2-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="7bff2-125">Блок try/finally</span><span class="sxs-lookup"><span data-stu-id="7bff2-125">The Try/Finally block</span></span>  
 <span data-ttu-id="7bff2-126">Если язык программирования не `using` поддерживает конструкцию, подобную инструкции в C# или Visual Basic, или если вы предпочитаете не использовать ее, можно вызвать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализацию из блока `try` `finally`  / оператор. `finally`</span><span class="sxs-lookup"><span data-stu-id="7bff2-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="7bff2-127">Следующий пример заменяет `using` блок в предыдущем / примере `try` `finally` блоком.</span><span class="sxs-lookup"><span data-stu-id="7bff2-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="7bff2-128">Дополнительные сведения о шаблоне `try` см. в / `finally` разделе [try... Перехватить... Оператор finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)или [try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="7bff2-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="7bff2-129">Использование IDisposable</span><span class="sxs-lookup"><span data-stu-id="7bff2-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="7bff2-130">Следует реализовывать <xref:System.IDisposable> , только если тип использует неуправляемые ресурсы напрямую.</span><span class="sxs-lookup"><span data-stu-id="7bff2-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="7bff2-131">Потребители вашего типа могут вызывать вашу <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализацию для освобождения ресурсов, когда экземпляр больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="7bff2-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="7bff2-132">Чтобы обрабатывать случаи, в которых они не вызывают <xref:System.IDisposable.Dispose%2A>ошибку, следует использовать класс, производный от <xref:System.Runtime.InteropServices.SafeHandle> , чтобы создать оболочку для неуправляемых ресурсов, <xref:System.Object.Finalize%2A?displayProperty=nameWithType> или переопределить метод для ссылочного типа.</span><span class="sxs-lookup"><span data-stu-id="7bff2-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="7bff2-133">В любом случае используется <xref:System.IDisposable.Dispose%2A> метод для выполнения любой очистки, необходимой после использования неуправляемых ресурсов, таких как освобождение, освобождение или сброс неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7bff2-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7bff2-134">При определении базового класса, использующего неуправляемые ресурсы и имеющего или, скорее всего, подклассов, которые должны быть удалены, следует реализовать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> метод и предоставить вторую `Dispose`перегрузку, как обсуждалось в следующей раздела.</span><span class="sxs-lookup"><span data-stu-id="7bff2-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="7bff2-135">IDisposable и иерархия наследования</span><span class="sxs-lookup"><span data-stu-id="7bff2-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="7bff2-136">Базовый класс с подклассами, которые должны быть уничтожены, <xref:System.IDisposable> должен реализовываться следующим образом.</span><span class="sxs-lookup"><span data-stu-id="7bff2-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="7bff2-137">Этот шаблон следует использовать при реализации <xref:System.IDisposable> любого типа, который не является `sealed` (`NotInheritable` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7bff2-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="7bff2-138">Он должен предоставлять один открытый, не виртуальный <xref:System.IDisposable.Dispose> метод и защищенный виртуальный `Dispose(Boolean disposing)` метод.</span><span class="sxs-lookup"><span data-stu-id="7bff2-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="7bff2-139">Метод должен вызывать `Dispose(true)` и отключать завершение для повышения производительности. <xref:System.IDisposable.Dispose></span><span class="sxs-lookup"><span data-stu-id="7bff2-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="7bff2-140">Базовый тип не должен содержать все завершения.</span><span class="sxs-lookup"><span data-stu-id="7bff2-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="7bff2-141">Следующий фрагмент кода отражает шаблон удаления для базовых классов.</span><span class="sxs-lookup"><span data-stu-id="7bff2-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="7bff2-142">Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="7bff2-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="7bff2-143">При переопределении <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метода класс должен реализовать следующий шаблон.</span><span class="sxs-lookup"><span data-stu-id="7bff2-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="7bff2-144">Подклассы должны реализовывать удаляемый шаблон следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7bff2-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="7bff2-145">Они должны переопределить `Dispose(Boolean)` и вызвать реализацию базового класса `Dispose(Boolean)`.</span><span class="sxs-lookup"><span data-stu-id="7bff2-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="7bff2-146">Они могут предоставлять завершение при необходимости.</span><span class="sxs-lookup"><span data-stu-id="7bff2-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="7bff2-147">Метод завершения должен вызвать `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="7bff2-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="7bff2-148">Обратите внимание, что производные классы сами <xref:System.IDisposable> по себе не реализуют интерфейс и не <xref:System.IDisposable.Dispose%2A> включают метод без параметров.</span><span class="sxs-lookup"><span data-stu-id="7bff2-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="7bff2-149">Они переопределяют только метод базового `Dispose(Boolean)` класса.</span><span class="sxs-lookup"><span data-stu-id="7bff2-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="7bff2-150">Следующий фрагмент кода отражает шаблон удаления для производных классов.</span><span class="sxs-lookup"><span data-stu-id="7bff2-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="7bff2-151">Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="7bff2-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="7bff2-152">В следующем примере показано, как создать класс ресурсов, реализующий <xref:System.IDisposable> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="7bff2-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="7bff2-153">Реализация метода Dispose</span><span class="sxs-lookup"><span data-stu-id="7bff2-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7bff2-154">Выполняет определяемые приложением задачи, связанные с удалением, высвобождением или сбросом неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7bff2-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bff2-155">Используйте этот метод, чтобы закрыть или освободить неуправляемые ресурсы, такие как файлы, потоки и дескрипторы, удерживаемые экземпляром класса, реализующего этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="7bff2-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="7bff2-156">По соглашению этот метод используется для всех задач, связанных с освобождением ресурсов, удерживаемых объектом, или подготовки объекта к повторному использованию.</span><span class="sxs-lookup"><span data-stu-id="7bff2-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7bff2-157">Если используется класс, реализующий <xref:System.IDisposable> интерфейс, следует вызвать его <xref:System.IDisposable.Dispose%2A> реализацию по завершении использования класса.</span><span class="sxs-lookup"><span data-stu-id="7bff2-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="7bff2-158">Дополнительные сведения см. в разделе <xref:System.IDisposable> "использование объекта, реализующего интерфейс IDisposable" статьи.</span><span class="sxs-lookup"><span data-stu-id="7bff2-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="7bff2-159">При реализации этого метода убедитесь, что все удерживаемые ресурсы освобождаются путем распространения вызова через иерархию вложений.</span><span class="sxs-lookup"><span data-stu-id="7bff2-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="7bff2-160">Например, если объект A выделяет объект b, а объект б выделяет объект C, то <xref:System.IDisposable.Dispose%2A> реализация метода должна вызываться <xref:System.IDisposable.Dispose%2A> в B, который должен в свою очередь вызывать <xref:System.IDisposable.Dispose%2A> на языке c.</span><span class="sxs-lookup"><span data-stu-id="7bff2-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7bff2-161">C++ Компилятор поддерживает детерминированное удаление ресурсов и не допускает прямой реализации <xref:System.IDisposable.Dispose%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="7bff2-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7bff2-162">Объект также должен вызывать <xref:System.IDisposable.Dispose%2A> метод своего базового класса, если базовый класс реализует. <xref:System.IDisposable></span><span class="sxs-lookup"><span data-stu-id="7bff2-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="7bff2-163">Дополнительные сведения о реализации <xref:System.IDisposable> в базовом классе и его подклассах см. в подразделе <xref:System.IDisposable> "IDisposable и иерархия наследования" статьи.</span><span class="sxs-lookup"><span data-stu-id="7bff2-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="7bff2-164">Если <xref:System.IDisposable.Dispose%2A> метод объекта вызывается более одного раза, объект должен игнорировать все вызовы после первого.</span><span class="sxs-lookup"><span data-stu-id="7bff2-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="7bff2-165">Объект не должен вызывать исключение, если его <xref:System.IDisposable.Dispose%2A> метод вызывается несколько раз.</span><span class="sxs-lookup"><span data-stu-id="7bff2-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="7bff2-166">Методы экземпляра, отличные <xref:System.IDisposable.Dispose%2A> от, могут <xref:System.ObjectDisposedException> вызывать исключение, когда ресурсы уже удалены.</span><span class="sxs-lookup"><span data-stu-id="7bff2-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="7bff2-167">Пользователи могут ожидать, что тип ресурса будет использовать определенное соглашение для обозначения выделенного состояния в сравнении с освобожденным состоянием.</span><span class="sxs-lookup"><span data-stu-id="7bff2-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="7bff2-168">Примером этого являются классы потоков, которые обычно считаются открытыми или закрытыми.</span><span class="sxs-lookup"><span data-stu-id="7bff2-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="7bff2-169">Разработчик класса, имеющего такое соглашение, может выбрать реализацию открытого метода с настроенным именем, например `Close`, который <xref:System.IDisposable.Dispose%2A> вызывает метод.</span><span class="sxs-lookup"><span data-stu-id="7bff2-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7bff2-170">Поскольку метод должен вызываться явным образом, всегда существует опасность того, что неуправляемые ресурсы не будут освобождены, так как потребитель объекта не может вызвать его <xref:System.IDisposable.Dispose%2A> метод. <xref:System.IDisposable.Dispose%2A></span><span class="sxs-lookup"><span data-stu-id="7bff2-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="7bff2-171">Избежать этого можно двумя способами:</span><span class="sxs-lookup"><span data-stu-id="7bff2-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="7bff2-172">Заключите управляемый ресурс в объект, производный от <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7bff2-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7bff2-173">Затем <xref:System.IDisposable.Dispose%2A> реализация <xref:System.IDisposable.Dispose%2A> вызывает метод <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>  экземпляров.</span><span class="sxs-lookup"><span data-stu-id="7bff2-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="7bff2-174">Дополнительные сведения см. в <xref:System.Object.Finalize%2A?displayProperty=nameWithType> разделе "альтернативное число SafeHandle" статьи.</span><span class="sxs-lookup"><span data-stu-id="7bff2-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="7bff2-175">Реализуйте метод завершения для освобождения ресурсов, <xref:System.IDisposable.Dispose%2A> если не вызывается.</span><span class="sxs-lookup"><span data-stu-id="7bff2-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="7bff2-176">По умолчанию сборщик мусора автоматически вызывает метод завершения объекта перед освобождением его памяти.</span><span class="sxs-lookup"><span data-stu-id="7bff2-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="7bff2-177">Однако при <xref:System.IDisposable.Dispose%2A> вызове метода обычно не требуется, чтобы сборщик мусора вызывал метод завершения Dispose объекта.</span><span class="sxs-lookup"><span data-stu-id="7bff2-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="7bff2-178">Чтобы предотвратить автоматическое завершение, <xref:System.IDisposable.Dispose%2A> реализации могут <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> вызывать метод.</span><span class="sxs-lookup"><span data-stu-id="7bff2-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7bff2-179">При использовании объекта, обращающегося к неуправляемым ресурсам, например <xref:System.IO.StreamWriter>, рекомендуется создать экземпляр `using` с помощью инструкции.</span><span class="sxs-lookup"><span data-stu-id="7bff2-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="7bff2-180">Инструкция автоматически закрывает поток и вызывает <xref:System.IDisposable.Dispose%2A> объект, когда код, который его использует, завершился. `using`</span><span class="sxs-lookup"><span data-stu-id="7bff2-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="7bff2-181">Пример см. в <xref:System.IO.StreamWriter> описании класса.</span><span class="sxs-lookup"><span data-stu-id="7bff2-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bff2-182">В следующем примере показано, как можно реализовать <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7bff2-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="7bff2-183">Реализация метода Dispose</span><span class="sxs-lookup"><span data-stu-id="7bff2-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
