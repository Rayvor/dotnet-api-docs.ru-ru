<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65b4026703ae13810dcedc947c7f5655986c8169" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75041456" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для освобождения неуправляемых ресурсов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В основном этот интерфейс используется для высвобождения неуправляемых ресурсов. Сборщик мусора автоматически освобождает память, выделенную управляемому объекту, если этот объект больше не используется. Однако невозможно предсказать, когда произойдет сборка мусора. Более того, сборщик мусора не имеет сведений о неуправляемых ресурсах, таких как дескрипторы окон, или открытых файлах и потоках.  
  
 Используйте метод <xref:System.IDisposable.Dispose%2A> этого интерфейса, чтобы явным образом освободить неуправляемые ресурсы в сочетании с сборщиком мусора. Потребитель объекта может вызвать этот метод, если объект больше не нужен.  
  
> [!WARNING]
>  Добавление <xref:System.IDisposable> интерфейса в существующий класс является критическим изменением. Поскольку уже существующие потребители типа не могут вызывать <xref:System.IDisposable.Dispose%2A>, нельзя быть уверенным в том, что неуправляемые ресурсы, удерживаемые типом, будут освобождены.  
  
 Поскольку реализация <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> вызывается потребителем типа, когда ресурсы, принадлежащие экземпляру, больше не требуются, необходимо либо заключить управляемый объект в <xref:System.Runtime.InteropServices.SafeHandle> (рекомендуемый альтернативный вариант), либо переопределить <xref:System.Object.Finalize%2A?displayProperty=nameWithType> для освобождения неуправляемых ресурсов в случае, если потребитель забудет вызвать <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  В .NET Framework C++ компилятор поддерживает детерминированное удаление ресурсов и не допускает прямой реализации метода <xref:System.IDisposable.Dispose%2A>.  
  
 Подробное обсуждение использования этого интерфейса и метода <xref:System.Object.Finalize%2A?displayProperty=nameWithType> см. в разделах [сборка мусора](~/docs/standard/garbage-collection/index.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) .  
  
## <a name="using-an-object-that-implements-idisposable"></a>Использование объекта, реализующего IDisposable  
 Если приложение просто использует объект, реализующий интерфейс <xref:System.IDisposable>, необходимо вызвать реализацию <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> объекта, когда вы завершите его использование. В зависимости от языка программирования это можно сделать одним из двух способов:  
  
-   С помощью языковой конструкции, такой как оператор `using` в C# и Visual Basic.  
  
-   Путем заключения вызова к реализации <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> в блоке `try`/`finally`.  
  
> [!NOTE]
>  Документация для типов, реализующих <xref:System.IDisposable> Обратите внимание на то, что факт и включает напоминание для вызова своей реализации <xref:System.IDisposable.Dispose%2A>.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>Оператор C# и Visual Basic using  
 Если ваш язык поддерживает конструкцию, такую как оператор [using](~/docs/csharp/language-reference/keywords/using.md) в C# , и оператор [using](~/docs/visual-basic/language-reference/statements/using-statement.md) в Visual Basic, его можно использовать вместо явного вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>. В следующем примере этот подход используется при определении `WordCount` класса, который сохраняет сведения о файле и количестве слов в нем.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 Инструкция `using` на самом деле является синтаксическим удобством. Во время компиляции языковой компилятор реализует промежуточный язык (IL) для `try`/блока `finally`.  
  
 Дополнительные сведения о `using` инструкции см. в разделах инструкция [using](~/docs/visual-basic/language-reference/statements/using-statement.md) или [инструкции по использованию](~/docs/csharp/language-reference/keywords/using-statement.md) .  
  
### <a name="the-tryfinally-block"></a>Блок try/finally  
 Если язык программирования не поддерживает конструкцию, такую как `using` инструкция в C# или Visual Basic, или если вы предпочитаете не использовать ее, то можно вызвать реализацию <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> из `finally` блока инструкции `try`/`finally`. В следующем примере блок `using` в предыдущем примере заменяется `try`ным блоком /`finally`.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Дополнительные сведения о шаблоне `finally` /`try`см. в разделе [try... Перехватить... Оператор finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)или [try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Использование IDisposable  
 <xref:System.IDisposable> следует реализовывать, только если тип использует неуправляемые ресурсы напрямую. Потребители вашего типа могут вызывать вашу реализацию <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> для освобождения ресурсов, когда экземпляр больше не нужен. Чтобы обрабатывать случаи, в которых они не вызывают <xref:System.IDisposable.Dispose%2A>, следует либо использовать класс, производный от <xref:System.Runtime.InteropServices.SafeHandle>, чтобы заключить неуправляемые ресурсы, либо переопределить метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType> для ссылочного типа. В любом случае используется метод <xref:System.IDisposable.Dispose%2A> для выполнения любой очистки, необходимой после использования неуправляемых ресурсов, таких как освобождение, освобождение или сброс неуправляемых ресурсов.  
  
> [!IMPORTANT]
>  При определении базового класса, использующего неуправляемые ресурсы и имеющего или, скорее всего, подклассов, которые должны быть удалены, следует реализовать метод <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> и предоставить вторую перегрузку `Dispose`, как описано в следующем разделе.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable и иерархия наследования  
 Базовый класс с подклассами, которые должны быть неудаляемыми, должен реализовывать <xref:System.IDisposable> следующим образом. Этот шаблон следует использовать всякий раз, когда вы реализуете <xref:System.IDisposable> для любого типа, который не `sealed` (`NotInheritable` в Visual Basic).  
  
-   Он должен предоставлять один открытый, невиртуальный <xref:System.IDisposable.Dispose> метод и защищенный виртуальный `Dispose(Boolean disposing)` метод.  
  
-   Метод <xref:System.IDisposable.Dispose> должен вызывать `Dispose(true)` и отключать завершение для повышения производительности.  
  
-   базовый тип не должен включать никакие методы завершения.  
  
 Следующий фрагмент кода отражает шаблон удаления для базовых классов. Предполагается, что тип не переопределяет метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 Если вы переопределяете метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>, класс должен реализовать следующий шаблон.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Подклассы должны реализовывать удаляемость следующим образом:  
  
-   Они должны переопределить `Dispose(Boolean)` и вызвать реализацию базового класса `Dispose(Boolean)`.  
  
-   при необходимости они могут предоставлять метод завершения. Метод завершения должен вызвать `Dispose(false)`.  
  
 Обратите внимание, что производные классы сами по себе не реализуют интерфейс <xref:System.IDisposable> и не включают метод <xref:System.IDisposable.Dispose%2A> без параметров. Они переопределяют только базовый класс `Dispose(Boolean)` метод.  
  
 Следующий фрагмент кода отражает шаблон удаления для производных классов. Предполагается, что тип не переопределяет метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 В следующем примере показано, как создать класс ресурсов, реализующий интерфейс <xref:System.IDisposable>.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы закрыть или освободить неуправляемые ресурсы, такие как файлы, потоки и дескрипторы, удерживаемые экземпляром класса, реализующего этот интерфейс. По соглашению этот метод используется для всех задач, связанных с освобождением ресурсов, удерживаемых объектом, или подготовки объекта к повторному использованию.  
  
> [!WARNING]
>  При использовании класса, реализующего интерфейс <xref:System.IDisposable>, следует вызвать его реализацию <xref:System.IDisposable.Dispose%2A> по завершении использования класса. Дополнительные сведения см. в разделе "использование объекта, реализующего IDisposable" статьи <xref:System.IDisposable>.  
  
 При реализации этого метода убедитесь, что все удерживаемые ресурсы освобождаются путем распространения вызова через иерархию вложений. Например, если объект A выделяет объект B, а объект б выделяет объект C, то реализация <xref:System.IDisposable.Dispose%2A> должна вызывать <xref:System.IDisposable.Dispose%2A> на B, который должен в свою очередь вызывать <xref:System.IDisposable.Dispose%2A> в C.  
  
> [!IMPORTANT]
>  C++ Компилятор поддерживает детерминированное удаление ресурсов и не допускает прямой реализации метода <xref:System.IDisposable.Dispose%2A>.  
  
 Объект должен также вызывать метод <xref:System.IDisposable.Dispose%2A> своего базового класса, если базовый класс реализует <xref:System.IDisposable>. Дополнительные сведения о реализации <xref:System.IDisposable> в базовом классе и его подклассах см. в подразделе «IDisposable и иерархия наследования» раздела <xref:System.IDisposable>.  
  
 Если метод <xref:System.IDisposable.Dispose%2A> объекта вызывается более одного раза, объект должен пропускать все вызовы после первого. Объект не должен вызывать исключение, если его метод <xref:System.IDisposable.Dispose%2A> вызывается несколько раз. Методы экземпляра, отличные от <xref:System.IDisposable.Dispose%2A>, могут вызывать <xref:System.ObjectDisposedException>, когда ресурсы уже удалены.  
  
 Пользователи могут ожидать, что тип ресурса будет использовать определенное соглашение для обозначения выделенного состояния в сравнении с освобожденным состоянием. Примером этого являются классы потоков, которые обычно считаются открытыми или закрытыми. Разработчик класса, имеющего такое соглашение, может выбрать реализацию открытого метода с настраиваемым именем, например `Close`, который вызывает метод <xref:System.IDisposable.Dispose%2A>.  
  
 Поскольку метод <xref:System.IDisposable.Dispose%2A> должен вызываться явным образом, всегда существует опасность того, что неуправляемые ресурсы не будут освобождены, так как потребитель объекта не может вызвать его метод <xref:System.IDisposable.Dispose%2A>. Избежать этого можно двумя способами:  
  
-   Заключите управляемый ресурс в объект, производный от <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Затем реализация <xref:System.IDisposable.Dispose%2A> вызывает метод <xref:System.IDisposable.Dispose%2A> экземпляров <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Дополнительные сведения см. в разделе "альтернативный класс SafeHandle" статьи <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.  
  
-   Реализуйте метод завершения для освобождения ресурсов, если <xref:System.IDisposable.Dispose%2A> не вызван. По умолчанию сборщик мусора автоматически вызывает метод завершения объекта перед освобождением его памяти. Однако если был вызван метод <xref:System.IDisposable.Dispose%2A>, то обычно не требуется, чтобы сборщик мусора вызывал метод завершения Dispose объекта. Чтобы предотвратить автоматическое завершение, <xref:System.IDisposable.Dispose%2A> реализации могут вызывать метод <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>.  
  
 При использовании объекта, обращающегося к неуправляемым ресурсам, например <xref:System.IO.StreamWriter>, рекомендуется создать экземпляр с помощью инструкции `using`. Инструкция `using` автоматически закрывает поток и вызывает <xref:System.IDisposable.Dispose%2A> объекта при завершении кода, который его использует. Пример см. в описании класса <xref:System.IO.StreamWriter>.  
  
   
  
## Examples  
 В следующем примере показано, как можно реализовать метод <xref:System.IDisposable.Dispose%2A>.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
      </Docs>
    </Member>
  </Members>
</Type>
