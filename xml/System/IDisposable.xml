<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65b4026703ae13810dcedc947c7f5655986c8169" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75041456" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7c42e-101">Предоставляет механизм для освобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7c42e-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c42e-102">В основном этот интерфейс используется для высвобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7c42e-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="7c42e-103">Сборщик мусора автоматически освобождает память, выделенную управляемому объекту, если этот объект больше не используется.</span><span class="sxs-lookup"><span data-stu-id="7c42e-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="7c42e-104">Однако невозможно предсказать, когда произойдет сборка мусора.</span><span class="sxs-lookup"><span data-stu-id="7c42e-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="7c42e-105">Более того, сборщик мусора не имеет сведений о неуправляемых ресурсах, таких как дескрипторы окон, или открытых файлах и потоках.</span><span class="sxs-lookup"><span data-stu-id="7c42e-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="7c42e-106">Используйте метод <xref:System.IDisposable.Dispose%2A> этого интерфейса, чтобы явным образом освободить неуправляемые ресурсы в сочетании с сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="7c42e-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="7c42e-107">Потребитель объекта может вызвать этот метод, если объект больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="7c42e-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7c42e-108">Добавление <xref:System.IDisposable> интерфейса в существующий класс является критическим изменением.</span><span class="sxs-lookup"><span data-stu-id="7c42e-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="7c42e-109">Поскольку уже существующие потребители типа не могут вызывать <xref:System.IDisposable.Dispose%2A>, нельзя быть уверенным в том, что неуправляемые ресурсы, удерживаемые типом, будут освобождены.</span><span class="sxs-lookup"><span data-stu-id="7c42e-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="7c42e-110">Поскольку реализация <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> вызывается потребителем типа, когда ресурсы, принадлежащие экземпляру, больше не требуются, необходимо либо заключить управляемый объект в <xref:System.Runtime.InteropServices.SafeHandle> (рекомендуемый альтернативный вариант), либо переопределить <xref:System.Object.Finalize%2A?displayProperty=nameWithType> для освобождения неуправляемых ресурсов в случае, если потребитель забудет вызвать <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c42e-111">В .NET Framework C++ компилятор поддерживает детерминированное удаление ресурсов и не допускает прямой реализации метода <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7c42e-112">Подробное обсуждение использования этого интерфейса и метода <xref:System.Object.Finalize%2A?displayProperty=nameWithType> см. в разделах [сборка мусора](~/docs/standard/garbage-collection/index.md) и [Реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) .</span><span class="sxs-lookup"><span data-stu-id="7c42e-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="7c42e-113">Использование объекта, реализующего IDisposable</span><span class="sxs-lookup"><span data-stu-id="7c42e-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="7c42e-114">Если приложение просто использует объект, реализующий интерфейс <xref:System.IDisposable>, необходимо вызвать реализацию <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> объекта, когда вы завершите его использование.</span><span class="sxs-lookup"><span data-stu-id="7c42e-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="7c42e-115">В зависимости от языка программирования это можно сделать одним из двух способов:</span><span class="sxs-lookup"><span data-stu-id="7c42e-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="7c42e-116">С помощью языковой конструкции, такой как оператор `using` в C# и Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7c42e-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="7c42e-117">Путем заключения вызова к реализации <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> в блоке `try`/`finally`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7c42e-118">Документация для типов, реализующих <xref:System.IDisposable> Обратите внимание на то, что факт и включает напоминание для вызова своей реализации <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="7c42e-119">Оператор C# и Visual Basic using</span><span class="sxs-lookup"><span data-stu-id="7c42e-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="7c42e-120">Если ваш язык поддерживает конструкцию, такую как оператор [using](~/docs/csharp/language-reference/keywords/using.md) в C# , и оператор [using](~/docs/visual-basic/language-reference/statements/using-statement.md) в Visual Basic, его можно использовать вместо явного вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="7c42e-121">В следующем примере этот подход используется при определении `WordCount` класса, который сохраняет сведения о файле и количестве слов в нем.</span><span class="sxs-lookup"><span data-stu-id="7c42e-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="7c42e-122">Инструкция `using` на самом деле является синтаксическим удобством.</span><span class="sxs-lookup"><span data-stu-id="7c42e-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="7c42e-123">Во время компиляции языковой компилятор реализует промежуточный язык (IL) для `try`/блока `finally`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="7c42e-124">Дополнительные сведения о `using` инструкции см. в разделах инструкция [using](~/docs/visual-basic/language-reference/statements/using-statement.md) или [инструкции по использованию](~/docs/csharp/language-reference/keywords/using-statement.md) .</span><span class="sxs-lookup"><span data-stu-id="7c42e-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="7c42e-125">Блок try/finally</span><span class="sxs-lookup"><span data-stu-id="7c42e-125">The Try/Finally block</span></span>  
 <span data-ttu-id="7c42e-126">Если язык программирования не поддерживает конструкцию, такую как `using` инструкция в C# или Visual Basic, или если вы предпочитаете не использовать ее, то можно вызвать реализацию <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> из `finally` блока инструкции `try`/`finally`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="7c42e-127">В следующем примере блок `using` в предыдущем примере заменяется `try`ным блоком /`finally`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="7c42e-128">Дополнительные сведения о шаблоне `finally` /`try`см. в разделе [try... Перехватить... Оператор finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)или [try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="7c42e-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="7c42e-129">Использование IDisposable</span><span class="sxs-lookup"><span data-stu-id="7c42e-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="7c42e-130"><xref:System.IDisposable> следует реализовывать, только если тип использует неуправляемые ресурсы напрямую.</span><span class="sxs-lookup"><span data-stu-id="7c42e-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="7c42e-131">Потребители вашего типа могут вызывать вашу реализацию <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> для освобождения ресурсов, когда экземпляр больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="7c42e-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="7c42e-132">Чтобы обрабатывать случаи, в которых они не вызывают <xref:System.IDisposable.Dispose%2A>, следует либо использовать класс, производный от <xref:System.Runtime.InteropServices.SafeHandle>, чтобы заключить неуправляемые ресурсы, либо переопределить метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType> для ссылочного типа.</span><span class="sxs-lookup"><span data-stu-id="7c42e-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="7c42e-133">В любом случае используется метод <xref:System.IDisposable.Dispose%2A> для выполнения любой очистки, необходимой после использования неуправляемых ресурсов, таких как освобождение, освобождение или сброс неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7c42e-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c42e-134">При определении базового класса, использующего неуправляемые ресурсы и имеющего или, скорее всего, подклассов, которые должны быть удалены, следует реализовать метод <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> и предоставить вторую перегрузку `Dispose`, как описано в следующем разделе.</span><span class="sxs-lookup"><span data-stu-id="7c42e-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="7c42e-135">IDisposable и иерархия наследования</span><span class="sxs-lookup"><span data-stu-id="7c42e-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="7c42e-136">Базовый класс с подклассами, которые должны быть неудаляемыми, должен реализовывать <xref:System.IDisposable> следующим образом.</span><span class="sxs-lookup"><span data-stu-id="7c42e-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="7c42e-137">Этот шаблон следует использовать всякий раз, когда вы реализуете <xref:System.IDisposable> для любого типа, который не `sealed` (`NotInheritable` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7c42e-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="7c42e-138">Он должен предоставлять один открытый, невиртуальный <xref:System.IDisposable.Dispose> метод и защищенный виртуальный `Dispose(Boolean disposing)` метод.</span><span class="sxs-lookup"><span data-stu-id="7c42e-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="7c42e-139">Метод <xref:System.IDisposable.Dispose> должен вызывать `Dispose(true)` и отключать завершение для повышения производительности.</span><span class="sxs-lookup"><span data-stu-id="7c42e-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="7c42e-140">базовый тип не должен включать никакие методы завершения.</span><span class="sxs-lookup"><span data-stu-id="7c42e-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="7c42e-141">Следующий фрагмент кода отражает шаблон удаления для базовых классов.</span><span class="sxs-lookup"><span data-stu-id="7c42e-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="7c42e-142">Предполагается, что тип не переопределяет метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="7c42e-143">Если вы переопределяете метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>, класс должен реализовать следующий шаблон.</span><span class="sxs-lookup"><span data-stu-id="7c42e-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="7c42e-144">Подклассы должны реализовывать удаляемость следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7c42e-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="7c42e-145">Они должны переопределить `Dispose(Boolean)` и вызвать реализацию базового класса `Dispose(Boolean)`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="7c42e-146">при необходимости они могут предоставлять метод завершения.</span><span class="sxs-lookup"><span data-stu-id="7c42e-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="7c42e-147">Метод завершения должен вызвать `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="7c42e-148">Обратите внимание, что производные классы сами по себе не реализуют интерфейс <xref:System.IDisposable> и не включают метод <xref:System.IDisposable.Dispose%2A> без параметров.</span><span class="sxs-lookup"><span data-stu-id="7c42e-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="7c42e-149">Они переопределяют только базовый класс `Dispose(Boolean)` метод.</span><span class="sxs-lookup"><span data-stu-id="7c42e-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="7c42e-150">Следующий фрагмент кода отражает шаблон удаления для производных классов.</span><span class="sxs-lookup"><span data-stu-id="7c42e-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="7c42e-151">Предполагается, что тип не переопределяет метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="7c42e-152">В следующем примере показано, как создать класс ресурсов, реализующий интерфейс <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="7c42e-153">Реализация метода Dispose</span><span class="sxs-lookup"><span data-stu-id="7c42e-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7c42e-154">Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="7c42e-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c42e-155">Используйте этот метод, чтобы закрыть или освободить неуправляемые ресурсы, такие как файлы, потоки и дескрипторы, удерживаемые экземпляром класса, реализующего этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="7c42e-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="7c42e-156">По соглашению этот метод используется для всех задач, связанных с освобождением ресурсов, удерживаемых объектом, или подготовки объекта к повторному использованию.</span><span class="sxs-lookup"><span data-stu-id="7c42e-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7c42e-157">При использовании класса, реализующего интерфейс <xref:System.IDisposable>, следует вызвать его реализацию <xref:System.IDisposable.Dispose%2A> по завершении использования класса.</span><span class="sxs-lookup"><span data-stu-id="7c42e-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="7c42e-158">Дополнительные сведения см. в разделе "использование объекта, реализующего IDisposable" статьи <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="7c42e-159">При реализации этого метода убедитесь, что все удерживаемые ресурсы освобождаются путем распространения вызова через иерархию вложений.</span><span class="sxs-lookup"><span data-stu-id="7c42e-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="7c42e-160">Например, если объект A выделяет объект B, а объект б выделяет объект C, то реализация <xref:System.IDisposable.Dispose%2A> должна вызывать <xref:System.IDisposable.Dispose%2A> на B, который должен в свою очередь вызывать <xref:System.IDisposable.Dispose%2A> в C.</span><span class="sxs-lookup"><span data-stu-id="7c42e-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7c42e-161">C++ Компилятор поддерживает детерминированное удаление ресурсов и не допускает прямой реализации метода <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7c42e-162">Объект должен также вызывать метод <xref:System.IDisposable.Dispose%2A> своего базового класса, если базовый класс реализует <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="7c42e-163">Дополнительные сведения о реализации <xref:System.IDisposable> в базовом классе и его подклассах см. в подразделе «IDisposable и иерархия наследования» раздела <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="7c42e-164">Если метод <xref:System.IDisposable.Dispose%2A> объекта вызывается более одного раза, объект должен пропускать все вызовы после первого.</span><span class="sxs-lookup"><span data-stu-id="7c42e-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="7c42e-165">Объект не должен вызывать исключение, если его метод <xref:System.IDisposable.Dispose%2A> вызывается несколько раз.</span><span class="sxs-lookup"><span data-stu-id="7c42e-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="7c42e-166">Методы экземпляра, отличные от <xref:System.IDisposable.Dispose%2A>, могут вызывать <xref:System.ObjectDisposedException>, когда ресурсы уже удалены.</span><span class="sxs-lookup"><span data-stu-id="7c42e-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="7c42e-167">Пользователи могут ожидать, что тип ресурса будет использовать определенное соглашение для обозначения выделенного состояния в сравнении с освобожденным состоянием.</span><span class="sxs-lookup"><span data-stu-id="7c42e-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="7c42e-168">Примером этого являются классы потоков, которые обычно считаются открытыми или закрытыми.</span><span class="sxs-lookup"><span data-stu-id="7c42e-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="7c42e-169">Разработчик класса, имеющего такое соглашение, может выбрать реализацию открытого метода с настраиваемым именем, например `Close`, который вызывает метод <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7c42e-170">Поскольку метод <xref:System.IDisposable.Dispose%2A> должен вызываться явным образом, всегда существует опасность того, что неуправляемые ресурсы не будут освобождены, так как потребитель объекта не может вызвать его метод <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="7c42e-171">Избежать этого можно двумя способами:</span><span class="sxs-lookup"><span data-stu-id="7c42e-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="7c42e-172">Заключите управляемый ресурс в объект, производный от <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7c42e-173">Затем реализация <xref:System.IDisposable.Dispose%2A> вызывает метод <xref:System.IDisposable.Dispose%2A> экземпляров <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="7c42e-174">Дополнительные сведения см. в разделе "альтернативный класс SafeHandle" статьи <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="7c42e-175">Реализуйте метод завершения для освобождения ресурсов, если <xref:System.IDisposable.Dispose%2A> не вызван.</span><span class="sxs-lookup"><span data-stu-id="7c42e-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="7c42e-176">По умолчанию сборщик мусора автоматически вызывает метод завершения объекта перед освобождением его памяти.</span><span class="sxs-lookup"><span data-stu-id="7c42e-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="7c42e-177">Однако если был вызван метод <xref:System.IDisposable.Dispose%2A>, то обычно не требуется, чтобы сборщик мусора вызывал метод завершения Dispose объекта.</span><span class="sxs-lookup"><span data-stu-id="7c42e-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="7c42e-178">Чтобы предотвратить автоматическое завершение, <xref:System.IDisposable.Dispose%2A> реализации могут вызывать метод <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7c42e-179">При использовании объекта, обращающегося к неуправляемым ресурсам, например <xref:System.IO.StreamWriter>, рекомендуется создать экземпляр с помощью инструкции `using`.</span><span class="sxs-lookup"><span data-stu-id="7c42e-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="7c42e-180">Инструкция `using` автоматически закрывает поток и вызывает <xref:System.IDisposable.Dispose%2A> объекта при завершении кода, который его использует.</span><span class="sxs-lookup"><span data-stu-id="7c42e-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="7c42e-181">Пример см. в описании класса <xref:System.IO.StreamWriter>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c42e-182">В следующем примере показано, как можно реализовать метод <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7c42e-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="7c42e-183">Реализация метода Dispose</span><span class="sxs-lookup"><span data-stu-id="7c42e-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
