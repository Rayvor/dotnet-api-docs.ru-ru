<Type Name="ReadOnlySpan&lt;T&gt;" FullName="System.ReadOnlySpan&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e26f1734dd83a9bb230cb83a46b169211840a8f5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172353" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlySpan`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlySpan" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="8cb05-101">Тип элементов в <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-101">The type of items in the <see cref="T:System.ReadOnlySpan`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="8cb05-102">Предоставляет типобезопасную и безопасную для памяти реализацию непрерывной области произвольной памяти только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-102">Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-103">`ReadOnlySpan<T>` — это [структура ссылки](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) , которая выделяется в стеке и никогда не может переключаться на управляемую кучу.</span><span class="sxs-lookup"><span data-stu-id="8cb05-103">`ReadOnlySpan<T>` is a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) that is allocated on the stack and can never escape to the managed heap.</span></span> <span data-ttu-id="8cb05-104">Типы структур ref имеют ряд ограничений, чтобы гарантировать, что их невозможно повысить до управляемой кучи, в том числе что они не могут быть упакованы, захвачены в лямбда-выражениях, назначены переменным типа <xref:System.Object>, назначены `dynamic`ным переменным и не могут реализовывать тип интерфейса.</span><span class="sxs-lookup"><span data-stu-id="8cb05-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, captured in lambda expressions, assigned to variables of type <xref:System.Object>, assigned to `dynamic` variables, and they cannot implement any interface type.</span></span>

<span data-ttu-id="8cb05-105">Экземпляр `ReadOnlySpan<T>` часто используется для ссылки на элементы массива или части массива.</span><span class="sxs-lookup"><span data-stu-id="8cb05-105">A `ReadOnlySpan<T>` instance is often used to reference the elements of an array or a portion of an array.</span></span> <span data-ttu-id="8cb05-106">Однако в отличие от массива, экземпляр `ReadOnlySpan<T>` может указывать на управляемую память, собственную память или управляемую память в стеке.</span><span class="sxs-lookup"><span data-stu-id="8cb05-106">Unlike an array, however, a `ReadOnlySpan<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8cb05-107">Массив, из которого создается объект <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-107">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="8cb05-108">Создает новый объект <see cref="T:System.ReadOnlySpan`1" /> по всему указанному массиву.</span><span class="sxs-lookup"><span data-stu-id="8cb05-108">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-109">Если массив имеет значение null, этот конструктор возвращает `ReadOnlySpan<T>`null.</span><span class="sxs-lookup"><span data-stu-id="8cb05-109">If the array is null, this constructor returns a null `ReadOnlySpan<T>`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer"><span data-ttu-id="8cb05-110">Указатель на начальный адрес указанного числа элементов <typeparamref name="T" /> в памяти.</span><span class="sxs-lookup"><span data-stu-id="8cb05-110">A pointer to the starting address of a specified number of <typeparamref name="T" /> elements in memory.</span></span></param>
        <param name="length"><span data-ttu-id="8cb05-111">Число элементов <typeparamref name="T" />, которые будут включены в <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-111">The number of <typeparamref name="T" /> elements to be included in the <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="8cb05-112">Создает объект <see cref="T:System.ReadOnlySpan`1" /> из указанного числа элементов <typeparamref name="T" />, начиная с заданного адреса памяти.</span><span class="sxs-lookup"><span data-stu-id="8cb05-112">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of <typeparamref name="T" /> elements starting at a specified memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-113">Этот конструктор следует использовать с осторожностью, поскольку он создает произвольно типизированный `T`s из блока памяти.</span><span class="sxs-lookup"><span data-stu-id="8cb05-113">This constructor should be used with care, since it creates arbitrarily typed `T`s from a block of memory.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cb05-114"><paramref name="T" /> является ссылочным типом или содержит ссылки и поэтому не может храниться в неуправляемой памяти.</span><span class="sxs-lookup"><span data-stu-id="8cb05-114"><paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cb05-115"><paramref name="length" /> является отрицательным значением.</span><span class="sxs-lookup"><span data-stu-id="8cb05-115"><paramref name="length" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8cb05-116">Массив, из которого создается объект <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-116">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <param name="start"><span data-ttu-id="8cb05-117">Индекс первого включаемого элемента.</span><span class="sxs-lookup"><span data-stu-id="8cb05-117">The index of the first element to include.</span></span></param>
        <param name="length"><span data-ttu-id="8cb05-118">Число включаемых элементов.</span><span class="sxs-lookup"><span data-stu-id="8cb05-118">The number of elements to include.</span></span></param>
        <summary><span data-ttu-id="8cb05-119">Создает новый объект <see cref="T:System.ReadOnlySpan`1" />, который включает указанное число элементов массива, начиная с указанного индекса.</span><span class="sxs-lookup"><span data-stu-id="8cb05-119">Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

### Remarks

<span data-ttu-id="8cb05-120">Этот метод возвращает `default`, когда `array` `null`.</span><span class="sxs-lookup"><span data-stu-id="8cb05-120">This method returns `default` when `array` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cb05-121"><paramref name="array" /> имеет значение <see langword="null" />, но <paramref name="start" /> или <paramref name="length" /> не равно нулю.</span><span class="sxs-lookup"><span data-stu-id="8cb05-121"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>

<span data-ttu-id="8cb05-122">-или-</span><span class="sxs-lookup"><span data-stu-id="8cb05-122">-or-</span></span>

<span data-ttu-id="8cb05-123"><paramref name="start" /> выходит за пределы растрового массива.</span><span class="sxs-lookup"><span data-stu-id="8cb05-123"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="8cb05-124">-или-</span><span class="sxs-lookup"><span data-stu-id="8cb05-124">-or-</span></span>

<span data-ttu-id="8cb05-125"><paramref name="start" /> и <paramref name="length" /> превышает количество элементов в массиве.</span><span class="sxs-lookup"><span data-stu-id="8cb05-125"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlySpan.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8cb05-126">Диапазон для копирования элементов.</span><span class="sxs-lookup"><span data-stu-id="8cb05-126">The span to copy items into.</span></span></param>
        <summary><span data-ttu-id="8cb05-127">Копирует содержимое этого объекта <see cref="T:System.ReadOnlySpan`1" /> в назначение <see cref="T:System.Span`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-127">Copies the contents of this <see cref="T:System.ReadOnlySpan`1" /> into a destination <see cref="T:System.Span`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-128">Если `source` и `destination` перекрываются, все `source` обрабатывается так, как если бы оно было скопировано во временное расположение до того, как оно будет скопировано в `destination`.</span><span class="sxs-lookup"><span data-stu-id="8cb05-128">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cb05-129"><paramref name="destination" /> короче, чем исходный <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-129"><paramref name="destination" /> is shorter than the source <see cref="T:System.ReadOnlySpan`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ReadOnlySpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ReadOnlySpan&lt;T&gt; Empty { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cb05-130">Возвращает пустой массив <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-130">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <value><span data-ttu-id="8cb05-131">Пустая коллекция типа <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-131">An empty <see cref="T:System.ReadOnlySpan`1" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlySpan.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="8cb05-132">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-132">Not supported.</span></span></param>
        <summary><span data-ttu-id="8cb05-133">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-133">Not supported.</span></span> <span data-ttu-id="8cb05-134">Создает исключение <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-134">Throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="8cb05-135">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-135">Not supported.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-136">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-136">Not supported.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8cb05-137">Всегда создается этим методом.</span><span class="sxs-lookup"><span data-stu-id="8cb05-137">Always thrown by this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlySpan(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; ReadOnlySpan&lt;'T&gt;.Enumerator" Usage="readOnlySpan.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cb05-138">Возвращает перечислитель для коллекции <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-138">Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cb05-139">Перечислитель для этого диапазона только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-139">An enumerator for this read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-140">Вместо непосредственного вызова метода <xref:System.ReadOnlySpan%601.GetEnumerator%2A> можно использовать инструкцию C# `foreach` и конструкцию Visual Basic `For Each`...`Next`, чтобы перечислить <xref:System.ReadOnlySpan%601>.</span><span class="sxs-lookup"><span data-stu-id="8cb05-140">Instead of calling the <xref:System.ReadOnlySpan%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.ReadOnlySpan%601>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlySpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cb05-141">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-141">Not supported.</span></span> <span data-ttu-id="8cb05-142">Создает исключение <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-142">Throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="8cb05-143">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-143">Not supported.</span></span></returns>
        <remarks><span data-ttu-id="8cb05-144">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8cb05-144">Not supported.</span></span></remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8cb05-145">Всегда создается этим методом.</span><span class="sxs-lookup"><span data-stu-id="8cb05-145">Always thrown by this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; 'T" Usage="readOnlySpan.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cb05-146">Доступная только для чтения ссылка на объект типа T, который может использоваться для закрепления и требуется для поддержки использования диапазона внутри оператора fixed.</span><span class="sxs-lookup"><span data-stu-id="8cb05-146">A read-only reference to an object of type T that can be used for pinning, and is required to support the use of span within a fixed statement.</span></span></summary>
        <returns><span data-ttu-id="8cb05-147">Ссылка на элемент диапазона с нулевым индексом или <see langword="null" />, если диапазон пуст.</span><span class="sxs-lookup"><span data-stu-id="8cb05-147">A reference to the element of the span at index 0, or <see langword="null" /> if the span is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.ReadOnlySpan&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cb05-148">Возвращает значение, указывающее на то, что текущий диапазон только для чтения пуст.</span><span class="sxs-lookup"><span data-stu-id="8cb05-148">Returns a value that indicates the current read-only span is empty.</span></span></summary>
        <value><span data-ttu-id="8cb05-149"><see langword="true" />, если текущий диапазон пуст; в противном случае <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-149"><see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[int] { T&amp; ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8cb05-150">Индекс элемента (с нуля), который требуется получить.</span><span class="sxs-lookup"><span data-stu-id="8cb05-150">The zero-based index of the element to get.</span></span></param>
        <summary><span data-ttu-id="8cb05-151">Возвращает элемент из диапазона только для чтения по начинающемуся с нуля индексу.</span><span class="sxs-lookup"><span data-stu-id="8cb05-151">Gets an item from the read-only span at the specified zero-based index.</span></span></summary>
        <value><span data-ttu-id="8cb05-152">Элемент из диапазона, доступного только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-152">The element from the read-only span.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="8cb05-153"><paramref name="index" /> меньше нуля либо больше или равен <see cref="P:System.ReadOnlySpan`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-153"><paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.ReadOnlySpan&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cb05-154">Количество элементов в диапазоне только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-154">The number of items in the read-only span.</span></span></summary>
        <value><span data-ttu-id="8cb05-155">Число элементов.</span><span class="sxs-lookup"><span data-stu-id="8cb05-155">The number of items.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8cb05-156">Первый диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-156">The first span to compare.</span></span></param>
        <param name="right"><span data-ttu-id="8cb05-157">Второй диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-157">The second span to compare.</span></span></param>
        <summary><span data-ttu-id="8cb05-158">Возвращает значение, указывающее, равны ли два экземпляра <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-158">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="8cb05-159">Значение <see langword="true" />, если два экземпляра <see cref="T:System.ReadOnlySpan`1" />равны; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-159"><see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-160">Это проверяет, указывают ли два экземпляра <xref:System.ReadOnlySpan`1> на одно и то же начальное расположение в памяти, и они имеют одинаковые значения <xref:System.ReadOnlySpan`1.Length>.</span><span class="sxs-lookup"><span data-stu-id="8cb05-160">This tests if two <xref:System.ReadOnlySpan`1> instances point to the same starting memory location, and have the same <xref:System.ReadOnlySpan`1.Length> values.</span></span> <span data-ttu-id="8cb05-161">Это не сравнивает содержимое двух <xref:System.ReadOnlySpan`1> экземпляров.</span><span class="sxs-lookup"><span data-stu-id="8cb05-161">This does not compare the contents of two <xref:System.ReadOnlySpan`1> instances.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="8cb05-162">Сегмент массива, который будет преобразован в <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-162">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="8cb05-163">Определяет неявное преобразование <see cref="T:System.ArraySegment`1" /> в <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-163">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cb05-164">Диапазон только для чтения, соответствующий сегменту массива.</span><span class="sxs-lookup"><span data-stu-id="8cb05-164">A read-only span that corresponds to the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(`0[])~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8cb05-165">Массив, который будет преобразован в <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-165">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="8cb05-166">Определяет неявное преобразование массива в <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-166">Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cb05-167">Диапазон только для чтения, соответствующий параметру <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-167">The read-only span that corresponds to <paramref name="array" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8cb05-168">Первый доступный только для чтения диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-168">The first read-only span to compare.</span></span></param>
        <param name="right"><span data-ttu-id="8cb05-169">Второй доступный только для чтения диапазон для сравнения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-169">The second read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="8cb05-170">Возвращает значение, указывающее, равны ли два экземпляра <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-170">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="8cb05-171">Значение <see langword="true" /> если два экземпляра <see cref="T:System.ReadOnlySpan`1" /> не равны; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-171"><see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-172">Два экземпляра <xref:System.ReadOnlySpan%601> не равны, если они имеют разную длину или соответствующие элементы `left` и `right` указывают на различные расположения в памяти.</span><span class="sxs-lookup"><span data-stu-id="8cb05-172">Two <xref:System.ReadOnlySpan%601> instances are not equal if they have different lengths or if the corresponding elements of `left` and `right` point to different memory locations.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="8cb05-173">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="8cb05-173">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="8cb05-174">Формирует срез вне текущего диапазона только для чтения, который начинается с указанного индекса.</span><span class="sxs-lookup"><span data-stu-id="8cb05-174">Forms a slice out of the current read-only span that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="8cb05-175">Интервал, который состоит из всех элементов текущего диапазона от <paramref name="start" /> до конца диапазона.</span><span class="sxs-lookup"><span data-stu-id="8cb05-175">A span that consists of all elements of the current span from <paramref name="start" /> to the end of the span.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cb05-176">Значение параметра <paramref name="start" /> больше числа элементов в диапазоне только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8cb05-176"><paramref name="start" /> is greater than the number of items in the read-only span.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="8cb05-177">Индекс, с которого нужно начать срез.</span><span class="sxs-lookup"><span data-stu-id="8cb05-177">The index at which to begin this slice.</span></span></param>
        <param name="length"><span data-ttu-id="8cb05-178">Требуемая длина для среза.</span><span class="sxs-lookup"><span data-stu-id="8cb05-178">The desired length for the slice.</span></span></param>
        <summary><span data-ttu-id="8cb05-179">Формирует срез вне текущего диапазона только для чтения, начиная с указанного индекса до указанной длины.</span><span class="sxs-lookup"><span data-stu-id="8cb05-179">Forms a slice out of the current read-only span starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="8cb05-180">Диапазон только для чтения, состоящий из элементов <paramref name="length" /> из текущего диапазона, начиная с <paramref name="start" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-180">A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cb05-181"><paramref name="start" /> меньше нуля или больше <see cref="P:System.Span`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-181"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Span`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlySpan.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cb05-182">Копирует содержимое этого диапазона только для чтения в новый массив.</span><span class="sxs-lookup"><span data-stu-id="8cb05-182">Copies the contents of this read-only span into a new array.</span></span></summary>
        <returns><span data-ttu-id="8cb05-183">Массив, содержащий данные в текущем диапазоне.</span><span class="sxs-lookup"><span data-stu-id="8cb05-183">An array containing the data in the current span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-184">Этот метод выполняет выделение кучи и копирование данных, поэтому, по возможности, их следует избегать.</span><span class="sxs-lookup"><span data-stu-id="8cb05-184">This method performs a heap allocation and data copy, and therefore, should be avoided if possible.</span></span> <span data-ttu-id="8cb05-185">Это иногда необходимо, когда интерфейсы API, поддерживающие <xref:System.ReadOnlySpan%601>, недоступны, но интерфейсы API, работающие с массивами, —.</span><span class="sxs-lookup"><span data-stu-id="8cb05-185">It it sometimes necessary when APIs that support <xref:System.ReadOnlySpan%601> are not available, but APIs that work with arrays are.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlySpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cb05-186">Возвращает строковое представление объекта <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-186">Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cb05-187">Строковое представление этого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8cb05-187">The string representation of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-188">Для `ReadOnlySpan<Char>`метод `ToString` возвращает <xref:System.String>, содержащий символы, на которые указывает диапазон.</span><span class="sxs-lookup"><span data-stu-id="8cb05-188">For a `ReadOnlySpan<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the span.</span></span> <span data-ttu-id="8cb05-189">В противном случае возвращается <xref:System.String> с именем типа и числом элементов, содержащихся в диапазоне.</span><span class="sxs-lookup"><span data-stu-id="8cb05-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the span contains.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlySpan.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8cb05-190">Целевой объект операции копирования.</span><span class="sxs-lookup"><span data-stu-id="8cb05-190">The target of the copy operation.</span></span></param>
        <summary><span data-ttu-id="8cb05-191">Пытается копировать содержимое этого объекта <see cref="T:System.ReadOnlySpan`1" /> в <see cref="T:System.Span`1" /> и возвращает значение, указывающее, была ли выполнена операция.</span><span class="sxs-lookup"><span data-stu-id="8cb05-191">Attempts to copy the contents of this <see cref="T:System.ReadOnlySpan`1" /> into a <see cref="T:System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="8cb05-192">Значение <see langword="true" />, если операция копирования выполнена успешно, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8cb05-192"><see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8cb05-193">Если `source` и `destination` перекрываются, все `source` обрабатывается так, как если бы оно было скопировано во временное расположение до того, как оно будет скопировано в `destination`.</span><span class="sxs-lookup"><span data-stu-id="8cb05-193">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>

<span data-ttu-id="8cb05-194">Если длина `destination` короче `source`, элементы не копируются и метод возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="8cb05-194">If the `destination` length is shorter than `source`, no items are copied and the method returns `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
