<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f683bb0c7fae8662dc3756422fe73cbdcfa28c55" /><Meta Name="ms.sourcegitcommit" Value="71cd9c2de2cd52bd5b71424de92feb029aa2818b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/09/2019" /><Meta Name="ms.locfileid" Value="72186177" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет базовый класс для типов значений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> переопределяет виртуальные методы из <xref:System.Object> с более подходящими реализациями для типов значений. См. также <xref:System.Enum>, который наследует от <xref:System.ValueType>.  
  
 Типы данных делятся на типы значений и ссылочные типы. Типы значений могут выделяться стеками или выделяться встроенными в структуре. Ссылочные типы выделяются в куче. Типы ссылок и значений являются производными от конечного базового класса <xref:System.Object>. В случаях, когда необходимо, чтобы тип значения наглядел как объект, оболочка, которая делает тип значения похожим на ссылочный объект, выделяется в куче, а значение типа значения копируется в него. Оболочка помечена так, что система знает, что она содержит тип значения. Этот процесс называется упаковкой-преобразованием, а обратный процесс называется распаковкой. Упаковка и распаковка позволяют обрабатывать любой тип как объект.  
  
 Хотя <xref:System.ValueType> является неявным базовым классом для типов значений, нельзя создать класс, который наследует от <xref:System.ValueType> напрямую. Вместо этого отдельные компиляторы предоставляют ключевое слово языка или конструкцию (например, @no__t- C# 0 в и `Structure`... `End Structure` в Visual Basic) для поддержки создания типов значений.  
  
 Помимо использования в качестве базового класса для типов значений в .NET Framework, структура <xref:System.ValueType> обычно не используется непосредственно в коде. Однако его можно использовать в качестве параметра в вызовах метода, чтобы ограничить возможные аргументы для типов значений, а не для всех объектов, или разрешить методу обрабатывать несколько различных типов значений. В следующем примере показано, как <xref:System.ValueType> предотвращает передачу ссылочных типов в методы. Он определяет класс с именем `Utility`, который содержит четыре метода: `IsNumeric`, который указывает, является ли его аргумент числом. `IsInteger`, указывающее, является ли его аргумент целым числом; `IsFloat`, который указывает, является ли его аргумент числом с плавающей запятой; и `Compare`, указывающие связь между двумя числовыми значениями. В каждом случае параметры метода имеют тип <xref:System.ValueType>, а ссылочные типы не передаются методам.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 В следующем примере показаны вызовы методов класса `Utility`.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ValueType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для сравнения с текущим экземпляром.</param>
        <summary>Указывает, равен ли этот экземпляр заданному объекту.</summary>
        <returns>Значение <see langword="true" />, если <paramref name="obj" /> и данный экземпляр относятся к одному типу и представляют одинаковые значения; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> переопределяет <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> и предоставляет реализацию равенства значений по умолчанию для всех типов значений в .NET Framework.  
  
 Реализация по умолчанию вызывает <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> для каждого поля текущего экземпляра и `obj` и возвращает `true`, если все поля равны.
  
> [!TIP]
>  В частности, если тип значения содержит поля, которые являются ссылочными типами, следует переопределить метод <xref:System.ValueType.Equals%28System.Object%29>. Это может повысить производительность и позволить более точно представить значение равенства для типа.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Примечания для [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 При вызове метода <xref:System.ValueType.Equals%2A> для структуры [!INCLUDE[wrt](~/includes/wrt-md.md)] он предоставляет поведение по умолчанию для типов значений, которые не переопределяют <xref:System.ValueType.Equals%2A>. Это является частью поддержки, которую .NET Framework предоставляет для [!INCLUDE[wrt](~/includes/wrt-md.md)] (см. раздел [поддержка .NET Framework для приложений Магазина Windows и среда выполнения Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры не могут переопределять <xref:System.ValueType.Equals%2A>, даже если они написаны с помощью C# или Visual Basic, так как они не могут иметь методы. (Кроме того, структуры в самом [!INCLUDE[wrt](~/includes/wrt-md.md)] не наследуют <xref:System.ValueType>). Однако они выглядят как <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A> и <xref:System.ValueType.GetHashCode%2A>, когда они используются в коде C# или Visual Basic, а .NET Framework предоставляет поведение по умолчанию для этих методов.  
  
   
  
## Examples  
 В следующем примере показано, как метод <xref:System.ValueType.Equals%2A> может быть переопределен производным типом значения.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код данного экземпляра.</summary>
        <returns>32-разрядное целое число со знаком, являющееся хэш-кодом для данного экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ValueType.GetHashCode%2A> применяется к типам, производным от <xref:System.ValueType>. Для вычисления возвращаемого значения используется одно или несколько полей производного типа. Если вызвать метод `GetHashCode` производного типа, то возвращаемое значение скорее всего не будет подходящим для использования в качестве ключа в хэш-таблице. Кроме того, если значение одного или нескольких из этих полей изменяется, возвращаемое значение может стать непригодным для использования в качестве ключа в хэш-таблице. В любом случае рекомендуется написать собственную реализацию метода <xref:System.ValueType.GetHashCode%2A>, который более точно представляет концепцию хэш-кода для типа.  
  
 Дополнительные сведения см. в разделах <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> и <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Примечания для [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 При вызове метода <xref:System.ValueType.GetHashCode%2A> для структуры [!INCLUDE[wrt](~/includes/wrt-md.md)] он предоставляет поведение по умолчанию для типов значений, которые не переопределяют <xref:System.ValueType.GetHashCode%2A>. Это является частью поддержки, которую .NET Framework предоставляет для [!INCLUDE[wrt](~/includes/wrt-md.md)] (см. раздел [поддержка .NET Framework для приложений Магазина Windows и среда выполнения Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры не могут переопределять <xref:System.ValueType.GetHashCode%2A>, даже если они написаны с помощью C# или Visual Basic, так как они не могут иметь методы. (Кроме того, структуры в самом [!INCLUDE[wrt](~/includes/wrt-md.md)] не наследуют <xref:System.ValueType>). Однако они выглядят как <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A> и <xref:System.ValueType.GetHashCode%2A>, когда они используются в коде C# или Visual Basic, а .NET Framework предоставляет поведение по умолчанию для этих методов.  
  
   
  
## Examples  
 В следующем примере показано, как метод <xref:System.ValueType.GetHashCode%2A> может быть переопределен производным типом значения.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает полное имя типа этого экземпляра.</summary>
        <returns>Полное имя типа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> переопределяет метод <xref:System.Object.ToString%2A?displayProperty=nameWithType> и предоставляет реализацию метода `ToString` для типов значений по умолчанию. (Типы значений — это типы, определяемые ключевым словом @no__t- C#0 в, а также конструкцией `Structure`... `End Structure` в Visual Basic.) Функционально, однако, реализация — это то же самое, что <xref:System.Object.ToString%2A?displayProperty=nameWithType>: метод возвращает полное имя типа.  
  
 Типы значений, определяемые ключевым словом `struct` C# в, и `Structure`... `End Structure` в Visual Basic обычно переопределяют метод <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>, чтобы обеспечить более осмысленное строковое представление типа значения. В следующем примере демонстрируется это различие. Он определяет два типа значений: `EmployeeA` и `EmployeeB`, создает экземпляр каждого и вызывает его метод `ToString`. Поскольку структура `EmployeeA` не переопределяет метод <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>, он отображает только полное имя типа. С другой стороны, метод `EmployeeB.ToString` предоставляет осмысленные сведения об объекте.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Обратите внимание, что, хотя типы перечисления также являются типами значений, они являются производными от класса <xref:System.Enum>, который переопределяет <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Примечания для среда выполнения Windows  
 При вызове метода <xref:System.ValueType.ToString%2A> для структуры [!INCLUDE[wrt](~/includes/wrt-md.md)] он предоставляет поведение по умолчанию для типов значений, которые не переопределяют <xref:System.ValueType.ToString%2A>. Это является частью поддержки, которую .NET Framework предоставляет для [!INCLUDE[wrt](~/includes/wrt-md.md)] (см. раздел [поддержка .NET Framework для приложений Магазина Windows и среда выполнения Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] структуры не могут переопределять <xref:System.ValueType.ToString%2A>, даже если они написаны с помощью C# или Visual Basic, так как они не могут иметь методы. (Кроме того, структуры в самом [!INCLUDE[wrt](~/includes/wrt-md.md)] не наследуют <xref:System.ValueType>). Однако они выглядят как <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A> и <xref:System.ValueType.GetHashCode%2A>, когда они используются в коде C# или Visual Basic, а .NET Framework предоставляет поведение по умолчанию для этих методов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
