<Type Name="ArraySegment&lt;T&gt;+Enumerator" FullName="System.ArraySegment&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43dd69497ac401d999e4013925dae4eccc300419" /><Meta Name="ms.sourcegitcommit" Value="6c0b6310824199ff476e4a9eec6e9ed0bd1a51c9" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/06/2019" /><Meta Name="ms.locfileid" Value="74388877" /></Metadata><TypeSignature Language="C#" Value="public struct ArraySegment&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ArraySegment`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ArraySegment`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ArraySegment(Of T).Enumerator&#xA;Implements IEnumerator(Of T)" />
  <TypeSignature Language="C++ CLI" Value="public: value class ArraySegment&lt;T&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ArraySegment&lt;'T&gt;.Enumerator = struct&#xA;    interface IEnumerator&lt;'T&gt;&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет перечислитель для элементов <see cref="T:System.ArraySegment`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

C# [](~/docs/csharp/language-reference/keywords/foreach-in.md) ForEach C# языка и [для каждого... Следующая](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) конструкция в Visual Basic скрывает сложность перечислителей. Вместо того, чтобы напрямую манипулировать перечислителем, рекомендуется использовать `foreach` или `For Each...Next`. 

Изначально перечислитель располагается перед первым элементом в <xref:System.ArraySegment%601>. В этой позиции значение свойства <xref:System.ArraySegment%601.Enumerator.Current> не определено. Необходимо вызвать <xref:System.ArraySegment%601.Enumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу в <xref:System.ArraySegment%601> перед чтением значения <xref:System.ArraySegment%601.Enumerator.Current>.

<xref:System.ArraySegment%601.Enumerator.Current> возвращает то же значение, пока не будет вызвано <xref:System.ArraySegment%601.Enumerator.MoveNext%2A>. <xref:System.ArraySegment%601.Enumerator.MoveNext%2A> задает <xref:System.ArraySegment%601.Enumerator.Current> следующий элемент в <xref:System.ArraySegment%601>.

Если <xref:System.ArraySegment%601.Enumerator.MoveNext%2A> передает конец <xref:System.ArraySegment%601>, <xref:System.ArraySegment%601.Enumerator.MoveNext%2A> возвращает `false`. Когда перечислитель находится в этом состоянии, последующие вызовы <xref:System.ArraySegment%601.Enumerator.MoveNext%2A> также возвращают `false` и <xref:System.ArraySegment%601.Enumerator.Current> не определены. Невозможно снова задать <xref:System.ArraySegment%601.Enumerator.Current> для первого элемента в <xref:System.ArraySegment%601>; Вместо этого необходимо создать новый экземпляр перечислителя. 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.ArraySegment`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.ArraySegment&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ссылку на элемент в текущей позиции перечислителя.</summary>
        <value>Элемент <see cref="T:System.ArraySegment`1" /> в текущей позиции перечислителя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

`Current` не определена при выполнении любого из следующих условий: 

- Сразу после создания перечислителя перечислитель располагается перед первым элементом в сегменте массива. чтобы переместить перечислитель к первому элементу сегмента массива перед считыванием значения `Current`, необходимо вызвать <xref:System.ArraySegment%601.Enumerator.MoveNext%2A>.

- Последний вызов <xref:System.ArraySegment%601.Enumerator.MoveNext%2A> вернул `false`, который указывает конец сегмента массива. 

`Current` возвращает то же значение, пока не будет вызвано <xref:System.ArraySegment%601.Enumerator.MoveNext%2A>. <xref:System.ArraySegment%601.Enumerator.MoveNext%2A> задает `Current` следующий элемент в сегменте массива. 

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArraySegment`1.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="enumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые этим экземпляром перечислителя.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArraySegment`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель к следующему элементу коллекции <see cref="T:System.ArraySegment`1" />.</summary>
        <returns>Значение <see langword="true" />, если перечислитель успешно перемещен к следующему элементу. Значение <see langword="false" />, если перечислитель достиг конца сегмента массива.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

После создания перечислителя он располагается перед первым элементом в сегменте массива, а первый вызов метода `MoveNext` перемещает перечислитель к первому элементу в сегменте массива. 

Если `MoveNext` передает конец сегмента массива, `MoveNext` возвращает `false`. Когда перечислитель находится в этом состоянии, последующие вызовы `MoveNext` также возвращают `false`.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
        <value>Элемент в сегменте массива в текущей позиции перечислителя.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Перечислитель размещается перед первым элементом сегмента массива или после его последнего элемента.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Устанавливает перечислитель в исходное положение перед первым элементом в сегменте массива.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
