<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc8b21fc3c07b69515c1ab00e964b833b7dda975" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75042418" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="af7c8-101">Указывает, что перечисление может обрабатываться как битовое поле (т. е. набор флагов).</span><span class="sxs-lookup"><span data-stu-id="af7c8-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af7c8-102">Битовые поля обычно используются для списков элементов, которые могут происходить в сочетании, а константы перечисления обычно используются для списков взаимоисключающих элементов.</span><span class="sxs-lookup"><span data-stu-id="af7c8-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="af7c8-103">Поэтому битовые поля предназначены для объединения с побитовой операцией или для создания безымянных значений, а перечисляемые константы — нет.</span><span class="sxs-lookup"><span data-stu-id="af7c8-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="af7c8-104">В отличие от констант перечисления, языки различаются в использовании битовых полей.</span><span class="sxs-lookup"><span data-stu-id="af7c8-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="af7c8-105">Атрибуты FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="af7c8-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="af7c8-106"><xref:System.AttributeUsageAttribute> применяется к этому классу, а его свойство <xref:System.AttributeUsageAttribute.Inherited%2A> указывает `false`.</span><span class="sxs-lookup"><span data-stu-id="af7c8-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="af7c8-107">Этот атрибут может применяться только к перечислениям.</span><span class="sxs-lookup"><span data-stu-id="af7c8-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="af7c8-108">Рекомендации для FlagsAttribute и Enum</span><span class="sxs-lookup"><span data-stu-id="af7c8-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="af7c8-109">Используйте настраиваемый атрибут <xref:System.FlagsAttribute> для перечисления, только если Побитовая операция (AND, OR, ИСКЛЮЧАЮЩая или) должна быть выполнена для числового значения.</span><span class="sxs-lookup"><span data-stu-id="af7c8-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="af7c8-110">Определите константы перечисления в степени двойки, то есть 1, 2, 4, 8 и т. д.</span><span class="sxs-lookup"><span data-stu-id="af7c8-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="af7c8-111">Это означает, что отдельные флаги в Объединенных константах перечисления не перекрываются.</span><span class="sxs-lookup"><span data-stu-id="af7c8-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="af7c8-112">Рассмотрите возможность создания перечислимой константы для часто используемых сочетаний флагов.</span><span class="sxs-lookup"><span data-stu-id="af7c8-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="af7c8-113">Например, если имеется перечисление, используемое для операций файлового ввода-вывода, содержащих перечислимые константы `Read = 1` и `Write = 2`, рассмотрите возможность создания перечислимого `ReadWrite = Read OR Write`константы, объединяющего флаги `Read` и `Write`.</span><span class="sxs-lookup"><span data-stu-id="af7c8-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="af7c8-114">Кроме того, побитовая операция OR, используемая для объединения флагов, может рассматриваться как расширенная концепция в некоторых обстоятельствах, которая не должна требоваться для простых задач.</span><span class="sxs-lookup"><span data-stu-id="af7c8-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="af7c8-115">Будьте внимательны при определении отрицательного числа в виде перечислимой константы, так как для множества положений флагов может быть задано значение 1, что может сделать код запутанным и рекомендовать ошибки кода.</span><span class="sxs-lookup"><span data-stu-id="af7c8-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="af7c8-116">Удобный способ проверки того, установлен ли флаг в числовом значении, — выполнение побитовой операции и между числовым значением и константой с перечислимым флагом, которая устанавливает все биты в числовом значении равными нулю, не соответствующим флагу. , затем проверьте, равен ли результат этой операции перечисленной константе Flag.</span><span class="sxs-lookup"><span data-stu-id="af7c8-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="af7c8-117">Используйте `None` в качестве имени константы перечисления флагов, значение которой равно нулю.</span><span class="sxs-lookup"><span data-stu-id="af7c8-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="af7c8-118">Нельзя использовать `None` перечислимую константу в битовой операции AND для проверки флага, так как результат всегда равен нулю.</span><span class="sxs-lookup"><span data-stu-id="af7c8-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="af7c8-119">Однако можно выполнить логическое, а не побитовое сравнение числового значения и `None` перечислимую константу, чтобы определить, заданы ли биты в числовом значении.</span><span class="sxs-lookup"><span data-stu-id="af7c8-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="af7c8-120">Если вы создаете перечисление значений вместо перечисления flags, то по-прежнему целесообразно создать `None` перечислимую константу.</span><span class="sxs-lookup"><span data-stu-id="af7c8-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="af7c8-121">Причина в том, что по умолчанию память, используемая для перечисления, инициализируется средой CLR равным нулю.</span><span class="sxs-lookup"><span data-stu-id="af7c8-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="af7c8-122">Следовательно, если не определить константу, значение которой равно нулю, то при создании перечисление будет содержать недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="af7c8-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="af7c8-123">Если существует очевидный вариант по умолчанию, который должен представлять приложение, рассмотрите возможность использования перечислимой константы, значение которой равно нулю, для представления значения по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="af7c8-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="af7c8-124">Если регистр по умолчанию отсутствует, рассмотрите возможность использования перечислимой константы, значение которой равно нулю, что означает регистр, не представленный другими перечислимыми константами.</span><span class="sxs-lookup"><span data-stu-id="af7c8-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="af7c8-125">Не определяйте значение перечисления исключительно для отражения состояния самого перечисления.</span><span class="sxs-lookup"><span data-stu-id="af7c8-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="af7c8-126">Например, не определяйте константу перечисления, которая только отмечает конец перечисления.</span><span class="sxs-lookup"><span data-stu-id="af7c8-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="af7c8-127">Если необходимо определить Последнее значение перечисления, проверьте это значение явным образом.</span><span class="sxs-lookup"><span data-stu-id="af7c8-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="af7c8-128">Кроме того, можно выполнить проверку диапазона для первой и последней перечислимой константы, если все значения в диапазоне допустимы.</span><span class="sxs-lookup"><span data-stu-id="af7c8-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="af7c8-129">Не указывайте константы перечисления, зарезервированные для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="af7c8-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="af7c8-130">При определении метода или свойства, принимающего перечисляемую константу в качестве значения, рассмотрите возможность проверки значения.</span><span class="sxs-lookup"><span data-stu-id="af7c8-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="af7c8-131">Причина в том, что можно привести числовое значение к типу перечисления, даже если это числовое значение не определено в перечислении.</span><span class="sxs-lookup"><span data-stu-id="af7c8-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af7c8-132">В следующем примере показано использование атрибута `FlagsAttribute` и показано воздействие на <xref:System.Enum.ToString%2A> метода использования `FlagsAttribute` в объявлении <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="af7c8-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="af7c8-133">В следующем примере определяются два перечисления, связанные с цветом, `SingleHue` и `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="af7c8-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="af7c8-134">Последний имеет атрибут `FlagsAttribute`; Первый — нет.</span><span class="sxs-lookup"><span data-stu-id="af7c8-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="af7c8-135">В примере показано различие в поведении, если диапазон целых чисел, включая целые числа, которые не представляют базовые значения типа перечисления, приведен к типу перечисления и отображаемым строковым представлениям.</span><span class="sxs-lookup"><span data-stu-id="af7c8-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="af7c8-136">Например, обратите внимание, что 3 не может быть представлено в качестве значения `SingleHue`, поскольку 3 не является базовым значением какого-либо `SingleHue` элемента, тогда как атрибут `FlagsAttribute` позволяет представить 3 как `MultiHue` значение `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="af7c8-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="af7c8-137">Инициализирует новый экземпляр класса <see cref="T:System.FlagsAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="af7c8-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="af7c8-138">В следующем примере определяется перечисление `PhoneService`, которое представляет формы взаимодействия, предоставляемые телефонной компанией.</span><span class="sxs-lookup"><span data-stu-id="af7c8-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="af7c8-139">Он инициализирует три переменные, представляющие службу, предоставляемую трем различным семей, а затем указывает, какие семей не имеют службы, что семей имеет только телефонную службу сотовой связи, а также то, что семей имеет как сотовый телефон, так и службу Land Line.</span><span class="sxs-lookup"><span data-stu-id="af7c8-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="af7c8-140">Наконец, он неявно вызывает метод <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> для вывода типов услуг, предоставляемых каждой семье.</span><span class="sxs-lookup"><span data-stu-id="af7c8-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="af7c8-141">В следующем примере показано использование атрибута `FlagsAttribute` и показано воздействие на <xref:System.Enum.ToString%2A> метода использования `FlagsAttribute` в объявлении <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="af7c8-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
