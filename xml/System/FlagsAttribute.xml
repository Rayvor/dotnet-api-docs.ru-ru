<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d3bee1721752f1378e182ae08c7080273500342" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70668076" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что перечисление может обрабатываться как битовое поле (т. е. набор флагов).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Битовые поля обычно используются для списков элементов, которые могут происходить в сочетании, а константы перечисления обычно используются для списков взаимоисключающих элементов. Поэтому битовые поля предназначены для объединения с побитовой операцией или для создания безымянных значений, а перечисляемые константы — нет. В отличие от констант перечисления, языки различаются в использовании битовых полей.  
  
## <a name="attributes-of-the-flagsattribute"></a>Атрибуты FlagsAttribute  
 <xref:System.AttributeUsageAttribute>применяется к этому классу, а его <xref:System.AttributeUsageAttribute.Inherited%2A> свойство указывает `false`. Этот атрибут может применяться только к перечислениям.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Рекомендации для FlagsAttribute и Enum  
  
-   <xref:System.FlagsAttribute> Используйте настраиваемый атрибут для перечисления, только если для числового значения требуется выполнить побитовую операцию (and, OR, исключающее или).  
  
-   Определите константы перечисления в степени двойки, то есть 1, 2, 4, 8 и т. д. Это означает, что отдельные флаги в Объединенных константах перечисления не перекрываются.  
  
-   Рассмотрите возможность создания перечислимой константы для часто используемых сочетаний флагов. Например, если имеется перечисление, используемое для операций файлового ввода-вывода, содержащих перечислимые `Read = 1` константы и `Write = 2`, рассмотрите возможность создания `ReadWrite = Read OR Write`перечислимой `Read` константы, `Write` объединяющей и Метки. Кроме того, побитовая операция OR, используемая для объединения флагов, может рассматриваться как расширенная концепция в некоторых обстоятельствах, которая не должна требоваться для простых задач.  
  
-   Будьте внимательны при определении отрицательного числа в виде перечислимой константы, так как для множества положений флагов может быть задано значение 1, что может сделать код запутанным и рекомендовать ошибки кода.  
  
-   Удобный способ проверки того, установлен ли флаг в числовом значении, — выполнение побитовой операции и между числовым значением и константой с перечислимым флагом, которая устанавливает все биты в числовом значении равными нулю, не соответствующим флагу. , затем проверьте, равен ли результат этой операции перечисленной константе Flag.  
  
-   Используйте `None` в качестве имени константы с перечислимым флагом, значение которой равно нулю. Нельзя использовать `None` перечислимую константу в побитовой операции и для проверки флага, так как результат всегда равен нулю. Однако можно выполнить логическое, а не побитовое сравнение числового значения и `None` перечислимой константы, чтобы определить, заданы ли какие-либо биты из числового значения.  
  
     Если вы создаете перечисление значений вместо перечисления flags, то все равно стоит создать `None` перечислимую константу. Причина в том, что по умолчанию память, используемая для перечисления, инициализируется средой CLR равным нулю. Следовательно, если не определить константу, значение которой равно нулю, то при создании перечисление будет содержать недопустимое значение.  
  
     Если существует очевидный вариант по умолчанию, который должен представлять приложение, рассмотрите возможность использования перечислимой константы, значение которой равно нулю, для представления значения по умолчанию. Если регистр по умолчанию отсутствует, рассмотрите возможность использования перечислимой константы, значение которой равно нулю, что означает регистр, не представленный другими перечислимыми константами.  
  
-   Не определяйте значение перечисления исключительно для отражения состояния самого перечисления. Например, не определяйте константу перечисления, которая только отмечает конец перечисления. Если необходимо определить Последнее значение перечисления, проверьте это значение явным образом. Кроме того, можно выполнить проверку диапазона для первой и последней перечислимой константы, если все значения в диапазоне допустимы.  
  
-   Не указывайте константы перечисления, зарезервированные для будущего использования.  
  
-   При определении метода или свойства, принимающего перечисляемую константу в качестве значения, рассмотрите возможность проверки значения. Причина в том, что можно привести числовое значение к типу перечисления, даже если это числовое значение не определено в перечислении.  
  
   
  
## Examples  
 В следующем примере показано `FlagsAttribute` использование атрибута и показано воздействие <xref:System.Enum.ToString%2A> на <xref:System.Enum> метод использования `FlagsAttribute` в объявлении.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 В следующем примере определяются два перечисления, связанных с цветом `SingleHue` , `MultiHue`и. Последний имеет `FlagsAttribute` атрибут, а первый — нет. В примере показано различие в поведении, если диапазон целых чисел, включая целые числа, которые не представляют базовые значения типа перечисления, приведен к типу перечисления и отображаемым строковым представлениям.   Например, обратите внимание, что 3 не может быть `SingleHue` представлено значением, так как 3 не является базовым значением какого-либо `FlagsAttribute` `SingleHue` члена, тогда как атрибут `MultiHue` позволяет представить 3 как значение `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.FlagsAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере определяется `PhoneService` перечисление, которое представляет формы взаимодействия, предоставляемые телефонной компанией. Он инициализирует три переменные, представляющие службу, предоставляемую трем различным семей, а затем указывает, какие семей не имеют службы, что семей имеет только телефонную службу сотовой связи, а также то, что семей имеет как сотовый телефон, так и службу Land Line. Наконец, он неявно вызывает <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> метод для вывода типов услуг, предоставляемых каждой семье.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 В следующем примере показано `FlagsAttribute` использование атрибута и показано воздействие <xref:System.Enum.ToString%2A> на <xref:System.Enum> метод использования `FlagsAttribute` в объявлении.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
