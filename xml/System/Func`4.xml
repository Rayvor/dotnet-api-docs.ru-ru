<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4c53190ede2b2aa7e31aacbddef72d62483f36c" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172990" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <typeparam name="T2">Тип второго параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого этим делегатом.</typeparam>
    <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
    <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод, который имеет три параметра и возвращает значение типа, указанного параметром <typeparamref name="TResult" />.</summary>
    <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат можно использовать для представления метода, который можно передать в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должен соответствовать сигнатуре метода, определяемого этим делегатом. Это означает, что инкапсулированный метод должен иметь три параметра, каждый из которых передается в него по значению и должен возвращать значение.  
  
> [!NOTE]
>  Для ссылки на метод, который имеет три параметра и возвращает `void` (или в Visual Basic, который объявляется как `Sub`, а не как `Function`), вместо него следует использовать универсальный делегат <xref:System.Action%603>.  
  
 При использовании делегата <xref:System.Func%604> нет необходимости явно определять делегат, инкапсулирующий метод с тремя параметрами. Например, следующий код явно объявляет универсальный делегат с именем `ParseNumber` и присваивает ссылку на метод <xref:System.Int32.Parse%2A> его экземпляру делегата.  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 В следующем примере этот код упрощается путем создания экземпляра делегата <xref:System.Func%604> вместо явного определения нового делегата и назначения ему именованного метода.  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 Можно использовать делегат <xref:System.Func%604> с анонимными методами в C#, как показано в следующем примере. (Общие сведения о анонимных методах см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 Можно также присвоить лямбда-выражение делегату <xref:System.Func%604>, как показано в следующем примере. (Общие сведения о лямбда-выражениях см. в разделе [лямбда-выражения](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) и [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 Базовый тип лямбда-выражения является одним из универсальных делегатов `Func`. Это дает возможность передавать лямбда-выражение в качестве параметра без явного присвоения его делегату. В частности, поскольку многие методы типов в пространстве имен <xref:System.Linq> имеют `Func` параметров, эти методы можно передать лямбда-выражению без явного создания экземпляра делегата `Func`.  
  
   
  
## Examples  
 В следующем примере показано, как объявить и использовать делегат <xref:System.Func%603>. В этом примере объявляется переменная <xref:System.Func%603> и ей присваивается лямбда-выражение, которое принимает в качестве параметров значение <xref:System.String> и значение <xref:System.Int32>. Лямбда-выражение возвращает `true`, если длина параметра <xref:System.String> равна значению параметра <xref:System.Int32>. Делегат, инкапсулирующий этот метод, затем используется в запросе для фильтрации строк в массиве строк.  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Лямбда-выражения (Руководство по программированию в C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Лямбда-выражения</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Делегаты (Руководство по программированию на C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Делегаты в Visual Basic</related>
  </Docs>
</Type>
