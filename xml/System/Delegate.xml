<Type Name="Delegate" FullName="System.Delegate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49bd802fa8ffc3122beb07d490740f9cf8d7af4c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406628" /></Metadata><TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8b9df-101">Представляет делегат — структуру данных, указывающую на статический метод или на экземпляр класса и метод экземпляра этого класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-102"><xref:System.Delegate> Класс является базовым классом для типов делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="8b9df-103">Однако только система и компиляторы могут явно наследоваться от <xref:System.Delegate> класса или <xref:System.MulticastDelegate> класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="8b9df-104">Также не допускается получение нового типа из типа делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="8b9df-105"><xref:System.Delegate> Класс не считается типом делегата; это класс, используемый для наследования типов делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="8b9df-106">Большинство языков реализуют `delegate` ключевое слово, и компиляторы для этих языков могут быть производными <xref:System.MulticastDelegate> от класса, поэтому пользователи должны использовать `delegate` ключевое слово, предоставляемое языком.</span><span class="sxs-lookup"><span data-stu-id="8b9df-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-107">Среда CLR предоставляет `Invoke` метод для каждого типа делегата с той же сигнатурой, что и делегат.</span><span class="sxs-lookup"><span data-stu-id="8b9df-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="8b9df-108">Нет необходимости вызывать этот метод явно из C#, Visual Basic или Visual C++, так как компиляторы вызывают его автоматически.</span><span class="sxs-lookup"><span data-stu-id="8b9df-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="8b9df-109">Метод полезен в отражении, если требуется найти сигнатуру типа делегата. [](~/docs/framework/reflection-and-codedom/reflection.md) `Invoke`</span><span class="sxs-lookup"><span data-stu-id="8b9df-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="8b9df-110">Среда CLR предоставляет каждому типу `BeginInvoke` делегата методы и `EndInvoke` , чтобы обеспечить асинхронный вызов делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="8b9df-111">Дополнительные сведения об этих методах см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="8b9df-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="8b9df-112">Объявление типа делегата устанавливает контракт, указывающий сигнатуру одного или нескольких методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="8b9df-113">Делегат — это экземпляр типа делегата, который имеет ссылки на:</span><span class="sxs-lookup"><span data-stu-id="8b9df-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="8b9df-114">Метод экземпляра типа и целевой объект, назначаемый этому типу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="8b9df-115">Метод экземпляра типа с скрытым `this` параметром, предоставленным в списке формальных параметров.</span><span class="sxs-lookup"><span data-stu-id="8b9df-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="8b9df-116">Говорят, что делегат является открытым делегатом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="8b9df-117">Статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-117">A static method.</span></span>  
  
-   <span data-ttu-id="8b9df-118">Статический метод и целевой объект, назначаемые первому параметру метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="8b9df-119">Говорят, что делегат закрыт по первому аргументу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="8b9df-120">Дополнительные сведения о привязке делегата см. <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> в разделе перегрузка метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-121">В .NET Framework версиях 1,0 и 1,1 делегат может представлять метод только в том случае, если сигнатура метода точно соответствует сигнатуре, заданной типом делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="8b9df-122">Поэтому поддерживаются только первый и третий маркеры в приведенном выше списке, и первый маркер требует точного совпадения типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="8b9df-123">Когда делегат представляет метод экземпляра, закрытый для первого аргумента (наиболее распространенный случай), делегат сохраняет ссылку на точку входа метода и ссылку на объект, называемый целевым объектом, который имеет тип, который можно присвоить типу, который определил Method.</span><span class="sxs-lookup"><span data-stu-id="8b9df-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="8b9df-124">Когда делегат представляет открытый метод экземпляра, он сохраняет ссылку на точку входа метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="8b9df-125">Сигнатура делегата должна включать скрытый `this` параметр в список формальных параметров; в этом случае делегат не имеет ссылки на целевой объект, и при вызове делегата должен быть указан целевой объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="8b9df-126">Когда делегат представляет статический метод, делегат сохраняет ссылку на точку входа метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="8b9df-127">Когда делегат представляет статический метод, закрытый для своего первого аргумента, делегат сохраняет ссылку на точку входа метода и ссылку на целевой объект, назначаемый типу первого аргумента метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="8b9df-128">При вызове делегата первый аргумент статического метода получает целевой объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="8b9df-129">Список вызовов делегата — это упорядоченный набор делегатов, в которых каждый элемент списка вызывает только один из методов, представленных делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="8b9df-130">Список вызовов может содержать дублирующиеся методы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="8b9df-131">Во время вызова методы вызываются в том порядке, в котором они указаны в списке вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="8b9df-132">Делегат пытается вызвать каждый метод в своем списке вызовов; дубликаты вызываются один раз для каждого, когда они появляются в списке вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="8b9df-133">Делегаты являются неизменяемыми; После создания список вызовов делегата не изменяется.</span><span class="sxs-lookup"><span data-stu-id="8b9df-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="8b9df-134">Делегаты называются многоадресностью или комбинированными, так как делегат может вызывать один или несколько методов и может использоваться в операциях объединения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="8b9df-135">Объединение операций, таких как <xref:System.Delegate.Combine%2A> и <xref:System.Delegate.Remove%2A>, не приводит к изменению существующих делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="8b9df-136">Вместо этого такая операция возвращает новый делегат, который содержит результаты операции, неизмененный делегат или `null`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="8b9df-137">Операция объединения возвращает `null` , когда результатом операции является делегат, который не ссылается хотя бы на один метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="8b9df-138">Операция объединения возвращает делегат без изменений, если запрошенная операция не имеет результата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-139">Управляемые языки используют <xref:System.Delegate.Combine%2A> методы и <xref:System.Delegate.Remove%2A> для реализации операций делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="8b9df-140">Примеры включают в `AddHandler` себя `RemoveHandler` операторы и в Visual Basic и операторы + = и-= для типов делегатов C#в.</span><span class="sxs-lookup"><span data-stu-id="8b9df-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="8b9df-141">Начиная с [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], универсальные типы делегатов могут иметь параметры типа Variant.</span><span class="sxs-lookup"><span data-stu-id="8b9df-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="8b9df-142">Параметры контравариантного типа можно использовать в качестве типов параметров делегата, а параметр ковариантного типа можно использовать в качестве возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="8b9df-143">Эта функция позволяет обеспечить совместимость типов универсальных делегатов, созданных из того же определения универсального типа, если их аргументы типа являются ссылочными типами с отношением наследования, как описано в ковариации [и контрвариация ](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="8b9df-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-144">Универсальные делегаты, совместимые с присваиванием, в связи с дисперсией не всегда являются комбинированными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="8b9df-145">Чтобы обеспечить возможность комбинирования, типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="8b9df-146">Например, предположим, что класс с именем `Derived` является производным от класса с `Base`именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="8b9df-147">Делегат типа `Action<Base>` (`Action(Of Base)` в Visual Basic) может быть присвоен переменной типа `Action<Derived>`, но два делегата не могут быть объединены, так как типы не совпадают в точности.</span><span class="sxs-lookup"><span data-stu-id="8b9df-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-148">Если вызванный метод создает исключение, метод прекращает выполнение, исключение передается обратно вызывающему объекту делегата, а остальные методы в списке вызовов не вызываются.</span><span class="sxs-lookup"><span data-stu-id="8b9df-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="8b9df-149">Перехват исключения в вызывающем объекте не влияет на это поведение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="8b9df-150">Когда сигнатура методов, вызываемых делегатом, содержит возвращаемое значение, делегат возвращает возвращаемое значение последнего элемента в списке вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="8b9df-151">Если сигнатура содержит параметр, передаваемый по ссылке, то конечное значение параметра представляет собой результат каждого метода в списке вызовов, который выполняется последовательно и обновляет значение параметра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="8b9df-152">Ближайший эквивалент делегата в языке C является указателем на функцию.</span><span class="sxs-lookup"><span data-stu-id="8b9df-152">The closest equivalent of a delegate in C is a function pointer.</span></span> <span data-ttu-id="8b9df-153">Делегат может представлять статический метод или метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="8b9df-154">Когда делегат представляет метод экземпляра, в делегате хранится не только ссылка на точку входа метода, но и ссылка на экземпляр класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="8b9df-155">В отличие от указателей функций делегаты являются объектно ориентированными и типизированными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b9df-156">В следующем примере показано, как определить делегат с именем `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="8b9df-157">Экземпляры этого делегата создаются для метода экземпляра и статического метода вложенного `mySampleClass` класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="8b9df-158">Делегат для метода экземпляра требует наличия экземпляра `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="8b9df-159">Экземпляр сохраняется в переменной с именем `mySC`. `mySampleClass`</span><span class="sxs-lookup"><span data-stu-id="8b9df-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="https://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb"><span data-ttu-id="8b9df-160">Асинхронный вызов синхронных методов</span><span class="sxs-lookup"><span data-stu-id="8b9df-160">Calling Synchronous Methods Asynchronously</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="8b9df-161">Делегаты (Руководство по программированию на C#)</span><span class="sxs-lookup"><span data-stu-id="8b9df-161">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="8b9df-162">Делегаты (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8b9df-162">Delegates (Visual Basic)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8"><span data-ttu-id="8b9df-163">Практическое руководство. Определение и использование делегатов (C++/CLI)</span><span class="sxs-lookup"><span data-stu-id="8b9df-163">How to: Define and Use Delegates (C++/CLI)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f"><span data-ttu-id="8b9df-164">Обработка и вызов событий</span><span class="sxs-lookup"><span data-stu-id="8b9df-164">Handling and Raising Events</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8b9df-165">Инициализирует новый делегат.</span><span class="sxs-lookup"><span data-stu-id="8b9df-165">Initializes a new delegate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="8b9df-166">Экземпляр класса, метод <paramref name="method" /> которого вызывает делегат.</span><span class="sxs-lookup"><span data-stu-id="8b9df-166">The class instance on which the delegate invokes <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-167">Имя представленного делегатом метода экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-167">The name of the instance method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="8b9df-168">Инициализирует делегат, вызывающий заданный метод экземпляра указанного класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-169">Этот конструктор нельзя использовать в коде приложения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="8b9df-170">Чтобы создать делегат, указав имя метода экземпляра, используйте перегрузку <xref:System.Delegate.CreateDelegate%2A> метода, который указывает имя метода и целевой объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="8b9df-171">Например, <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> перегрузка метода создает делегат для метода экземпляра с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="8b9df-172">Этот конструктор создает делегаты только для методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="8b9df-173">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-174">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-174"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-175">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-175">-or-</span></span> 
 <span data-ttu-id="8b9df-176"><paramref name="method" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-176"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-177">Произошла ошибка связывания с целевым методом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-177">There was an error binding to the target method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-178">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-178">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-179">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-179">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="8b9df-180">Тип <see cref="T:System.Type" />, представляющий класс, в котором определен метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-180">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-181">Имя представленного делегатом статического метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-181">The name of the static method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="8b9df-182">Инициализирует делегат, вызывающий заданный статистический метод указанного класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-182">Initializes a delegate that invokes the specified static method from the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-183">Этот конструктор нельзя использовать в коде приложения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-183">This constructor cannot be used in application code.</span></span> <span data-ttu-id="8b9df-184">Чтобы создать делегат, указав имя статического метода, используйте перегрузку <xref:System.Delegate.CreateDelegate%2A> метода, который указывает имя метода, но не указывает целевой объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-184">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="8b9df-185">Например, <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> перегрузка метода создает статический делегат для метода с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-185">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="8b9df-186">Этот конструктор создает делегаты только для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-186">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="8b9df-187">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-187">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-188">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-188"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-189">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-189">-or-</span></span> 
 <span data-ttu-id="8b9df-190">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-190"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-191"><paramref name="target" /> не является объектом <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-191"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-192">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-192">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-193">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-193">-or-</span></span> 
 <span data-ttu-id="8b9df-194"><paramref name="target" /> представляет открытый универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="8b9df-194"><paramref name="target" /> represents an open generic type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-195">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-196">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b9df-197">Создает неполную копию делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-197">Creates a shallow copy of the delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-198">Неполная копия делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-198">A shallow copy of the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-199">Клон имеет тот же <xref:System.Type>, целевой, метод и список вызовов, что и исходный делегат.</span><span class="sxs-lookup"><span data-stu-id="8b9df-199">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="8b9df-200">Неполная копия создает новый экземпляр того же типа, что и исходный объект, а затем копирует нестатические поля исходного объекта.</span><span class="sxs-lookup"><span data-stu-id="8b9df-200">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="8b9df-201">Если поле имеет тип значения, выполняется побитовая копия поля.</span><span class="sxs-lookup"><span data-stu-id="8b9df-201">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="8b9df-202">Если поле является ссылочным типом, то ссылка копируется, но на объект, на который указывает ссылка, нет; Поэтому ссылка в исходном объекте и ссылка в точке клона указывают на один и тот же объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-202">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="8b9df-203">В отличие от этого, глубокая копия объекта дублирует все, на которые прямо или косвенно ссылаются поля в объекте.</span><span class="sxs-lookup"><span data-stu-id="8b9df-203">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-204">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-205">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8b9df-206">Сцепляет списки вызовов заданных групповых (комбинируемых) делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-206">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates"><span data-ttu-id="8b9df-207">Массив комбинируемых делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-207">The array of delegates to combine.</span></span></param>
        <summary><span data-ttu-id="8b9df-208">Сцепляет списки вызовов массива делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-208">Concatenates the invocation lists of an array of delegates.</span></span></summary>
        <returns><span data-ttu-id="8b9df-209">Новый делегат со списком вызовов, представляющим собой сцепление списков вызовов делегатов, заданных в массиве <paramref name="delegates" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-209">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span></span> <span data-ttu-id="8b9df-210">Возвращает <see langword="null" />, если <paramref name="delegates" /> имеет значение <see langword="null" />, либо <paramref name="delegates" /> содержит нуль элементов, либо каждый элемент в <paramref name="delegates" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-210">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-211">Если массив содержит записи `null`, то эти записи игнорируются. `delegates`</span><span class="sxs-lookup"><span data-stu-id="8b9df-211">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="8b9df-212">Список вызовов может содержать дублирующиеся записи. то есть записи, ссылающиеся на один и тот же метод для одного и того же объекта.</span><span class="sxs-lookup"><span data-stu-id="8b9df-212">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-213">Универсальные делегаты, совместимые с присваиванием, в связи с дисперсией не всегда являются комбинированными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-213">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="8b9df-214">Чтобы обеспечить возможность комбинирования, типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-214">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="8b9df-215">Например, предположим, что класс с именем `Derived` является производным от класса с `Base`именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-215">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="8b9df-216">Делегат типа `Action<Base>` (`Action(Of Base)` в Visual Basic) может быть присвоен переменной типа `Action<Derived>`, как описано в ковариации [и контрвариация](~/docs/standard/generics/covariance-and-contravariance.md), но два делегата не могут быть объединены, так как типы не совпадают в точности.</span><span class="sxs-lookup"><span data-stu-id="8b9df-216">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-217"><xref:System.Delegate.Combine%2A>полезен для создания обработчиков событий, которые вызывают несколько методов при каждом возникновении события.</span><span class="sxs-lookup"><span data-stu-id="8b9df-217"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-218">Не все ненулевые элементы в <paramref name="delegates" /> являются экземплярами одного типа делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-218">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-219">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-220">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="8b9df-221">Делегат, список вызовов которого передан первым.</span><span class="sxs-lookup"><span data-stu-id="8b9df-221">The delegate whose invocation list comes first.</span></span></param>
        <param name="b"><span data-ttu-id="8b9df-222">Делегат, список вызовов которого передан вторым.</span><span class="sxs-lookup"><span data-stu-id="8b9df-222">The delegate whose invocation list comes last.</span></span></param>
        <summary><span data-ttu-id="8b9df-223">Сцепляет списки вызовов двух делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-223">Concatenates the invocation lists of two delegates.</span></span></summary>
        <returns><span data-ttu-id="8b9df-224">Новый делегат со списком вызовов, представляющим собой сцепление списков вызовов, заданных в параметрах <paramref name="a" /> и <paramref name="b" /> в указанном порядке.</span><span class="sxs-lookup"><span data-stu-id="8b9df-224">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span></span> <span data-ttu-id="8b9df-225">Возвращает <paramref name="a" />, если <paramref name="b" /> имеет значение <see langword="null" />; возвращает <paramref name="b" />, если <paramref name="a" /> является пустой ссылкой; возвращает пустую ссылку, если <paramref name="a" /> и <paramref name="b" /> являются пустыми ссылками.</span><span class="sxs-lookup"><span data-stu-id="8b9df-225">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-226">Список вызовов может содержать дублирующиеся записи. то есть записи, ссылающиеся на один и тот же метод для одного и того же объекта.</span><span class="sxs-lookup"><span data-stu-id="8b9df-226">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-227">Универсальные делегаты, совместимые с присваиванием, в связи с дисперсией не всегда являются комбинированными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-227">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="8b9df-228">Чтобы обеспечить возможность комбинирования, типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-228">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="8b9df-229">Например, предположим, что класс с именем `Derived` является производным от класса с `Base`именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-229">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="8b9df-230">Делегат типа `Action<Base>` (`Action(Of Base)` в Visual Basic) может быть присвоен переменной типа `Action<Derived>`, как описано в ковариации [и контрвариация](~/docs/standard/generics/covariance-and-contravariance.md), но два делегата не могут быть объединены, так как типы не совпадают в точности.</span><span class="sxs-lookup"><span data-stu-id="8b9df-230">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-231"><xref:System.Delegate.Combine%2A>полезен для создания обработчиков событий, которые вызывают несколько методов при каждом возникновении события.</span><span class="sxs-lookup"><span data-stu-id="8b9df-231"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-232">Значение обоих параметров, <paramref name="a" /> и <paramref name="b" />, не равно <see langword="null" />, и эти параметры <paramref name="a" /> и <paramref name="b" /> не являются экземплярами одного и того же типа делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-232">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-233">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-233">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-234">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-234">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="8b9df-235">Групповой (комбинируемый) делегат, чей список вызовов необходимо добавить в конец списка вызовов текущего группового (комбинируемого) делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-235">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span></span></param>
        <summary><span data-ttu-id="8b9df-236">Сцепляет списки вызовов заданного группового (комбинируемого) делегата и текущего группового (комбинируемого) делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-236">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-237">Новый групповой (комбинируемый) делегат со списком вызовов, состоящим из сцепления списков вызовов текущего группового (комбинируемого) делегата и делегата, заданного в параметре <paramref name="d" />, или текущий групповой (комбинируемый) делегат, если <paramref name="d" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-237">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-238">Этот метод применяется только в том случае, если текущий делегат является многоадресным (комбинированным).</span><span class="sxs-lookup"><span data-stu-id="8b9df-238">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="8b9df-239">Текущая реализация просто создает исключение <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-239">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="8b9df-240">Список вызовов может содержать дублирующиеся записи. то есть записи, ссылающиеся на один и тот же метод для одного и того же объекта.</span><span class="sxs-lookup"><span data-stu-id="8b9df-240">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException"><span data-ttu-id="8b9df-241">Создается всегда.</span><span class="sxs-lookup"><span data-stu-id="8b9df-241">Always thrown.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-242">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-242">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-243">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-243">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8b9df-244">Создает делегат указанного типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-244">Creates a delegate of the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-245"><see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-245">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-246"><see cref="T:System.Reflection.MethodInfo" />, описывающий статический метод или метод экземпляра, который будет представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-246">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span> <span data-ttu-id="8b9df-247">На платформе .NET Framework версий 1.0 и 1.1 поддерживаются только статические методы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-247">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span></span></param>
        <summary><span data-ttu-id="8b9df-248">Создает делегат указанного типа, представляющий заданный статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-248">Creates a delegate of the specified type to represent the specified static method.</span></span></summary>
        <returns><span data-ttu-id="8b9df-249">Делегат указанного типа, представляющий заданный статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-249">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-250">В .NET Framework версии 1,0 и 1,1 Эта перегрузка метода создает делегаты только для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-250">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="8b9df-251">В .NET Framework версии 2,0 Эта перегрузка метода также может создавать делегаты методов открытого экземпляра. Это значит, что делегаты явно предоставляют скрытый первый аргумент методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-251">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="8b9df-252">Подробное описание см. в разделе более общий <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> перегруженный метод, который позволяет создавать все сочетания открытых или закрытых делегатов для экземпляров или статических методов, а также при необходимости указывать первый аргумент.</span><span class="sxs-lookup"><span data-stu-id="8b9df-252">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-253">Этот перегруженный метод следует использовать, когда делегат не закрыт по первому аргументу, так как в этом случае он выполняется несколько быстрее.</span><span class="sxs-lookup"><span data-stu-id="8b9df-253">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="8b9df-254">Перегрузка этого метода эквивалентна вызову <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> перегрузки метода и указанию `true` для `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-254">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-255">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-255">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-256">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-256">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-257">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-257">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8b9df-258">Совместимые типы параметров и возвращаемый тип</span><span class="sxs-lookup"><span data-stu-id="8b9df-258">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8b9df-259">В .NET Framework версии 2,0 типы параметров и тип возвращаемого значения делегата, созданного с помощью этой перегрузки метода, должны быть совместимы с типами параметров и типом возвращаемого значения метода, который представляет делегат. типы не обязательно должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-259">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="8b9df-260">Это представляет ослабление поведения привязки в .NET Framework версии 1,0 и 1,1, где типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-260">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-261">Если тип параметра делегата является более строгим, чем тип параметра метода, то параметр делегата совместим с соответствующим параметром метода, так как это гарантирует, что аргумент, переданный делегату, может быть безопасно передан методу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-261">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8b9df-262">Аналогичным образом, тип возвращаемого значения делегата совместим с типом возвращаемого значения метода, если тип возвращаемого значения метода является более строгим, чем тип возвращаемого значения делегата, так как это гарантирует, что возвращаемое значение метода может быть безопасно приведено к типу возвращаемого значения делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-262">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-263">Например, делегат <xref:System.Collections.Hashtable> с параметром типа и <xref:System.Object> типом возвращаемого значения может представлять метод с параметром типа <xref:System.Object> и возвращаемым значением типа <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-263">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b9df-264">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-264">This section contains two code examples.</span></span> <span data-ttu-id="8b9df-265">В первом примере показаны два вида делегатов, которые можно создать с помощью этой перегрузки метода: открыть через метод экземпляра и открыть в статическом методе.</span><span class="sxs-lookup"><span data-stu-id="8b9df-265">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="8b9df-266">Во втором примере кода демонстрируются совместимые типы параметров и возвращаемые типы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-266">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8b9df-267">**Пример 1**</span><span class="sxs-lookup"><span data-stu-id="8b9df-267">**Example 1**</span></span>  
  
 <span data-ttu-id="8b9df-268">В следующем примере кода показаны два способа создания делегата с помощью этой перегрузки <xref:System.Delegate.CreateDelegate%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-268">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-269">Существует две перегрузки <xref:System.Delegate.CreateDelegate%2A> метода, указывающие, <xref:System.Reflection.MethodInfo> но не первый аргумент; их функциональные возможности одинаковы, за исключением того, что можно указать, следует ли создавать привязку при сбое, а другое всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-269">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8b9df-270">В этом примере кода используются обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-270">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8b9df-271">В примере объявляется `C` класс со статическим методом `M2` и методом `M1`экземпляра, а также `C` два типа делегата: `D1` принимает экземпляр и строку и `D2` принимает строку.</span><span class="sxs-lookup"><span data-stu-id="8b9df-271">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="8b9df-272">Второй класс с именем `Example` содержит код, создающий делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-272">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-273">Делегат типа `D1`, представляющий открытый метод экземпляра, создается для метода `M1`экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-273">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8b9df-274">Экземпляр должен передаваться при вызове делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-274">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-275">Для статического метода `M2`создается `D2`делегат типа, представляющий открытый статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-275">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8b9df-276">**Пример 2**</span><span class="sxs-lookup"><span data-stu-id="8b9df-276">**Example 2**</span></span>  
  
 <span data-ttu-id="8b9df-277">В следующем примере кода демонстрируется совместимость типов параметров и возвращаемых типов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-277">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="8b9df-278">В примере кода определяется базовый класс с именем `Base` и `Derived` класс, производный от `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-278">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8b9df-279">Производный `static` класс имеет метод (`Shared` в Visual Basic) с именем `MyMethod` с одним параметром типа `Base` и типом возвращаемого значения `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-279">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8b9df-280">В примере кода также определяется делегат с именем `Example` с одним параметром типа `Derived` и типом возвращаемого значения `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-280">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8b9df-281">В примере кода показано, что для представления `Example` метода `MyMethod`можно использовать делегат с именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-281">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8b9df-282">Метод можно привязать к делегату по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="8b9df-282">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8b9df-283">Тип`Derived`параметра делегата () более ограничен, чем `MyMethod` тип параметра (`Base`), чтобы всегда быть уверенным `MyMethod`в передаче аргумента делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-283">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8b9df-284">Тип возвращаемого значения `MyMethod` (`Derived`) является более строгой, чем тип параметра делегата (`Base`), чтобы всегда быть уверенным в том, чтобы привести возвращаемый тип метода к возвращаемому типу делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-284">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-285">В примере кода выходные данные не создаются.</span><span class="sxs-lookup"><span data-stu-id="8b9df-285">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-286"><paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-286"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-287">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-287">-or-</span></span> 
 <span data-ttu-id="8b9df-288"><paramref name="method" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-288"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-289"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-289"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-290">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-290">-or-</span></span> 
 <span data-ttu-id="8b9df-291"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-291"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-292">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-292">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-293">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-293">-or-</span></span> 
 <span data-ttu-id="8b9df-294"><paramref name="method" /> не является статическим методом и платформа .NET Framework имеет версию 1.0 или 1.1.</span><span class="sxs-lookup"><span data-stu-id="8b9df-294"><paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span></span>  
  
<span data-ttu-id="8b9df-295">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-295">-or-</span></span> 
 <span data-ttu-id="8b9df-296">Не удалось выполнить связывание <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-296"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="8b9df-297">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-297">-or-</span></span> 
 <span data-ttu-id="8b9df-298"><paramref name="method" /> не является объектом типа <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-298"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="8b9df-299">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-299">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-300">Метод <see langword="Invoke" /> типа <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-300">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-301">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-301">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-302">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-302">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-303">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="firstArgument" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-304">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-304">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="8b9df-305">Объект, с которым связан делегат, или <see langword="null" /> для интерпретации <paramref name="method" /> как <see langword="static" /> (<see langword="Shared" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8b9df-305">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-306">Объект <see cref="T:System.Reflection.MethodInfo" />, описывающий статический метод или метод экземпляра, который будет представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-306">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="8b9df-307">Создает делегат указанного типа, представляющий заданный статический метод или метод экземпляра, с заданным первым аргументом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-307">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span></span></summary>
        <returns><span data-ttu-id="8b9df-308">Делегат указанного типа, представляющий заданный статический метод или метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-308">A delegate of the specified type that represents the specified static or instance method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-309">Вызов этой перегрузки метода эквивалентен вызову <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> перегрузки метода и указанию `true` для `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-309">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="8b9df-310">Эти две перегрузки обеспечивают наиболее гибкий способ создания делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-310">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="8b9df-311">Их можно использовать для создания делегатов для статических методов или, а также для указания первого аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-311">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-312">Если не указать первый аргумент, используйте <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> перегрузку метода для повышения производительности.</span><span class="sxs-lookup"><span data-stu-id="8b9df-312">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="8b9df-313">Тип делегата и метод должны иметь совместимые типы возвращаемых значения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-313">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="8b9df-314">То есть тип `method` возвращаемого значения должен быть назначен возвращаемому `type`типу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-314">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="8b9df-315">Если `firstArgument` указан аргумент, он `method` передается при каждом вызове делегата; `firstArgument` считается привязанным к делегату, и делегат называется закрытым для своего первого аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-315">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="8b9df-316">Если `method` имеет `static` значение(`Shared` в Visual Basic), список аргументов, предоставленный при вызове делегата, включает все параметры, кроме `method` первого; если является методом экземпляра `firstArgument` , то передается в скрытый экземпляр. параметр (представленный `this` в C#или `Me` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8b9df-316">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="8b9df-317">Если `firstArgument` указан аргумент, первый `method` параметр должен быть ссылочным типом и `firstArgument` должен быть совместим с этим типом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-317">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b9df-318">Если `method` имеет `firstArgument` <xref:System.ValueType> <xref:System.Object> значение (`Shared` в Visual Basic) и его первый параметр имеет тип или, то может быть типом значения. `static`</span><span class="sxs-lookup"><span data-stu-id="8b9df-318">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="8b9df-319">В этом случае `firstArgument` автоматически упаковывается.</span><span class="sxs-lookup"><span data-stu-id="8b9df-319">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="8b9df-320">Автоматическая упаковка- C# преобразование не выполняется для других аргументов, как в вызове функции или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8b9df-320">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="8b9df-321">Если `firstArgument` является пустой ссылкой и `method` является методом экземпляра, результат зависит от сигнатур типа `type` делегата и `method`:</span><span class="sxs-lookup"><span data-stu-id="8b9df-321">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8b9df-322">Если сигнатура `type` явно включает в себя скрытый первый `method`параметр, то говорят, что делегат представляет открытый метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-322">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="8b9df-323">При вызове делегата первый аргумент в списке аргументов передается в параметр `method`скрытого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-323">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="8b9df-324">Если сигнатуры `method` и `type` совпадают (то есть все типы параметров совместимы), делегат считается закрытым по пустой ссылке.</span><span class="sxs-lookup"><span data-stu-id="8b9df-324">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8b9df-325">Вызов делегата аналогичен вызову метода экземпляра для экземпляра со значением NULL, что не особенно полезно для этого.</span><span class="sxs-lookup"><span data-stu-id="8b9df-325">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="8b9df-326">Если `firstArgument` параметр является пустой ссылкой и `method` является статическим, результат зависит от сигнатур типа `type` делегата и `method`:</span><span class="sxs-lookup"><span data-stu-id="8b9df-326">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8b9df-327">Если сигнатура `method` и `type` совпадает (то есть все типы параметров совместимы), делегат называется открытым статическим методом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-327">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="8b9df-328">Это наиболее распространенный случай для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-328">This is the most common case for static methods.</span></span> <span data-ttu-id="8b9df-329">В этом случае можно получить немного более высокую производительность с помощью <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-329">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="8b9df-330">Если сигнатура `type` начинается со второго `method` параметра, а остальные типы параметров совместимы, то делегат называется закрытым с помощью пустой ссылки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-330">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8b9df-331">При вызове делегата в первый параметр метода `method`передается пустая ссылка.</span><span class="sxs-lookup"><span data-stu-id="8b9df-331">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-332">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-332">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-333">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-333">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-334">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-334">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8b9df-335">Совместимые типы параметров и возвращаемый тип</span><span class="sxs-lookup"><span data-stu-id="8b9df-335">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8b9df-336">Типы параметров и возвращаемый тип делегата должны быть совместимы с типами параметров и типом возвращаемого значения метода, который представляет делегат. типы не обязательно должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-336">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-337">В .NET Framework версии 1,0 и 1,1 типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-337">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-338">Если тип параметра делегата является более строгим, чем тип параметра метода, то параметр делегата совместим с соответствующим параметром метода, так как это гарантирует, что аргумент, переданный делегату, может быть безопасно передан методу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-338">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8b9df-339">Аналогичным образом, тип возвращаемого значения делегата совместим с типом возвращаемого значения метода, если тип возвращаемого значения метода является более строгим, чем тип возвращаемого значения делегата, так как это гарантирует, что возвращаемое значение метода может быть безопасно приведено к типу возвращаемого значения делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-339">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-340">Например, делегат <xref:System.Collections.Hashtable> с параметром типа и <xref:System.Object> типом возвращаемого значения может представлять метод с параметром типа <xref:System.Object> и возвращаемым значением типа <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-340">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="8b9df-341">Определение методов, которые может представлять делегат</span><span class="sxs-lookup"><span data-stu-id="8b9df-341">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="8b9df-342">Еще один полезный способ представить гибкость, обеспечиваемую этой перегрузкой <xref:System.Delegate.CreateDelegate%2A> , заключается в том, что любой заданный делегат может представлять четыре различных сочетания сигнатуры и типа метода (статический и экземпляр).</span><span class="sxs-lookup"><span data-stu-id="8b9df-342">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="8b9df-343">Рассмотрим тип `D` делегата с одним аргументом типа `C`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-343">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8b9df-344">Ниже описаны методы `D` , которые могут представлять, игнорируя возвращаемый тип, так как он должен совпадать во всех случаях:</span><span class="sxs-lookup"><span data-stu-id="8b9df-344">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="8b9df-345">`D`может представлять любой метод экземпляра, имеющий только один аргумент типа `C`, независимо от того, к какому типу относится метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-345">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="8b9df-346">При <xref:System.Delegate.CreateDelegate%2A> `method` вызове метод является экземпляром типа, а получившийся делегат называется закрытым для этого экземпляра. `firstArgument`</span><span class="sxs-lookup"><span data-stu-id="8b9df-346">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="8b9df-347">(Тривиальный элемент `D` также может быть закрыт над пустой ссылкой, если `firstArgument` является пустой ссылкой.)</span><span class="sxs-lookup"><span data-stu-id="8b9df-347">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="8b9df-348">`D`может представлять метод `C` экземпляра, не имеющий аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-348">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="8b9df-349"><xref:System.Delegate.CreateDelegate%2A> При`firstArgument` вызове метода является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-349">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8b9df-350">Результирующий делегат представляет открытый метод экземпляра, а экземпляр `C` должен предоставляться каждый раз при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-350">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-351">`D`может представлять статический метод, который принимает один аргумент типа `C`, и этот метод может принадлежать любому типу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-351">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="8b9df-352"><xref:System.Delegate.CreateDelegate%2A> При`firstArgument` вызове метода является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-352">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8b9df-353">Результирующий делегат представляет открытый статический метод, а экземпляр `C` должен предоставляться каждый раз при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-353">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-354">`D`может представлять статический метод, принадлежащий типу `F` и имеющий два аргумента типа `F` и типа `C`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-354">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="8b9df-355">При <xref:System.Delegate.CreateDelegate%2A> `F`вызове метод является экземпляром. `firstArgument`</span><span class="sxs-lookup"><span data-stu-id="8b9df-355">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="8b9df-356">Результирующий делегат представляет статический метод, закрытый для этого экземпляра `F`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-356">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="8b9df-357">Обратите внимание, что в `F` случае `C` , когда и относятся к одному и тому же типу, статический метод имеет два аргумента этого типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-357">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="8b9df-358">(В данном случае закрывается по пустой ссылке, `D` если `firstArgument` является пустой ссылкой.)</span><span class="sxs-lookup"><span data-stu-id="8b9df-358">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b9df-359">Этот раздел содержит три примера кода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-359">This section contains three code examples.</span></span> <span data-ttu-id="8b9df-360">В первом примере показаны четыре типа делегатов, которые могут быть созданы: закрыто над методом экземпляра, открыто через метод экземпляра, открыто через статический метод и закрыто по статическому методу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-360">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="8b9df-361">Во втором примере кода демонстрируются совместимые типы параметров и возвращаемые типы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-361">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8b9df-362">В третьем примере кода определяется один тип делегата и отображаются все методы, которые могут представляться типом делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-362">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="8b9df-363">**Пример 1**</span><span class="sxs-lookup"><span data-stu-id="8b9df-363">**Example 1**</span></span>  
  
 <span data-ttu-id="8b9df-364">В следующем примере кода показаны четыре способа создания делегата с помощью этой перегрузки <xref:System.Delegate.CreateDelegate%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-364">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-365">Существует две перегрузки <xref:System.Delegate.CreateDelegate%2A> метода, которые задают `firstArgument` и <xref:System.Reflection.MethodInfo>; их функциональные возможности одинаковы, за исключением того, что позволяет указать, следует ли создавать привязку при ошибке, а вторая всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-365">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8b9df-366">В этом примере кода используются обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-366">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8b9df-367">В примере объявляется `C` класс со статическим методом `M2` и методом `M1`экземпляра, а также `C` три типа делегата: `D1` принимает экземпляр и строку, `D2` принимает строку и `D3`не имеет аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-367">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="8b9df-368">Второй класс с именем `Example` содержит код, создающий делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-368">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-369">Делегат типа `D2`, закрытый над `C`экземпляром, создается для метода `M1`экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-369">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="8b9df-370">Он вызывается с разными строками, чтобы продемонстрировать, что привязанный экземпляр `C` всегда используется.</span><span class="sxs-lookup"><span data-stu-id="8b9df-370">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="8b9df-371">Делегат типа `D1`, представляющий открытый метод экземпляра, создается для метода `M1`экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-371">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8b9df-372">Экземпляр должен передаваться при вызове делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-372">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-373">Для статического метода `M2`создается `D2`делегат типа, представляющий открытый статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-373">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="8b9df-374">Наконец, для статического метода `D3` `M2`создается делегат типа, закрытый над строкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-374">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="8b9df-375">Метод вызывается, чтобы продемонстрировать, что он использует привязанную строку.</span><span class="sxs-lookup"><span data-stu-id="8b9df-375">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8b9df-376">**Пример 2**</span><span class="sxs-lookup"><span data-stu-id="8b9df-376">**Example 2**</span></span>  
  
 <span data-ttu-id="8b9df-377">В следующем примере кода демонстрируется совместимость типов параметров и возвращаемых типов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-377">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-378">В <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> этом примере кода используется перегрузка метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-378">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="8b9df-379">Использование других перегрузок, которые принимаются <xref:System.Reflection.MethodInfo> , аналогично.</span><span class="sxs-lookup"><span data-stu-id="8b9df-379">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="8b9df-380">В примере кода определяется базовый класс с именем `Base` и `Derived` класс, производный от `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-380">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8b9df-381">Производный `static` класс имеет метод (`Shared` в Visual Basic) с именем `MyMethod` с одним параметром типа `Base` и типом возвращаемого значения `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-381">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8b9df-382">В примере кода также определяется делегат с именем `Example` с одним параметром типа `Derived` и типом возвращаемого значения `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-382">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8b9df-383">В примере кода показано, что для представления `Example` метода `MyMethod`можно использовать делегат с именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-383">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8b9df-384">Метод можно привязать к делегату по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="8b9df-384">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8b9df-385">Тип`Derived`параметра делегата () более ограничен, чем `MyMethod` тип параметра (`Base`), чтобы всегда быть уверенным `MyMethod`в передаче аргумента делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-385">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8b9df-386">Тип возвращаемого значения `MyMethod` (`Derived`) является более строгой, чем тип параметра делегата (`Base`), чтобы всегда быть уверенным в том, чтобы привести возвращаемый тип метода к возвращаемому типу делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-386">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-387">В примере кода выходные данные не создаются.</span><span class="sxs-lookup"><span data-stu-id="8b9df-387">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="8b9df-388">**Пример 3**</span><span class="sxs-lookup"><span data-stu-id="8b9df-388">**Example 3**</span></span>  
  
 <span data-ttu-id="8b9df-389">В следующем примере кода показаны все методы, которые может представлять один тип делегата, с <xref:System.Delegate.CreateDelegate%2A> помощью метода для создания делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-389">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-390">Существует две перегрузки <xref:System.Delegate.CreateDelegate%2A> метода, которые задают `firstArgument` и <xref:System.Reflection.MethodInfo>; их функциональные возможности одинаковы, за исключением того, что позволяет указать, следует ли создавать привязку при ошибке, а вторая всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-390">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8b9df-391">В этом примере кода используются обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-391">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8b9df-392">В примере кода определяются два класса `C` : `F`и, и тип `D` делегата с одним аргументом `C`типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-392">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8b9df-393">Классы имеют совпадающие статические методы и `M1`метод `M3`экземпляра, `M4`, и, `C` а класс также имеет метод `M2` экземпляра, не имеющий аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-393">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="8b9df-394">Третий класс с именем `Example` содержит код, создающий делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-394">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-395">Делегаты создаются для метода `M1` экземпляра типа `C` и типа `F`, каждый из которых закрыт для экземпляра соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-395">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="8b9df-396">Метод `M1` типа `C` отображает`ID` свойства привязанного экземпляра и аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-396">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="8b9df-397">Делегат создается для метода `M2` типа. `C`</span><span class="sxs-lookup"><span data-stu-id="8b9df-397">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="8b9df-398">Это делегат открытого экземпляра, в котором аргумент делегата представляет собой скрытый первый аргумент в методе экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-398">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="8b9df-399">Метод не имеет других аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-399">The method has no other arguments.</span></span> <span data-ttu-id="8b9df-400">Он вызывается, как если бы он был статическим методом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-400">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="8b9df-401">Делегаты создаются для статического метода `M3` типа `C` и типа `F`. это открытые статические делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-401">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-402">Наконец, делегаты создаются для статического метода `M4` типа `C` и типа `F`; каждый метод имеет объявляющий тип в качестве первого аргумента и предоставляется экземпляр типа, поэтому делегаты закрываются по первым аргументам. .</span><span class="sxs-lookup"><span data-stu-id="8b9df-402">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="8b9df-403">Метод `M4` типа `C` отображает`ID` свойства привязанного экземпляра и аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-403">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-404">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-404"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-405">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-405">-or-</span></span> 
 <span data-ttu-id="8b9df-406">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-406"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-407"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-407"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-408">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-408">-or-</span></span> 
 <span data-ttu-id="8b9df-409"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-409"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-410">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-410">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-411">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-411">-or-</span></span> 
 <span data-ttu-id="8b9df-412">Не удалось выполнить связывание <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-412"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="8b9df-413">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-413">-or-</span></span> 
 <span data-ttu-id="8b9df-414"><paramref name="method" /> не является объектом типа <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-414"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="8b9df-415">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-415">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-416">Метод <see langword="Invoke" /> типа <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-416">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-417">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-417">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-418">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-418">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-419">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-419">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-420">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-420">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="8b9df-421">Экземпляр класса, для которого вызывается метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-421">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-422">Имя метода экземпляра, который должен быть представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-422">The name of the instance method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="8b9df-423">Создает делегат указанного типа, представляющий заданный метод экземпляра, который вызывается для заданного экземпляра класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-423">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></summary>
        <returns><span data-ttu-id="8b9df-424">Создает делегат указанного типа, представляющий заданный метод экземпляра, который вызывается для заданного экземпляра класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-424">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-425">Этот метод создает делегаты только для методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-425">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="8b9df-426">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-426">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8b9df-427">Перегрузка этого <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> метода эквивалентна вызову перегрузки метода, указывающей `true` `false` для `throwOnBindFailure` `ignoreCase` и для.</span><span class="sxs-lookup"><span data-stu-id="8b9df-427">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-428">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-428">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-429">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-429">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-430">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-430">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-431">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-431"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-432">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-432">-or-</span></span> 
 <span data-ttu-id="8b9df-433">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-433"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-434">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-434">-or-</span></span> 
 <span data-ttu-id="8b9df-435">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-435"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-436"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-436"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-437">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-437">-or-</span></span> 
 <span data-ttu-id="8b9df-438"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-438"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-439">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-439">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-440">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-440">-or-</span></span> 
 <span data-ttu-id="8b9df-441"><paramref name="method" /> не является методом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-441"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="8b9df-442">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-442">-or-</span></span> 
 <span data-ttu-id="8b9df-443">Параметр <paramref name="method" /> невозможно привязать, например, потому, что его не удалось найти.</span><span class="sxs-lookup"><span data-stu-id="8b9df-443"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-444">Метод <see langword="Invoke" /> для <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-444">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-445">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-445">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-446">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-446">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-447">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-447">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-448">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-448">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-449">Объект <see cref="T:System.Reflection.MethodInfo" />, описывающий статический метод или метод экземпляра, который будет представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-449">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="8b9df-450">Значение <see langword="true" /> для создания исключения, если метод <paramref name="method" /> привязать невозможно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-450"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8b9df-451">Создает делегат указанного типа, представляющий заданный статический метод, с заданным поведением на случай, если операция связывания завершится неудачей.</span><span class="sxs-lookup"><span data-stu-id="8b9df-451">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="8b9df-452">Делегат указанного типа, представляющий заданный статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-452">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-453">Эта перегрузка метода может создавать делегаты открытых статических методов и делегаты методов открытого экземпляра, т. е. Делегаты, которые предоставляют скрытый первый аргумент методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-453">This method overload can create open static method delegates and open instance method delegates - that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="8b9df-454">Подробное описание см. в разделе более общий <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> перегруженный метод, который позволяет создавать все сочетания открытых или закрытых делегатов для экземпляров или статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-454">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-455">Этот перегруженный метод следует использовать, когда делегат не закрыт по первому аргументу, так как в этом случае он выполняется несколько быстрее.</span><span class="sxs-lookup"><span data-stu-id="8b9df-455">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-456">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-456">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-457">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-457">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-458">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-458">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8b9df-459">Совместимые типы параметров и возвращаемый тип</span><span class="sxs-lookup"><span data-stu-id="8b9df-459">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8b9df-460">Типы параметров и возвращаемый тип делегата должны быть совместимы с типами параметров и типом возвращаемого значения метода, который представляет делегат. типы не обязательно должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-460">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-461">В .NET Framework версии 1,0 и 1,1 типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-461">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-462">Если тип параметра делегата является более строгим, чем тип параметра метода, то параметр делегата совместим с соответствующим параметром метода, так как это гарантирует, что аргумент, переданный делегату, может быть безопасно передан методу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-462">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8b9df-463">Аналогичным образом, тип возвращаемого значения делегата совместим с типом возвращаемого значения метода, если тип возвращаемого значения метода является более строгим, чем тип возвращаемого значения делегата, так как это гарантирует, что возвращаемое значение метода может быть безопасно приведено к типу возвращаемого значения делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-463">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-464">Например, делегат <xref:System.Collections.Hashtable> с параметром типа и <xref:System.Object> типом возвращаемого значения может представлять метод с параметром типа <xref:System.Object> и возвращаемым значением типа <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-464">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b9df-465">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-465">This section contains two code examples.</span></span> <span data-ttu-id="8b9df-466">В первом примере показаны два вида делегатов, которые можно создать с помощью этой перегрузки метода: открыть через метод экземпляра и открыть в статическом методе.</span><span class="sxs-lookup"><span data-stu-id="8b9df-466">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="8b9df-467">Во втором примере кода демонстрируются совместимые типы параметров и возвращаемые типы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-467">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8b9df-468">**Пример 1**</span><span class="sxs-lookup"><span data-stu-id="8b9df-468">**Example 1**</span></span>  
  
 <span data-ttu-id="8b9df-469">В следующем примере кода показаны два способа создания делегата с помощью этой перегрузки <xref:System.Delegate.CreateDelegate%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-469">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-470">Существует две перегрузки <xref:System.Delegate.CreateDelegate%2A> метода, указывающие, <xref:System.Reflection.MethodInfo> но не первый аргумент; их функциональные возможности одинаковы, за исключением того, что можно указать, следует ли создавать привязку при сбое, а другое всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-470">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8b9df-471">В этом примере кода используются обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-471">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8b9df-472">В примере объявляется `C` класс со статическим методом `M2` и методом `M1`экземпляра, а также `C` два типа делегата: `D1` принимает экземпляр и строку и `D2` принимает строку.</span><span class="sxs-lookup"><span data-stu-id="8b9df-472">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="8b9df-473">Второй класс с именем `Example` содержит код, создающий делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-473">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-474">Делегат типа `D1`, представляющий открытый метод экземпляра, создается для метода `M1`экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-474">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8b9df-475">Экземпляр должен передаваться при вызове делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-475">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-476">Для статического метода `M2`создается `D2`делегат типа, представляющий открытый статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-476">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8b9df-477">**Пример 2**</span><span class="sxs-lookup"><span data-stu-id="8b9df-477">**Example 2**</span></span>  
  
 <span data-ttu-id="8b9df-478">В следующем примере кода демонстрируется совместимость типов параметров и возвращаемых типов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-478">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-479">В <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> этом примере кода используется перегрузка метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-479">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="8b9df-480">Использование других перегрузок, которые принимаются <xref:System.Reflection.MethodInfo> , аналогично.</span><span class="sxs-lookup"><span data-stu-id="8b9df-480">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="8b9df-481">В примере кода определяется базовый класс с именем `Base` и `Derived` класс, производный от `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-481">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8b9df-482">Производный `static` класс имеет метод (`Shared` в Visual Basic) с именем `MyMethod` с одним параметром типа `Base` и типом возвращаемого значения `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-482">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8b9df-483">В примере кода также определяется делегат с именем `Example` с одним параметром типа `Derived` и типом возвращаемого значения `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-483">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8b9df-484">В примере кода показано, что для представления `Example` метода `MyMethod`можно использовать делегат с именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-484">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8b9df-485">Метод можно привязать к делегату по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="8b9df-485">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8b9df-486">Тип`Derived`параметра делегата () более ограничен, чем `MyMethod` тип параметра (`Base`), чтобы всегда быть уверенным `MyMethod`в передаче аргумента делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-486">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8b9df-487">Тип возвращаемого значения `MyMethod` (`Derived`) является более строгой, чем тип параметра делегата (`Base`), чтобы всегда быть уверенным в том, чтобы привести возвращаемый тип метода к возвращаемому типу делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-487">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-488">В примере кода выходные данные не создаются.</span><span class="sxs-lookup"><span data-stu-id="8b9df-488">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-489"><paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-489"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-490">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-490">-or-</span></span> 
 <span data-ttu-id="8b9df-491">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-491"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-492"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-492"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-493">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-493">-or-</span></span> 
 <span data-ttu-id="8b9df-494"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-494"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-495">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-495">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-496">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-496">-or-</span></span> 
 <span data-ttu-id="8b9df-497"><paramref name="method" /> невозможно привязать, и <paramref name="throwOnBindFailure" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-497"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="8b9df-498">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-498">-or-</span></span> 
 <span data-ttu-id="8b9df-499"><paramref name="method" /> не является объектом типа <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-499"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="8b9df-500">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-500">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-501">Метод <see langword="Invoke" /> типа <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-502">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-503">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-503">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-504">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-504">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-505">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-505">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="8b9df-506">Тип <see cref="T:System.Type" />, представляющий класс, в котором реализован метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-506">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-507">Имя статического метода, который должен быть представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-507">The name of the static method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="8b9df-508">Создает делегат указанного типа, представляющий заданный статический метод заданного класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-508">Creates a delegate of the specified type that represents the specified static method of the specified class.</span></span></summary>
        <returns><span data-ttu-id="8b9df-509">Делегат указанного типа, представляющий заданный статический метод заданного класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-509">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-510">Этот метод создает делегаты только для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-510">This method creates delegates for static methods only.</span></span> <span data-ttu-id="8b9df-511">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-511">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8b9df-512">Перегрузка этого <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> метода эквивалентна вызову перегрузки метода, указывающей `true` `false` для `throwOnBindFailure` `ignoreCase` и для.</span><span class="sxs-lookup"><span data-stu-id="8b9df-512">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-513">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-513">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-514">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-514">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-515">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-515">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-516"><paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-516"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-517">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-517">-or-</span></span> 
 <span data-ttu-id="8b9df-518">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-518"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-519">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-519">-or-</span></span> 
 <span data-ttu-id="8b9df-520"><paramref name="method" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-520"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-521"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-521"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-522">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-522">-or-</span></span> 
 <span data-ttu-id="8b9df-523"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-523"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-524">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-524">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-525">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-525">-or-</span></span> 
 <span data-ttu-id="8b9df-526"><paramref name="target" /> не является объектом <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-526"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="8b9df-527">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-527">-or-</span></span> 
 <span data-ttu-id="8b9df-528">Параметр <paramref name="target" /> является открытым универсальным типом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-528"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="8b9df-529">То есть свойство <see cref="P:System.Type.ContainsGenericParameters" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-529">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="8b9df-530">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-530">-or-</span></span> 
 <span data-ttu-id="8b9df-531"><paramref name="method" /> не является методом <see langword="static" /> (метод <see langword="Shared" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8b9df-531"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="8b9df-532">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-532">-or-</span></span> 
 <span data-ttu-id="8b9df-533">Параметр <paramref name="method" /> невозможно привязать, например, потому, что его невозможно найти, а <paramref name="throwOnBindFailure" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-533"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-534">Метод <see langword="Invoke" /> для <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-534">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-535">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-535">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-536">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-536">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-537">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-537">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="firstArgument" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-538">Объект <see cref="T:System.Type" />, представляющий тип создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-538">A <see cref="T:System.Type" /> representing the type of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="8b9df-539"><see cref="T:System.Object" />, являющийся первым аргументом метода, представленного делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-539">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span></span> <span data-ttu-id="8b9df-540">Для методов экземпляра он должен быть совместим с типом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-540">For instance methods, it must be compatible with the instance type.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-541">Объект <see cref="T:System.Reflection.MethodInfo" />, описывающий статический метод или метод экземпляра, который будет представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-541">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="8b9df-542">Значение <see langword="true" /> для создания исключения, если метод <paramref name="method" /> невозможно привязать; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-542"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8b9df-543">Создает делегат указанного типа, представляющий заданный статический метод или метод экземпляра, с заданным первым аргументом и поведением на случай, если операция связывания завершится неудачей.</span><span class="sxs-lookup"><span data-stu-id="8b9df-543">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="8b9df-544">Делегат заданного типа, представляющий указанный статический метод или метод экземпляра, либо значение <see langword="null" />, если значение параметра <paramref name="throwOnBindFailure" /> равно <see langword="false" /> и делегат не удалось связать с методом <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-544">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-545">Этот перегруженный метод и <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> перегрузка метода, которая всегда вызывает сбой при привязке, предоставляют наиболее гибкий способ создания делегатов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-545">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="8b9df-546">Их можно использовать для создания делегатов для статических методов или и без первого аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-546">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-547">Если не указать первый аргумент, используйте <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> перегрузку метода для повышения производительности.</span><span class="sxs-lookup"><span data-stu-id="8b9df-547">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="8b9df-548">Тип делегата и метод должны иметь совместимые типы возвращаемых значения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-548">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="8b9df-549">То есть тип `method` возвращаемого значения должен быть назначен возвращаемому `type`типу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-549">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="8b9df-550">Если `firstArgument` указан аргумент, он `method` передается при каждом вызове делегата; `firstArgument` считается привязанным к делегату, и делегат называется закрытым для своего первого аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-550">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="8b9df-551">Если `method` имеет `static` значение(`Shared` в Visual Basic), список аргументов, предоставленный при вызове делегата, включает все параметры, кроме `method` первого; если является методом экземпляра `firstArgument` , то передается в скрытый экземпляр. параметр (представленный `this` в C#или `Me` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8b9df-551">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="8b9df-552">Если `firstArgument` указан аргумент, первый `method` параметр должен быть ссылочным типом и `firstArgument` должен быть совместим с этим типом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-552">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b9df-553">Если `method` имеет `firstArgument` <xref:System.ValueType> <xref:System.Object> значение (`Shared` в Visual Basic) и его первый параметр имеет тип или, то может быть типом значения. `static`</span><span class="sxs-lookup"><span data-stu-id="8b9df-553">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="8b9df-554">В этом случае `firstArgument` автоматически упаковывается.</span><span class="sxs-lookup"><span data-stu-id="8b9df-554">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="8b9df-555">Автоматическая упаковка- C# преобразование не выполняется для других аргументов, как в вызове функции или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8b9df-555">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="8b9df-556">Если `firstArgument` является пустой ссылкой и `method` является методом экземпляра, результат зависит от сигнатур типа `type` делегата и `method`:</span><span class="sxs-lookup"><span data-stu-id="8b9df-556">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8b9df-557">Если сигнатура `type` явно включает в себя скрытый первый `method`параметр, то говорят, что делегат представляет открытый метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-557">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="8b9df-558">При вызове делегата первый аргумент в списке аргументов передается в параметр `method`скрытого экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-558">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="8b9df-559">Если сигнатуры `method` и `type` совпадают (то есть все типы параметров совместимы), делегат считается закрытым по пустой ссылке.</span><span class="sxs-lookup"><span data-stu-id="8b9df-559">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8b9df-560">Вызов делегата аналогичен вызову метода экземпляра для экземпляра со значением NULL, что не особенно полезно для этого.</span><span class="sxs-lookup"><span data-stu-id="8b9df-560">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="8b9df-561">Если `firstArgument` параметр является пустой ссылкой и `method` является статическим, результат зависит от сигнатур типа `type` делегата и `method`:</span><span class="sxs-lookup"><span data-stu-id="8b9df-561">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="8b9df-562">Если сигнатура `method` и `type` совпадает (то есть все типы параметров совместимы), делегат называется открытым статическим методом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-562">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="8b9df-563">Это наиболее распространенный случай для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-563">This is the most common case for static methods.</span></span> <span data-ttu-id="8b9df-564">В этом случае можно получить немного более высокую производительность с помощью <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-564">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="8b9df-565">Если сигнатура `type` начинается со второго `method` параметра, а остальные типы параметров совместимы, то делегат называется закрытым с помощью пустой ссылки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-565">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="8b9df-566">При вызове делегата в первый параметр метода `method`передается пустая ссылка.</span><span class="sxs-lookup"><span data-stu-id="8b9df-566">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-567">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-567">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-568">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-568">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-569">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-569">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="8b9df-570">Совместимые типы параметров и возвращаемый тип</span><span class="sxs-lookup"><span data-stu-id="8b9df-570">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="8b9df-571">Типы параметров и возвращаемый тип делегата должны быть совместимы с типами параметров и типом возвращаемого значения метода, который представляет делегат. типы не обязательно должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-571">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-572">В .NET Framework версии 1,0 и 1,1 типы должны точно совпадать.</span><span class="sxs-lookup"><span data-stu-id="8b9df-572">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="8b9df-573">Если тип параметра делегата является более строгим, чем тип параметра метода, то параметр делегата совместим с соответствующим параметром метода, так как это гарантирует, что аргумент, переданный делегату, может быть безопасно передан методу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-573">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="8b9df-574">Аналогичным образом, тип возвращаемого значения делегата совместим с типом возвращаемого значения метода, если тип возвращаемого значения метода является более строгим, чем тип возвращаемого значения делегата, так как это гарантирует, что возвращаемое значение метода может быть безопасно приведено к типу возвращаемого значения делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-574">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-575">Например, делегат <xref:System.Collections.Hashtable> с параметром типа и <xref:System.Object> типом возвращаемого значения может представлять метод с параметром типа <xref:System.Object> и возвращаемым значением типа <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-575">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="8b9df-576">Определение методов, которые может представлять делегат</span><span class="sxs-lookup"><span data-stu-id="8b9df-576">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="8b9df-577">Еще один полезный способ представить гибкость, обеспечиваемую этой перегрузкой <xref:System.Delegate.CreateDelegate%2A> , заключается в том, что любой заданный делегат может представлять четыре различных сочетания сигнатуры и типа метода (статический и экземпляр).</span><span class="sxs-lookup"><span data-stu-id="8b9df-577">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="8b9df-578">Рассмотрим тип `D` делегата с одним аргументом типа `C`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-578">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8b9df-579">Ниже описаны методы `D` , которые могут представлять, игнорируя возвращаемый тип, так как он должен совпадать во всех случаях:</span><span class="sxs-lookup"><span data-stu-id="8b9df-579">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="8b9df-580">`D`может представлять любой метод экземпляра, имеющий только один аргумент типа `C`, независимо от того, к какому типу относится метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-580">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="8b9df-581">При <xref:System.Delegate.CreateDelegate%2A> `method` вызове метод является экземпляром типа, а получившийся делегат называется закрытым для этого экземпляра. `firstArgument`</span><span class="sxs-lookup"><span data-stu-id="8b9df-581">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="8b9df-582">(Тривиальный элемент `D` также может быть закрыт над пустой ссылкой, если `firstArgument` имеет `null`значение.)</span><span class="sxs-lookup"><span data-stu-id="8b9df-582">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="8b9df-583">`D`может представлять метод `C` экземпляра, не имеющий аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-583">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="8b9df-584"><xref:System.Delegate.CreateDelegate%2A> При`firstArgument` вызове метода является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-584">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8b9df-585">Результирующий делегат представляет открытый метод экземпляра, а экземпляр `C` должен предоставляться каждый раз при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-585">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-586">`D`может представлять статический метод, который принимает один аргумент типа `C`, и этот метод может принадлежать любому типу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-586">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="8b9df-587"><xref:System.Delegate.CreateDelegate%2A> При`firstArgument` вызове метода является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-587">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="8b9df-588">Результирующий делегат представляет открытый статический метод, а экземпляр `C` должен предоставляться каждый раз при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-588">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-589">`D`может представлять статический метод, принадлежащий типу `F` и имеющий два аргумента типа `F` и типа `C`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-589">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="8b9df-590">При <xref:System.Delegate.CreateDelegate%2A> `F`вызове метод является экземпляром. `firstArgument`</span><span class="sxs-lookup"><span data-stu-id="8b9df-590">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="8b9df-591">Результирующий делегат представляет статический метод, закрытый для этого экземпляра `F`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-591">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="8b9df-592">Обратите внимание, что в `F` случае `C` , когда и относятся к одному и тому же типу, статический метод имеет два аргумента этого типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-592">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="8b9df-593">(В данном случае закрывается с пустой ссылкой, `D` если `firstArgument` имеет `null`значение.)</span><span class="sxs-lookup"><span data-stu-id="8b9df-593">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b9df-594">Этот раздел содержит три примера кода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-594">This section contains three code examples.</span></span> <span data-ttu-id="8b9df-595">В первом примере показаны четыре типа делегатов, которые могут быть созданы: закрыто над методом экземпляра, открыто через метод экземпляра, открыто через статический метод и закрыто по статическому методу.</span><span class="sxs-lookup"><span data-stu-id="8b9df-595">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="8b9df-596">Во втором примере кода демонстрируются совместимые типы параметров и возвращаемые типы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-596">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="8b9df-597">В третьем примере кода определяется один тип делегата и отображаются все методы, которые могут представляться типом делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-597">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="8b9df-598">**Пример 1**</span><span class="sxs-lookup"><span data-stu-id="8b9df-598">**Example 1**</span></span>  
  
 <span data-ttu-id="8b9df-599">В следующем примере кода показаны четыре способа создания делегата с помощью этой перегрузки <xref:System.Delegate.CreateDelegate%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-599">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-600">Существует две перегрузки <xref:System.Delegate.CreateDelegate%2A> метода, которые задают `firstArgument` и <xref:System.Reflection.MethodInfo>; их функциональные возможности одинаковы, за исключением того, что позволяет указать, следует ли создавать привязку при ошибке, а вторая всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-600">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8b9df-601">В этом примере кода используются обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-601">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8b9df-602">В примере объявляется `C` класс со статическим методом `M2` и методом `M1`экземпляра, а также `C` три типа делегата: `D1` принимает экземпляр и строку, `D2` принимает строку и `D3`не имеет аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-602">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="8b9df-603">Второй класс с именем `Example` содержит код, создающий делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-603">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-604">Делегат типа `D2`, закрытый над `C`экземпляром, создается для метода `M1`экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-604">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="8b9df-605">Он вызывается с разными строками, чтобы продемонстрировать, что привязанный экземпляр `C` всегда используется.</span><span class="sxs-lookup"><span data-stu-id="8b9df-605">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="8b9df-606">Делегат типа `D1`, представляющий открытый метод экземпляра, создается для метода `M1`экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-606">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="8b9df-607">Экземпляр должен передаваться при вызове делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-607">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="8b9df-608">Для статического метода `M2`создается `D2`делегат типа, представляющий открытый статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-608">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="8b9df-609">Наконец, для статического метода `D3` `M2`создается делегат типа, закрытый над строкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-609">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="8b9df-610">Метод вызывается, чтобы продемонстрировать, что он использует привязанную строку.</span><span class="sxs-lookup"><span data-stu-id="8b9df-610">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="8b9df-611">**Пример 2**</span><span class="sxs-lookup"><span data-stu-id="8b9df-611">**Example 2**</span></span>  
  
 <span data-ttu-id="8b9df-612">В следующем примере кода демонстрируется совместимость типов параметров и возвращаемых типов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-612">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-613">В <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> этом примере кода используется перегрузка метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-613">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="8b9df-614">Использование других перегрузок, которые принимаются <xref:System.Reflection.MethodInfo> , аналогично.</span><span class="sxs-lookup"><span data-stu-id="8b9df-614">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="8b9df-615">В примере кода определяется базовый класс с именем `Base` и `Derived` класс, производный от `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-615">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="8b9df-616">Производный `static` класс имеет метод (`Shared` в Visual Basic) с именем `MyMethod` с одним параметром типа `Base` и типом возвращаемого значения `Derived`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-616">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="8b9df-617">В примере кода также определяется делегат с именем `Example` с одним параметром типа `Derived` и типом возвращаемого значения `Base`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-617">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="8b9df-618">В примере кода показано, что для представления `Example` метода `MyMethod`можно использовать делегат с именем.</span><span class="sxs-lookup"><span data-stu-id="8b9df-618">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="8b9df-619">Метод можно привязать к делегату по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="8b9df-619">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="8b9df-620">Тип`Derived`параметра делегата () более ограничен, чем `MyMethod` тип параметра (`Base`), чтобы всегда быть уверенным `MyMethod`в передаче аргумента делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-620">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="8b9df-621">Тип возвращаемого значения `MyMethod` (`Derived`) является более строгой, чем тип параметра делегата (`Base`), чтобы всегда быть уверенным в том, чтобы привести возвращаемый тип метода к возвращаемому типу делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-621">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="8b9df-622">В примере кода выходные данные не создаются.</span><span class="sxs-lookup"><span data-stu-id="8b9df-622">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="8b9df-623">**Пример 3**</span><span class="sxs-lookup"><span data-stu-id="8b9df-623">**Example 3**</span></span>  
  
 <span data-ttu-id="8b9df-624">В следующем примере кода показаны все методы, которые может представлять один тип делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-624">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-625">Существует две перегрузки <xref:System.Delegate.CreateDelegate%2A> метода, которые задают `firstArgument` и <xref:System.Reflection.MethodInfo>; их функциональные возможности одинаковы, за исключением того, что позволяет указать, следует ли создавать привязку при ошибке, а вторая всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-625">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="8b9df-626">В этом примере кода используются обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="8b9df-626">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="8b9df-627">В примере кода определяются два класса `C` : `F`и, и тип `D` делегата с одним аргументом `C`типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-627">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="8b9df-628">Классы имеют совпадающие статические методы и `M1`метод `M3`экземпляра, `M4`, и, `C` а класс также имеет метод `M2` экземпляра, не имеющий аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-628">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="8b9df-629">Третий класс с именем `Example` содержит код, создающий делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-629">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-630">Делегаты создаются для метода `M1` экземпляра типа `C` и типа `F`, каждый из которых закрыт для экземпляра соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="8b9df-630">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="8b9df-631">Метод `M1` типа `C` отображает`ID` свойства привязанного экземпляра и аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-631">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="8b9df-632">Делегат создается для метода `M2` типа. `C`</span><span class="sxs-lookup"><span data-stu-id="8b9df-632">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="8b9df-633">Это делегат открытого экземпляра, в котором аргумент делегата представляет собой скрытый первый аргумент в методе экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-633">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="8b9df-634">Метод не имеет других аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-634">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="8b9df-635">Делегаты создаются для статического метода `M3` типа `C` и типа `F`. это открытые статические делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-635">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="8b9df-636">Наконец, делегаты создаются для статического метода `M4` типа `C` и типа `F`; каждый метод имеет объявляющий тип в качестве первого аргумента и предоставляется экземпляр типа, поэтому делегаты закрываются по первым аргументам. .</span><span class="sxs-lookup"><span data-stu-id="8b9df-636">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="8b9df-637">Метод `M4` типа `C` отображает`ID` свойства привязанного экземпляра и аргумента.</span><span class="sxs-lookup"><span data-stu-id="8b9df-637">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-638"><paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-638"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-639">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-639">-or-</span></span> 
 <span data-ttu-id="8b9df-640"><paramref name="method" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-640"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-641"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-641"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-642">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-642">-or-</span></span> 
 <span data-ttu-id="8b9df-643"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-643"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-644">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-644">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-645">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-645">-or-</span></span> 
 <span data-ttu-id="8b9df-646"><paramref name="method" /> невозможно привязать, и <paramref name="throwOnBindFailure" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-646"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="8b9df-647">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-647">-or-</span></span> 
 <span data-ttu-id="8b9df-648"><paramref name="method" /> не является объектом типа <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-648"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="8b9df-649">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-649">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-650">Метод <see langword="Invoke" /> типа <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-650">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-651">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-651">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-652">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-652">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-653">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-653">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-654">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-654">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="8b9df-655">Экземпляр класса, для которого вызывается метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-655">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-656">Имя метода экземпляра, который должен быть представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-656">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="8b9df-657">Логическое значение, указывающее, следует ли учитывать регистр при сравнении имени метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-657">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="8b9df-658">Создает делегат указанного типа, представляющий заданный метод экземпляра, который вызывается из заданного экземпляра класса с заданной установкой учета регистра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-658">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="8b9df-659">Создает делегат указанного типа, представляющий заданный метод экземпляра, который вызывается для заданного экземпляра класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-659">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-660">Этот метод создает делегаты только для методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-660">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="8b9df-661">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-661">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8b9df-662">Перегрузка этого метода эквивалентна вызову <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> перегрузки метода, задающей `true` для `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-662">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-663">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-663">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-664">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-664">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-665">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-665">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-666">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-666"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-667">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-667">-or-</span></span> 
 <span data-ttu-id="8b9df-668">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-668"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-669">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-669">-or-</span></span> 
 <span data-ttu-id="8b9df-670"><paramref name="method" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-670"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-671"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-671"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-672">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-672">-or-</span></span> 
 <span data-ttu-id="8b9df-673"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-673"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-674">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-674">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-675">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-675">-or-</span></span> 
 <span data-ttu-id="8b9df-676"><paramref name="method" /> не является методом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-676"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="8b9df-677">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-677">-or-</span></span> 
 <span data-ttu-id="8b9df-678">Параметр <paramref name="method" /> невозможно привязать, например, потому, что его не удалось найти.</span><span class="sxs-lookup"><span data-stu-id="8b9df-678"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-679">Метод <see langword="Invoke" /> для <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-679">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-680">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-680">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-681">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-681">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-682">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-682">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-683">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-683">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="8b9df-684">Тип <see cref="T:System.Type" />, представляющий класс, в котором реализован метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-684">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-685">Имя статического метода, который должен быть представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-685">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="8b9df-686">Логическое значение, указывающее, следует ли учитывать регистр при сравнении имени метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-686">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="8b9df-687">Создает делегат указанного типа, представляющий заданный статический метод заданного класса с заданной установкой учета регистра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-687">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="8b9df-688">Делегат указанного типа, представляющий заданный статический метод заданного класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-688">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-689">Этот метод создает делегаты только для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-689">This method creates delegates for static methods only.</span></span> <span data-ttu-id="8b9df-690">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-690">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8b9df-691">Перегрузка этого метода эквивалентна вызову <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> перегрузки метода, задающей `true` для `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="8b9df-691">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-692">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-692">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-693">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-693">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-694">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-694">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-695"><paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-695"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-696">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-696">-or-</span></span> 
 <span data-ttu-id="8b9df-697">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-697"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-698">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-698">-or-</span></span> 
 <span data-ttu-id="8b9df-699"><paramref name="method" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-699"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-700"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-700"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-701">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-701">-or-</span></span> 
 <span data-ttu-id="8b9df-702"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-702"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-703">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-703">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-704">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-704">-or-</span></span> 
 <span data-ttu-id="8b9df-705"><paramref name="target" /> не является объектом <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-705"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="8b9df-706">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-706">-or-</span></span> 
 <span data-ttu-id="8b9df-707">Параметр <paramref name="target" /> является открытым универсальным типом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-707"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="8b9df-708">То есть свойство <see cref="P:System.Type.ContainsGenericParameters" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-708">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="8b9df-709">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-709">-or-</span></span> 
 <span data-ttu-id="8b9df-710"><paramref name="method" /> не является методом <see langword="static" /> (метод <see langword="Shared" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8b9df-710"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="8b9df-711">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-711">-or-</span></span> 
 <span data-ttu-id="8b9df-712">Параметр <paramref name="method" /> невозможно привязать, например, потому, что его не удалось найти.</span><span class="sxs-lookup"><span data-stu-id="8b9df-712"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-713">Метод <see langword="Invoke" /> для <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-713">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-714">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-714">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-715">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-715">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-716">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-716">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-717">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-717">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="8b9df-718">Экземпляр класса, для которого вызывается метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-718">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-719">Имя метода экземпляра, который должен быть представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-719">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="8b9df-720">Логическое значение, указывающее, следует ли учитывать регистр при сравнении имени метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-720">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="8b9df-721">Значение <see langword="true" /> для создания исключения, если метод <paramref name="method" /> невозможно привязать; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-721"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8b9df-722">Создает делегат указанного типа, представляющий заданный статический метод, вызываемый для заданного экземпляра класса с заданной установкой учета регистра и заданным поведением на случай, если операция связывания завершится неудачей.</span><span class="sxs-lookup"><span data-stu-id="8b9df-722">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="8b9df-723">Создает делегат указанного типа, представляющий заданный метод экземпляра, который вызывается для заданного экземпляра класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-723">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-724">Этот метод создает делегаты только для методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-724">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="8b9df-725">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-725">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-726">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-726">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-727">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-727">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-728">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-728">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-729">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-729"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-730">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-730">-or-</span></span> 
 <span data-ttu-id="8b9df-731">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-731"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-732">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-732">-or-</span></span> 
 <span data-ttu-id="8b9df-733">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-733"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-734"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-734"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-735">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-735">-or-</span></span> 
 <span data-ttu-id="8b9df-736"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-736"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-737">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-737">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-738">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-738">-or-</span></span> 
 <span data-ttu-id="8b9df-739"><paramref name="method" /> не является методом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="8b9df-739"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="8b9df-740">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-740">-or-</span></span> 
 <span data-ttu-id="8b9df-741">Параметр <paramref name="method" /> невозможно привязать, например, потому, что его невозможно найти, а <paramref name="throwOnBindFailure" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-741"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-742">Метод <see langword="Invoke" /> для <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-742">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-743">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-743">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-744">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-744">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-745">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-745">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="8b9df-746">Тип <see cref="T:System.Type" /> создаваемого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-746">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="8b9df-747">Тип <see cref="T:System.Type" />, представляющий класс, в котором реализован метод <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-747">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="8b9df-748">Имя статического метода, который должен быть представлен делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-748">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="8b9df-749">Логическое значение, указывающее, следует ли учитывать регистр при сравнении имени метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-749">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="8b9df-750">Значение <see langword="true" /> для создания исключения, если метод <paramref name="method" /> невозможно привязать; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-750"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8b9df-751">Создает делегат заданного типа, представляющий заданный статический метод заданного класса с заданными установками учета регистра и поведением на случай, если операция связывания завершится неудачей.</span><span class="sxs-lookup"><span data-stu-id="8b9df-751">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="8b9df-752">Делегат указанного типа, представляющий заданный статический метод заданного класса.</span><span class="sxs-lookup"><span data-stu-id="8b9df-752">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-753">Этот метод создает делегаты только для статических методов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-753">This method creates delegates for static methods only.</span></span> <span data-ttu-id="8b9df-754">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-754">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8b9df-755">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым методам, если вызывающему объекту был предоставлен <xref:System.Security.Permissions.ReflectionPermission> <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг, и если набор разрешений неоткрытых методов ограничен набором предоставления вызывающего объекта или подмножеством сочетани.</span><span class="sxs-lookup"><span data-stu-id="8b9df-755">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="8b9df-756">(См. раздел [вопросы безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="8b9df-756">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="8b9df-757">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="8b9df-757">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b9df-758"><paramref name="type" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-758"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-759">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-759">-or-</span></span> 
 <span data-ttu-id="8b9df-760">Свойство <paramref name="target" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-760"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-761">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-761">-or-</span></span> 
 <span data-ttu-id="8b9df-762">Свойство <paramref name="method" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-762"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-763"><paramref name="type" /> не является производным от <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-763"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="8b9df-764">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-764">-or-</span></span> 
 <span data-ttu-id="8b9df-765"><paramref name="type" /> не является объектом типа <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-765"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="8b9df-766">См. статью [Типы среды выполнения в отражении](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="8b9df-766">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="8b9df-767">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-767">-or-</span></span> 
 <span data-ttu-id="8b9df-768"><paramref name="target" /> не является объектом <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-768"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="8b9df-769">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-769">-or-</span></span> 
 <span data-ttu-id="8b9df-770">Параметр <paramref name="target" /> является открытым универсальным типом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-770"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="8b9df-771">То есть свойство <see cref="P:System.Type.ContainsGenericParameters" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-771">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="8b9df-772">-или-</span><span class="sxs-lookup"><span data-stu-id="8b9df-772">-or-</span></span> 
 <span data-ttu-id="8b9df-773"><paramref name="method" /> не является методом <see langword="static" /> (метод <see langword="Shared" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8b9df-773"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="8b9df-774">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-774">-or-</span></span> 
 <span data-ttu-id="8b9df-775">Параметр <paramref name="method" /> невозможно привязать, например, потому, что его невозможно найти, а <paramref name="throwOnBindFailure" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-775"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="8b9df-776">Метод <see langword="Invoke" /> для <paramref name="type" /> не найден.</span><span class="sxs-lookup"><span data-stu-id="8b9df-776">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="8b9df-777">Вызывающий объект не имеет необходимых разрешений для доступа к <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-777">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-778">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-778">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-779">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-779">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="8b9df-780">Массив объектов, которые передаются в качестве аргументов методу, представленному текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-780">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="8b9df-781">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-781">-or-</span></span> 
 <span data-ttu-id="8b9df-782">Значение <see langword="null" />, если метод, представленный текущим делегатом, не требует аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-782"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="8b9df-783">Динамически (с поздней привязкой) вызывает метод, представленный текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-783">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-784">Объект, возвращаемый методом, представленным делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-784">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-785">Этот метод вызывает метод <xref:System.Delegate.DynamicInvokeImpl%2A>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-785">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-786">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-786">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="8b9df-787">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-787">-or-</span></span> 
<span data-ttu-id="8b9df-788">Количество, порядок или тип параметров в списке <paramref name="args" /> является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="8b9df-788">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-789">Представленный делегатом метод вызывается для объекта или класса, которые его не поддерживают.</span><span class="sxs-lookup"><span data-stu-id="8b9df-789">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="8b9df-790">Представленный делегатом метод является методом экземпляра, а целевой объект имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-790">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-791">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-791">-or-</span></span> 
<span data-ttu-id="8b9df-792">Один из инкапсулированных методов выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-792">One of the encapsulated methods throws an exception.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-793">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-793">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-794">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-794">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="8b9df-795">Массив объектов, которые передаются в качестве аргументов методу, представленному текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-795">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="8b9df-796">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-796">-or-</span></span> 
 <span data-ttu-id="8b9df-797">Значение <see langword="null" />, если метод, представленный текущим делегатом, не требует аргументов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-797"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="8b9df-798">Динамически (с поздней привязкой) вызывает метод, представленный текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-798">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-799">Объект, возвращаемый методом, представленным делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-799">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-800">Этот метод реализует метод <xref:System.Delegate.DynamicInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="8b9df-800">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-801">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-801">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="8b9df-802">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-802">-or-</span></span> 
<span data-ttu-id="8b9df-803">Количество, порядок или тип параметров в списке <paramref name="args" /> является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="8b9df-803">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-804">Представленный делегатом метод вызывается для объекта или класса, которые его не поддерживают.</span><span class="sxs-lookup"><span data-stu-id="8b9df-804">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="8b9df-805">Представленный делегатом метод является методом экземпляра, а целевой объект имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-805">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8b9df-806">- или -</span><span class="sxs-lookup"><span data-stu-id="8b9df-806">-or-</span></span> 
<span data-ttu-id="8b9df-807">Один из инкапсулированных методов выбрасывает исключение.</span><span class="sxs-lookup"><span data-stu-id="8b9df-807">One of the encapsulated methods throws an exception.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-808">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-808">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-809">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-809">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="8b9df-810">Объект, который требуется сравнить с текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-810">The object to compare with the current delegate.</span></span></param>
        <summary><span data-ttu-id="8b9df-811">Определяет, принадлежат ли заданный объект и текущий делегат к одному типу, и одинаковы ли их целевые объекты, методы и списки вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-811">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span></span></summary>
        <returns><span data-ttu-id="8b9df-812">Значение <see langword="true" />, если <paramref name="obj" /> и текущий делегат имеют одинаковые целевые объекты, методы и списки вызовов. В противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-812"><see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-813">Если два делегата имеют разные типы, они не считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-813">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b9df-814">В .NET Framework версии 1,0 и 1,1 два делегата считаются равными, если их цели, методы и список вызовов равны, даже если делегаты имеют разные типы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-814">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="8b9df-815">Методы и целевые объекты сравниваются на равенство следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8b9df-815">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="8b9df-816">Если два сравниваемых метода являются статическими и одинаковы для одного и того же класса, то методы считаются равными, а целевые объекты также считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-816">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8b9df-817">Если два сравниваемых метода являются методами экземпляра и одинаковы для одного и того же объекта, то методы считаются равными, а целевые объекты также считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-817">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8b9df-818">В противном случае методы не считаются равными, а целевые объекты также не считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-818">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="8b9df-819">Два списка вызовов считаются идентичными только в том случае, если они имеют одинаковый порядок, а соответствующие элементы из двух списков представляют один и тот же метод и целевой объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-819">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-820">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-820">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-821">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-821">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-822">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-822">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b9df-823">Возвращает хэш-код делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-823">Returns a hash code for the delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-824">Хэш-код делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-824">A hash code for the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-825">Возвращаемое значение этого метода не должно сохраняться по двум причинам.</span><span class="sxs-lookup"><span data-stu-id="8b9df-825">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="8b9df-826">Во-первых, функция хэширования класса может быть изменена для более эффективного распределения, что позволяет выдавать любые значения из старой хэш-функции.</span><span class="sxs-lookup"><span data-stu-id="8b9df-826">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="8b9df-827">Во-вторых, реализация по умолчанию этого класса не гарантирует, что одно и то же значение будет возвращаться разными экземплярами.</span><span class="sxs-lookup"><span data-stu-id="8b9df-827">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-828">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-828">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-829">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-829">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b9df-830">Возвращает список вызовов делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-830">Returns the invocation list of the delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-831">Массив делегатов, представляющих список вызовов текущего делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-831">An array of delegates representing the invocation list of the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-832">Каждый делегат в массиве представляет ровно один метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-832">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="8b9df-833">Порядок делегатов в массиве совпадает с порядком, в котором текущий делегат вызывает методы, которые представляют эти делегаты.</span><span class="sxs-lookup"><span data-stu-id="8b9df-833">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8b9df-834">В следующем примере для делегата назначается три метода.</span><span class="sxs-lookup"><span data-stu-id="8b9df-834">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="8b9df-835">Затем он вызывает <xref:System.Delegate.GetInvocationList%2A> метод для получения общего числа методов, назначенных делегату, для выполнения делегатов в обратном порядке и для выполнения методов, имя которых не включает в себя подстроку "File".</span><span class="sxs-lookup"><span data-stu-id="8b9df-835">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-836">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-836">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-837">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-837">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b9df-838">Возвращает статический метод, представленный текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-838">Gets the static method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-839"><see cref="T:System.Reflection.MethodInfo" />, описывающий статический метод, представленный текущим делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-839">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-840">Этот метод применяется только в том случае, если текущий делегат представляет статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-840">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-841">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-842">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-842">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-843">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-843">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="8b9df-844">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8b9df-844">Not supported.</span></span></param>
        <param name="context"><span data-ttu-id="8b9df-845">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8b9df-845">Not supported.</span></span></param>
        <summary><span data-ttu-id="8b9df-846">Не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8b9df-846">Not supported.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8b9df-847">Этот метод не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="8b9df-847">This method is not supported.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="8b9df-848">Требуется полное доверие для немедленного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="8b9df-848">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="8b9df-849">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-849">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b9df-850">Возвращает метод, представленный делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-850">Gets the method represented by the delegate.</span></span></summary>
        <value><span data-ttu-id="8b9df-851">Объект <see cref="T:System.Reflection.MethodInfo" />, описывающий метод, представленный делегатом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-851">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-852">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-852">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-853">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-853">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-854">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-854">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="8b9df-855">Первый делегат для операции сравнения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-855">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="8b9df-856">Второй делегат для операции сравнения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-856">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="8b9df-857">Определяет, равны ли два заданных делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-857">Determines whether the specified delegates are equal.</span></span></summary>
        <returns><span data-ttu-id="8b9df-858"><see langword="true" />, если значения параметров <paramref name="d1" /> и <paramref name="d2" /> равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-858"><see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-859">Два делегата одного типа с одинаковыми целевыми объектами, методами и списками вызовов считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-859">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="8b9df-860">Если два делегата имеют разные типы, они не считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-860">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b9df-861">В .NET Framework версии 1,0 и 1,1 два делегата считаются равными, если их цели, методы и список вызовов равны, даже если делегаты имеют разные типы.</span><span class="sxs-lookup"><span data-stu-id="8b9df-861">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="8b9df-862">Методы и целевые объекты сравниваются на равенство следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8b9df-862">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="8b9df-863">Если два сравниваемых метода являются статическими и одинаковы для одного и того же класса, то методы считаются равными, а целевые объекты также считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-863">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8b9df-864">Если два сравниваемых метода являются методами экземпляра и одинаковы для одного и того же объекта, то методы считаются равными, а целевые объекты также считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-864">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8b9df-865">В противном случае методы не считаются равными, а целевые объекты также не считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-865">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="8b9df-866">Два списка вызовов считаются идентичными, если они имеют одинаковый порядок, а соответствующие элементы из двух списков представляют один и тот же метод и целевой объект.</span><span class="sxs-lookup"><span data-stu-id="8b9df-866">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="8b9df-867">Эквивалентным методом для этого оператора является<xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8b9df-867">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-868">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-868">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-869">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-869">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="8b9df-870">Первый делегат для операции сравнения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-870">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="8b9df-871">Второй делегат для операции сравнения.</span><span class="sxs-lookup"><span data-stu-id="8b9df-871">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="8b9df-872">Определяет, являются ли заданные делегаты неравными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-872">Determines whether the specified delegates are not equal.</span></span></summary>
        <returns><span data-ttu-id="8b9df-873"><see langword="true" />, если значения <paramref name="d1" /> и <paramref name="d2" /> не равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-873"><see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-874">Два делегата считаются неравными, если они относятся к разным типам или имеют разные методы, разные целевые объекты или разные списки вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-874">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="8b9df-875">Если два делегата имеют разные типы, они не считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-875">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8b9df-876">В .NET Framework версии 1,0 и 1,1 два делегата считаются равными, если их цели, методы и список вызовов равны, даже если делегаты относятся к разным типам.</span><span class="sxs-lookup"><span data-stu-id="8b9df-876">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="8b9df-877">Методы и целевые объекты сравниваются на равенство следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8b9df-877">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="8b9df-878">Если два сравниваемых метода являются статическими и одинаковы для одного и того же класса, то методы считаются равными, а целевые объекты также считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-878">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8b9df-879">Если два сравниваемых метода являются методами экземпляра и одинаковы для одного и того же объекта, то методы считаются равными, а целевые объекты также считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-879">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="8b9df-880">В противном случае методы не считаются равными, а целевые объекты также не считаются равными.</span><span class="sxs-lookup"><span data-stu-id="8b9df-880">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="8b9df-881">Два списка вызовов не равны, если они имеют разные размеры, если они упорядочены по-разному, или если хотя бы один элемент из одного списка представляет метод или целевой объект, отличный от того, который представлен соответствующим элементом в другом списке.</span><span class="sxs-lookup"><span data-stu-id="8b9df-881">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="8b9df-882">Эквивалентным методом для этого оператора является<xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8b9df-882">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-883">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-883">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-884">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-884">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="8b9df-885">Делегат, из списка вызовов которого необходимо удалить список вызовов <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-885">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="8b9df-886">Делегат, представляющий список вызовов, который необходимо удалить из списка вызовов <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-886">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="8b9df-887">Удаляет последнее вхождение списка вызовов делегата из списка вызовов другого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-887">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-888">Новый делегат со списком вызовов, сформированным путем удаления из <paramref name="source" /> последнего вхождения списка вызовов <paramref name="value" />, если список вызовов <paramref name="value" /> найден в списке вызовов <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-888">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="8b9df-889">Возвращает <paramref name="source" />, если <paramref name="value" /> имеет значение <see langword="null" /> либо список вызовов <paramref name="value" /> не найден в списке вызовов <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-889">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="8b9df-890">Возвращает пустую ссылку, если список вызовов <paramref name="value" /> равен списку вызовов <paramref name="source" /> либо <paramref name="source" /> является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-890">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-891">Если список `value` вызовов соответствует непрерывному набору элементов в `source`списке вызовов, то `value` в списке вызовов, о котором говорится, возникает `source`список вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-891">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="8b9df-892">Если список `value` вызовов встречается более одного раза в `source`списке вызовов, Последнее вхождение удаляется.</span><span class="sxs-lookup"><span data-stu-id="8b9df-892">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-893">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-893">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-894">Типы делегатов не совпадают.</span><span class="sxs-lookup"><span data-stu-id="8b9df-894">The delegate types do not match.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-895">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-895">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-896">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-896">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="8b9df-897">Делегат, из списка вызовов которого необходимо удалить список вызовов <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-897">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="8b9df-898">Делегат, представляющий список вызовов, который необходимо удалить из списка вызовов <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-898">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="8b9df-899">Удаляет все вхождения списка вызовов одного делегата из списка вызовов другого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-899">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-900">Новый делегат со списком вызовов, сформированным путем удаления из списка вызовов <paramref name="source" /> всех вхождений списка вызовов <paramref name="value" />, если список вызовов <paramref name="value" /> найден в списке вызовов <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-900">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="8b9df-901">Возвращает <paramref name="source" />, если <paramref name="value" /> имеет значение <see langword="null" /> либо список вызовов <paramref name="value" /> не найден в списке вызовов <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="8b9df-901">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="8b9df-902">Возвращает пустую ссылку, если список вызовов <paramref name="value" /> равен списку вызовов <paramref name="source" />, либо список вызовов <paramref name="source" /> содержит только списки вызовов <paramref name="value" />, либо <paramref name="source" /> является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="8b9df-902">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-903">Если список `value` вызовов соответствует непрерывному набору элементов в `source`списке вызовов, то `value` в списке вызовов, о котором говорится, возникает `source`список вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-903">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="8b9df-904">Если список `value` вызовов встречается несколько раз в `source`списке вызовов, все вхождения удаляются.</span><span class="sxs-lookup"><span data-stu-id="8b9df-904">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-905">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-905">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b9df-906">Типы делегатов не совпадают.</span><span class="sxs-lookup"><span data-stu-id="8b9df-906">The delegate types do not match.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-907">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-907">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-908">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-908">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="8b9df-909">Делегат, представляющий список вызовов, который необходимо удалить из списка вызовов текущего делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-909">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span></span></param>
        <summary><span data-ttu-id="8b9df-910">Удаляет список вызовов одного делегата из списка вызовов другого делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-910">Removes the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="8b9df-911">Новый делегат со списком вызовов, сформированным удаления списка вызовов <paramref name="value" /> из списка вызовов текущего делегата, если список вызовов <paramref name="value" /> найден в списке вызовов текущего делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-911">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span></span> <span data-ttu-id="8b9df-912">Возвращает текущий делегат, если <paramref name="value" /> имеет значение <see langword="null" /> или список вызовов <paramref name="value" /> не найден в списке вызовов текущего делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-912">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span></span> <span data-ttu-id="8b9df-913">Возвращает <see langword="null" />, если список вызовов <paramref name="value" /> равен списку вызовов текущего делегата.</span><span class="sxs-lookup"><span data-stu-id="8b9df-913">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-914">Если список `value` вызовов соответствует непрерывному набору элементов в списке вызовов текущего делегата, то в списке вызовов текущего делегата `value` будет стоять список вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-914">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="8b9df-915">Если список `value` вызовов встречается более одного раза в списке вызовов текущего делегата, Последнее вхождение удаляется.</span><span class="sxs-lookup"><span data-stu-id="8b9df-915">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8b9df-916">Вызывающий объект не имеет доступа к методу, представленному делегатом (например, если метод является закрытым).</span><span class="sxs-lookup"><span data-stu-id="8b9df-916">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-917">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-917">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-918">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-918">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b9df-919">Возвращает экземпляр класса, метод которого вызывает текущий делегат.</span><span class="sxs-lookup"><span data-stu-id="8b9df-919">Gets the class instance on which the current delegate invokes the instance method.</span></span></summary>
        <value><span data-ttu-id="8b9df-920">Объект, для которого текущий делегат вызывает метод экземпляра, если делегат представляет метод экземпляра, либо <see langword="null" /> если делегат представляет статический метод.</span><span class="sxs-lookup"><span data-stu-id="8b9df-920">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b9df-921">Метод экземпляра — это метод, связанный с экземпляром класса; статический метод — это метод, который связан с самим классом.</span><span class="sxs-lookup"><span data-stu-id="8b9df-921">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="8b9df-922">Если делегат вызывает один или несколько методов экземпляра, это свойство возвращает целевой объект последнего метода экземпляра в списке вызовов.</span><span class="sxs-lookup"><span data-stu-id="8b9df-922">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="8b9df-923">При вызове поздней привязки с помощью таких механизмов <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />, как.</span><span class="sxs-lookup"><span data-stu-id="8b9df-923">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="8b9df-924">Связанное перечисление:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="8b9df-924">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>
